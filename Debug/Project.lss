
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004c98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00004c98  00004d2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800068  00800068  00004d34  2**0
                  ALLOC
  3 .stab         00004e18  00000000  00000000  00004d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002381  00000000  00000000  00009b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000becd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000c00d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c17d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ddc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ecb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000fa60  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000fbc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000fe4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001061b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 e9 0d 	jmp	0x1bd2	; 0x1bd2 <__vector_4>
      14:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__vector_7>
      20:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__vector_8>
      24:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__vector_9>
      28:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__vector_10>
      2c:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 37       	cpi	r26, 0x7E	; 126
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 e9       	ldi	r30, 0x98	; 152
      78:	fc e4       	ldi	r31, 0x4C	; 76
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <main>
      8a:	0c 94 4a 26 	jmp	0x4c94	; 0x4c94 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2f 26 	jmp	0x4c5e	; 0x4c5e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1f 26 	jmp	0x4c3e	; 0x4c3e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3b 26 	jmp	0x4c76	; 0x4c76 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1f 26 	jmp	0x4c3e	; 0x4c3e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3b 26 	jmp	0x4c76	; 0x4c76 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2f 26 	jmp	0x4c5e	; 0x4c5e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1f 26 	jmp	0x4c3e	; 0x4c3e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3b 26 	jmp	0x4c76	; 0x4c76 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1f 26 	jmp	0x4c3e	; 0x4c3e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3b 26 	jmp	0x4c76	; 0x4c76 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1f 26 	jmp	0x4c3e	; 0x4c3e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3b 26 	jmp	0x4c76	; 0x4c76 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 23 26 	jmp	0x4c46	; 0x4c46 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3f 26 	jmp	0x4c7e	; 0x4c7e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_16>:
#include "Adc_cfg.h"
#include "GlobalInterrupt.h"

void (*Adc_Callback) (u16 res);

ISR(VECTOR_ADC) {
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
    Adc_Callback((ADC_DATA_REGISTER & 0b0000001111111111));
     b70:	20 91 68 00 	lds	r18, 0x0068
     b74:	30 91 69 00 	lds	r19, 0x0069
     b78:	e4 e2       	ldi	r30, 0x24	; 36
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	91 81       	ldd	r25, Z+1	; 0x01
     b80:	93 70       	andi	r25, 0x03	; 3
     b82:	f9 01       	movw	r30, r18
     b84:	09 95       	icall
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <Adc_Init>:

void Adc_Init(void) {
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
    /*Reference Selection Bits*/
#if (ADC_REF_SELECTION == ADC_REF_AREF)
    CLR_BIT(ADMUX, ADMUX_REFS1);
     bb4:	a7 e2       	ldi	r26, 0x27	; 39
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e7 e2       	ldi	r30, 0x27	; 39
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	8f 77       	andi	r24, 0x7F	; 127
     bc0:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, ADMUX_REFS0);
     bc2:	a7 e2       	ldi	r26, 0x27	; 39
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e7 e2       	ldi	r30, 0x27	; 39
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	8f 7b       	andi	r24, 0xBF	; 191
     bce:	8c 93       	st	X, r24
#else
    #error "Error Ref Selection Choise"
#endif

    /* No Left Adjust */
    CLR_BIT(ADMUX, ADMUX_ADLAR);
     bd0:	a7 e2       	ldi	r26, 0x27	; 39
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e7 e2       	ldi	r30, 0x27	; 39
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	8f 7d       	andi	r24, 0xDF	; 223
     bdc:	8c 93       	st	X, r24

    /* ADC Enable */
    SET_BIT(ADCSRA, ADCSRA_ADEN);
     bde:	a6 e2       	ldi	r26, 0x26	; 38
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e6 e2       	ldi	r30, 0x26	; 38
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	80 68       	ori	r24, 0x80	; 128
     bea:	8c 93       	st	X, r24

    /* ADC Interrupt Enable */
#if (ADC_INT_STATE == ADC_INT_DISABLE)
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
#elif (ADC_INT_STATE == ADC_INT_ENABLE)
    SET_BIT(ADCSRA, ADCSRA_ADIE);
     bec:	a6 e2       	ldi	r26, 0x26	; 38
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e6 e2       	ldi	r30, 0x26	; 38
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	88 60       	ori	r24, 0x08	; 8
     bf8:	8c 93       	st	X, r24
    GlobalInterrupt_Enable();
     bfa:	0e 94 bf 0c 	call	0x197e	; 0x197e <GlobalInterrupt_Enable>
#endif

    /* ADC Prescaler Select */

#if (ADC_PRESCALER == 128)
    SET_BIT(ADCSRA, ADCSRA_ADPS0);
     bfe:	a6 e2       	ldi	r26, 0x26	; 38
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e6 e2       	ldi	r30, 0x26	; 38
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	81 60       	ori	r24, 0x01	; 1
     c0a:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS1);
     c0c:	a6 e2       	ldi	r26, 0x26	; 38
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e6 e2       	ldi	r30, 0x26	; 38
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	82 60       	ori	r24, 0x02	; 2
     c18:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS2);
     c1a:	a6 e2       	ldi	r26, 0x26	; 38
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e6 e2       	ldi	r30, 0x26	; 38
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	84 60       	ori	r24, 0x04	; 4
     c26:	8c 93       	st	X, r24
    CLR_BIT(ADCSRA, ADCSRA_ADPS2);
    // TODO
#else
    #error "Error Prescaler Choise"
#endif
}
     c28:	cf 91       	pop	r28
     c2a:	df 91       	pop	r29
     c2c:	08 95       	ret

00000c2e <Adc_StartConversion>:

void Adc_StartConversion(Adc_ChannelType channel) {
     c2e:	df 93       	push	r29
     c30:	cf 93       	push	r28
     c32:	0f 92       	push	r0
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	89 83       	std	Y+1, r24	; 0x01
    ADMUX &= 0b11100000;
     c3a:	a7 e2       	ldi	r26, 0x27	; 39
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e7 e2       	ldi	r30, 0x27	; 39
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	80 7e       	andi	r24, 0xE0	; 224
     c46:	8c 93       	st	X, r24
    ADMUX |= channel;
     c48:	a7 e2       	ldi	r26, 0x27	; 39
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e7 e2       	ldi	r30, 0x27	; 39
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	90 81       	ld	r25, Z
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	89 2b       	or	r24, r25
     c56:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADSC);
     c58:	a6 e2       	ldi	r26, 0x26	; 38
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e6 e2       	ldi	r30, 0x26	; 38
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	80 64       	ori	r24, 0x40	; 64
     c64:	8c 93       	st	X, r24
}
     c66:	0f 90       	pop	r0
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	08 95       	ret

00000c6e <Adc_Enable>:

void Adc_Enable(void) {
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADCSRA, ADCSRA_ADEN);
     c76:	a6 e2       	ldi	r26, 0x26	; 38
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e6 e2       	ldi	r30, 0x26	; 38
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	80 68       	ori	r24, 0x80	; 128
     c82:	8c 93       	st	X, r24
    // TODO
}
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <Adc_Disable>:

void Adc_Disable(void) {
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADCSRA, ADCSRA_ADEN);
     c92:	a6 e2       	ldi	r26, 0x26	; 38
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e6 e2       	ldi	r30, 0x26	; 38
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	8f 77       	andi	r24, 0x7F	; 127
     c9e:	8c 93       	st	X, r24
    // TODO
}
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	08 95       	ret

00000ca6 <Adc_GetResult>:


Adc_ConversionStateType Adc_GetResult(u16* result) {
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	00 d0       	rcall	.+0      	; 0xcac <Adc_GetResult+0x6>
     cac:	0f 92       	push	r0
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	9b 83       	std	Y+3, r25	; 0x03
     cb4:	8a 83       	std	Y+2, r24	; 0x02
    Adc_ConversionStateType flag = ADC_CONVERSION_NOT_COMPLETE;
     cb6:	19 82       	std	Y+1, r1	; 0x01
    if (GET_BIT(ADCSRA, ADCSRA_ADIF) == 1) {
     cb8:	e6 e2       	ldi	r30, 0x26	; 38
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	82 95       	swap	r24
     cc0:	8f 70       	andi	r24, 0x0F	; 15
     cc2:	88 2f       	mov	r24, r24
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	81 70       	andi	r24, 0x01	; 1
     cc8:	90 70       	andi	r25, 0x00	; 0
     cca:	88 23       	and	r24, r24
     ccc:	91 f0       	breq	.+36     	; 0xcf2 <Adc_GetResult+0x4c>
        SET_BIT(ADCSRA, ADCSRA_ADIF);
     cce:	a6 e2       	ldi	r26, 0x26	; 38
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e6 e2       	ldi	r30, 0x26	; 38
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	80 61       	ori	r24, 0x10	; 16
     cda:	8c 93       	st	X, r24
        *result = ADC_DATA_REGISTER & 0b0000001111111111;
     cdc:	e4 e2       	ldi	r30, 0x24	; 36
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	91 81       	ldd	r25, Z+1	; 0x01
     ce4:	93 70       	andi	r25, 0x03	; 3
     ce6:	ea 81       	ldd	r30, Y+2	; 0x02
     ce8:	fb 81       	ldd	r31, Y+3	; 0x03
     cea:	91 83       	std	Z+1, r25	; 0x01
     cec:	80 83       	st	Z, r24
        flag = ADC_CONVERSION_COMPLETE;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	89 83       	std	Y+1, r24	; 0x01
    }
    return flag;
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
}
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <Adc_GetResultPolling>:

u16 Adc_GetResultPolling(void) {
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(ADCSRA, ADCSRA_ADIF) == 0);
     d08:	e6 e2       	ldi	r30, 0x26	; 38
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	82 95       	swap	r24
     d10:	8f 70       	andi	r24, 0x0F	; 15
     d12:	88 2f       	mov	r24, r24
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	81 70       	andi	r24, 0x01	; 1
     d18:	90 70       	andi	r25, 0x00	; 0
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	a9 f3       	breq	.-22     	; 0xd08 <Adc_GetResultPolling+0x8>
    return (ADC_DATA_REGISTER & 0b0000001111111111);
     d1e:	e4 e2       	ldi	r30, 0x24	; 36
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	91 81       	ldd	r25, Z+1	; 0x01
     d26:	93 70       	andi	r25, 0x03	; 3
}
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <Adc_SetCallback>:


void Adc_SetCallback (void (*callback) (u16 res)) {
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	00 d0       	rcall	.+0      	; 0xd34 <Adc_SetCallback+0x6>
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	9a 83       	std	Y+2, r25	; 0x02
     d3a:	89 83       	std	Y+1, r24	; 0x01
    Adc_Callback = callback;
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	9a 81       	ldd	r25, Y+2	; 0x02
     d40:	90 93 69 00 	sts	0x0069, r25
     d44:	80 93 68 00 	sts	0x0068, r24
	}
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <DIO_SetPinMode>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"

void DIO_SetPinMode(DIO_PortType port, DIO_PinType pin, DIO_ModeType mode) {
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	29 97       	sbiw	r28, 0x09	; 9
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	de bf       	out	0x3e, r29	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	cd bf       	out	0x3d, r28	; 61
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	6a 83       	std	Y+2, r22	; 0x02
     d6a:	4b 83       	std	Y+3, r20	; 0x03
    if (mode == DIO_INPUT_FLOATING) 
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	88 23       	and	r24, r24
     d70:	09 f0       	breq	.+2      	; 0xd74 <DIO_SetPinMode+0x22>
     d72:	c2 c0       	rjmp	.+388    	; 0xef8 <DIO_SetPinMode+0x1a6>
    {
        switch (port)
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	39 87       	std	Y+9, r19	; 0x09
     d7c:	28 87       	std	Y+8, r18	; 0x08
     d7e:	88 85       	ldd	r24, Y+8	; 0x08
     d80:	99 85       	ldd	r25, Y+9	; 0x09
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	91 05       	cpc	r25, r1
     d86:	09 f4       	brne	.+2      	; 0xd8a <DIO_SetPinMode+0x38>
     d88:	3f c0       	rjmp	.+126    	; 0xe08 <DIO_SetPinMode+0xb6>
     d8a:	28 85       	ldd	r18, Y+8	; 0x08
     d8c:	39 85       	ldd	r19, Y+9	; 0x09
     d8e:	22 30       	cpi	r18, 0x02	; 2
     d90:	31 05       	cpc	r19, r1
     d92:	2c f4       	brge	.+10     	; 0xd9e <DIO_SetPinMode+0x4c>
     d94:	88 85       	ldd	r24, Y+8	; 0x08
     d96:	99 85       	ldd	r25, Y+9	; 0x09
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	71 f0       	breq	.+28     	; 0xdb8 <DIO_SetPinMode+0x66>
     d9c:	e1 c1       	rjmp	.+962    	; 0x1160 <DIO_SetPinMode+0x40e>
     d9e:	28 85       	ldd	r18, Y+8	; 0x08
     da0:	39 85       	ldd	r19, Y+9	; 0x09
     da2:	22 30       	cpi	r18, 0x02	; 2
     da4:	31 05       	cpc	r19, r1
     da6:	09 f4       	brne	.+2      	; 0xdaa <DIO_SetPinMode+0x58>
     da8:	57 c0       	rjmp	.+174    	; 0xe58 <DIO_SetPinMode+0x106>
     daa:	88 85       	ldd	r24, Y+8	; 0x08
     dac:	99 85       	ldd	r25, Y+9	; 0x09
     dae:	83 30       	cpi	r24, 0x03	; 3
     db0:	91 05       	cpc	r25, r1
     db2:	09 f4       	brne	.+2      	; 0xdb6 <DIO_SetPinMode+0x64>
     db4:	79 c0       	rjmp	.+242    	; 0xea8 <DIO_SetPinMode+0x156>
     db6:	d4 c1       	rjmp	.+936    	; 0x1160 <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
     db8:	aa e3       	ldi	r26, 0x3A	; 58
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	ea e3       	ldi	r30, 0x3A	; 58
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	48 2f       	mov	r20, r24
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <DIO_SetPinMode+0x82>
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	2a 95       	dec	r18
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <DIO_SetPinMode+0x7e>
     dd8:	80 95       	com	r24
     dda:	84 23       	and	r24, r20
     ddc:	8c 93       	st	X, r24
            CLR_BIT(PORTA, pin);
     dde:	ab e3       	ldi	r26, 0x3B	; 59
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	eb e3       	ldi	r30, 0x3B	; 59
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DIO_SetPinMode+0xaa>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <DIO_SetPinMode+0xa6>
     e00:	80 95       	com	r24
     e02:	84 23       	and	r24, r20
     e04:	8c 93       	st	X, r24
     e06:	ac c1       	rjmp	.+856    	; 0x1160 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
     e08:	a7 e3       	ldi	r26, 0x37	; 55
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e7 e3       	ldi	r30, 0x37	; 55
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_SetPinMode+0xd2>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	2a 95       	dec	r18
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_SetPinMode+0xce>
     e28:	80 95       	com	r24
     e2a:	84 23       	and	r24, r20
     e2c:	8c 93       	st	X, r24
            CLR_BIT(PORTB, pin);
     e2e:	a8 e3       	ldi	r26, 0x38	; 56
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e8 e3       	ldi	r30, 0x38	; 56
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_SetPinMode+0xfa>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_SetPinMode+0xf6>
     e50:	80 95       	com	r24
     e52:	84 23       	and	r24, r20
     e54:	8c 93       	st	X, r24
     e56:	84 c1       	rjmp	.+776    	; 0x1160 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
     e58:	a4 e3       	ldi	r26, 0x34	; 52
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e4 e3       	ldi	r30, 0x34	; 52
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	48 2f       	mov	r20, r24
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <DIO_SetPinMode+0x122>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	2a 95       	dec	r18
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <DIO_SetPinMode+0x11e>
     e78:	80 95       	com	r24
     e7a:	84 23       	and	r24, r20
     e7c:	8c 93       	st	X, r24
            CLR_BIT(PORTC, pin);
     e7e:	a5 e3       	ldi	r26, 0x35	; 53
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e5 e3       	ldi	r30, 0x35	; 53
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_SetPinMode+0x14a>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_SetPinMode+0x146>
     ea0:	80 95       	com	r24
     ea2:	84 23       	and	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	5c c1       	rjmp	.+696    	; 0x1160 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
     ea8:	a1 e3       	ldi	r26, 0x31	; 49
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e1 e3       	ldi	r30, 0x31	; 49
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <DIO_SetPinMode+0x172>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	2a 95       	dec	r18
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <DIO_SetPinMode+0x16e>
     ec8:	80 95       	com	r24
     eca:	84 23       	and	r24, r20
     ecc:	8c 93       	st	X, r24
            CLR_BIT(PORTD, pin);
     ece:	a2 e3       	ldi	r26, 0x32	; 50
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e2 e3       	ldi	r30, 0x32	; 50
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	48 2f       	mov	r20, r24
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	02 2e       	mov	r0, r18
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <DIO_SetPinMode+0x19a>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	0a 94       	dec	r0
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <DIO_SetPinMode+0x196>
     ef0:	80 95       	com	r24
     ef2:	84 23       	and	r24, r20
     ef4:	8c 93       	st	X, r24
     ef6:	34 c1       	rjmp	.+616    	; 0x1160 <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP) 
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	09 f0       	breq	.+2      	; 0xf00 <DIO_SetPinMode+0x1ae>
     efe:	be c0       	rjmp	.+380    	; 0x107c <DIO_SetPinMode+0x32a>
    {
        switch (port)
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	3f 83       	std	Y+7, r19	; 0x07
     f08:	2e 83       	std	Y+6, r18	; 0x06
     f0a:	8e 81       	ldd	r24, Y+6	; 0x06
     f0c:	9f 81       	ldd	r25, Y+7	; 0x07
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	91 05       	cpc	r25, r1
     f12:	09 f4       	brne	.+2      	; 0xf16 <DIO_SetPinMode+0x1c4>
     f14:	3e c0       	rjmp	.+124    	; 0xf92 <DIO_SetPinMode+0x240>
     f16:	2e 81       	ldd	r18, Y+6	; 0x06
     f18:	3f 81       	ldd	r19, Y+7	; 0x07
     f1a:	22 30       	cpi	r18, 0x02	; 2
     f1c:	31 05       	cpc	r19, r1
     f1e:	2c f4       	brge	.+10     	; 0xf2a <DIO_SetPinMode+0x1d8>
     f20:	8e 81       	ldd	r24, Y+6	; 0x06
     f22:	9f 81       	ldd	r25, Y+7	; 0x07
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	71 f0       	breq	.+28     	; 0xf44 <DIO_SetPinMode+0x1f2>
     f28:	1b c1       	rjmp	.+566    	; 0x1160 <DIO_SetPinMode+0x40e>
     f2a:	2e 81       	ldd	r18, Y+6	; 0x06
     f2c:	3f 81       	ldd	r19, Y+7	; 0x07
     f2e:	22 30       	cpi	r18, 0x02	; 2
     f30:	31 05       	cpc	r19, r1
     f32:	09 f4       	brne	.+2      	; 0xf36 <DIO_SetPinMode+0x1e4>
     f34:	55 c0       	rjmp	.+170    	; 0xfe0 <DIO_SetPinMode+0x28e>
     f36:	8e 81       	ldd	r24, Y+6	; 0x06
     f38:	9f 81       	ldd	r25, Y+7	; 0x07
     f3a:	83 30       	cpi	r24, 0x03	; 3
     f3c:	91 05       	cpc	r25, r1
     f3e:	09 f4       	brne	.+2      	; 0xf42 <DIO_SetPinMode+0x1f0>
     f40:	76 c0       	rjmp	.+236    	; 0x102e <DIO_SetPinMode+0x2dc>
     f42:	0e c1       	rjmp	.+540    	; 0x1160 <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
     f44:	aa e3       	ldi	r26, 0x3A	; 58
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	ea e3       	ldi	r30, 0x3A	; 58
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_SetPinMode+0x20e>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	2a 95       	dec	r18
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_SetPinMode+0x20a>
     f64:	80 95       	com	r24
     f66:	84 23       	and	r24, r20
     f68:	8c 93       	st	X, r24
            SET_BIT(PORTA, pin);
     f6a:	ab e3       	ldi	r26, 0x3B	; 59
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	eb e3       	ldi	r30, 0x3B	; 59
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_SetPinMode+0x236>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_SetPinMode+0x232>
     f8c:	84 2b       	or	r24, r20
     f8e:	8c 93       	st	X, r24
     f90:	e7 c0       	rjmp	.+462    	; 0x1160 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
     f92:	a7 e3       	ldi	r26, 0x37	; 55
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e7 e3       	ldi	r30, 0x37	; 55
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_SetPinMode+0x25c>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	2a 95       	dec	r18
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_SetPinMode+0x258>
     fb2:	80 95       	com	r24
     fb4:	84 23       	and	r24, r20
     fb6:	8c 93       	st	X, r24
            SET_BIT(PORTB, pin);
     fb8:	a8 e3       	ldi	r26, 0x38	; 56
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e8 e3       	ldi	r30, 0x38	; 56
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_SetPinMode+0x284>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_SetPinMode+0x280>
     fda:	84 2b       	or	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	c0 c0       	rjmp	.+384    	; 0x1160 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
     fe0:	a4 e3       	ldi	r26, 0x34	; 52
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e4 e3       	ldi	r30, 0x34	; 52
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_SetPinMode+0x2aa>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	2a 95       	dec	r18
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_SetPinMode+0x2a6>
    1000:	80 95       	com	r24
    1002:	84 23       	and	r24, r20
    1004:	8c 93       	st	X, r24
            SET_BIT(PORTC, pin);
    1006:	a5 e3       	ldi	r26, 0x35	; 53
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e5 e3       	ldi	r30, 0x35	; 53
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 2e       	mov	r0, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <DIO_SetPinMode+0x2d2>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	0a 94       	dec	r0
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <DIO_SetPinMode+0x2ce>
    1028:	84 2b       	or	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	99 c0       	rjmp	.+306    	; 0x1160 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    102e:	a1 e3       	ldi	r26, 0x31	; 49
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e1 e3       	ldi	r30, 0x31	; 49
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 c0       	rjmp	.+4      	; 0x104a <DIO_SetPinMode+0x2f8>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	2a 95       	dec	r18
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <DIO_SetPinMode+0x2f4>
    104e:	80 95       	com	r24
    1050:	84 23       	and	r24, r20
    1052:	8c 93       	st	X, r24
            SET_BIT(PORTD, pin);
    1054:	a2 e3       	ldi	r26, 0x32	; 50
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e2 e3       	ldi	r30, 0x32	; 50
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	48 2f       	mov	r20, r24
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 2e       	mov	r0, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <DIO_SetPinMode+0x320>
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	0a 94       	dec	r0
    1074:	e2 f7       	brpl	.-8      	; 0x106e <DIO_SetPinMode+0x31c>
    1076:	84 2b       	or	r24, r20
    1078:	8c 93       	st	X, r24
    107a:	72 c0       	rjmp	.+228    	; 0x1160 <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT) 
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	82 30       	cpi	r24, 0x02	; 2
    1080:	09 f0       	breq	.+2      	; 0x1084 <DIO_SetPinMode+0x332>
    1082:	6e c0       	rjmp	.+220    	; 0x1160 <DIO_SetPinMode+0x40e>
    {
        switch (port)
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	3d 83       	std	Y+5, r19	; 0x05
    108c:	2c 83       	std	Y+4, r18	; 0x04
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	9d 81       	ldd	r25, Y+5	; 0x05
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	91 05       	cpc	r25, r1
    1096:	49 f1       	breq	.+82     	; 0x10ea <DIO_SetPinMode+0x398>
    1098:	2c 81       	ldd	r18, Y+4	; 0x04
    109a:	3d 81       	ldd	r19, Y+5	; 0x05
    109c:	22 30       	cpi	r18, 0x02	; 2
    109e:	31 05       	cpc	r19, r1
    10a0:	2c f4       	brge	.+10     	; 0x10ac <DIO_SetPinMode+0x35a>
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	9d 81       	ldd	r25, Y+5	; 0x05
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	61 f0       	breq	.+24     	; 0x10c2 <DIO_SetPinMode+0x370>
    10aa:	5a c0       	rjmp	.+180    	; 0x1160 <DIO_SetPinMode+0x40e>
    10ac:	2c 81       	ldd	r18, Y+4	; 0x04
    10ae:	3d 81       	ldd	r19, Y+5	; 0x05
    10b0:	22 30       	cpi	r18, 0x02	; 2
    10b2:	31 05       	cpc	r19, r1
    10b4:	71 f1       	breq	.+92     	; 0x1112 <DIO_SetPinMode+0x3c0>
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ba:	83 30       	cpi	r24, 0x03	; 3
    10bc:	91 05       	cpc	r25, r1
    10be:	e9 f1       	breq	.+122    	; 0x113a <DIO_SetPinMode+0x3e8>
    10c0:	4f c0       	rjmp	.+158    	; 0x1160 <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            SET_BIT(DDRA, pin);
    10c2:	aa e3       	ldi	r26, 0x3A	; 58
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	ea e3       	ldi	r30, 0x3A	; 58
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_SetPinMode+0x38e>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_SetPinMode+0x38a>
    10e4:	84 2b       	or	r24, r20
    10e6:	8c 93       	st	X, r24
    10e8:	3b c0       	rjmp	.+118    	; 0x1160 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            SET_BIT(DDRB, pin);
    10ea:	a7 e3       	ldi	r26, 0x37	; 55
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e7 e3       	ldi	r30, 0x37	; 55
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_SetPinMode+0x3b6>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <DIO_SetPinMode+0x3b2>
    110c:	84 2b       	or	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	27 c0       	rjmp	.+78     	; 0x1160 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            SET_BIT(DDRC, pin);
    1112:	a4 e3       	ldi	r26, 0x34	; 52
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e4 e3       	ldi	r30, 0x34	; 52
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_SetPinMode+0x3de>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_SetPinMode+0x3da>
    1134:	84 2b       	or	r24, r20
    1136:	8c 93       	st	X, r24
    1138:	13 c0       	rjmp	.+38     	; 0x1160 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            SET_BIT(DDRD, pin);
    113a:	a1 e3       	ldi	r26, 0x31	; 49
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e1 e3       	ldi	r30, 0x31	; 49
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <DIO_SetPinMode+0x406>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <DIO_SetPinMode+0x402>
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24
        default:
            break;
        }

    }
}
    1160:	29 96       	adiw	r28, 0x09	; 9
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	f8 94       	cli
    1166:	de bf       	out	0x3e, r29	; 62
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	cd bf       	out	0x3d, r28	; 61
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <DIO_SetPortMode>:

void DIO_SetPortMode(DIO_PortType port, DIO_ModeType mode) {
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	2a 97       	sbiw	r28, 0x0a	; 10
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	89 83       	std	Y+1, r24	; 0x01
    1188:	6a 83       	std	Y+2, r22	; 0x02
    if (mode == DIO_INPUT_FLOATING) 
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	88 23       	and	r24, r24
    118e:	d9 f5       	brne	.+118    	; 0x1206 <DIO_SetPortMode+0x94>
    {
        switch (port)
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	3a 87       	std	Y+10, r19	; 0x0a
    1198:	29 87       	std	Y+9, r18	; 0x09
    119a:	89 85       	ldd	r24, Y+9	; 0x09
    119c:	9a 85       	ldd	r25, Y+10	; 0x0a
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	91 05       	cpc	r25, r1
    11a2:	e1 f0       	breq	.+56     	; 0x11dc <DIO_SetPortMode+0x6a>
    11a4:	29 85       	ldd	r18, Y+9	; 0x09
    11a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    11a8:	22 30       	cpi	r18, 0x02	; 2
    11aa:	31 05       	cpc	r19, r1
    11ac:	2c f4       	brge	.+10     	; 0x11b8 <DIO_SetPortMode+0x46>
    11ae:	89 85       	ldd	r24, Y+9	; 0x09
    11b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	61 f0       	breq	.+24     	; 0x11ce <DIO_SetPortMode+0x5c>
    11b6:	d2 c0       	rjmp	.+420    	; 0x135c <DIO_SetPortMode+0x1ea>
    11b8:	29 85       	ldd	r18, Y+9	; 0x09
    11ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    11bc:	22 30       	cpi	r18, 0x02	; 2
    11be:	31 05       	cpc	r19, r1
    11c0:	a1 f0       	breq	.+40     	; 0x11ea <DIO_SetPortMode+0x78>
    11c2:	89 85       	ldd	r24, Y+9	; 0x09
    11c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c6:	83 30       	cpi	r24, 0x03	; 3
    11c8:	91 05       	cpc	r25, r1
    11ca:	b1 f0       	breq	.+44     	; 0x11f8 <DIO_SetPortMode+0x86>
    11cc:	c7 c0       	rjmp	.+398    	; 0x135c <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    11ce:	ea e3       	ldi	r30, 0x3A	; 58
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	10 82       	st	Z, r1
            PORTA = 0x00;
    11d4:	eb e3       	ldi	r30, 0x3B	; 59
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	10 82       	st	Z, r1
    11da:	c0 c0       	rjmp	.+384    	; 0x135c <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    11dc:	e7 e3       	ldi	r30, 0x37	; 55
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	10 82       	st	Z, r1
            PORTB = 0x00;
    11e2:	e8 e3       	ldi	r30, 0x38	; 56
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	10 82       	st	Z, r1
    11e8:	b9 c0       	rjmp	.+370    	; 0x135c <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    11ea:	e4 e3       	ldi	r30, 0x34	; 52
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	10 82       	st	Z, r1
            PORTC = 0x00;
    11f0:	e5 e3       	ldi	r30, 0x35	; 53
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	10 82       	st	Z, r1
    11f6:	b2 c0       	rjmp	.+356    	; 0x135c <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    11f8:	e1 e3       	ldi	r30, 0x31	; 49
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	10 82       	st	Z, r1
            PORTD = 0x00;
    11fe:	e2 e3       	ldi	r30, 0x32	; 50
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	10 82       	st	Z, r1
    1204:	ab c0       	rjmp	.+342    	; 0x135c <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP) 
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	09 f0       	breq	.+2      	; 0x120e <DIO_SetPortMode+0x9c>
    120c:	3f c0       	rjmp	.+126    	; 0x128c <DIO_SetPortMode+0x11a>
    {
        switch (port)
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	38 87       	std	Y+8, r19	; 0x08
    1216:	2f 83       	std	Y+7, r18	; 0x07
    1218:	8f 81       	ldd	r24, Y+7	; 0x07
    121a:	98 85       	ldd	r25, Y+8	; 0x08
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	91 05       	cpc	r25, r1
    1220:	e9 f0       	breq	.+58     	; 0x125c <DIO_SetPortMode+0xea>
    1222:	2f 81       	ldd	r18, Y+7	; 0x07
    1224:	38 85       	ldd	r19, Y+8	; 0x08
    1226:	22 30       	cpi	r18, 0x02	; 2
    1228:	31 05       	cpc	r19, r1
    122a:	2c f4       	brge	.+10     	; 0x1236 <DIO_SetPortMode+0xc4>
    122c:	8f 81       	ldd	r24, Y+7	; 0x07
    122e:	98 85       	ldd	r25, Y+8	; 0x08
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	61 f0       	breq	.+24     	; 0x124c <DIO_SetPortMode+0xda>
    1234:	93 c0       	rjmp	.+294    	; 0x135c <DIO_SetPortMode+0x1ea>
    1236:	2f 81       	ldd	r18, Y+7	; 0x07
    1238:	38 85       	ldd	r19, Y+8	; 0x08
    123a:	22 30       	cpi	r18, 0x02	; 2
    123c:	31 05       	cpc	r19, r1
    123e:	b1 f0       	breq	.+44     	; 0x126c <DIO_SetPortMode+0xfa>
    1240:	8f 81       	ldd	r24, Y+7	; 0x07
    1242:	98 85       	ldd	r25, Y+8	; 0x08
    1244:	83 30       	cpi	r24, 0x03	; 3
    1246:	91 05       	cpc	r25, r1
    1248:	c9 f0       	breq	.+50     	; 0x127c <DIO_SetPortMode+0x10a>
    124a:	88 c0       	rjmp	.+272    	; 0x135c <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    124c:	ea e3       	ldi	r30, 0x3A	; 58
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	10 82       	st	Z, r1
            PORTA = 0xFF;
    1252:	eb e3       	ldi	r30, 0x3B	; 59
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	8f ef       	ldi	r24, 0xFF	; 255
    1258:	80 83       	st	Z, r24
    125a:	80 c0       	rjmp	.+256    	; 0x135c <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    125c:	e7 e3       	ldi	r30, 0x37	; 55
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	10 82       	st	Z, r1
            PORTB = 0xFF;
    1262:	e8 e3       	ldi	r30, 0x38	; 56
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	8f ef       	ldi	r24, 0xFF	; 255
    1268:	80 83       	st	Z, r24
    126a:	78 c0       	rjmp	.+240    	; 0x135c <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    126c:	e4 e3       	ldi	r30, 0x34	; 52
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	10 82       	st	Z, r1
            PORTC = 0xFF;
    1272:	e5 e3       	ldi	r30, 0x35	; 53
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8f ef       	ldi	r24, 0xFF	; 255
    1278:	80 83       	st	Z, r24
    127a:	70 c0       	rjmp	.+224    	; 0x135c <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    127c:	e1 e3       	ldi	r30, 0x31	; 49
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	10 82       	st	Z, r1
            PORTD = 0xFF;
    1282:	e2 e3       	ldi	r30, 0x32	; 50
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	8f ef       	ldi	r24, 0xFF	; 255
    1288:	80 83       	st	Z, r24
    128a:	68 c0       	rjmp	.+208    	; 0x135c <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT) 
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	82 30       	cpi	r24, 0x02	; 2
    1290:	99 f5       	brne	.+102    	; 0x12f8 <DIO_SetPortMode+0x186>
    {
        switch (port)
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	3e 83       	std	Y+6, r19	; 0x06
    129a:	2d 83       	std	Y+5, r18	; 0x05
    129c:	8d 81       	ldd	r24, Y+5	; 0x05
    129e:	9e 81       	ldd	r25, Y+6	; 0x06
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	91 05       	cpc	r25, r1
    12a4:	d1 f0       	breq	.+52     	; 0x12da <DIO_SetPortMode+0x168>
    12a6:	2d 81       	ldd	r18, Y+5	; 0x05
    12a8:	3e 81       	ldd	r19, Y+6	; 0x06
    12aa:	22 30       	cpi	r18, 0x02	; 2
    12ac:	31 05       	cpc	r19, r1
    12ae:	2c f4       	brge	.+10     	; 0x12ba <DIO_SetPortMode+0x148>
    12b0:	8d 81       	ldd	r24, Y+5	; 0x05
    12b2:	9e 81       	ldd	r25, Y+6	; 0x06
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	61 f0       	breq	.+24     	; 0x12d0 <DIO_SetPortMode+0x15e>
    12b8:	51 c0       	rjmp	.+162    	; 0x135c <DIO_SetPortMode+0x1ea>
    12ba:	2d 81       	ldd	r18, Y+5	; 0x05
    12bc:	3e 81       	ldd	r19, Y+6	; 0x06
    12be:	22 30       	cpi	r18, 0x02	; 2
    12c0:	31 05       	cpc	r19, r1
    12c2:	81 f0       	breq	.+32     	; 0x12e4 <DIO_SetPortMode+0x172>
    12c4:	8d 81       	ldd	r24, Y+5	; 0x05
    12c6:	9e 81       	ldd	r25, Y+6	; 0x06
    12c8:	83 30       	cpi	r24, 0x03	; 3
    12ca:	91 05       	cpc	r25, r1
    12cc:	81 f0       	breq	.+32     	; 0x12ee <DIO_SetPortMode+0x17c>
    12ce:	46 c0       	rjmp	.+140    	; 0x135c <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0xFF;
    12d0:	ea e3       	ldi	r30, 0x3A	; 58
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	80 83       	st	Z, r24
    12d8:	41 c0       	rjmp	.+130    	; 0x135c <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0xFF;
    12da:	e7 e3       	ldi	r30, 0x37	; 55
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	8f ef       	ldi	r24, 0xFF	; 255
    12e0:	80 83       	st	Z, r24
    12e2:	3c c0       	rjmp	.+120    	; 0x135c <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0xFF;
    12e4:	e4 e3       	ldi	r30, 0x34	; 52
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	8f ef       	ldi	r24, 0xFF	; 255
    12ea:	80 83       	st	Z, r24
    12ec:	37 c0       	rjmp	.+110    	; 0x135c <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0xFF;
    12ee:	e1 e3       	ldi	r30, 0x31	; 49
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	8f ef       	ldi	r24, 0xFF	; 255
    12f4:	80 83       	st	Z, r24
    12f6:	32 c0       	rjmp	.+100    	; 0x135c <DIO_SetPortMode+0x1ea>
        }

    }
    else
    {
        switch (port)
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	3c 83       	std	Y+4, r19	; 0x04
    1300:	2b 83       	std	Y+3, r18	; 0x03
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	9c 81       	ldd	r25, Y+4	; 0x04
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	91 05       	cpc	r25, r1
    130a:	d1 f0       	breq	.+52     	; 0x1340 <DIO_SetPortMode+0x1ce>
    130c:	2b 81       	ldd	r18, Y+3	; 0x03
    130e:	3c 81       	ldd	r19, Y+4	; 0x04
    1310:	22 30       	cpi	r18, 0x02	; 2
    1312:	31 05       	cpc	r19, r1
    1314:	2c f4       	brge	.+10     	; 0x1320 <DIO_SetPortMode+0x1ae>
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	00 97       	sbiw	r24, 0x00	; 0
    131c:	61 f0       	breq	.+24     	; 0x1336 <DIO_SetPortMode+0x1c4>
    131e:	1e c0       	rjmp	.+60     	; 0x135c <DIO_SetPortMode+0x1ea>
    1320:	2b 81       	ldd	r18, Y+3	; 0x03
    1322:	3c 81       	ldd	r19, Y+4	; 0x04
    1324:	22 30       	cpi	r18, 0x02	; 2
    1326:	31 05       	cpc	r19, r1
    1328:	81 f0       	breq	.+32     	; 0x134a <DIO_SetPortMode+0x1d8>
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	9c 81       	ldd	r25, Y+4	; 0x04
    132e:	83 30       	cpi	r24, 0x03	; 3
    1330:	91 05       	cpc	r25, r1
    1332:	81 f0       	breq	.+32     	; 0x1354 <DIO_SetPortMode+0x1e2>
    1334:	13 c0       	rjmp	.+38     	; 0x135c <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = mode;
    1336:	ea e3       	ldi	r30, 0x3A	; 58
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	80 83       	st	Z, r24
    133e:	0e c0       	rjmp	.+28     	; 0x135c <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = mode;
    1340:	e7 e3       	ldi	r30, 0x37	; 55
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	80 83       	st	Z, r24
    1348:	09 c0       	rjmp	.+18     	; 0x135c <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = mode;
    134a:	e4 e3       	ldi	r30, 0x34	; 52
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	80 83       	st	Z, r24
    1352:	04 c0       	rjmp	.+8      	; 0x135c <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = mode;
    1354:	e1 e3       	ldi	r30, 0x31	; 49
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    135c:	2a 96       	adiw	r28, 0x0a	; 10
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <DIO_SetPinLevel>:


void DIO_SetPinLevel(DIO_PortType port, DIO_PinType pin, DIO_LevelType level) {
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	27 97       	sbiw	r28, 0x07	; 7
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	6a 83       	std	Y+2, r22	; 0x02
    1386:	4b 83       	std	Y+3, r20	; 0x03
    if (level == DIO_HIGH) 
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	09 f0       	breq	.+2      	; 0x1390 <DIO_SetPinLevel+0x22>
    138e:	6f c0       	rjmp	.+222    	; 0x146e <DIO_SetPinLevel+0x100>
    {
        switch (port)
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	3f 83       	std	Y+7, r19	; 0x07
    1398:	2e 83       	std	Y+6, r18	; 0x06
    139a:	8e 81       	ldd	r24, Y+6	; 0x06
    139c:	9f 81       	ldd	r25, Y+7	; 0x07
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	91 05       	cpc	r25, r1
    13a2:	49 f1       	breq	.+82     	; 0x13f6 <DIO_SetPinLevel+0x88>
    13a4:	2e 81       	ldd	r18, Y+6	; 0x06
    13a6:	3f 81       	ldd	r19, Y+7	; 0x07
    13a8:	22 30       	cpi	r18, 0x02	; 2
    13aa:	31 05       	cpc	r19, r1
    13ac:	2c f4       	brge	.+10     	; 0x13b8 <DIO_SetPinLevel+0x4a>
    13ae:	8e 81       	ldd	r24, Y+6	; 0x06
    13b0:	9f 81       	ldd	r25, Y+7	; 0x07
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	61 f0       	breq	.+24     	; 0x13ce <DIO_SetPinLevel+0x60>
    13b6:	d2 c0       	rjmp	.+420    	; 0x155c <DIO_SetPinLevel+0x1ee>
    13b8:	2e 81       	ldd	r18, Y+6	; 0x06
    13ba:	3f 81       	ldd	r19, Y+7	; 0x07
    13bc:	22 30       	cpi	r18, 0x02	; 2
    13be:	31 05       	cpc	r19, r1
    13c0:	71 f1       	breq	.+92     	; 0x141e <DIO_SetPinLevel+0xb0>
    13c2:	8e 81       	ldd	r24, Y+6	; 0x06
    13c4:	9f 81       	ldd	r25, Y+7	; 0x07
    13c6:	83 30       	cpi	r24, 0x03	; 3
    13c8:	91 05       	cpc	r25, r1
    13ca:	e9 f1       	breq	.+122    	; 0x1446 <DIO_SetPinLevel+0xd8>
    13cc:	c7 c0       	rjmp	.+398    	; 0x155c <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            SET_BIT(PORTA, pin);
    13ce:	ab e3       	ldi	r26, 0x3B	; 59
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	eb e3       	ldi	r30, 0x3B	; 59
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	48 2f       	mov	r20, r24
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 2e       	mov	r0, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <DIO_SetPinLevel+0x7e>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <DIO_SetPinLevel+0x7a>
    13f0:	84 2b       	or	r24, r20
    13f2:	8c 93       	st	X, r24
    13f4:	b3 c0       	rjmp	.+358    	; 0x155c <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            SET_BIT(PORTB, pin);
    13f6:	a8 e3       	ldi	r26, 0x38	; 56
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e8 e3       	ldi	r30, 0x38	; 56
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <DIO_SetPinLevel+0xa6>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <DIO_SetPinLevel+0xa2>
    1418:	84 2b       	or	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	9f c0       	rjmp	.+318    	; 0x155c <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            SET_BIT(PORTC, pin);
    141e:	a5 e3       	ldi	r26, 0x35	; 53
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e5 e3       	ldi	r30, 0x35	; 53
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_SetPinLevel+0xce>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <DIO_SetPinLevel+0xca>
    1440:	84 2b       	or	r24, r20
    1442:	8c 93       	st	X, r24
    1444:	8b c0       	rjmp	.+278    	; 0x155c <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            SET_BIT(PORTD, pin);
    1446:	a2 e3       	ldi	r26, 0x32	; 50
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e2 e3       	ldi	r30, 0x32	; 50
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <DIO_SetPinLevel+0xf6>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <DIO_SetPinLevel+0xf2>
    1468:	84 2b       	or	r24, r20
    146a:	8c 93       	st	X, r24
    146c:	77 c0       	rjmp	.+238    	; 0x155c <DIO_SetPinLevel+0x1ee>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW) 
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	88 23       	and	r24, r24
    1472:	09 f0       	breq	.+2      	; 0x1476 <DIO_SetPinLevel+0x108>
    1474:	73 c0       	rjmp	.+230    	; 0x155c <DIO_SetPinLevel+0x1ee>
    {
        switch (port)
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	3d 83       	std	Y+5, r19	; 0x05
    147e:	2c 83       	std	Y+4, r18	; 0x04
    1480:	8c 81       	ldd	r24, Y+4	; 0x04
    1482:	9d 81       	ldd	r25, Y+5	; 0x05
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	91 05       	cpc	r25, r1
    1488:	59 f1       	breq	.+86     	; 0x14e0 <DIO_SetPinLevel+0x172>
    148a:	2c 81       	ldd	r18, Y+4	; 0x04
    148c:	3d 81       	ldd	r19, Y+5	; 0x05
    148e:	22 30       	cpi	r18, 0x02	; 2
    1490:	31 05       	cpc	r19, r1
    1492:	2c f4       	brge	.+10     	; 0x149e <DIO_SetPinLevel+0x130>
    1494:	8c 81       	ldd	r24, Y+4	; 0x04
    1496:	9d 81       	ldd	r25, Y+5	; 0x05
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	69 f0       	breq	.+26     	; 0x14b6 <DIO_SetPinLevel+0x148>
    149c:	5f c0       	rjmp	.+190    	; 0x155c <DIO_SetPinLevel+0x1ee>
    149e:	2c 81       	ldd	r18, Y+4	; 0x04
    14a0:	3d 81       	ldd	r19, Y+5	; 0x05
    14a2:	22 30       	cpi	r18, 0x02	; 2
    14a4:	31 05       	cpc	r19, r1
    14a6:	89 f1       	breq	.+98     	; 0x150a <DIO_SetPinLevel+0x19c>
    14a8:	8c 81       	ldd	r24, Y+4	; 0x04
    14aa:	9d 81       	ldd	r25, Y+5	; 0x05
    14ac:	83 30       	cpi	r24, 0x03	; 3
    14ae:	91 05       	cpc	r25, r1
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <DIO_SetPinLevel+0x146>
    14b2:	40 c0       	rjmp	.+128    	; 0x1534 <DIO_SetPinLevel+0x1c6>
    14b4:	53 c0       	rjmp	.+166    	; 0x155c <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            CLR_BIT(PORTA, pin);
    14b6:	ab e3       	ldi	r26, 0x3B	; 59
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	eb e3       	ldi	r30, 0x3B	; 59
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_SetPinLevel+0x166>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_SetPinLevel+0x162>
    14d8:	80 95       	com	r24
    14da:	84 23       	and	r24, r20
    14dc:	8c 93       	st	X, r24
    14de:	3e c0       	rjmp	.+124    	; 0x155c <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            CLR_BIT(PORTB, pin);
    14e0:	a8 e3       	ldi	r26, 0x38	; 56
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e8 e3       	ldi	r30, 0x38	; 56
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	48 2f       	mov	r20, r24
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	02 2e       	mov	r0, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <DIO_SetPinLevel+0x190>
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	0a 94       	dec	r0
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <DIO_SetPinLevel+0x18c>
    1502:	80 95       	com	r24
    1504:	84 23       	and	r24, r20
    1506:	8c 93       	st	X, r24
    1508:	29 c0       	rjmp	.+82     	; 0x155c <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            CLR_BIT(PORTC, pin);
    150a:	a5 e3       	ldi	r26, 0x35	; 53
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e5 e3       	ldi	r30, 0x35	; 53
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	48 2f       	mov	r20, r24
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	02 2e       	mov	r0, r18
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <DIO_SetPinLevel+0x1ba>
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	0a 94       	dec	r0
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <DIO_SetPinLevel+0x1b6>
    152c:	80 95       	com	r24
    152e:	84 23       	and	r24, r20
    1530:	8c 93       	st	X, r24
    1532:	14 c0       	rjmp	.+40     	; 0x155c <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            CLR_BIT(PORTD, pin);
    1534:	a2 e3       	ldi	r26, 0x32	; 50
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e2 e3       	ldi	r30, 0x32	; 50
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	48 2f       	mov	r20, r24
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 2e       	mov	r0, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <DIO_SetPinLevel+0x1e4>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	0a 94       	dec	r0
    1554:	e2 f7       	brpl	.-8      	; 0x154e <DIO_SetPinLevel+0x1e0>
    1556:	80 95       	com	r24
    1558:	84 23       	and	r24, r20
    155a:	8c 93       	st	X, r24
            break;
        default:
            break;
        }
    }
}
    155c:	27 96       	adiw	r28, 0x07	; 7
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	f8 94       	cli
    1562:	de bf       	out	0x3e, r29	; 62
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	cd bf       	out	0x3d, r28	; 61
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <DIO_SetPortLevel>:

void DIO_SetPortLevel (DIO_PortType port, DIO_LevelType level) {
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	28 97       	sbiw	r28, 0x08	; 8
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	89 83       	std	Y+1, r24	; 0x01
    1584:	6a 83       	std	Y+2, r22	; 0x02
    if (level == DIO_HIGH) {
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	99 f5       	brne	.+102    	; 0x15f2 <DIO_SetPortLevel+0x84>
        switch (port)
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	38 87       	std	Y+8, r19	; 0x08
    1594:	2f 83       	std	Y+7, r18	; 0x07
    1596:	8f 81       	ldd	r24, Y+7	; 0x07
    1598:	98 85       	ldd	r25, Y+8	; 0x08
    159a:	81 30       	cpi	r24, 0x01	; 1
    159c:	91 05       	cpc	r25, r1
    159e:	d1 f0       	breq	.+52     	; 0x15d4 <DIO_SetPortLevel+0x66>
    15a0:	2f 81       	ldd	r18, Y+7	; 0x07
    15a2:	38 85       	ldd	r19, Y+8	; 0x08
    15a4:	22 30       	cpi	r18, 0x02	; 2
    15a6:	31 05       	cpc	r19, r1
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <DIO_SetPortLevel+0x46>
    15aa:	8f 81       	ldd	r24, Y+7	; 0x07
    15ac:	98 85       	ldd	r25, Y+8	; 0x08
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	61 f0       	breq	.+24     	; 0x15ca <DIO_SetPortLevel+0x5c>
    15b2:	83 c0       	rjmp	.+262    	; 0x16ba <DIO_SetPortLevel+0x14c>
    15b4:	2f 81       	ldd	r18, Y+7	; 0x07
    15b6:	38 85       	ldd	r19, Y+8	; 0x08
    15b8:	22 30       	cpi	r18, 0x02	; 2
    15ba:	31 05       	cpc	r19, r1
    15bc:	81 f0       	breq	.+32     	; 0x15de <DIO_SetPortLevel+0x70>
    15be:	8f 81       	ldd	r24, Y+7	; 0x07
    15c0:	98 85       	ldd	r25, Y+8	; 0x08
    15c2:	83 30       	cpi	r24, 0x03	; 3
    15c4:	91 05       	cpc	r25, r1
    15c6:	81 f0       	breq	.+32     	; 0x15e8 <DIO_SetPortLevel+0x7a>
    15c8:	78 c0       	rjmp	.+240    	; 0x16ba <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0xFF;
    15ca:	eb e3       	ldi	r30, 0x3B	; 59
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	8f ef       	ldi	r24, 0xFF	; 255
    15d0:	80 83       	st	Z, r24
    15d2:	73 c0       	rjmp	.+230    	; 0x16ba <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0xFF;
    15d4:	e8 e3       	ldi	r30, 0x38	; 56
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	8f ef       	ldi	r24, 0xFF	; 255
    15da:	80 83       	st	Z, r24
    15dc:	6e c0       	rjmp	.+220    	; 0x16ba <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0xFF;
    15de:	e5 e3       	ldi	r30, 0x35	; 53
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	80 83       	st	Z, r24
    15e6:	69 c0       	rjmp	.+210    	; 0x16ba <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0xFF;
    15e8:	e2 e3       	ldi	r30, 0x32	; 50
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	80 83       	st	Z, r24
    15f0:	64 c0       	rjmp	.+200    	; 0x16ba <DIO_SetPortLevel+0x14c>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW) {
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	88 23       	and	r24, r24
    15f6:	79 f5       	brne	.+94     	; 0x1656 <DIO_SetPortLevel+0xe8>
        switch (port)
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	3e 83       	std	Y+6, r19	; 0x06
    1600:	2d 83       	std	Y+5, r18	; 0x05
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	9e 81       	ldd	r25, Y+6	; 0x06
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	91 05       	cpc	r25, r1
    160a:	c9 f0       	breq	.+50     	; 0x163e <DIO_SetPortLevel+0xd0>
    160c:	2d 81       	ldd	r18, Y+5	; 0x05
    160e:	3e 81       	ldd	r19, Y+6	; 0x06
    1610:	22 30       	cpi	r18, 0x02	; 2
    1612:	31 05       	cpc	r19, r1
    1614:	2c f4       	brge	.+10     	; 0x1620 <DIO_SetPortLevel+0xb2>
    1616:	8d 81       	ldd	r24, Y+5	; 0x05
    1618:	9e 81       	ldd	r25, Y+6	; 0x06
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	61 f0       	breq	.+24     	; 0x1636 <DIO_SetPortLevel+0xc8>
    161e:	4d c0       	rjmp	.+154    	; 0x16ba <DIO_SetPortLevel+0x14c>
    1620:	2d 81       	ldd	r18, Y+5	; 0x05
    1622:	3e 81       	ldd	r19, Y+6	; 0x06
    1624:	22 30       	cpi	r18, 0x02	; 2
    1626:	31 05       	cpc	r19, r1
    1628:	71 f0       	breq	.+28     	; 0x1646 <DIO_SetPortLevel+0xd8>
    162a:	8d 81       	ldd	r24, Y+5	; 0x05
    162c:	9e 81       	ldd	r25, Y+6	; 0x06
    162e:	83 30       	cpi	r24, 0x03	; 3
    1630:	91 05       	cpc	r25, r1
    1632:	69 f0       	breq	.+26     	; 0x164e <DIO_SetPortLevel+0xe0>
    1634:	42 c0       	rjmp	.+132    	; 0x16ba <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0x00;
    1636:	eb e3       	ldi	r30, 0x3B	; 59
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	10 82       	st	Z, r1
    163c:	3e c0       	rjmp	.+124    	; 0x16ba <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0x00;
    163e:	e8 e3       	ldi	r30, 0x38	; 56
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	10 82       	st	Z, r1
    1644:	3a c0       	rjmp	.+116    	; 0x16ba <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0x00;
    1646:	e5 e3       	ldi	r30, 0x35	; 53
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	10 82       	st	Z, r1
    164c:	36 c0       	rjmp	.+108    	; 0x16ba <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0x00;
    164e:	e2 e3       	ldi	r30, 0x32	; 50
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	10 82       	st	Z, r1
    1654:	32 c0       	rjmp	.+100    	; 0x16ba <DIO_SetPortLevel+0x14c>
        default:
            break;
        }
    }
    else {
        switch (port)
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	3c 83       	std	Y+4, r19	; 0x04
    165e:	2b 83       	std	Y+3, r18	; 0x03
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	9c 81       	ldd	r25, Y+4	; 0x04
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	91 05       	cpc	r25, r1
    1668:	d1 f0       	breq	.+52     	; 0x169e <DIO_SetPortLevel+0x130>
    166a:	2b 81       	ldd	r18, Y+3	; 0x03
    166c:	3c 81       	ldd	r19, Y+4	; 0x04
    166e:	22 30       	cpi	r18, 0x02	; 2
    1670:	31 05       	cpc	r19, r1
    1672:	2c f4       	brge	.+10     	; 0x167e <DIO_SetPortLevel+0x110>
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	61 f0       	breq	.+24     	; 0x1694 <DIO_SetPortLevel+0x126>
    167c:	1e c0       	rjmp	.+60     	; 0x16ba <DIO_SetPortLevel+0x14c>
    167e:	2b 81       	ldd	r18, Y+3	; 0x03
    1680:	3c 81       	ldd	r19, Y+4	; 0x04
    1682:	22 30       	cpi	r18, 0x02	; 2
    1684:	31 05       	cpc	r19, r1
    1686:	81 f0       	breq	.+32     	; 0x16a8 <DIO_SetPortLevel+0x13a>
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	83 30       	cpi	r24, 0x03	; 3
    168e:	91 05       	cpc	r25, r1
    1690:	81 f0       	breq	.+32     	; 0x16b2 <DIO_SetPortLevel+0x144>
    1692:	13 c0       	rjmp	.+38     	; 0x16ba <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = level;
    1694:	eb e3       	ldi	r30, 0x3B	; 59
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	80 83       	st	Z, r24
    169c:	0e c0       	rjmp	.+28     	; 0x16ba <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = level;
    169e:	e8 e3       	ldi	r30, 0x38	; 56
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	80 83       	st	Z, r24
    16a6:	09 c0       	rjmp	.+18     	; 0x16ba <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = level;
    16a8:	e5 e3       	ldi	r30, 0x35	; 53
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	80 83       	st	Z, r24
    16b0:	04 c0       	rjmp	.+8      	; 0x16ba <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = level;
    16b2:	e2 e3       	ldi	r30, 0x32	; 50
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    16ba:	28 96       	adiw	r28, 0x08	; 8
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <DIO_ReadPinLevel>:



DIO_LevelType DIO_ReadPinLevel(DIO_PortType port, DIO_PinType pin) {
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <DIO_ReadPinLevel+0x6>
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <DIO_ReadPinLevel+0x8>
    16d4:	0f 92       	push	r0
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	8a 83       	std	Y+2, r24	; 0x02
    16dc:	6b 83       	std	Y+3, r22	; 0x03
    DIO_LevelType result = DIO_LOW;
    16de:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	3d 83       	std	Y+5, r19	; 0x05
    16e8:	2c 83       	std	Y+4, r18	; 0x04
    16ea:	4c 81       	ldd	r20, Y+4	; 0x04
    16ec:	5d 81       	ldd	r21, Y+5	; 0x05
    16ee:	41 30       	cpi	r20, 0x01	; 1
    16f0:	51 05       	cpc	r21, r1
    16f2:	41 f1       	breq	.+80     	; 0x1744 <DIO_ReadPinLevel+0x78>
    16f4:	8c 81       	ldd	r24, Y+4	; 0x04
    16f6:	9d 81       	ldd	r25, Y+5	; 0x05
    16f8:	82 30       	cpi	r24, 0x02	; 2
    16fa:	91 05       	cpc	r25, r1
    16fc:	34 f4       	brge	.+12     	; 0x170a <DIO_ReadPinLevel+0x3e>
    16fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1700:	3d 81       	ldd	r19, Y+5	; 0x05
    1702:	21 15       	cp	r18, r1
    1704:	31 05       	cpc	r19, r1
    1706:	61 f0       	breq	.+24     	; 0x1720 <DIO_ReadPinLevel+0x54>
    1708:	52 c0       	rjmp	.+164    	; 0x17ae <DIO_ReadPinLevel+0xe2>
    170a:	4c 81       	ldd	r20, Y+4	; 0x04
    170c:	5d 81       	ldd	r21, Y+5	; 0x05
    170e:	42 30       	cpi	r20, 0x02	; 2
    1710:	51 05       	cpc	r21, r1
    1712:	51 f1       	breq	.+84     	; 0x1768 <DIO_ReadPinLevel+0x9c>
    1714:	8c 81       	ldd	r24, Y+4	; 0x04
    1716:	9d 81       	ldd	r25, Y+5	; 0x05
    1718:	83 30       	cpi	r24, 0x03	; 3
    171a:	91 05       	cpc	r25, r1
    171c:	b9 f1       	breq	.+110    	; 0x178c <DIO_ReadPinLevel+0xc0>
    171e:	47 c0       	rjmp	.+142    	; 0x17ae <DIO_ReadPinLevel+0xe2>
    {
    case DIO_PORTA:
        result = GET_BIT(PINA, pin);
    1720:	e9 e3       	ldi	r30, 0x39	; 57
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	88 2f       	mov	r24, r24
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a9 01       	movw	r20, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <DIO_ReadPinLevel+0x6c>
    1734:	55 95       	asr	r21
    1736:	47 95       	ror	r20
    1738:	8a 95       	dec	r24
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <DIO_ReadPinLevel+0x68>
    173c:	ca 01       	movw	r24, r20
    173e:	81 70       	andi	r24, 0x01	; 1
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	35 c0       	rjmp	.+106    	; 0x17ae <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTB:
        result = GET_BIT(PINB, pin);
    1744:	e6 e3       	ldi	r30, 0x36	; 54
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	88 2f       	mov	r24, r24
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	a9 01       	movw	r20, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <DIO_ReadPinLevel+0x90>
    1758:	55 95       	asr	r21
    175a:	47 95       	ror	r20
    175c:	8a 95       	dec	r24
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <DIO_ReadPinLevel+0x8c>
    1760:	ca 01       	movw	r24, r20
    1762:	81 70       	andi	r24, 0x01	; 1
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	23 c0       	rjmp	.+70     	; 0x17ae <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTC:
        result = GET_BIT(PINC, pin);
    1768:	e3 e3       	ldi	r30, 0x33	; 51
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	88 2f       	mov	r24, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	a9 01       	movw	r20, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <DIO_ReadPinLevel+0xb4>
    177c:	55 95       	asr	r21
    177e:	47 95       	ror	r20
    1780:	8a 95       	dec	r24
    1782:	e2 f7       	brpl	.-8      	; 0x177c <DIO_ReadPinLevel+0xb0>
    1784:	ca 01       	movw	r24, r20
    1786:	81 70       	andi	r24, 0x01	; 1
    1788:	89 83       	std	Y+1, r24	; 0x01
    178a:	11 c0       	rjmp	.+34     	; 0x17ae <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTD:
        result = GET_BIT(PIND, pin);
    178c:	e0 e3       	ldi	r30, 0x30	; 48
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	88 2f       	mov	r24, r24
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a9 01       	movw	r20, r18
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <DIO_ReadPinLevel+0xd8>
    17a0:	55 95       	asr	r21
    17a2:	47 95       	ror	r20
    17a4:	8a 95       	dec	r24
    17a6:	e2 f7       	brpl	.-8      	; 0x17a0 <DIO_ReadPinLevel+0xd4>
    17a8:	ca 01       	movw	r24, r20
    17aa:	81 70       	andi	r24, 0x01	; 1
    17ac:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return result;
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <DIO_ReadPortLevel>:

DIO_LevelType DIO_ReadPortLevel (DIO_PortType port) {
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <DIO_ReadPortLevel+0x6>
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <DIO_ReadPortLevel+0x8>
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	8a 83       	std	Y+2, r24	; 0x02
    u8 result = 0x00;
    17ce:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	3c 83       	std	Y+4, r19	; 0x04
    17d8:	2b 83       	std	Y+3, r18	; 0x03
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	9c 81       	ldd	r25, Y+4	; 0x04
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	91 05       	cpc	r25, r1
    17e2:	49 f1       	breq	.+82     	; 0x1836 <DIO_ReadPortLevel+0x76>
    17e4:	2b 81       	ldd	r18, Y+3	; 0x03
    17e6:	3c 81       	ldd	r19, Y+4	; 0x04
    17e8:	22 30       	cpi	r18, 0x02	; 2
    17ea:	31 05       	cpc	r19, r1
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <DIO_ReadPortLevel+0x38>
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	61 f0       	breq	.+24     	; 0x180e <DIO_ReadPortLevel+0x4e>
    17f6:	5a c0       	rjmp	.+180    	; 0x18ac <DIO_ReadPortLevel+0xec>
    17f8:	2b 81       	ldd	r18, Y+3	; 0x03
    17fa:	3c 81       	ldd	r19, Y+4	; 0x04
    17fc:	22 30       	cpi	r18, 0x02	; 2
    17fe:	31 05       	cpc	r19, r1
    1800:	71 f1       	breq	.+92     	; 0x185e <DIO_ReadPortLevel+0x9e>
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	9c 81       	ldd	r25, Y+4	; 0x04
    1806:	83 30       	cpi	r24, 0x03	; 3
    1808:	91 05       	cpc	r25, r1
    180a:	e9 f1       	breq	.+122    	; 0x1886 <DIO_ReadPortLevel+0xc6>
    180c:	4f c0       	rjmp	.+158    	; 0x18ac <DIO_ReadPortLevel+0xec>
    {
    case DIO_PORTA:
        if (PINA == 0xFF) {
    180e:	e9 e3       	ldi	r30, 0x39	; 57
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	8f 3f       	cpi	r24, 0xFF	; 255
    1816:	19 f4       	brne	.+6      	; 0x181e <DIO_ReadPortLevel+0x5e>
            result = DIO_HIGH;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	47 c0       	rjmp	.+142    	; 0x18ac <DIO_ReadPortLevel+0xec>
        }
        else if (PINA == 0x00) {
    181e:	e9 e3       	ldi	r30, 0x39	; 57
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	88 23       	and	r24, r24
    1826:	11 f4       	brne	.+4      	; 0x182c <DIO_ReadPortLevel+0x6c>
            result = DIO_LOW;
    1828:	19 82       	std	Y+1, r1	; 0x01
    182a:	40 c0       	rjmp	.+128    	; 0x18ac <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINA;
    182c:	e9 e3       	ldi	r30, 0x39	; 57
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	3b c0       	rjmp	.+118    	; 0x18ac <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTB:
        if (PINB == 0xFF) {
    1836:	e6 e3       	ldi	r30, 0x36	; 54
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	8f 3f       	cpi	r24, 0xFF	; 255
    183e:	19 f4       	brne	.+6      	; 0x1846 <DIO_ReadPortLevel+0x86>
            result = DIO_HIGH;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	33 c0       	rjmp	.+102    	; 0x18ac <DIO_ReadPortLevel+0xec>
        }
        else if (PINB == 0x00) {
    1846:	e6 e3       	ldi	r30, 0x36	; 54
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	88 23       	and	r24, r24
    184e:	11 f4       	brne	.+4      	; 0x1854 <DIO_ReadPortLevel+0x94>
            result = DIO_LOW;
    1850:	19 82       	std	Y+1, r1	; 0x01
    1852:	2c c0       	rjmp	.+88     	; 0x18ac <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINB;
    1854:	e6 e3       	ldi	r30, 0x36	; 54
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	27 c0       	rjmp	.+78     	; 0x18ac <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTC:
        if (PINC == 0xFF) {
    185e:	e3 e3       	ldi	r30, 0x33	; 51
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	8f 3f       	cpi	r24, 0xFF	; 255
    1866:	19 f4       	brne	.+6      	; 0x186e <DIO_ReadPortLevel+0xae>
            result = DIO_HIGH;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	1f c0       	rjmp	.+62     	; 0x18ac <DIO_ReadPortLevel+0xec>
        }
        else if (PINC == 0x00) {
    186e:	e3 e3       	ldi	r30, 0x33	; 51
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	88 23       	and	r24, r24
    1876:	11 f4       	brne	.+4      	; 0x187c <DIO_ReadPortLevel+0xbc>
            result = DIO_LOW;
    1878:	19 82       	std	Y+1, r1	; 0x01
    187a:	18 c0       	rjmp	.+48     	; 0x18ac <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINC;
    187c:	e3 e3       	ldi	r30, 0x33	; 51
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	13 c0       	rjmp	.+38     	; 0x18ac <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTD:
        if (PIND == 0xFF) {
    1886:	e0 e3       	ldi	r30, 0x30	; 48
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	8f 3f       	cpi	r24, 0xFF	; 255
    188e:	19 f4       	brne	.+6      	; 0x1896 <DIO_ReadPortLevel+0xd6>
            result = DIO_HIGH;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	0b c0       	rjmp	.+22     	; 0x18ac <DIO_ReadPortLevel+0xec>
        }
        else if (PIND == 0x00) {
    1896:	e0 e3       	ldi	r30, 0x30	; 48
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	88 23       	and	r24, r24
    189e:	11 f4       	brne	.+4      	; 0x18a4 <DIO_ReadPortLevel+0xe4>
            result = DIO_LOW;
    18a0:	19 82       	std	Y+1, r1	; 0x01
    18a2:	04 c0       	rjmp	.+8      	; 0x18ac <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PIND;
    18a4:	e0 e3       	ldi	r30, 0x30	; 48
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	89 83       	std	Y+1, r24	; 0x01
        }
        break;
    default:
        break;
    }
    return result;
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <EEPROM_Init>:
#include "I2C.h"
#include "EEPROM.h"
#include "EEPROM_cfg.h"

void EEPROM_Init(void)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
	I2C_InitMaster();
    18c4:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <I2C_InitMaster>
}
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <EEPROM_Write_Byte>:

/*Send byte to EEPROM*/
void EEPROM_Write_Byte(u8 AddressSlave ,u8 AddressLocation,u8 Data)
{
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <EEPROM_Write_Byte+0x6>
    18d4:	0f 92       	push	r0
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	6a 83       	std	Y+2, r22	; 0x02
    18de:	4b 83       	std	Y+3, r20	; 0x03
	I2C_SendStartCondition();
    18e0:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <I2C_SendStartCondition>
	//write the device address and so we need to get A2 A1 A0 address bits and R/W=0 (write)
	I2C_MasterWriteDataByte(AddressSlave);
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	0e 94 49 17 	call	0x2e92	; 0x2e92 <I2C_MasterWriteDataByte>

	//send the required location address
	I2C_MasterWriteDataByte(AddressLocation);
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	0e 94 49 17 	call	0x2e92	; 0x2e92 <I2C_MasterWriteDataByte>

	//write byte to eeprom
	I2C_MasterWriteDataByte(Data);
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	0e 94 49 17 	call	0x2e92	; 0x2e92 <I2C_MasterWriteDataByte>

	I2C_SendStopCondition();
    18f6:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <I2C_SendStopCondition>
}
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <EEPROM_Read_Byte>:

u8 EEPROM_Read_Byte(u8 AddressSlave ,u8 AddressLocation)
{
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	00 d0       	rcall	.+0      	; 0x190c <EEPROM_Read_Byte+0x6>
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	6a 83       	std	Y+2, r22	; 0x02

	I2C_SendStartCondition();
    1914:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <I2C_SendStartCondition>

	//write the device address and so we need to get A2 A1 A0 address bits and R/W=0 (write)
	I2C_MasterWriteDataByte(AddressSlave);
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	0e 94 49 17 	call	0x2e92	; 0x2e92 <I2C_MasterWriteDataByte>

	//send the required location address
	I2C_MasterWriteDataByte(AddressLocation);
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	0e 94 49 17 	call	0x2e92	; 0x2e92 <I2C_MasterWriteDataByte>

	//send a repeated start
	I2C_SendStartCondition();
    1924:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <I2C_SendStartCondition>

	//write the device address and so we need to get A2 A1 A0 address bits and R/W=1 (Read)
	SET_BIT(AddressSlave,0);
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	81 60       	ori	r24, 0x01	; 1
    192c:	89 83       	std	Y+1, r24	; 0x01
	I2C_MasterWriteDataByte(AddressSlave);
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	0e 94 49 17 	call	0x2e92	; 0x2e92 <I2C_MasterWriteDataByte>

	return I2C_MasterReadDataByteWith_NACK();
    1934:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <I2C_MasterReadDataByteWith_NACK>

	I2C_SendStopCondition();
}
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <ExtInterrupt_Init>:
//void __vector_1 (void) __attribute__ ((signal));
//void __vector_1 (void) {
//	// TODO
//}

void ExtInterrupt_Init(void) {
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62

    /*************************** Interrupt 0 Init ***************************/
#ifdef EXT_INTERRUPT_INT0
    /* Interrupt Enable */
#if EXT_INTERRUPT_INT0_INT_ENABLE == EXT_INTERRUPT_ENABLE
    SET_BIT(GICR, GICR_INT0); // External Interrupt Request 0 Enable
    194a:	ab e5       	ldi	r26, 0x5B	; 91
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	eb e5       	ldi	r30, 0x5B	; 91
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	80 64       	ori	r24, 0x40	; 64
    1956:	8c 93       	st	X, r24
    GlobalInterrupt_Enable(); // Global Interrupt Enable
    1958:	0e 94 bf 0c 	call	0x197e	; 0x197e <GlobalInterrupt_Enable>
    SET_BIT(MCUCR, MCUCR_ISC01);
#elif EXT_INTERRUPT_INT0_SENSE == EXT_INTERRUPT_RISING_EDGE
    // TODO
#elif EXT_INTERRUPT_INT0_SENSE == EXT_INTERRUPT_ON_CHANGE
    /* Any logical change on INT0 generates an interrupt request. */
    SET_BIT(MCUCR, MCUCR_ISC00);
    195c:	a5 e5       	ldi	r26, 0x55	; 85
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e5 e5       	ldi	r30, 0x55	; 85
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	81 60       	ori	r24, 0x01	; 1
    1968:	8c 93       	st	X, r24
    CLR_BIT(MCUCR, MCUCR_ISC01);
    196a:	a5 e5       	ldi	r26, 0x55	; 85
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e5 e5       	ldi	r30, 0x55	; 85
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	8d 7f       	andi	r24, 0xFD	; 253
    1976:	8c 93       	st	X, r24
#endif
#endif



}
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	08 95       	ret

0000197e <GlobalInterrupt_Enable>:
#include "std_types.h"
#include "macros.h"
#include "Registers.h"
#include "GlobalInterrupt.h"

void GlobalInterrupt_Enable(void) {
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
    1986:	af e5       	ldi	r26, 0x5F	; 95
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	ef e5       	ldi	r30, 0x5F	; 95
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	80 68       	ori	r24, 0x80	; 128
    1992:	8c 93       	st	X, r24
}
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <GlobalInterrupt_Disable>:

void GlobalInterrupt_Disable(void) {
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
    19a2:	af e5       	ldi	r26, 0x5F	; 95
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	ef e5       	ldi	r30, 0x5F	; 95
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	8f 77       	andi	r24, 0x7F	; 127
    19ae:	8c 93       	st	X, r24
}
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <__vector_10>:
void (*Gpt_Timer2_Callback_Ctc)(void);
void (*Gpt_Timer2_Callback_Normal)(void);

/************ ISR ************/
ISR(VECTOR_TIMER0_CTC)
{
    19b6:	1f 92       	push	r1
    19b8:	0f 92       	push	r0
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	0f 92       	push	r0
    19be:	11 24       	eor	r1, r1
    19c0:	2f 93       	push	r18
    19c2:	3f 93       	push	r19
    19c4:	4f 93       	push	r20
    19c6:	5f 93       	push	r21
    19c8:	6f 93       	push	r22
    19ca:	7f 93       	push	r23
    19cc:	8f 93       	push	r24
    19ce:	9f 93       	push	r25
    19d0:	af 93       	push	r26
    19d2:	bf 93       	push	r27
    19d4:	ef 93       	push	r30
    19d6:	ff 93       	push	r31
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer0_Callback_Ctc();
    19e0:	e0 91 70 00 	lds	r30, 0x0070
    19e4:	f0 91 71 00 	lds	r31, 0x0071
    19e8:	09 95       	icall
}
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	ff 91       	pop	r31
    19f0:	ef 91       	pop	r30
    19f2:	bf 91       	pop	r27
    19f4:	af 91       	pop	r26
    19f6:	9f 91       	pop	r25
    19f8:	8f 91       	pop	r24
    19fa:	7f 91       	pop	r23
    19fc:	6f 91       	pop	r22
    19fe:	5f 91       	pop	r21
    1a00:	4f 91       	pop	r20
    1a02:	3f 91       	pop	r19
    1a04:	2f 91       	pop	r18
    1a06:	0f 90       	pop	r0
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	0f 90       	pop	r0
    1a0c:	1f 90       	pop	r1
    1a0e:	18 95       	reti

00001a10 <__vector_11>:
ISR(VECTOR_TIMER0_NORM)
{
    1a10:	1f 92       	push	r1
    1a12:	0f 92       	push	r0
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	0f 92       	push	r0
    1a18:	11 24       	eor	r1, r1
    1a1a:	2f 93       	push	r18
    1a1c:	3f 93       	push	r19
    1a1e:	4f 93       	push	r20
    1a20:	5f 93       	push	r21
    1a22:	6f 93       	push	r22
    1a24:	7f 93       	push	r23
    1a26:	8f 93       	push	r24
    1a28:	9f 93       	push	r25
    1a2a:	af 93       	push	r26
    1a2c:	bf 93       	push	r27
    1a2e:	ef 93       	push	r30
    1a30:	ff 93       	push	r31
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer0_Callback_Normal();
    1a3a:	e0 91 7a 00 	lds	r30, 0x007A
    1a3e:	f0 91 7b 00 	lds	r31, 0x007B
    1a42:	09 95       	icall
}
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	ff 91       	pop	r31
    1a4a:	ef 91       	pop	r30
    1a4c:	bf 91       	pop	r27
    1a4e:	af 91       	pop	r26
    1a50:	9f 91       	pop	r25
    1a52:	8f 91       	pop	r24
    1a54:	7f 91       	pop	r23
    1a56:	6f 91       	pop	r22
    1a58:	5f 91       	pop	r21
    1a5a:	4f 91       	pop	r20
    1a5c:	3f 91       	pop	r19
    1a5e:	2f 91       	pop	r18
    1a60:	0f 90       	pop	r0
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	0f 90       	pop	r0
    1a66:	1f 90       	pop	r1
    1a68:	18 95       	reti

00001a6a <__vector_9>:
ISR(VECTOR_TIMER1_NORM)
{
    1a6a:	1f 92       	push	r1
    1a6c:	0f 92       	push	r0
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	0f 92       	push	r0
    1a72:	11 24       	eor	r1, r1
    1a74:	2f 93       	push	r18
    1a76:	3f 93       	push	r19
    1a78:	4f 93       	push	r20
    1a7a:	5f 93       	push	r21
    1a7c:	6f 93       	push	r22
    1a7e:	7f 93       	push	r23
    1a80:	8f 93       	push	r24
    1a82:	9f 93       	push	r25
    1a84:	af 93       	push	r26
    1a86:	bf 93       	push	r27
    1a88:	ef 93       	push	r30
    1a8a:	ff 93       	push	r31
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1_Callback_Normal();
    1a94:	e0 91 7c 00 	lds	r30, 0x007C
    1a98:	f0 91 7d 00 	lds	r31, 0x007D
    1a9c:	09 95       	icall
}
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	ff 91       	pop	r31
    1aa4:	ef 91       	pop	r30
    1aa6:	bf 91       	pop	r27
    1aa8:	af 91       	pop	r26
    1aaa:	9f 91       	pop	r25
    1aac:	8f 91       	pop	r24
    1aae:	7f 91       	pop	r23
    1ab0:	6f 91       	pop	r22
    1ab2:	5f 91       	pop	r21
    1ab4:	4f 91       	pop	r20
    1ab6:	3f 91       	pop	r19
    1ab8:	2f 91       	pop	r18
    1aba:	0f 90       	pop	r0
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	0f 90       	pop	r0
    1ac0:	1f 90       	pop	r1
    1ac2:	18 95       	reti

00001ac4 <__vector_7>:
ISR(VECTOR_TIMER1A_CTC)
{
    1ac4:	1f 92       	push	r1
    1ac6:	0f 92       	push	r0
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	0f 92       	push	r0
    1acc:	11 24       	eor	r1, r1
    1ace:	2f 93       	push	r18
    1ad0:	3f 93       	push	r19
    1ad2:	4f 93       	push	r20
    1ad4:	5f 93       	push	r21
    1ad6:	6f 93       	push	r22
    1ad8:	7f 93       	push	r23
    1ada:	8f 93       	push	r24
    1adc:	9f 93       	push	r25
    1ade:	af 93       	push	r26
    1ae0:	bf 93       	push	r27
    1ae2:	ef 93       	push	r30
    1ae4:	ff 93       	push	r31
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1A_Callback_Ctc();
    1aee:	e0 91 78 00 	lds	r30, 0x0078
    1af2:	f0 91 79 00 	lds	r31, 0x0079
    1af6:	09 95       	icall
}
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	ff 91       	pop	r31
    1afe:	ef 91       	pop	r30
    1b00:	bf 91       	pop	r27
    1b02:	af 91       	pop	r26
    1b04:	9f 91       	pop	r25
    1b06:	8f 91       	pop	r24
    1b08:	7f 91       	pop	r23
    1b0a:	6f 91       	pop	r22
    1b0c:	5f 91       	pop	r21
    1b0e:	4f 91       	pop	r20
    1b10:	3f 91       	pop	r19
    1b12:	2f 91       	pop	r18
    1b14:	0f 90       	pop	r0
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	0f 90       	pop	r0
    1b1a:	1f 90       	pop	r1
    1b1c:	18 95       	reti

00001b1e <__vector_8>:
ISR(VECTOR_TIMER1B_CTC)
{
    1b1e:	1f 92       	push	r1
    1b20:	0f 92       	push	r0
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	0f 92       	push	r0
    1b26:	11 24       	eor	r1, r1
    1b28:	2f 93       	push	r18
    1b2a:	3f 93       	push	r19
    1b2c:	4f 93       	push	r20
    1b2e:	5f 93       	push	r21
    1b30:	6f 93       	push	r22
    1b32:	7f 93       	push	r23
    1b34:	8f 93       	push	r24
    1b36:	9f 93       	push	r25
    1b38:	af 93       	push	r26
    1b3a:	bf 93       	push	r27
    1b3c:	ef 93       	push	r30
    1b3e:	ff 93       	push	r31
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1B_Callback_Ctc();
    1b48:	e0 91 74 00 	lds	r30, 0x0074
    1b4c:	f0 91 75 00 	lds	r31, 0x0075
    1b50:	09 95       	icall
}
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	ff 91       	pop	r31
    1b58:	ef 91       	pop	r30
    1b5a:	bf 91       	pop	r27
    1b5c:	af 91       	pop	r26
    1b5e:	9f 91       	pop	r25
    1b60:	8f 91       	pop	r24
    1b62:	7f 91       	pop	r23
    1b64:	6f 91       	pop	r22
    1b66:	5f 91       	pop	r21
    1b68:	4f 91       	pop	r20
    1b6a:	3f 91       	pop	r19
    1b6c:	2f 91       	pop	r18
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	0f 90       	pop	r0
    1b74:	1f 90       	pop	r1
    1b76:	18 95       	reti

00001b78 <__vector_5>:
ISR(VECTOR_TIMER2_NORM)
{
    1b78:	1f 92       	push	r1
    1b7a:	0f 92       	push	r0
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	0f 92       	push	r0
    1b80:	11 24       	eor	r1, r1
    1b82:	2f 93       	push	r18
    1b84:	3f 93       	push	r19
    1b86:	4f 93       	push	r20
    1b88:	5f 93       	push	r21
    1b8a:	6f 93       	push	r22
    1b8c:	7f 93       	push	r23
    1b8e:	8f 93       	push	r24
    1b90:	9f 93       	push	r25
    1b92:	af 93       	push	r26
    1b94:	bf 93       	push	r27
    1b96:	ef 93       	push	r30
    1b98:	ff 93       	push	r31
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer2_Callback_Normal();
    1ba2:	e0 91 76 00 	lds	r30, 0x0076
    1ba6:	f0 91 77 00 	lds	r31, 0x0077
    1baa:	09 95       	icall
}
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	ff 91       	pop	r31
    1bb2:	ef 91       	pop	r30
    1bb4:	bf 91       	pop	r27
    1bb6:	af 91       	pop	r26
    1bb8:	9f 91       	pop	r25
    1bba:	8f 91       	pop	r24
    1bbc:	7f 91       	pop	r23
    1bbe:	6f 91       	pop	r22
    1bc0:	5f 91       	pop	r21
    1bc2:	4f 91       	pop	r20
    1bc4:	3f 91       	pop	r19
    1bc6:	2f 91       	pop	r18
    1bc8:	0f 90       	pop	r0
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	0f 90       	pop	r0
    1bce:	1f 90       	pop	r1
    1bd0:	18 95       	reti

00001bd2 <__vector_4>:
ISR(VECTOR_TIMER2_CTC)
{
    1bd2:	1f 92       	push	r1
    1bd4:	0f 92       	push	r0
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	0f 92       	push	r0
    1bda:	11 24       	eor	r1, r1
    1bdc:	2f 93       	push	r18
    1bde:	3f 93       	push	r19
    1be0:	4f 93       	push	r20
    1be2:	5f 93       	push	r21
    1be4:	6f 93       	push	r22
    1be6:	7f 93       	push	r23
    1be8:	8f 93       	push	r24
    1bea:	9f 93       	push	r25
    1bec:	af 93       	push	r26
    1bee:	bf 93       	push	r27
    1bf0:	ef 93       	push	r30
    1bf2:	ff 93       	push	r31
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer2_Callback_Ctc();
    1bfc:	e0 91 72 00 	lds	r30, 0x0072
    1c00:	f0 91 73 00 	lds	r31, 0x0073
    1c04:	09 95       	icall
}
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	ff 91       	pop	r31
    1c0c:	ef 91       	pop	r30
    1c0e:	bf 91       	pop	r27
    1c10:	af 91       	pop	r26
    1c12:	9f 91       	pop	r25
    1c14:	8f 91       	pop	r24
    1c16:	7f 91       	pop	r23
    1c18:	6f 91       	pop	r22
    1c1a:	5f 91       	pop	r21
    1c1c:	4f 91       	pop	r20
    1c1e:	3f 91       	pop	r19
    1c20:	2f 91       	pop	r18
    1c22:	0f 90       	pop	r0
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	0f 90       	pop	r0
    1c28:	1f 90       	pop	r1
    1c2a:	18 95       	reti

00001c2c <Gpt_Init>:

Gpt_ReturnType Gpt_Init(Gpt_ConfigType *config)
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	65 97       	sbiw	r28, 0x15	; 21
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	9b 83       	std	Y+3, r25	; 0x03
    1c42:	8a 83       	std	Y+2, r24	; 0x02
    Gpt_ReturnType returnValue = GPT_OK;
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	89 83       	std	Y+1, r24	; 0x01

    switch (config->channel)
    1c48:	ea 81       	ldd	r30, Y+2	; 0x02
    1c4a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c4c:	80 81       	ld	r24, Z
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	3d 8b       	std	Y+21, r19	; 0x15
    1c54:	2c 8b       	std	Y+20, r18	; 0x14
    1c56:	8c 89       	ldd	r24, Y+20	; 0x14
    1c58:	9d 89       	ldd	r25, Y+21	; 0x15
    1c5a:	81 30       	cpi	r24, 0x01	; 1
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <Gpt_Init+0x36>
    1c60:	92 c1       	rjmp	.+804    	; 0x1f86 <Gpt_Init+0x35a>
    1c62:	2c 89       	ldd	r18, Y+20	; 0x14
    1c64:	3d 89       	ldd	r19, Y+21	; 0x15
    1c66:	22 30       	cpi	r18, 0x02	; 2
    1c68:	31 05       	cpc	r19, r1
    1c6a:	2c f4       	brge	.+10     	; 0x1c76 <Gpt_Init+0x4a>
    1c6c:	8c 89       	ldd	r24, Y+20	; 0x14
    1c6e:	9d 89       	ldd	r25, Y+21	; 0x15
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	71 f0       	breq	.+28     	; 0x1c90 <Gpt_Init+0x64>
    1c74:	2a c6       	rjmp	.+3156   	; 0x28ca <Gpt_Init+0xc9e>
    1c76:	2c 89       	ldd	r18, Y+20	; 0x14
    1c78:	3d 89       	ldd	r19, Y+21	; 0x15
    1c7a:	22 30       	cpi	r18, 0x02	; 2
    1c7c:	31 05       	cpc	r19, r1
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <Gpt_Init+0x56>
    1c80:	19 c3       	rjmp	.+1586   	; 0x22b4 <Gpt_Init+0x688>
    1c82:	8c 89       	ldd	r24, Y+20	; 0x14
    1c84:	9d 89       	ldd	r25, Y+21	; 0x15
    1c86:	83 30       	cpi	r24, 0x03	; 3
    1c88:	91 05       	cpc	r25, r1
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <Gpt_Init+0x62>
    1c8c:	aa c4       	rjmp	.+2388   	; 0x25e2 <Gpt_Init+0x9b6>
    1c8e:	1d c6       	rjmp	.+3130   	; 0x28ca <Gpt_Init+0xc9e>
    {

    case GPT_CHANNEL_TIMER0:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    1c90:	ea 81       	ldd	r30, Y+2	; 0x02
    1c92:	fb 81       	ldd	r31, Y+3	; 0x03
    1c94:	81 81       	ldd	r24, Z+1	; 0x01
    1c96:	88 23       	and	r24, r24
    1c98:	79 f4       	brne	.+30     	; 0x1cb8 <Gpt_Init+0x8c>
        {
            CLR_BIT(TCCR0, TCCR0_WGM00);
    1c9a:	a3 e5       	ldi	r26, 0x53	; 83
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	e3 e5       	ldi	r30, 0x53	; 83
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	8f 7b       	andi	r24, 0xBF	; 191
    1ca6:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_WGM01);
    1ca8:	a3 e5       	ldi	r26, 0x53	; 83
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e3 e5       	ldi	r30, 0x53	; 83
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	87 7f       	andi	r24, 0xF7	; 247
    1cb4:	8c 93       	st	X, r24
    1cb6:	15 c0       	rjmp	.+42     	; 0x1ce2 <Gpt_Init+0xb6>
        }
        else if (config->mode == GPT_MODE_CTC)
    1cb8:	ea 81       	ldd	r30, Y+2	; 0x02
    1cba:	fb 81       	ldd	r31, Y+3	; 0x03
    1cbc:	81 81       	ldd	r24, Z+1	; 0x01
    1cbe:	81 30       	cpi	r24, 0x01	; 1
    1cc0:	79 f4       	brne	.+30     	; 0x1ce0 <Gpt_Init+0xb4>
        {
            CLR_BIT(TCCR0, TCCR0_WGM00);
    1cc2:	a3 e5       	ldi	r26, 0x53	; 83
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e3 e5       	ldi	r30, 0x53	; 83
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	8f 7b       	andi	r24, 0xBF	; 191
    1cce:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_WGM01);
    1cd0:	a3 e5       	ldi	r26, 0x53	; 83
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e3 e5       	ldi	r30, 0x53	; 83
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	88 60       	ori	r24, 0x08	; 8
    1cdc:	8c 93       	st	X, r24
    1cde:	01 c0       	rjmp	.+2      	; 0x1ce2 <Gpt_Init+0xb6>
        }
        else
        {
            returnValue = GPT_ERROR;
    1ce0:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    1ce2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ce4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ce6:	82 81       	ldd	r24, Z+2	; 0x02
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	3b 8b       	std	Y+19, r19	; 0x13
    1cee:	2a 8b       	std	Y+18, r18	; 0x12
    1cf0:	8a 89       	ldd	r24, Y+18	; 0x12
    1cf2:	9b 89       	ldd	r25, Y+19	; 0x13
    1cf4:	81 30       	cpi	r24, 0x01	; 1
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	21 f1       	breq	.+72     	; 0x1d42 <Gpt_Init+0x116>
    1cfa:	2a 89       	ldd	r18, Y+18	; 0x12
    1cfc:	3b 89       	ldd	r19, Y+19	; 0x13
    1cfe:	22 30       	cpi	r18, 0x02	; 2
    1d00:	31 05       	cpc	r19, r1
    1d02:	2c f4       	brge	.+10     	; 0x1d0e <Gpt_Init+0xe2>
    1d04:	8a 89       	ldd	r24, Y+18	; 0x12
    1d06:	9b 89       	ldd	r25, Y+19	; 0x13
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	61 f0       	breq	.+24     	; 0x1d24 <Gpt_Init+0xf8>
    1d0c:	47 c0       	rjmp	.+142    	; 0x1d9c <Gpt_Init+0x170>
    1d0e:	2a 89       	ldd	r18, Y+18	; 0x12
    1d10:	3b 89       	ldd	r19, Y+19	; 0x13
    1d12:	22 30       	cpi	r18, 0x02	; 2
    1d14:	31 05       	cpc	r19, r1
    1d16:	21 f1       	breq	.+72     	; 0x1d60 <Gpt_Init+0x134>
    1d18:	8a 89       	ldd	r24, Y+18	; 0x12
    1d1a:	9b 89       	ldd	r25, Y+19	; 0x13
    1d1c:	83 30       	cpi	r24, 0x03	; 3
    1d1e:	91 05       	cpc	r25, r1
    1d20:	71 f1       	breq	.+92     	; 0x1d7e <Gpt_Init+0x152>
    1d22:	3c c0       	rjmp	.+120    	; 0x1d9c <Gpt_Init+0x170>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR0, TCCR0_COM00);
    1d24:	a3 e5       	ldi	r26, 0x53	; 83
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e3 e5       	ldi	r30, 0x53	; 83
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	8f 7e       	andi	r24, 0xEF	; 239
    1d30:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    1d32:	a3 e5       	ldi	r26, 0x53	; 83
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e3 e5       	ldi	r30, 0x53	; 83
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	8f 7d       	andi	r24, 0xDF	; 223
    1d3e:	8c 93       	st	X, r24
    1d40:	2e c0       	rjmp	.+92     	; 0x1d9e <Gpt_Init+0x172>
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR0, TCCR0_COM00);
    1d42:	a3 e5       	ldi	r26, 0x53	; 83
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	e3 e5       	ldi	r30, 0x53	; 83
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	80 61       	ori	r24, 0x10	; 16
    1d4e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    1d50:	a3 e5       	ldi	r26, 0x53	; 83
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e3 e5       	ldi	r30, 0x53	; 83
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	8f 7d       	andi	r24, 0xDF	; 223
    1d5c:	8c 93       	st	X, r24
    1d5e:	1f c0       	rjmp	.+62     	; 0x1d9e <Gpt_Init+0x172>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR0, TCCR0_COM00);
    1d60:	a3 e5       	ldi	r26, 0x53	; 83
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e3 e5       	ldi	r30, 0x53	; 83
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	80 61       	ori	r24, 0x10	; 16
    1d6c:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    1d6e:	a3 e5       	ldi	r26, 0x53	; 83
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e3 e5       	ldi	r30, 0x53	; 83
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	80 62       	ori	r24, 0x20	; 32
    1d7a:	8c 93       	st	X, r24
    1d7c:	10 c0       	rjmp	.+32     	; 0x1d9e <Gpt_Init+0x172>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR0, TCCR0_COM00);
    1d7e:	a3 e5       	ldi	r26, 0x53	; 83
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e3 e5       	ldi	r30, 0x53	; 83
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	8f 7e       	andi	r24, 0xEF	; 239
    1d8a:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    1d8c:	a3 e5       	ldi	r26, 0x53	; 83
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e3 e5       	ldi	r30, 0x53	; 83
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	80 62       	ori	r24, 0x20	; 32
    1d98:	8c 93       	st	X, r24
    1d9a:	01 c0       	rjmp	.+2      	; 0x1d9e <Gpt_Init+0x172>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    1d9c:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    1d9e:	ea 81       	ldd	r30, Y+2	; 0x02
    1da0:	fb 81       	ldd	r31, Y+3	; 0x03
    1da2:	83 81       	ldd	r24, Z+3	; 0x03
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	39 8b       	std	Y+17, r19	; 0x11
    1daa:	28 8b       	std	Y+16, r18	; 0x10
    1dac:	88 89       	ldd	r24, Y+16	; 0x10
    1dae:	99 89       	ldd	r25, Y+17	; 0x11
    1db0:	84 30       	cpi	r24, 0x04	; 4
    1db2:	91 05       	cpc	r25, r1
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <Gpt_Init+0x18c>
    1db6:	77 c0       	rjmp	.+238    	; 0x1ea6 <Gpt_Init+0x27a>
    1db8:	28 89       	ldd	r18, Y+16	; 0x10
    1dba:	39 89       	ldd	r19, Y+17	; 0x11
    1dbc:	25 30       	cpi	r18, 0x05	; 5
    1dbe:	31 05       	cpc	r19, r1
    1dc0:	8c f4       	brge	.+34     	; 0x1de4 <Gpt_Init+0x1b8>
    1dc2:	88 89       	ldd	r24, Y+16	; 0x10
    1dc4:	99 89       	ldd	r25, Y+17	; 0x11
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	91 05       	cpc	r25, r1
    1dca:	09 f4       	brne	.+2      	; 0x1dce <Gpt_Init+0x1a2>
    1dcc:	40 c0       	rjmp	.+128    	; 0x1e4e <Gpt_Init+0x222>
    1dce:	28 89       	ldd	r18, Y+16	; 0x10
    1dd0:	39 89       	ldd	r19, Y+17	; 0x11
    1dd2:	22 30       	cpi	r18, 0x02	; 2
    1dd4:	31 05       	cpc	r19, r1
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <Gpt_Init+0x1ae>
    1dd8:	50 c0       	rjmp	.+160    	; 0x1e7a <Gpt_Init+0x24e>
    1dda:	88 89       	ldd	r24, Y+16	; 0x10
    1ddc:	99 89       	ldd	r25, Y+17	; 0x11
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	01 f1       	breq	.+64     	; 0x1e22 <Gpt_Init+0x1f6>
    1de2:	cf c0       	rjmp	.+414    	; 0x1f82 <Gpt_Init+0x356>
    1de4:	28 89       	ldd	r18, Y+16	; 0x10
    1de6:	39 89       	ldd	r19, Y+17	; 0x11
    1de8:	27 30       	cpi	r18, 0x07	; 7
    1dea:	31 05       	cpc	r19, r1
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <Gpt_Init+0x1c4>
    1dee:	87 c0       	rjmp	.+270    	; 0x1efe <Gpt_Init+0x2d2>
    1df0:	88 89       	ldd	r24, Y+16	; 0x10
    1df2:	99 89       	ldd	r25, Y+17	; 0x11
    1df4:	88 30       	cpi	r24, 0x08	; 8
    1df6:	91 05       	cpc	r25, r1
    1df8:	3c f4       	brge	.+14     	; 0x1e08 <Gpt_Init+0x1dc>
    1dfa:	28 89       	ldd	r18, Y+16	; 0x10
    1dfc:	39 89       	ldd	r19, Y+17	; 0x11
    1dfe:	26 30       	cpi	r18, 0x06	; 6
    1e00:	31 05       	cpc	r19, r1
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <Gpt_Init+0x1da>
    1e04:	66 c0       	rjmp	.+204    	; 0x1ed2 <Gpt_Init+0x2a6>
    1e06:	bd c0       	rjmp	.+378    	; 0x1f82 <Gpt_Init+0x356>
    1e08:	88 89       	ldd	r24, Y+16	; 0x10
    1e0a:	99 89       	ldd	r25, Y+17	; 0x11
    1e0c:	88 30       	cpi	r24, 0x08	; 8
    1e0e:	91 05       	cpc	r25, r1
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <Gpt_Init+0x1e8>
    1e12:	8b c0       	rjmp	.+278    	; 0x1f2a <Gpt_Init+0x2fe>
    1e14:	28 89       	ldd	r18, Y+16	; 0x10
    1e16:	39 89       	ldd	r19, Y+17	; 0x11
    1e18:	29 30       	cpi	r18, 0x09	; 9
    1e1a:	31 05       	cpc	r19, r1
    1e1c:	09 f4       	brne	.+2      	; 0x1e20 <Gpt_Init+0x1f4>
    1e1e:	9b c0       	rjmp	.+310    	; 0x1f56 <Gpt_Init+0x32a>
    1e20:	b0 c0       	rjmp	.+352    	; 0x1f82 <Gpt_Init+0x356>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR0, TCCR0_CS00);
    1e22:	a3 e5       	ldi	r26, 0x53	; 83
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e3 e5       	ldi	r30, 0x53	; 83
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	8e 7f       	andi	r24, 0xFE	; 254
    1e2e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    1e30:	a3 e5       	ldi	r26, 0x53	; 83
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e3 e5       	ldi	r30, 0x53	; 83
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	8d 7f       	andi	r24, 0xFD	; 253
    1e3c:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    1e3e:	a3 e5       	ldi	r26, 0x53	; 83
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e3 e5       	ldi	r30, 0x53	; 83
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	8b 7f       	andi	r24, 0xFB	; 251
    1e4a:	8c 93       	st	X, r24
    1e4c:	3f c5       	rjmp	.+2686   	; 0x28cc <Gpt_Init+0xca0>
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR0, TCCR0_CS00);
    1e4e:	a3 e5       	ldi	r26, 0x53	; 83
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e3 e5       	ldi	r30, 0x53	; 83
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	81 60       	ori	r24, 0x01	; 1
    1e5a:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    1e5c:	a3 e5       	ldi	r26, 0x53	; 83
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e3 e5       	ldi	r30, 0x53	; 83
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	8d 7f       	andi	r24, 0xFD	; 253
    1e68:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    1e6a:	a3 e5       	ldi	r26, 0x53	; 83
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	e3 e5       	ldi	r30, 0x53	; 83
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	8b 7f       	andi	r24, 0xFB	; 251
    1e76:	8c 93       	st	X, r24
    1e78:	29 c5       	rjmp	.+2642   	; 0x28cc <Gpt_Init+0xca0>
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR0, TCCR0_CS00);
    1e7a:	a3 e5       	ldi	r26, 0x53	; 83
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	e3 e5       	ldi	r30, 0x53	; 83
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	8e 7f       	andi	r24, 0xFE	; 254
    1e86:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    1e88:	a3 e5       	ldi	r26, 0x53	; 83
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	e3 e5       	ldi	r30, 0x53	; 83
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	82 60       	ori	r24, 0x02	; 2
    1e94:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    1e96:	a3 e5       	ldi	r26, 0x53	; 83
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e3 e5       	ldi	r30, 0x53	; 83
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	8b 7f       	andi	r24, 0xFB	; 251
    1ea2:	8c 93       	st	X, r24
    1ea4:	13 c5       	rjmp	.+2598   	; 0x28cc <Gpt_Init+0xca0>
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR0, TCCR0_CS00);
    1ea6:	a3 e5       	ldi	r26, 0x53	; 83
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e3 e5       	ldi	r30, 0x53	; 83
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	81 60       	ori	r24, 0x01	; 1
    1eb2:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    1eb4:	a3 e5       	ldi	r26, 0x53	; 83
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e3 e5       	ldi	r30, 0x53	; 83
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	82 60       	ori	r24, 0x02	; 2
    1ec0:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    1ec2:	a3 e5       	ldi	r26, 0x53	; 83
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e3 e5       	ldi	r30, 0x53	; 83
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	8b 7f       	andi	r24, 0xFB	; 251
    1ece:	8c 93       	st	X, r24
    1ed0:	fd c4       	rjmp	.+2554   	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR0, TCCR0_CS00);
    1ed2:	a3 e5       	ldi	r26, 0x53	; 83
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e3 e5       	ldi	r30, 0x53	; 83
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	8e 7f       	andi	r24, 0xFE	; 254
    1ede:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    1ee0:	a3 e5       	ldi	r26, 0x53	; 83
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e3 e5       	ldi	r30, 0x53	; 83
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	8d 7f       	andi	r24, 0xFD	; 253
    1eec:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    1eee:	a3 e5       	ldi	r26, 0x53	; 83
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e3 e5       	ldi	r30, 0x53	; 83
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	84 60       	ori	r24, 0x04	; 4
    1efa:	8c 93       	st	X, r24
    1efc:	e7 c4       	rjmp	.+2510   	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR0, TCCR0_CS00);
    1efe:	a3 e5       	ldi	r26, 0x53	; 83
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e3 e5       	ldi	r30, 0x53	; 83
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	81 60       	ori	r24, 0x01	; 1
    1f0a:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    1f0c:	a3 e5       	ldi	r26, 0x53	; 83
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e3 e5       	ldi	r30, 0x53	; 83
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	8d 7f       	andi	r24, 0xFD	; 253
    1f18:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    1f1a:	a3 e5       	ldi	r26, 0x53	; 83
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e3 e5       	ldi	r30, 0x53	; 83
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	84 60       	ori	r24, 0x04	; 4
    1f26:	8c 93       	st	X, r24
    1f28:	d1 c4       	rjmp	.+2466   	; 0x28cc <Gpt_Init+0xca0>
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR0, TCCR0_CS00);
    1f2a:	a3 e5       	ldi	r26, 0x53	; 83
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e3 e5       	ldi	r30, 0x53	; 83
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	8e 7f       	andi	r24, 0xFE	; 254
    1f36:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    1f38:	a3 e5       	ldi	r26, 0x53	; 83
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	e3 e5       	ldi	r30, 0x53	; 83
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	82 60       	ori	r24, 0x02	; 2
    1f44:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    1f46:	a3 e5       	ldi	r26, 0x53	; 83
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e3 e5       	ldi	r30, 0x53	; 83
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	84 60       	ori	r24, 0x04	; 4
    1f52:	8c 93       	st	X, r24
    1f54:	bb c4       	rjmp	.+2422   	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR0, TCCR0_CS00);
    1f56:	a3 e5       	ldi	r26, 0x53	; 83
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	e3 e5       	ldi	r30, 0x53	; 83
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	81 60       	ori	r24, 0x01	; 1
    1f62:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    1f64:	a3 e5       	ldi	r26, 0x53	; 83
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e3 e5       	ldi	r30, 0x53	; 83
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	82 60       	ori	r24, 0x02	; 2
    1f70:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    1f72:	a3 e5       	ldi	r26, 0x53	; 83
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	e3 e5       	ldi	r30, 0x53	; 83
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	84 60       	ori	r24, 0x04	; 4
    1f7e:	8c 93       	st	X, r24
    1f80:	a5 c4       	rjmp	.+2378   	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    1f82:	19 82       	std	Y+1, r1	; 0x01
    1f84:	a3 c4       	rjmp	.+2374   	; 0x28cc <Gpt_Init+0xca0>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    1f86:	ea 81       	ldd	r30, Y+2	; 0x02
    1f88:	fb 81       	ldd	r31, Y+3	; 0x03
    1f8a:	81 81       	ldd	r24, Z+1	; 0x01
    1f8c:	88 23       	and	r24, r24
    1f8e:	e9 f4       	brne	.+58     	; 0x1fca <Gpt_Init+0x39e>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1f90:	af e4       	ldi	r26, 0x4F	; 79
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	ef e4       	ldi	r30, 0x4F	; 79
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	8e 7f       	andi	r24, 0xFE	; 254
    1f9c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1f9e:	af e4       	ldi	r26, 0x4F	; 79
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	ef e4       	ldi	r30, 0x4F	; 79
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	8d 7f       	andi	r24, 0xFD	; 253
    1faa:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1fac:	ae e4       	ldi	r26, 0x4E	; 78
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	ee e4       	ldi	r30, 0x4E	; 78
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	87 7f       	andi	r24, 0xF7	; 247
    1fb8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1fba:	ae e4       	ldi	r26, 0x4E	; 78
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	ee e4       	ldi	r30, 0x4E	; 78
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	8f 7e       	andi	r24, 0xEF	; 239
    1fc6:	8c 93       	st	X, r24
    1fc8:	23 c0       	rjmp	.+70     	; 0x2010 <Gpt_Init+0x3e4>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    1fca:	ea 81       	ldd	r30, Y+2	; 0x02
    1fcc:	fb 81       	ldd	r31, Y+3	; 0x03
    1fce:	81 81       	ldd	r24, Z+1	; 0x01
    1fd0:	81 30       	cpi	r24, 0x01	; 1
    1fd2:	e9 f4       	brne	.+58     	; 0x200e <Gpt_Init+0x3e2>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1fd4:	af e4       	ldi	r26, 0x4F	; 79
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	ef e4       	ldi	r30, 0x4F	; 79
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	8e 7f       	andi	r24, 0xFE	; 254
    1fe0:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1fe2:	af e4       	ldi	r26, 0x4F	; 79
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	ef e4       	ldi	r30, 0x4F	; 79
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	8d 7f       	andi	r24, 0xFD	; 253
    1fee:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    1ff0:	ae e4       	ldi	r26, 0x4E	; 78
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	ee e4       	ldi	r30, 0x4E	; 78
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	88 60       	ori	r24, 0x08	; 8
    1ffc:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1ffe:	ae e4       	ldi	r26, 0x4E	; 78
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	ee e4       	ldi	r30, 0x4E	; 78
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	8f 7e       	andi	r24, 0xEF	; 239
    200a:	8c 93       	st	X, r24
    200c:	01 c0       	rjmp	.+2      	; 0x2010 <Gpt_Init+0x3e4>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    200e:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    2010:	ea 81       	ldd	r30, Y+2	; 0x02
    2012:	fb 81       	ldd	r31, Y+3	; 0x03
    2014:	82 81       	ldd	r24, Z+2	; 0x02
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	3f 87       	std	Y+15, r19	; 0x0f
    201c:	2e 87       	std	Y+14, r18	; 0x0e
    201e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2020:	9f 85       	ldd	r25, Y+15	; 0x0f
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	91 05       	cpc	r25, r1
    2026:	21 f1       	breq	.+72     	; 0x2070 <Gpt_Init+0x444>
    2028:	2e 85       	ldd	r18, Y+14	; 0x0e
    202a:	3f 85       	ldd	r19, Y+15	; 0x0f
    202c:	22 30       	cpi	r18, 0x02	; 2
    202e:	31 05       	cpc	r19, r1
    2030:	2c f4       	brge	.+10     	; 0x203c <Gpt_Init+0x410>
    2032:	8e 85       	ldd	r24, Y+14	; 0x0e
    2034:	9f 85       	ldd	r25, Y+15	; 0x0f
    2036:	00 97       	sbiw	r24, 0x00	; 0
    2038:	61 f0       	breq	.+24     	; 0x2052 <Gpt_Init+0x426>
    203a:	47 c0       	rjmp	.+142    	; 0x20ca <Gpt_Init+0x49e>
    203c:	2e 85       	ldd	r18, Y+14	; 0x0e
    203e:	3f 85       	ldd	r19, Y+15	; 0x0f
    2040:	22 30       	cpi	r18, 0x02	; 2
    2042:	31 05       	cpc	r19, r1
    2044:	21 f1       	breq	.+72     	; 0x208e <Gpt_Init+0x462>
    2046:	8e 85       	ldd	r24, Y+14	; 0x0e
    2048:	9f 85       	ldd	r25, Y+15	; 0x0f
    204a:	83 30       	cpi	r24, 0x03	; 3
    204c:	91 05       	cpc	r25, r1
    204e:	71 f1       	breq	.+92     	; 0x20ac <Gpt_Init+0x480>
    2050:	3c c0       	rjmp	.+120    	; 0x20ca <Gpt_Init+0x49e>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    2052:	af e4       	ldi	r26, 0x4F	; 79
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	ef e4       	ldi	r30, 0x4F	; 79
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	8f 7b       	andi	r24, 0xBF	; 191
    205e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    2060:	af e4       	ldi	r26, 0x4F	; 79
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	ef e4       	ldi	r30, 0x4F	; 79
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	8f 77       	andi	r24, 0x7F	; 127
    206c:	8c 93       	st	X, r24
    206e:	2e c0       	rjmp	.+92     	; 0x20cc <Gpt_Init+0x4a0>
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2070:	af e4       	ldi	r26, 0x4F	; 79
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	ef e4       	ldi	r30, 0x4F	; 79
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	80 64       	ori	r24, 0x40	; 64
    207c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    207e:	af e4       	ldi	r26, 0x4F	; 79
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	ef e4       	ldi	r30, 0x4F	; 79
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	8f 77       	andi	r24, 0x7F	; 127
    208a:	8c 93       	st	X, r24
    208c:	1f c0       	rjmp	.+62     	; 0x20cc <Gpt_Init+0x4a0>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    208e:	af e4       	ldi	r26, 0x4F	; 79
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	ef e4       	ldi	r30, 0x4F	; 79
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	80 64       	ori	r24, 0x40	; 64
    209a:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    209c:	af e4       	ldi	r26, 0x4F	; 79
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	ef e4       	ldi	r30, 0x4F	; 79
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	80 68       	ori	r24, 0x80	; 128
    20a8:	8c 93       	st	X, r24
    20aa:	10 c0       	rjmp	.+32     	; 0x20cc <Gpt_Init+0x4a0>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    20ac:	af e4       	ldi	r26, 0x4F	; 79
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	ef e4       	ldi	r30, 0x4F	; 79
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	8f 7b       	andi	r24, 0xBF	; 191
    20b8:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    20ba:	af e4       	ldi	r26, 0x4F	; 79
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	ef e4       	ldi	r30, 0x4F	; 79
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	80 68       	ori	r24, 0x80	; 128
    20c6:	8c 93       	st	X, r24
    20c8:	01 c0       	rjmp	.+2      	; 0x20cc <Gpt_Init+0x4a0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    20ca:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    20cc:	ea 81       	ldd	r30, Y+2	; 0x02
    20ce:	fb 81       	ldd	r31, Y+3	; 0x03
    20d0:	83 81       	ldd	r24, Z+3	; 0x03
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	3d 87       	std	Y+13, r19	; 0x0d
    20d8:	2c 87       	std	Y+12, r18	; 0x0c
    20da:	8c 85       	ldd	r24, Y+12	; 0x0c
    20dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    20de:	84 30       	cpi	r24, 0x04	; 4
    20e0:	91 05       	cpc	r25, r1
    20e2:	09 f4       	brne	.+2      	; 0x20e6 <Gpt_Init+0x4ba>
    20e4:	77 c0       	rjmp	.+238    	; 0x21d4 <Gpt_Init+0x5a8>
    20e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    20e8:	3d 85       	ldd	r19, Y+13	; 0x0d
    20ea:	25 30       	cpi	r18, 0x05	; 5
    20ec:	31 05       	cpc	r19, r1
    20ee:	8c f4       	brge	.+34     	; 0x2112 <Gpt_Init+0x4e6>
    20f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    20f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    20f4:	81 30       	cpi	r24, 0x01	; 1
    20f6:	91 05       	cpc	r25, r1
    20f8:	09 f4       	brne	.+2      	; 0x20fc <Gpt_Init+0x4d0>
    20fa:	40 c0       	rjmp	.+128    	; 0x217c <Gpt_Init+0x550>
    20fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    20fe:	3d 85       	ldd	r19, Y+13	; 0x0d
    2100:	22 30       	cpi	r18, 0x02	; 2
    2102:	31 05       	cpc	r19, r1
    2104:	09 f4       	brne	.+2      	; 0x2108 <Gpt_Init+0x4dc>
    2106:	50 c0       	rjmp	.+160    	; 0x21a8 <Gpt_Init+0x57c>
    2108:	8c 85       	ldd	r24, Y+12	; 0x0c
    210a:	9d 85       	ldd	r25, Y+13	; 0x0d
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	01 f1       	breq	.+64     	; 0x2150 <Gpt_Init+0x524>
    2110:	cf c0       	rjmp	.+414    	; 0x22b0 <Gpt_Init+0x684>
    2112:	2c 85       	ldd	r18, Y+12	; 0x0c
    2114:	3d 85       	ldd	r19, Y+13	; 0x0d
    2116:	27 30       	cpi	r18, 0x07	; 7
    2118:	31 05       	cpc	r19, r1
    211a:	09 f4       	brne	.+2      	; 0x211e <Gpt_Init+0x4f2>
    211c:	87 c0       	rjmp	.+270    	; 0x222c <Gpt_Init+0x600>
    211e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2120:	9d 85       	ldd	r25, Y+13	; 0x0d
    2122:	88 30       	cpi	r24, 0x08	; 8
    2124:	91 05       	cpc	r25, r1
    2126:	3c f4       	brge	.+14     	; 0x2136 <Gpt_Init+0x50a>
    2128:	2c 85       	ldd	r18, Y+12	; 0x0c
    212a:	3d 85       	ldd	r19, Y+13	; 0x0d
    212c:	26 30       	cpi	r18, 0x06	; 6
    212e:	31 05       	cpc	r19, r1
    2130:	09 f4       	brne	.+2      	; 0x2134 <Gpt_Init+0x508>
    2132:	66 c0       	rjmp	.+204    	; 0x2200 <Gpt_Init+0x5d4>
    2134:	bd c0       	rjmp	.+378    	; 0x22b0 <Gpt_Init+0x684>
    2136:	8c 85       	ldd	r24, Y+12	; 0x0c
    2138:	9d 85       	ldd	r25, Y+13	; 0x0d
    213a:	88 30       	cpi	r24, 0x08	; 8
    213c:	91 05       	cpc	r25, r1
    213e:	09 f4       	brne	.+2      	; 0x2142 <Gpt_Init+0x516>
    2140:	8b c0       	rjmp	.+278    	; 0x2258 <Gpt_Init+0x62c>
    2142:	2c 85       	ldd	r18, Y+12	; 0x0c
    2144:	3d 85       	ldd	r19, Y+13	; 0x0d
    2146:	29 30       	cpi	r18, 0x09	; 9
    2148:	31 05       	cpc	r19, r1
    214a:	09 f4       	brne	.+2      	; 0x214e <Gpt_Init+0x522>
    214c:	9b c0       	rjmp	.+310    	; 0x2284 <Gpt_Init+0x658>
    214e:	b0 c0       	rjmp	.+352    	; 0x22b0 <Gpt_Init+0x684>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2150:	ae e4       	ldi	r26, 0x4E	; 78
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	ee e4       	ldi	r30, 0x4E	; 78
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	8e 7f       	andi	r24, 0xFE	; 254
    215c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    215e:	ae e4       	ldi	r26, 0x4E	; 78
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	ee e4       	ldi	r30, 0x4E	; 78
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	8d 7f       	andi	r24, 0xFD	; 253
    216a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    216c:	ae e4       	ldi	r26, 0x4E	; 78
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	ee e4       	ldi	r30, 0x4E	; 78
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	8b 7f       	andi	r24, 0xFB	; 251
    2178:	8c 93       	st	X, r24
    217a:	a8 c3       	rjmp	.+1872   	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    217c:	ae e4       	ldi	r26, 0x4E	; 78
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	ee e4       	ldi	r30, 0x4E	; 78
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	81 60       	ori	r24, 0x01	; 1
    2188:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    218a:	ae e4       	ldi	r26, 0x4E	; 78
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	ee e4       	ldi	r30, 0x4E	; 78
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	8d 7f       	andi	r24, 0xFD	; 253
    2196:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2198:	ae e4       	ldi	r26, 0x4E	; 78
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	ee e4       	ldi	r30, 0x4E	; 78
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	8b 7f       	andi	r24, 0xFB	; 251
    21a4:	8c 93       	st	X, r24
    21a6:	92 c3       	rjmp	.+1828   	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    21a8:	ae e4       	ldi	r26, 0x4E	; 78
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	ee e4       	ldi	r30, 0x4E	; 78
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	8e 7f       	andi	r24, 0xFE	; 254
    21b4:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    21b6:	ae e4       	ldi	r26, 0x4E	; 78
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	ee e4       	ldi	r30, 0x4E	; 78
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	82 60       	ori	r24, 0x02	; 2
    21c2:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    21c4:	ae e4       	ldi	r26, 0x4E	; 78
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	ee e4       	ldi	r30, 0x4E	; 78
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	8b 7f       	andi	r24, 0xFB	; 251
    21d0:	8c 93       	st	X, r24
    21d2:	7c c3       	rjmp	.+1784   	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    21d4:	ae e4       	ldi	r26, 0x4E	; 78
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	ee e4       	ldi	r30, 0x4E	; 78
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	81 60       	ori	r24, 0x01	; 1
    21e0:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    21e2:	ae e4       	ldi	r26, 0x4E	; 78
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	ee e4       	ldi	r30, 0x4E	; 78
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	82 60       	ori	r24, 0x02	; 2
    21ee:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    21f0:	ae e4       	ldi	r26, 0x4E	; 78
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	ee e4       	ldi	r30, 0x4E	; 78
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	8b 7f       	andi	r24, 0xFB	; 251
    21fc:	8c 93       	st	X, r24
    21fe:	66 c3       	rjmp	.+1740   	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2200:	ae e4       	ldi	r26, 0x4E	; 78
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	ee e4       	ldi	r30, 0x4E	; 78
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	8e 7f       	andi	r24, 0xFE	; 254
    220c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    220e:	ae e4       	ldi	r26, 0x4E	; 78
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	ee e4       	ldi	r30, 0x4E	; 78
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	8d 7f       	andi	r24, 0xFD	; 253
    221a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    221c:	ae e4       	ldi	r26, 0x4E	; 78
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	ee e4       	ldi	r30, 0x4E	; 78
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	84 60       	ori	r24, 0x04	; 4
    2228:	8c 93       	st	X, r24
    222a:	50 c3       	rjmp	.+1696   	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    222c:	ae e4       	ldi	r26, 0x4E	; 78
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	ee e4       	ldi	r30, 0x4E	; 78
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	81 60       	ori	r24, 0x01	; 1
    2238:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    223a:	ae e4       	ldi	r26, 0x4E	; 78
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	ee e4       	ldi	r30, 0x4E	; 78
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	8d 7f       	andi	r24, 0xFD	; 253
    2246:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2248:	ae e4       	ldi	r26, 0x4E	; 78
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	ee e4       	ldi	r30, 0x4E	; 78
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	84 60       	ori	r24, 0x04	; 4
    2254:	8c 93       	st	X, r24
    2256:	3a c3       	rjmp	.+1652   	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2258:	ae e4       	ldi	r26, 0x4E	; 78
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	ee e4       	ldi	r30, 0x4E	; 78
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	8e 7f       	andi	r24, 0xFE	; 254
    2264:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2266:	ae e4       	ldi	r26, 0x4E	; 78
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	ee e4       	ldi	r30, 0x4E	; 78
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	82 60       	ori	r24, 0x02	; 2
    2272:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2274:	ae e4       	ldi	r26, 0x4E	; 78
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	ee e4       	ldi	r30, 0x4E	; 78
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	84 60       	ori	r24, 0x04	; 4
    2280:	8c 93       	st	X, r24
    2282:	24 c3       	rjmp	.+1608   	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2284:	ae e4       	ldi	r26, 0x4E	; 78
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	ee e4       	ldi	r30, 0x4E	; 78
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	81 60       	ori	r24, 0x01	; 1
    2290:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2292:	ae e4       	ldi	r26, 0x4E	; 78
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	ee e4       	ldi	r30, 0x4E	; 78
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	82 60       	ori	r24, 0x02	; 2
    229e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    22a0:	ae e4       	ldi	r26, 0x4E	; 78
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	ee e4       	ldi	r30, 0x4E	; 78
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	84 60       	ori	r24, 0x04	; 4
    22ac:	8c 93       	st	X, r24
    22ae:	0e c3       	rjmp	.+1564   	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    22b0:	19 82       	std	Y+1, r1	; 0x01
    22b2:	0c c3       	rjmp	.+1560   	; 0x28cc <Gpt_Init+0xca0>
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    22b4:	ea 81       	ldd	r30, Y+2	; 0x02
    22b6:	fb 81       	ldd	r31, Y+3	; 0x03
    22b8:	81 81       	ldd	r24, Z+1	; 0x01
    22ba:	88 23       	and	r24, r24
    22bc:	e9 f4       	brne	.+58     	; 0x22f8 <Gpt_Init+0x6cc>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    22be:	af e4       	ldi	r26, 0x4F	; 79
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	ef e4       	ldi	r30, 0x4F	; 79
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	8e 7f       	andi	r24, 0xFE	; 254
    22ca:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    22cc:	af e4       	ldi	r26, 0x4F	; 79
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	ef e4       	ldi	r30, 0x4F	; 79
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	8d 7f       	andi	r24, 0xFD	; 253
    22d8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM12);
    22da:	ae e4       	ldi	r26, 0x4E	; 78
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	ee e4       	ldi	r30, 0x4E	; 78
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	87 7f       	andi	r24, 0xF7	; 247
    22e6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    22e8:	ae e4       	ldi	r26, 0x4E	; 78
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	ee e4       	ldi	r30, 0x4E	; 78
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	8f 7e       	andi	r24, 0xEF	; 239
    22f4:	8c 93       	st	X, r24
    22f6:	23 c0       	rjmp	.+70     	; 0x233e <Gpt_Init+0x712>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    22f8:	ea 81       	ldd	r30, Y+2	; 0x02
    22fa:	fb 81       	ldd	r31, Y+3	; 0x03
    22fc:	81 81       	ldd	r24, Z+1	; 0x01
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	e9 f4       	brne	.+58     	; 0x233c <Gpt_Init+0x710>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2302:	af e4       	ldi	r26, 0x4F	; 79
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	ef e4       	ldi	r30, 0x4F	; 79
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	8e 7f       	andi	r24, 0xFE	; 254
    230e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2310:	af e4       	ldi	r26, 0x4F	; 79
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	ef e4       	ldi	r30, 0x4F	; 79
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	8d 7f       	andi	r24, 0xFD	; 253
    231c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    231e:	ae e4       	ldi	r26, 0x4E	; 78
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	ee e4       	ldi	r30, 0x4E	; 78
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	88 60       	ori	r24, 0x08	; 8
    232a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    232c:	ae e4       	ldi	r26, 0x4E	; 78
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	ee e4       	ldi	r30, 0x4E	; 78
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	8f 7e       	andi	r24, 0xEF	; 239
    2338:	8c 93       	st	X, r24
    233a:	01 c0       	rjmp	.+2      	; 0x233e <Gpt_Init+0x712>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    233c:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    233e:	ea 81       	ldd	r30, Y+2	; 0x02
    2340:	fb 81       	ldd	r31, Y+3	; 0x03
    2342:	82 81       	ldd	r24, Z+2	; 0x02
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	3b 87       	std	Y+11, r19	; 0x0b
    234a:	2a 87       	std	Y+10, r18	; 0x0a
    234c:	8a 85       	ldd	r24, Y+10	; 0x0a
    234e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2350:	81 30       	cpi	r24, 0x01	; 1
    2352:	91 05       	cpc	r25, r1
    2354:	21 f1       	breq	.+72     	; 0x239e <Gpt_Init+0x772>
    2356:	2a 85       	ldd	r18, Y+10	; 0x0a
    2358:	3b 85       	ldd	r19, Y+11	; 0x0b
    235a:	22 30       	cpi	r18, 0x02	; 2
    235c:	31 05       	cpc	r19, r1
    235e:	2c f4       	brge	.+10     	; 0x236a <Gpt_Init+0x73e>
    2360:	8a 85       	ldd	r24, Y+10	; 0x0a
    2362:	9b 85       	ldd	r25, Y+11	; 0x0b
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	61 f0       	breq	.+24     	; 0x2380 <Gpt_Init+0x754>
    2368:	47 c0       	rjmp	.+142    	; 0x23f8 <Gpt_Init+0x7cc>
    236a:	2a 85       	ldd	r18, Y+10	; 0x0a
    236c:	3b 85       	ldd	r19, Y+11	; 0x0b
    236e:	22 30       	cpi	r18, 0x02	; 2
    2370:	31 05       	cpc	r19, r1
    2372:	21 f1       	breq	.+72     	; 0x23bc <Gpt_Init+0x790>
    2374:	8a 85       	ldd	r24, Y+10	; 0x0a
    2376:	9b 85       	ldd	r25, Y+11	; 0x0b
    2378:	83 30       	cpi	r24, 0x03	; 3
    237a:	91 05       	cpc	r25, r1
    237c:	71 f1       	breq	.+92     	; 0x23da <Gpt_Init+0x7ae>
    237e:	3c c0       	rjmp	.+120    	; 0x23f8 <Gpt_Init+0x7cc>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    2380:	af e4       	ldi	r26, 0x4F	; 79
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	ef e4       	ldi	r30, 0x4F	; 79
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	8f 7e       	andi	r24, 0xEF	; 239
    238c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    238e:	af e4       	ldi	r26, 0x4F	; 79
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	ef e4       	ldi	r30, 0x4F	; 79
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	8f 7d       	andi	r24, 0xDF	; 223
    239a:	8c 93       	st	X, r24
    239c:	2e c0       	rjmp	.+92     	; 0x23fa <Gpt_Init+0x7ce>
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    239e:	af e4       	ldi	r26, 0x4F	; 79
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	ef e4       	ldi	r30, 0x4F	; 79
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	80 61       	ori	r24, 0x10	; 16
    23aa:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    23ac:	af e4       	ldi	r26, 0x4F	; 79
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	ef e4       	ldi	r30, 0x4F	; 79
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	8f 7d       	andi	r24, 0xDF	; 223
    23b8:	8c 93       	st	X, r24
    23ba:	1f c0       	rjmp	.+62     	; 0x23fa <Gpt_Init+0x7ce>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    23bc:	af e4       	ldi	r26, 0x4F	; 79
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	ef e4       	ldi	r30, 0x4F	; 79
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	80 61       	ori	r24, 0x10	; 16
    23c8:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    23ca:	af e4       	ldi	r26, 0x4F	; 79
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	ef e4       	ldi	r30, 0x4F	; 79
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	80 62       	ori	r24, 0x20	; 32
    23d6:	8c 93       	st	X, r24
    23d8:	10 c0       	rjmp	.+32     	; 0x23fa <Gpt_Init+0x7ce>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    23da:	af e4       	ldi	r26, 0x4F	; 79
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	ef e4       	ldi	r30, 0x4F	; 79
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	8f 7e       	andi	r24, 0xEF	; 239
    23e6:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    23e8:	af e4       	ldi	r26, 0x4F	; 79
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	ef e4       	ldi	r30, 0x4F	; 79
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	80 62       	ori	r24, 0x20	; 32
    23f4:	8c 93       	st	X, r24
    23f6:	01 c0       	rjmp	.+2      	; 0x23fa <Gpt_Init+0x7ce>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    23f8:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    23fa:	ea 81       	ldd	r30, Y+2	; 0x02
    23fc:	fb 81       	ldd	r31, Y+3	; 0x03
    23fe:	83 81       	ldd	r24, Z+3	; 0x03
    2400:	28 2f       	mov	r18, r24
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	39 87       	std	Y+9, r19	; 0x09
    2406:	28 87       	std	Y+8, r18	; 0x08
    2408:	88 85       	ldd	r24, Y+8	; 0x08
    240a:	99 85       	ldd	r25, Y+9	; 0x09
    240c:	84 30       	cpi	r24, 0x04	; 4
    240e:	91 05       	cpc	r25, r1
    2410:	09 f4       	brne	.+2      	; 0x2414 <Gpt_Init+0x7e8>
    2412:	77 c0       	rjmp	.+238    	; 0x2502 <Gpt_Init+0x8d6>
    2414:	28 85       	ldd	r18, Y+8	; 0x08
    2416:	39 85       	ldd	r19, Y+9	; 0x09
    2418:	25 30       	cpi	r18, 0x05	; 5
    241a:	31 05       	cpc	r19, r1
    241c:	8c f4       	brge	.+34     	; 0x2440 <Gpt_Init+0x814>
    241e:	88 85       	ldd	r24, Y+8	; 0x08
    2420:	99 85       	ldd	r25, Y+9	; 0x09
    2422:	81 30       	cpi	r24, 0x01	; 1
    2424:	91 05       	cpc	r25, r1
    2426:	09 f4       	brne	.+2      	; 0x242a <Gpt_Init+0x7fe>
    2428:	40 c0       	rjmp	.+128    	; 0x24aa <Gpt_Init+0x87e>
    242a:	28 85       	ldd	r18, Y+8	; 0x08
    242c:	39 85       	ldd	r19, Y+9	; 0x09
    242e:	22 30       	cpi	r18, 0x02	; 2
    2430:	31 05       	cpc	r19, r1
    2432:	09 f4       	brne	.+2      	; 0x2436 <Gpt_Init+0x80a>
    2434:	50 c0       	rjmp	.+160    	; 0x24d6 <Gpt_Init+0x8aa>
    2436:	88 85       	ldd	r24, Y+8	; 0x08
    2438:	99 85       	ldd	r25, Y+9	; 0x09
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	01 f1       	breq	.+64     	; 0x247e <Gpt_Init+0x852>
    243e:	cf c0       	rjmp	.+414    	; 0x25de <Gpt_Init+0x9b2>
    2440:	28 85       	ldd	r18, Y+8	; 0x08
    2442:	39 85       	ldd	r19, Y+9	; 0x09
    2444:	27 30       	cpi	r18, 0x07	; 7
    2446:	31 05       	cpc	r19, r1
    2448:	09 f4       	brne	.+2      	; 0x244c <Gpt_Init+0x820>
    244a:	87 c0       	rjmp	.+270    	; 0x255a <Gpt_Init+0x92e>
    244c:	88 85       	ldd	r24, Y+8	; 0x08
    244e:	99 85       	ldd	r25, Y+9	; 0x09
    2450:	88 30       	cpi	r24, 0x08	; 8
    2452:	91 05       	cpc	r25, r1
    2454:	3c f4       	brge	.+14     	; 0x2464 <Gpt_Init+0x838>
    2456:	28 85       	ldd	r18, Y+8	; 0x08
    2458:	39 85       	ldd	r19, Y+9	; 0x09
    245a:	26 30       	cpi	r18, 0x06	; 6
    245c:	31 05       	cpc	r19, r1
    245e:	09 f4       	brne	.+2      	; 0x2462 <Gpt_Init+0x836>
    2460:	66 c0       	rjmp	.+204    	; 0x252e <Gpt_Init+0x902>
    2462:	bd c0       	rjmp	.+378    	; 0x25de <Gpt_Init+0x9b2>
    2464:	88 85       	ldd	r24, Y+8	; 0x08
    2466:	99 85       	ldd	r25, Y+9	; 0x09
    2468:	88 30       	cpi	r24, 0x08	; 8
    246a:	91 05       	cpc	r25, r1
    246c:	09 f4       	brne	.+2      	; 0x2470 <Gpt_Init+0x844>
    246e:	8b c0       	rjmp	.+278    	; 0x2586 <Gpt_Init+0x95a>
    2470:	28 85       	ldd	r18, Y+8	; 0x08
    2472:	39 85       	ldd	r19, Y+9	; 0x09
    2474:	29 30       	cpi	r18, 0x09	; 9
    2476:	31 05       	cpc	r19, r1
    2478:	09 f4       	brne	.+2      	; 0x247c <Gpt_Init+0x850>
    247a:	9b c0       	rjmp	.+310    	; 0x25b2 <Gpt_Init+0x986>
    247c:	b0 c0       	rjmp	.+352    	; 0x25de <Gpt_Init+0x9b2>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    247e:	ae e4       	ldi	r26, 0x4E	; 78
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	ee e4       	ldi	r30, 0x4E	; 78
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	8e 7f       	andi	r24, 0xFE	; 254
    248a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    248c:	ae e4       	ldi	r26, 0x4E	; 78
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	ee e4       	ldi	r30, 0x4E	; 78
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	8d 7f       	andi	r24, 0xFD	; 253
    2498:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    249a:	ae e4       	ldi	r26, 0x4E	; 78
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	ee e4       	ldi	r30, 0x4E	; 78
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	8b 7f       	andi	r24, 0xFB	; 251
    24a6:	8c 93       	st	X, r24
    24a8:	11 c2       	rjmp	.+1058   	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    24aa:	ae e4       	ldi	r26, 0x4E	; 78
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	ee e4       	ldi	r30, 0x4E	; 78
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	81 60       	ori	r24, 0x01	; 1
    24b6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    24b8:	ae e4       	ldi	r26, 0x4E	; 78
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	ee e4       	ldi	r30, 0x4E	; 78
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	8d 7f       	andi	r24, 0xFD	; 253
    24c4:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    24c6:	ae e4       	ldi	r26, 0x4E	; 78
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	ee e4       	ldi	r30, 0x4E	; 78
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	8b 7f       	andi	r24, 0xFB	; 251
    24d2:	8c 93       	st	X, r24
    24d4:	fb c1       	rjmp	.+1014   	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    24d6:	ae e4       	ldi	r26, 0x4E	; 78
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	ee e4       	ldi	r30, 0x4E	; 78
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	8e 7f       	andi	r24, 0xFE	; 254
    24e2:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    24e4:	ae e4       	ldi	r26, 0x4E	; 78
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	ee e4       	ldi	r30, 0x4E	; 78
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	82 60       	ori	r24, 0x02	; 2
    24f0:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    24f2:	ae e4       	ldi	r26, 0x4E	; 78
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	ee e4       	ldi	r30, 0x4E	; 78
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	8b 7f       	andi	r24, 0xFB	; 251
    24fe:	8c 93       	st	X, r24
    2500:	e5 c1       	rjmp	.+970    	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2502:	ae e4       	ldi	r26, 0x4E	; 78
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	ee e4       	ldi	r30, 0x4E	; 78
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	81 60       	ori	r24, 0x01	; 1
    250e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2510:	ae e4       	ldi	r26, 0x4E	; 78
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	ee e4       	ldi	r30, 0x4E	; 78
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	82 60       	ori	r24, 0x02	; 2
    251c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    251e:	ae e4       	ldi	r26, 0x4E	; 78
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	ee e4       	ldi	r30, 0x4E	; 78
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	8b 7f       	andi	r24, 0xFB	; 251
    252a:	8c 93       	st	X, r24
    252c:	cf c1       	rjmp	.+926    	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    252e:	ae e4       	ldi	r26, 0x4E	; 78
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	ee e4       	ldi	r30, 0x4E	; 78
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	8e 7f       	andi	r24, 0xFE	; 254
    253a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    253c:	ae e4       	ldi	r26, 0x4E	; 78
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	ee e4       	ldi	r30, 0x4E	; 78
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	8d 7f       	andi	r24, 0xFD	; 253
    2548:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    254a:	ae e4       	ldi	r26, 0x4E	; 78
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	ee e4       	ldi	r30, 0x4E	; 78
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	84 60       	ori	r24, 0x04	; 4
    2556:	8c 93       	st	X, r24
    2558:	b9 c1       	rjmp	.+882    	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    255a:	ae e4       	ldi	r26, 0x4E	; 78
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	ee e4       	ldi	r30, 0x4E	; 78
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	81 60       	ori	r24, 0x01	; 1
    2566:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    2568:	ae e4       	ldi	r26, 0x4E	; 78
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	ee e4       	ldi	r30, 0x4E	; 78
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	8d 7f       	andi	r24, 0xFD	; 253
    2574:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2576:	ae e4       	ldi	r26, 0x4E	; 78
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	ee e4       	ldi	r30, 0x4E	; 78
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	84 60       	ori	r24, 0x04	; 4
    2582:	8c 93       	st	X, r24
    2584:	a3 c1       	rjmp	.+838    	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2586:	ae e4       	ldi	r26, 0x4E	; 78
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	ee e4       	ldi	r30, 0x4E	; 78
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	8e 7f       	andi	r24, 0xFE	; 254
    2592:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2594:	ae e4       	ldi	r26, 0x4E	; 78
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	ee e4       	ldi	r30, 0x4E	; 78
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	82 60       	ori	r24, 0x02	; 2
    25a0:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    25a2:	ae e4       	ldi	r26, 0x4E	; 78
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	ee e4       	ldi	r30, 0x4E	; 78
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	84 60       	ori	r24, 0x04	; 4
    25ae:	8c 93       	st	X, r24
    25b0:	8d c1       	rjmp	.+794    	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    25b2:	ae e4       	ldi	r26, 0x4E	; 78
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	ee e4       	ldi	r30, 0x4E	; 78
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	81 60       	ori	r24, 0x01	; 1
    25be:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    25c0:	ae e4       	ldi	r26, 0x4E	; 78
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	ee e4       	ldi	r30, 0x4E	; 78
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	82 60       	ori	r24, 0x02	; 2
    25cc:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    25ce:	ae e4       	ldi	r26, 0x4E	; 78
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	ee e4       	ldi	r30, 0x4E	; 78
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	84 60       	ori	r24, 0x04	; 4
    25da:	8c 93       	st	X, r24
    25dc:	77 c1       	rjmp	.+750    	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    25de:	19 82       	std	Y+1, r1	; 0x01
    25e0:	75 c1       	rjmp	.+746    	; 0x28cc <Gpt_Init+0xca0>
        }
        break;

    case GPT_CHANNEL_TIMER2:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    25e2:	ea 81       	ldd	r30, Y+2	; 0x02
    25e4:	fb 81       	ldd	r31, Y+3	; 0x03
    25e6:	81 81       	ldd	r24, Z+1	; 0x01
    25e8:	88 23       	and	r24, r24
    25ea:	79 f4       	brne	.+30     	; 0x260a <Gpt_Init+0x9de>
        {
            CLR_BIT(TCCR2,TCCR2_COM20);
    25ec:	a5 e4       	ldi	r26, 0x45	; 69
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	e5 e4       	ldi	r30, 0x45	; 69
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	8f 7e       	andi	r24, 0xEF	; 239
    25f8:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_COM21);
    25fa:	a5 e4       	ldi	r26, 0x45	; 69
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e5 e4       	ldi	r30, 0x45	; 69
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	8f 7d       	andi	r24, 0xDF	; 223
    2606:	8c 93       	st	X, r24
    2608:	15 c0       	rjmp	.+42     	; 0x2634 <Gpt_Init+0xa08>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    260a:	ea 81       	ldd	r30, Y+2	; 0x02
    260c:	fb 81       	ldd	r31, Y+3	; 0x03
    260e:	81 81       	ldd	r24, Z+1	; 0x01
    2610:	81 30       	cpi	r24, 0x01	; 1
    2612:	79 f4       	brne	.+30     	; 0x2632 <Gpt_Init+0xa06>
        {
            CLR_BIT(TCCR2,TCCR2_COM20);
    2614:	a5 e4       	ldi	r26, 0x45	; 69
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	e5 e4       	ldi	r30, 0x45	; 69
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	8f 7e       	andi	r24, 0xEF	; 239
    2620:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_COM21);
    2622:	a5 e4       	ldi	r26, 0x45	; 69
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	e5 e4       	ldi	r30, 0x45	; 69
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	80 62       	ori	r24, 0x20	; 32
    262e:	8c 93       	st	X, r24
    2630:	01 c0       	rjmp	.+2      	; 0x2634 <Gpt_Init+0xa08>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    2632:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    2634:	ea 81       	ldd	r30, Y+2	; 0x02
    2636:	fb 81       	ldd	r31, Y+3	; 0x03
    2638:	82 81       	ldd	r24, Z+2	; 0x02
    263a:	28 2f       	mov	r18, r24
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	3f 83       	std	Y+7, r19	; 0x07
    2640:	2e 83       	std	Y+6, r18	; 0x06
    2642:	8e 81       	ldd	r24, Y+6	; 0x06
    2644:	9f 81       	ldd	r25, Y+7	; 0x07
    2646:	81 30       	cpi	r24, 0x01	; 1
    2648:	91 05       	cpc	r25, r1
    264a:	21 f1       	breq	.+72     	; 0x2694 <Gpt_Init+0xa68>
    264c:	2e 81       	ldd	r18, Y+6	; 0x06
    264e:	3f 81       	ldd	r19, Y+7	; 0x07
    2650:	22 30       	cpi	r18, 0x02	; 2
    2652:	31 05       	cpc	r19, r1
    2654:	2c f4       	brge	.+10     	; 0x2660 <Gpt_Init+0xa34>
    2656:	8e 81       	ldd	r24, Y+6	; 0x06
    2658:	9f 81       	ldd	r25, Y+7	; 0x07
    265a:	00 97       	sbiw	r24, 0x00	; 0
    265c:	61 f0       	breq	.+24     	; 0x2676 <Gpt_Init+0xa4a>
    265e:	47 c0       	rjmp	.+142    	; 0x26ee <Gpt_Init+0xac2>
    2660:	2e 81       	ldd	r18, Y+6	; 0x06
    2662:	3f 81       	ldd	r19, Y+7	; 0x07
    2664:	22 30       	cpi	r18, 0x02	; 2
    2666:	31 05       	cpc	r19, r1
    2668:	21 f1       	breq	.+72     	; 0x26b2 <Gpt_Init+0xa86>
    266a:	8e 81       	ldd	r24, Y+6	; 0x06
    266c:	9f 81       	ldd	r25, Y+7	; 0x07
    266e:	83 30       	cpi	r24, 0x03	; 3
    2670:	91 05       	cpc	r25, r1
    2672:	71 f1       	breq	.+92     	; 0x26d0 <Gpt_Init+0xaa4>
    2674:	3c c0       	rjmp	.+120    	; 0x26ee <Gpt_Init+0xac2>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR2,TCCR2_COM20);
    2676:	a5 e4       	ldi	r26, 0x45	; 69
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	e5 e4       	ldi	r30, 0x45	; 69
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	8f 7e       	andi	r24, 0xEF	; 239
    2682:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_COM21);
    2684:	a5 e4       	ldi	r26, 0x45	; 69
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	e5 e4       	ldi	r30, 0x45	; 69
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	8f 7d       	andi	r24, 0xDF	; 223
    2690:	8c 93       	st	X, r24
    2692:	2e c0       	rjmp	.+92     	; 0x26f0 <Gpt_Init+0xac4>
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR2,TCCR2_COM20);
    2694:	a5 e4       	ldi	r26, 0x45	; 69
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	e5 e4       	ldi	r30, 0x45	; 69
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	80 61       	ori	r24, 0x10	; 16
    26a0:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_COM21);
    26a2:	a5 e4       	ldi	r26, 0x45	; 69
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	e5 e4       	ldi	r30, 0x45	; 69
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	8f 7d       	andi	r24, 0xDF	; 223
    26ae:	8c 93       	st	X, r24
    26b0:	1f c0       	rjmp	.+62     	; 0x26f0 <Gpt_Init+0xac4>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR2,TCCR2_COM20);
    26b2:	a5 e4       	ldi	r26, 0x45	; 69
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	e5 e4       	ldi	r30, 0x45	; 69
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	80 81       	ld	r24, Z
    26bc:	80 61       	ori	r24, 0x10	; 16
    26be:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_COM21);
    26c0:	a5 e4       	ldi	r26, 0x45	; 69
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	e5 e4       	ldi	r30, 0x45	; 69
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	80 62       	ori	r24, 0x20	; 32
    26cc:	8c 93       	st	X, r24
    26ce:	10 c0       	rjmp	.+32     	; 0x26f0 <Gpt_Init+0xac4>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR2,TCCR2_COM20);
    26d0:	a5 e4       	ldi	r26, 0x45	; 69
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	e5 e4       	ldi	r30, 0x45	; 69
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	8f 7e       	andi	r24, 0xEF	; 239
    26dc:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_COM21);
    26de:	a5 e4       	ldi	r26, 0x45	; 69
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	e5 e4       	ldi	r30, 0x45	; 69
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	80 62       	ori	r24, 0x20	; 32
    26ea:	8c 93       	st	X, r24
    26ec:	01 c0       	rjmp	.+2      	; 0x26f0 <Gpt_Init+0xac4>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    26ee:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    26f0:	ea 81       	ldd	r30, Y+2	; 0x02
    26f2:	fb 81       	ldd	r31, Y+3	; 0x03
    26f4:	83 81       	ldd	r24, Z+3	; 0x03
    26f6:	28 2f       	mov	r18, r24
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	3d 83       	std	Y+5, r19	; 0x05
    26fc:	2c 83       	std	Y+4, r18	; 0x04
    26fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2700:	9d 81       	ldd	r25, Y+5	; 0x05
    2702:	83 30       	cpi	r24, 0x03	; 3
    2704:	91 05       	cpc	r25, r1
    2706:	09 f4       	brne	.+2      	; 0x270a <Gpt_Init+0xade>
    2708:	70 c0       	rjmp	.+224    	; 0x27ea <Gpt_Init+0xbbe>
    270a:	2c 81       	ldd	r18, Y+4	; 0x04
    270c:	3d 81       	ldd	r19, Y+5	; 0x05
    270e:	24 30       	cpi	r18, 0x04	; 4
    2710:	31 05       	cpc	r19, r1
    2712:	84 f4       	brge	.+32     	; 0x2734 <Gpt_Init+0xb08>
    2714:	8c 81       	ldd	r24, Y+4	; 0x04
    2716:	9d 81       	ldd	r25, Y+5	; 0x05
    2718:	81 30       	cpi	r24, 0x01	; 1
    271a:	91 05       	cpc	r25, r1
    271c:	d1 f1       	breq	.+116    	; 0x2792 <Gpt_Init+0xb66>
    271e:	2c 81       	ldd	r18, Y+4	; 0x04
    2720:	3d 81       	ldd	r19, Y+5	; 0x05
    2722:	22 30       	cpi	r18, 0x02	; 2
    2724:	31 05       	cpc	r19, r1
    2726:	0c f0       	brlt	.+2      	; 0x272a <Gpt_Init+0xafe>
    2728:	4a c0       	rjmp	.+148    	; 0x27be <Gpt_Init+0xb92>
    272a:	8c 81       	ldd	r24, Y+4	; 0x04
    272c:	9d 81       	ldd	r25, Y+5	; 0x05
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	d1 f0       	breq	.+52     	; 0x2766 <Gpt_Init+0xb3a>
    2732:	c9 c0       	rjmp	.+402    	; 0x28c6 <Gpt_Init+0xc9a>
    2734:	2c 81       	ldd	r18, Y+4	; 0x04
    2736:	3d 81       	ldd	r19, Y+5	; 0x05
    2738:	25 30       	cpi	r18, 0x05	; 5
    273a:	31 05       	cpc	r19, r1
    273c:	09 f4       	brne	.+2      	; 0x2740 <Gpt_Init+0xb14>
    273e:	81 c0       	rjmp	.+258    	; 0x2842 <Gpt_Init+0xc16>
    2740:	8c 81       	ldd	r24, Y+4	; 0x04
    2742:	9d 81       	ldd	r25, Y+5	; 0x05
    2744:	85 30       	cpi	r24, 0x05	; 5
    2746:	91 05       	cpc	r25, r1
    2748:	0c f4       	brge	.+2      	; 0x274c <Gpt_Init+0xb20>
    274a:	65 c0       	rjmp	.+202    	; 0x2816 <Gpt_Init+0xbea>
    274c:	2c 81       	ldd	r18, Y+4	; 0x04
    274e:	3d 81       	ldd	r19, Y+5	; 0x05
    2750:	26 30       	cpi	r18, 0x06	; 6
    2752:	31 05       	cpc	r19, r1
    2754:	09 f4       	brne	.+2      	; 0x2758 <Gpt_Init+0xb2c>
    2756:	8b c0       	rjmp	.+278    	; 0x286e <Gpt_Init+0xc42>
    2758:	8c 81       	ldd	r24, Y+4	; 0x04
    275a:	9d 81       	ldd	r25, Y+5	; 0x05
    275c:	87 30       	cpi	r24, 0x07	; 7
    275e:	91 05       	cpc	r25, r1
    2760:	09 f4       	brne	.+2      	; 0x2764 <Gpt_Init+0xb38>
    2762:	9b c0       	rjmp	.+310    	; 0x289a <Gpt_Init+0xc6e>
    2764:	b0 c0       	rjmp	.+352    	; 0x28c6 <Gpt_Init+0xc9a>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR2,TCCR2_CS20);
    2766:	a5 e4       	ldi	r26, 0x45	; 69
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	e5 e4       	ldi	r30, 0x45	; 69
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	80 81       	ld	r24, Z
    2770:	8e 7f       	andi	r24, 0xFE	; 254
    2772:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS21);
    2774:	a5 e4       	ldi	r26, 0x45	; 69
    2776:	b0 e0       	ldi	r27, 0x00	; 0
    2778:	e5 e4       	ldi	r30, 0x45	; 69
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	80 81       	ld	r24, Z
    277e:	8d 7f       	andi	r24, 0xFD	; 253
    2780:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS22);
    2782:	a5 e4       	ldi	r26, 0x45	; 69
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	e5 e4       	ldi	r30, 0x45	; 69
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	8b 7f       	andi	r24, 0xFB	; 251
    278e:	8c 93       	st	X, r24
    2790:	9d c0       	rjmp	.+314    	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR2,TCCR2_CS20);
    2792:	a5 e4       	ldi	r26, 0x45	; 69
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	e5 e4       	ldi	r30, 0x45	; 69
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	81 60       	ori	r24, 0x01	; 1
    279e:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS21);
    27a0:	a5 e4       	ldi	r26, 0x45	; 69
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	e5 e4       	ldi	r30, 0x45	; 69
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	8d 7f       	andi	r24, 0xFD	; 253
    27ac:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS22);
    27ae:	a5 e4       	ldi	r26, 0x45	; 69
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e5 e4       	ldi	r30, 0x45	; 69
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	8b 7f       	andi	r24, 0xFB	; 251
    27ba:	8c 93       	st	X, r24
    27bc:	87 c0       	rjmp	.+270    	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR2,TCCR2_CS20);
    27be:	a5 e4       	ldi	r26, 0x45	; 69
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	e5 e4       	ldi	r30, 0x45	; 69
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	8e 7f       	andi	r24, 0xFE	; 254
    27ca:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS21);
    27cc:	a5 e4       	ldi	r26, 0x45	; 69
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	e5 e4       	ldi	r30, 0x45	; 69
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	82 60       	ori	r24, 0x02	; 2
    27d8:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS22);
    27da:	a5 e4       	ldi	r26, 0x45	; 69
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	e5 e4       	ldi	r30, 0x45	; 69
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	8b 7f       	andi	r24, 0xFB	; 251
    27e6:	8c 93       	st	X, r24
    27e8:	71 c0       	rjmp	.+226    	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_32:
            SET_BIT(TCCR2,TCCR2_CS20);
    27ea:	a5 e4       	ldi	r26, 0x45	; 69
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	e5 e4       	ldi	r30, 0x45	; 69
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	81 60       	ori	r24, 0x01	; 1
    27f6:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS21);
    27f8:	a5 e4       	ldi	r26, 0x45	; 69
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	e5 e4       	ldi	r30, 0x45	; 69
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	82 60       	ori	r24, 0x02	; 2
    2804:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS22);
    2806:	a5 e4       	ldi	r26, 0x45	; 69
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	e5 e4       	ldi	r30, 0x45	; 69
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	8b 7f       	andi	r24, 0xFB	; 251
    2812:	8c 93       	st	X, r24
    2814:	5b c0       	rjmp	.+182    	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_64:
            CLR_BIT(TCCR2,TCCR2_CS20);
    2816:	a5 e4       	ldi	r26, 0x45	; 69
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	e5 e4       	ldi	r30, 0x45	; 69
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	8e 7f       	andi	r24, 0xFE	; 254
    2822:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS21);
    2824:	a5 e4       	ldi	r26, 0x45	; 69
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	e5 e4       	ldi	r30, 0x45	; 69
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	8d 7f       	andi	r24, 0xFD	; 253
    2830:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS22);
    2832:	a5 e4       	ldi	r26, 0x45	; 69
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	e5 e4       	ldi	r30, 0x45	; 69
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	84 60       	ori	r24, 0x04	; 4
    283e:	8c 93       	st	X, r24
    2840:	45 c0       	rjmp	.+138    	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_128:
            SET_BIT(TCCR2,TCCR2_CS20);
    2842:	a5 e4       	ldi	r26, 0x45	; 69
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	e5 e4       	ldi	r30, 0x45	; 69
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	80 81       	ld	r24, Z
    284c:	81 60       	ori	r24, 0x01	; 1
    284e:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS21);
    2850:	a5 e4       	ldi	r26, 0x45	; 69
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	e5 e4       	ldi	r30, 0x45	; 69
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z
    285a:	8d 7f       	andi	r24, 0xFD	; 253
    285c:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS22);
    285e:	a5 e4       	ldi	r26, 0x45	; 69
    2860:	b0 e0       	ldi	r27, 0x00	; 0
    2862:	e5 e4       	ldi	r30, 0x45	; 69
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	80 81       	ld	r24, Z
    2868:	84 60       	ori	r24, 0x04	; 4
    286a:	8c 93       	st	X, r24
    286c:	2f c0       	rjmp	.+94     	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR2,TCCR2_CS20);
    286e:	a5 e4       	ldi	r26, 0x45	; 69
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	e5 e4       	ldi	r30, 0x45	; 69
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	8e 7f       	andi	r24, 0xFE	; 254
    287a:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS21);
    287c:	a5 e4       	ldi	r26, 0x45	; 69
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e5 e4       	ldi	r30, 0x45	; 69
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	82 60       	ori	r24, 0x02	; 2
    2888:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS22);
    288a:	a5 e4       	ldi	r26, 0x45	; 69
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	e5 e4       	ldi	r30, 0x45	; 69
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	84 60       	ori	r24, 0x04	; 4
    2896:	8c 93       	st	X, r24
    2898:	19 c0       	rjmp	.+50     	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR2,TCCR2_CS20);
    289a:	a5 e4       	ldi	r26, 0x45	; 69
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	e5 e4       	ldi	r30, 0x45	; 69
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	81 60       	ori	r24, 0x01	; 1
    28a6:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS21);
    28a8:	a5 e4       	ldi	r26, 0x45	; 69
    28aa:	b0 e0       	ldi	r27, 0x00	; 0
    28ac:	e5 e4       	ldi	r30, 0x45	; 69
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
    28b2:	82 60       	ori	r24, 0x02	; 2
    28b4:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS22);
    28b6:	a5 e4       	ldi	r26, 0x45	; 69
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	e5 e4       	ldi	r30, 0x45	; 69
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	84 60       	ori	r24, 0x04	; 4
    28c2:	8c 93       	st	X, r24
    28c4:	03 c0       	rjmp	.+6      	; 0x28cc <Gpt_Init+0xca0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    28c6:	19 82       	std	Y+1, r1	; 0x01
    28c8:	01 c0       	rjmp	.+2      	; 0x28cc <Gpt_Init+0xca0>
            break;
        }
        break;

    default:
        returnValue = GPT_ERROR;
    28ca:	19 82       	std	Y+1, r1	; 0x01
    }
    return returnValue;
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    28ce:	65 96       	adiw	r28, 0x15	; 21
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	f8 94       	cli
    28d4:	de bf       	out	0x3e, r29	; 62
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	cd bf       	out	0x3d, r28	; 61
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	08 95       	ret

000028e0 <Gpt_StartTimer>:

Gpt_ReturnType Gpt_StartTimer(Gpt_ChannelType channel, u16 value)
{
    28e0:	df 93       	push	r29
    28e2:	cf 93       	push	r28
    28e4:	00 d0       	rcall	.+0      	; 0x28e6 <Gpt_StartTimer+0x6>
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <Gpt_StartTimer+0x8>
    28e8:	00 d0       	rcall	.+0      	; 0x28ea <Gpt_StartTimer+0xa>
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	8a 83       	std	Y+2, r24	; 0x02
    28f0:	7c 83       	std	Y+4, r23	; 0x04
    28f2:	6b 83       	std	Y+3, r22	; 0x03
    Gpt_ReturnType returnValue = GPT_OK;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	89 83       	std	Y+1, r24	; 0x01
    switch (channel)
    28f8:	8a 81       	ldd	r24, Y+2	; 0x02
    28fa:	28 2f       	mov	r18, r24
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	3e 83       	std	Y+6, r19	; 0x06
    2900:	2d 83       	std	Y+5, r18	; 0x05
    2902:	8d 81       	ldd	r24, Y+5	; 0x05
    2904:	9e 81       	ldd	r25, Y+6	; 0x06
    2906:	81 30       	cpi	r24, 0x01	; 1
    2908:	91 05       	cpc	r25, r1
    290a:	11 f1       	breq	.+68     	; 0x2950 <Gpt_StartTimer+0x70>
    290c:	2d 81       	ldd	r18, Y+5	; 0x05
    290e:	3e 81       	ldd	r19, Y+6	; 0x06
    2910:	22 30       	cpi	r18, 0x02	; 2
    2912:	31 05       	cpc	r19, r1
    2914:	2c f4       	brge	.+10     	; 0x2920 <Gpt_StartTimer+0x40>
    2916:	8d 81       	ldd	r24, Y+5	; 0x05
    2918:	9e 81       	ldd	r25, Y+6	; 0x06
    291a:	00 97       	sbiw	r24, 0x00	; 0
    291c:	61 f0       	breq	.+24     	; 0x2936 <Gpt_StartTimer+0x56>
    291e:	32 c0       	rjmp	.+100    	; 0x2984 <Gpt_StartTimer+0xa4>
    2920:	2d 81       	ldd	r18, Y+5	; 0x05
    2922:	3e 81       	ldd	r19, Y+6	; 0x06
    2924:	22 30       	cpi	r18, 0x02	; 2
    2926:	31 05       	cpc	r19, r1
    2928:	d1 f0       	breq	.+52     	; 0x295e <Gpt_StartTimer+0x7e>
    292a:	8d 81       	ldd	r24, Y+5	; 0x05
    292c:	9e 81       	ldd	r25, Y+6	; 0x06
    292e:	83 30       	cpi	r24, 0x03	; 3
    2930:	91 05       	cpc	r25, r1
    2932:	e1 f0       	breq	.+56     	; 0x296c <Gpt_StartTimer+0x8c>
    2934:	27 c0       	rjmp	.+78     	; 0x2984 <Gpt_StartTimer+0xa4>
    {
    case GPT_CHANNEL_TIMER0:
        if (value < 256)
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	9c 81       	ldd	r25, Y+4	; 0x04
    293a:	8f 3f       	cpi	r24, 0xFF	; 255
    293c:	91 05       	cpc	r25, r1
    293e:	09 f0       	breq	.+2      	; 0x2942 <Gpt_StartTimer+0x62>
    2940:	28 f4       	brcc	.+10     	; 0x294c <Gpt_StartTimer+0x6c>
        {
            OCR0 = value;
    2942:	ec e5       	ldi	r30, 0x5C	; 92
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	8b 81       	ldd	r24, Y+3	; 0x03
    2948:	80 83       	st	Z, r24
    294a:	1c c0       	rjmp	.+56     	; 0x2984 <Gpt_StartTimer+0xa4>
        }
        else
        {
            returnValue = GPT_ERROR;
    294c:	19 82       	std	Y+1, r1	; 0x01
    294e:	1a c0       	rjmp	.+52     	; 0x2984 <Gpt_StartTimer+0xa4>
        }
        break;
    case GPT_CHANNEL_TIMER1A:
        if (value < 65536)
        {
            OCR1A = value;
    2950:	ea e4       	ldi	r30, 0x4A	; 74
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	9c 81       	ldd	r25, Y+4	; 0x04
    2958:	91 83       	std	Z+1, r25	; 0x01
    295a:	80 83       	st	Z, r24
    295c:	13 c0       	rjmp	.+38     	; 0x2984 <Gpt_StartTimer+0xa4>
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        if (value < 65536)
        {
            OCR1B = value;
    295e:	e8 e4       	ldi	r30, 0x48	; 72
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	8b 81       	ldd	r24, Y+3	; 0x03
    2964:	9c 81       	ldd	r25, Y+4	; 0x04
    2966:	91 83       	std	Z+1, r25	; 0x01
    2968:	80 83       	st	Z, r24
    296a:	0c c0       	rjmp	.+24     	; 0x2984 <Gpt_StartTimer+0xa4>
            returnValue = GPT_ERROR;
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        if (value < 256)
    296c:	8b 81       	ldd	r24, Y+3	; 0x03
    296e:	9c 81       	ldd	r25, Y+4	; 0x04
    2970:	8f 3f       	cpi	r24, 0xFF	; 255
    2972:	91 05       	cpc	r25, r1
    2974:	09 f0       	breq	.+2      	; 0x2978 <Gpt_StartTimer+0x98>
    2976:	28 f4       	brcc	.+10     	; 0x2982 <Gpt_StartTimer+0xa2>
        {
            OCR2 = value;
    2978:	e3 e4       	ldi	r30, 0x43	; 67
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	80 83       	st	Z, r24
    2980:	01 c0       	rjmp	.+2      	; 0x2984 <Gpt_StartTimer+0xa4>
        }
        else
        {
            returnValue = GPT_ERROR;
    2982:	19 82       	std	Y+1, r1	; 0x01
        break;

    default:
        break;
    }
    return returnValue;
    2984:	89 81       	ldd	r24, Y+1	; 0x01
}
    2986:	26 96       	adiw	r28, 0x06	; 6
    2988:	0f b6       	in	r0, 0x3f	; 63
    298a:	f8 94       	cli
    298c:	de bf       	out	0x3e, r29	; 62
    298e:	0f be       	out	0x3f, r0	; 63
    2990:	cd bf       	out	0x3d, r28	; 61
    2992:	cf 91       	pop	r28
    2994:	df 91       	pop	r29
    2996:	08 95       	ret

00002998 <Gpt_GetTimeElapsed>:

u16 Gpt_GetTimeElapsed(Gpt_ChannelType channel)
{
    2998:	df 93       	push	r29
    299a:	cf 93       	push	r28
    299c:	00 d0       	rcall	.+0      	; 0x299e <Gpt_GetTimeElapsed+0x6>
    299e:	00 d0       	rcall	.+0      	; 0x29a0 <Gpt_GetTimeElapsed+0x8>
    29a0:	0f 92       	push	r0
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	8b 83       	std	Y+3, r24	; 0x03
    u16 value = 0;
    29a8:	1a 82       	std	Y+2, r1	; 0x02
    29aa:	19 82       	std	Y+1, r1	; 0x01
    switch (channel)
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	28 2f       	mov	r18, r24
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	3d 83       	std	Y+5, r19	; 0x05
    29b4:	2c 83       	std	Y+4, r18	; 0x04
    29b6:	8c 81       	ldd	r24, Y+4	; 0x04
    29b8:	9d 81       	ldd	r25, Y+5	; 0x05
    29ba:	81 30       	cpi	r24, 0x01	; 1
    29bc:	91 05       	cpc	r25, r1
    29be:	e9 f0       	breq	.+58     	; 0x29fa <Gpt_GetTimeElapsed+0x62>
    29c0:	2c 81       	ldd	r18, Y+4	; 0x04
    29c2:	3d 81       	ldd	r19, Y+5	; 0x05
    29c4:	22 30       	cpi	r18, 0x02	; 2
    29c6:	31 05       	cpc	r19, r1
    29c8:	2c f4       	brge	.+10     	; 0x29d4 <Gpt_GetTimeElapsed+0x3c>
    29ca:	8c 81       	ldd	r24, Y+4	; 0x04
    29cc:	9d 81       	ldd	r25, Y+5	; 0x05
    29ce:	00 97       	sbiw	r24, 0x00	; 0
    29d0:	61 f0       	breq	.+24     	; 0x29ea <Gpt_GetTimeElapsed+0x52>
    29d2:	28 c0       	rjmp	.+80     	; 0x2a24 <Gpt_GetTimeElapsed+0x8c>
    29d4:	2c 81       	ldd	r18, Y+4	; 0x04
    29d6:	3d 81       	ldd	r19, Y+5	; 0x05
    29d8:	22 30       	cpi	r18, 0x02	; 2
    29da:	31 05       	cpc	r19, r1
    29dc:	a9 f0       	breq	.+42     	; 0x2a08 <Gpt_GetTimeElapsed+0x70>
    29de:	8c 81       	ldd	r24, Y+4	; 0x04
    29e0:	9d 81       	ldd	r25, Y+5	; 0x05
    29e2:	83 30       	cpi	r24, 0x03	; 3
    29e4:	91 05       	cpc	r25, r1
    29e6:	b9 f0       	breq	.+46     	; 0x2a16 <Gpt_GetTimeElapsed+0x7e>
    29e8:	1d c0       	rjmp	.+58     	; 0x2a24 <Gpt_GetTimeElapsed+0x8c>
    {
    case GPT_CHANNEL_TIMER0:
        value = TCNT0;
    29ea:	e2 e5       	ldi	r30, 0x52	; 82
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 81       	ld	r24, Z
    29f0:	88 2f       	mov	r24, r24
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	9a 83       	std	Y+2, r25	; 0x02
    29f6:	89 83       	std	Y+1, r24	; 0x01
    29f8:	15 c0       	rjmp	.+42     	; 0x2a24 <Gpt_GetTimeElapsed+0x8c>
        break;
    case GPT_CHANNEL_TIMER1A:
        value = TCNT1;        
    29fa:	ec e4       	ldi	r30, 0x4C	; 76
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	91 81       	ldd	r25, Z+1	; 0x01
    2a02:	9a 83       	std	Y+2, r25	; 0x02
    2a04:	89 83       	std	Y+1, r24	; 0x01
    2a06:	0e c0       	rjmp	.+28     	; 0x2a24 <Gpt_GetTimeElapsed+0x8c>
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        value = TCNT1;
    2a08:	ec e4       	ldi	r30, 0x4C	; 76
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	91 81       	ldd	r25, Z+1	; 0x01
    2a10:	9a 83       	std	Y+2, r25	; 0x02
    2a12:	89 83       	std	Y+1, r24	; 0x01
    2a14:	07 c0       	rjmp	.+14     	; 0x2a24 <Gpt_GetTimeElapsed+0x8c>
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        value = TCNT2;
    2a16:	e4 e4       	ldi	r30, 0x44	; 68
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	88 2f       	mov	r24, r24
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	9a 83       	std	Y+2, r25	; 0x02
    2a22:	89 83       	std	Y+1, r24	; 0x01
        // TODO
        break;
    default:
        break;
    }
    return value;
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <Gpt_GetTimeRemaining>:

u16 Gpt_GetTimeRemaining(Gpt_ChannelType channel, Gpt_ModeType mode)
{
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	00 d0       	rcall	.+0      	; 0x2a3e <Gpt_GetTimeRemaining+0x6>
    2a3e:	00 d0       	rcall	.+0      	; 0x2a40 <Gpt_GetTimeRemaining+0x8>
    2a40:	00 d0       	rcall	.+0      	; 0x2a42 <Gpt_GetTimeRemaining+0xa>
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
    2a46:	8b 83       	std	Y+3, r24	; 0x03
    2a48:	6c 83       	std	Y+4, r22	; 0x04
    u16 value = 0;
    2a4a:	1a 82       	std	Y+2, r1	; 0x02
    2a4c:	19 82       	std	Y+1, r1	; 0x01
    switch (channel)
    2a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a50:	28 2f       	mov	r18, r24
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	3e 83       	std	Y+6, r19	; 0x06
    2a56:	2d 83       	std	Y+5, r18	; 0x05
    2a58:	4d 81       	ldd	r20, Y+5	; 0x05
    2a5a:	5e 81       	ldd	r21, Y+6	; 0x06
    2a5c:	41 30       	cpi	r20, 0x01	; 1
    2a5e:	51 05       	cpc	r21, r1
    2a60:	e1 f1       	breq	.+120    	; 0x2ada <Gpt_GetTimeRemaining+0xa2>
    2a62:	8d 81       	ldd	r24, Y+5	; 0x05
    2a64:	9e 81       	ldd	r25, Y+6	; 0x06
    2a66:	82 30       	cpi	r24, 0x02	; 2
    2a68:	91 05       	cpc	r25, r1
    2a6a:	34 f4       	brge	.+12     	; 0x2a78 <Gpt_GetTimeRemaining+0x40>
    2a6c:	2d 81       	ldd	r18, Y+5	; 0x05
    2a6e:	3e 81       	ldd	r19, Y+6	; 0x06
    2a70:	21 15       	cp	r18, r1
    2a72:	31 05       	cpc	r19, r1
    2a74:	71 f0       	breq	.+28     	; 0x2a92 <Gpt_GetTimeRemaining+0x5a>
    2a76:	90 c0       	rjmp	.+288    	; 0x2b98 <Gpt_GetTimeRemaining+0x160>
    2a78:	4d 81       	ldd	r20, Y+5	; 0x05
    2a7a:	5e 81       	ldd	r21, Y+6	; 0x06
    2a7c:	42 30       	cpi	r20, 0x02	; 2
    2a7e:	51 05       	cpc	r21, r1
    2a80:	09 f4       	brne	.+2      	; 0x2a84 <Gpt_GetTimeRemaining+0x4c>
    2a82:	4a c0       	rjmp	.+148    	; 0x2b18 <Gpt_GetTimeRemaining+0xe0>
    2a84:	8d 81       	ldd	r24, Y+5	; 0x05
    2a86:	9e 81       	ldd	r25, Y+6	; 0x06
    2a88:	83 30       	cpi	r24, 0x03	; 3
    2a8a:	91 05       	cpc	r25, r1
    2a8c:	09 f4       	brne	.+2      	; 0x2a90 <Gpt_GetTimeRemaining+0x58>
    2a8e:	62 c0       	rjmp	.+196    	; 0x2b54 <Gpt_GetTimeRemaining+0x11c>
    2a90:	83 c0       	rjmp	.+262    	; 0x2b98 <Gpt_GetTimeRemaining+0x160>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    2a92:	8c 81       	ldd	r24, Y+4	; 0x04
    2a94:	88 23       	and	r24, r24
    2a96:	61 f4       	brne	.+24     	; 0x2ab0 <Gpt_GetTimeRemaining+0x78>
        {
            value = 0xFF - TCNT0;
    2a98:	e2 e5       	ldi	r30, 0x52	; 82
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z
    2a9e:	28 2f       	mov	r18, r24
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	8f ef       	ldi	r24, 0xFF	; 255
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	82 1b       	sub	r24, r18
    2aa8:	93 0b       	sbc	r25, r19
    2aaa:	9a 83       	std	Y+2, r25	; 0x02
    2aac:	89 83       	std	Y+1, r24	; 0x01
    2aae:	74 c0       	rjmp	.+232    	; 0x2b98 <Gpt_GetTimeRemaining+0x160>
        }
        else if (mode == GPT_MODE_CTC)
    2ab0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab2:	81 30       	cpi	r24, 0x01	; 1
    2ab4:	09 f0       	breq	.+2      	; 0x2ab8 <Gpt_GetTimeRemaining+0x80>
    2ab6:	70 c0       	rjmp	.+224    	; 0x2b98 <Gpt_GetTimeRemaining+0x160>
        {
            value = OCR0 - TCNT0;
    2ab8:	ec e5       	ldi	r30, 0x5C	; 92
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	28 2f       	mov	r18, r24
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	e2 e5       	ldi	r30, 0x52	; 82
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	88 2f       	mov	r24, r24
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	a9 01       	movw	r20, r18
    2ace:	48 1b       	sub	r20, r24
    2ad0:	59 0b       	sbc	r21, r25
    2ad2:	ca 01       	movw	r24, r20
    2ad4:	9a 83       	std	Y+2, r25	; 0x02
    2ad6:	89 83       	std	Y+1, r24	; 0x01
    2ad8:	5f c0       	rjmp	.+190    	; 0x2b98 <Gpt_GetTimeRemaining+0x160>
        }
        break;
    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    2ada:	8c 81       	ldd	r24, Y+4	; 0x04
    2adc:	88 23       	and	r24, r24
    2ade:	49 f4       	brne	.+18     	; 0x2af2 <Gpt_GetTimeRemaining+0xba>
        {
            value = 0xFFFF - TCNT1;
    2ae0:	ec e4       	ldi	r30, 0x4C	; 76
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	91 81       	ldd	r25, Z+1	; 0x01
    2ae8:	80 95       	com	r24
    2aea:	90 95       	com	r25
    2aec:	9a 83       	std	Y+2, r25	; 0x02
    2aee:	89 83       	std	Y+1, r24	; 0x01
    2af0:	53 c0       	rjmp	.+166    	; 0x2b98 <Gpt_GetTimeRemaining+0x160>
        }
        else if (mode == GPT_MODE_CTC)
    2af2:	8c 81       	ldd	r24, Y+4	; 0x04
    2af4:	81 30       	cpi	r24, 0x01	; 1
    2af6:	09 f0       	breq	.+2      	; 0x2afa <Gpt_GetTimeRemaining+0xc2>
    2af8:	4f c0       	rjmp	.+158    	; 0x2b98 <Gpt_GetTimeRemaining+0x160>
        {
            value = OCR1A - TCNT1;
    2afa:	ea e4       	ldi	r30, 0x4A	; 74
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	20 81       	ld	r18, Z
    2b00:	31 81       	ldd	r19, Z+1	; 0x01
    2b02:	ec e4       	ldi	r30, 0x4C	; 76
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	80 81       	ld	r24, Z
    2b08:	91 81       	ldd	r25, Z+1	; 0x01
    2b0a:	a9 01       	movw	r20, r18
    2b0c:	48 1b       	sub	r20, r24
    2b0e:	59 0b       	sbc	r21, r25
    2b10:	ca 01       	movw	r24, r20
    2b12:	9a 83       	std	Y+2, r25	; 0x02
    2b14:	89 83       	std	Y+1, r24	; 0x01
    2b16:	40 c0       	rjmp	.+128    	; 0x2b98 <Gpt_GetTimeRemaining+0x160>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    2b18:	8c 81       	ldd	r24, Y+4	; 0x04
    2b1a:	88 23       	and	r24, r24
    2b1c:	49 f4       	brne	.+18     	; 0x2b30 <Gpt_GetTimeRemaining+0xf8>
        {
            value = 0xFFFF - TCNT1;
    2b1e:	ec e4       	ldi	r30, 0x4C	; 76
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	91 81       	ldd	r25, Z+1	; 0x01
    2b26:	80 95       	com	r24
    2b28:	90 95       	com	r25
    2b2a:	9a 83       	std	Y+2, r25	; 0x02
    2b2c:	89 83       	std	Y+1, r24	; 0x01
    2b2e:	34 c0       	rjmp	.+104    	; 0x2b98 <Gpt_GetTimeRemaining+0x160>
        }
        else if (mode == GPT_MODE_CTC)
    2b30:	8c 81       	ldd	r24, Y+4	; 0x04
    2b32:	81 30       	cpi	r24, 0x01	; 1
    2b34:	89 f5       	brne	.+98     	; 0x2b98 <Gpt_GetTimeRemaining+0x160>
        {
            value = OCR1B - TCNT1;
    2b36:	e8 e4       	ldi	r30, 0x48	; 72
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	20 81       	ld	r18, Z
    2b3c:	31 81       	ldd	r19, Z+1	; 0x01
    2b3e:	ec e4       	ldi	r30, 0x4C	; 76
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	80 81       	ld	r24, Z
    2b44:	91 81       	ldd	r25, Z+1	; 0x01
    2b46:	a9 01       	movw	r20, r18
    2b48:	48 1b       	sub	r20, r24
    2b4a:	59 0b       	sbc	r21, r25
    2b4c:	ca 01       	movw	r24, r20
    2b4e:	9a 83       	std	Y+2, r25	; 0x02
    2b50:	89 83       	std	Y+1, r24	; 0x01
    2b52:	22 c0       	rjmp	.+68     	; 0x2b98 <Gpt_GetTimeRemaining+0x160>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    2b54:	8c 81       	ldd	r24, Y+4	; 0x04
    2b56:	88 23       	and	r24, r24
    2b58:	61 f4       	brne	.+24     	; 0x2b72 <Gpt_GetTimeRemaining+0x13a>
        {
            value = 0xFF - TCNT2;
    2b5a:	e4 e4       	ldi	r30, 0x44	; 68
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	28 2f       	mov	r18, r24
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	8f ef       	ldi	r24, 0xFF	; 255
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	82 1b       	sub	r24, r18
    2b6a:	93 0b       	sbc	r25, r19
    2b6c:	9a 83       	std	Y+2, r25	; 0x02
    2b6e:	89 83       	std	Y+1, r24	; 0x01
    2b70:	13 c0       	rjmp	.+38     	; 0x2b98 <Gpt_GetTimeRemaining+0x160>
        }
        else if (mode == GPT_MODE_CTC)
    2b72:	8c 81       	ldd	r24, Y+4	; 0x04
    2b74:	81 30       	cpi	r24, 0x01	; 1
    2b76:	81 f4       	brne	.+32     	; 0x2b98 <Gpt_GetTimeRemaining+0x160>
        {
            value = OCR2 - TCNT2;
    2b78:	e3 e4       	ldi	r30, 0x43	; 67
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
    2b7e:	28 2f       	mov	r18, r24
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	e4 e4       	ldi	r30, 0x44	; 68
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	80 81       	ld	r24, Z
    2b88:	88 2f       	mov	r24, r24
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	a9 01       	movw	r20, r18
    2b8e:	48 1b       	sub	r20, r24
    2b90:	59 0b       	sbc	r21, r25
    2b92:	ca 01       	movw	r24, r20
    2b94:	9a 83       	std	Y+2, r25	; 0x02
    2b96:	89 83       	std	Y+1, r24	; 0x01
        // TODO
        break;
    default:
        break;
    }
    return value;
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2b9c:	26 96       	adiw	r28, 0x06	; 6
    2b9e:	0f b6       	in	r0, 0x3f	; 63
    2ba0:	f8 94       	cli
    2ba2:	de bf       	out	0x3e, r29	; 62
    2ba4:	0f be       	out	0x3f, r0	; 63
    2ba6:	cd bf       	out	0x3d, r28	; 61
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <Gpt_EnableNotification>:

void Gpt_EnableNotification(Gpt_ChannelType channel, Gpt_ModeType mode, void (*callback)(void))
{
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	00 d0       	rcall	.+0      	; 0x2bb4 <Gpt_EnableNotification+0x6>
    2bb4:	00 d0       	rcall	.+0      	; 0x2bb6 <Gpt_EnableNotification+0x8>
    2bb6:	00 d0       	rcall	.+0      	; 0x2bb8 <Gpt_EnableNotification+0xa>
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
    2bbc:	89 83       	std	Y+1, r24	; 0x01
    2bbe:	6a 83       	std	Y+2, r22	; 0x02
    2bc0:	5c 83       	std	Y+4, r21	; 0x04
    2bc2:	4b 83       	std	Y+3, r20	; 0x03
    switch (channel)
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	28 2f       	mov	r18, r24
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	3e 83       	std	Y+6, r19	; 0x06
    2bcc:	2d 83       	std	Y+5, r18	; 0x05
    2bce:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd2:	81 30       	cpi	r24, 0x01	; 1
    2bd4:	91 05       	cpc	r25, r1
    2bd6:	d1 f1       	breq	.+116    	; 0x2c4c <Gpt_EnableNotification+0x9e>
    2bd8:	2d 81       	ldd	r18, Y+5	; 0x05
    2bda:	3e 81       	ldd	r19, Y+6	; 0x06
    2bdc:	22 30       	cpi	r18, 0x02	; 2
    2bde:	31 05       	cpc	r19, r1
    2be0:	2c f4       	brge	.+10     	; 0x2bec <Gpt_EnableNotification+0x3e>
    2be2:	8d 81       	ldd	r24, Y+5	; 0x05
    2be4:	9e 81       	ldd	r25, Y+6	; 0x06
    2be6:	00 97       	sbiw	r24, 0x00	; 0
    2be8:	71 f0       	breq	.+28     	; 0x2c06 <Gpt_EnableNotification+0x58>
    2bea:	96 c0       	rjmp	.+300    	; 0x2d18 <Gpt_EnableNotification+0x16a>
    2bec:	2d 81       	ldd	r18, Y+5	; 0x05
    2bee:	3e 81       	ldd	r19, Y+6	; 0x06
    2bf0:	22 30       	cpi	r18, 0x02	; 2
    2bf2:	31 05       	cpc	r19, r1
    2bf4:	09 f4       	brne	.+2      	; 0x2bf8 <Gpt_EnableNotification+0x4a>
    2bf6:	4d c0       	rjmp	.+154    	; 0x2c92 <Gpt_EnableNotification+0xe4>
    2bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfc:	83 30       	cpi	r24, 0x03	; 3
    2bfe:	91 05       	cpc	r25, r1
    2c00:	09 f4       	brne	.+2      	; 0x2c04 <Gpt_EnableNotification+0x56>
    2c02:	69 c0       	rjmp	.+210    	; 0x2cd6 <Gpt_EnableNotification+0x128>
    2c04:	89 c0       	rjmp	.+274    	; 0x2d18 <Gpt_EnableNotification+0x16a>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    2c06:	8a 81       	ldd	r24, Y+2	; 0x02
    2c08:	88 23       	and	r24, r24
    2c0a:	71 f4       	brne	.+28     	; 0x2c28 <Gpt_EnableNotification+0x7a>
        {
            Gpt_Timer0_Callback_Normal = callback;
    2c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c10:	90 93 7b 00 	sts	0x007B, r25
    2c14:	80 93 7a 00 	sts	0x007A, r24
            SET_BIT(TIMSK, TIMSK_TOIE0);
    2c18:	a9 e5       	ldi	r26, 0x59	; 89
    2c1a:	b0 e0       	ldi	r27, 0x00	; 0
    2c1c:	e9 e5       	ldi	r30, 0x59	; 89
    2c1e:	f0 e0       	ldi	r31, 0x00	; 0
    2c20:	80 81       	ld	r24, Z
    2c22:	81 60       	ori	r24, 0x01	; 1
    2c24:	8c 93       	st	X, r24
    2c26:	78 c0       	rjmp	.+240    	; 0x2d18 <Gpt_EnableNotification+0x16a>
        }
        else if (mode == GPT_MODE_CTC)
    2c28:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2a:	81 30       	cpi	r24, 0x01	; 1
    2c2c:	09 f0       	breq	.+2      	; 0x2c30 <Gpt_EnableNotification+0x82>
    2c2e:	74 c0       	rjmp	.+232    	; 0x2d18 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer0_Callback_Ctc = callback;
    2c30:	8b 81       	ldd	r24, Y+3	; 0x03
    2c32:	9c 81       	ldd	r25, Y+4	; 0x04
    2c34:	90 93 71 00 	sts	0x0071, r25
    2c38:	80 93 70 00 	sts	0x0070, r24
            SET_BIT(TIMSK, TIMSK_OCIE0);
    2c3c:	a9 e5       	ldi	r26, 0x59	; 89
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	e9 e5       	ldi	r30, 0x59	; 89
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
    2c46:	82 60       	ori	r24, 0x02	; 2
    2c48:	8c 93       	st	X, r24
    2c4a:	66 c0       	rjmp	.+204    	; 0x2d18 <Gpt_EnableNotification+0x16a>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    2c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4e:	88 23       	and	r24, r24
    2c50:	71 f4       	brne	.+28     	; 0x2c6e <Gpt_EnableNotification+0xc0>
        {
            Gpt_Timer1_Callback_Normal = callback;
    2c52:	8b 81       	ldd	r24, Y+3	; 0x03
    2c54:	9c 81       	ldd	r25, Y+4	; 0x04
    2c56:	90 93 7d 00 	sts	0x007D, r25
    2c5a:	80 93 7c 00 	sts	0x007C, r24
            SET_BIT(TIMSK, TIMSK_TOIE1);
    2c5e:	a9 e5       	ldi	r26, 0x59	; 89
    2c60:	b0 e0       	ldi	r27, 0x00	; 0
    2c62:	e9 e5       	ldi	r30, 0x59	; 89
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 81       	ld	r24, Z
    2c68:	84 60       	ori	r24, 0x04	; 4
    2c6a:	8c 93       	st	X, r24
    2c6c:	55 c0       	rjmp	.+170    	; 0x2d18 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    2c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c70:	81 30       	cpi	r24, 0x01	; 1
    2c72:	09 f0       	breq	.+2      	; 0x2c76 <Gpt_EnableNotification+0xc8>
    2c74:	51 c0       	rjmp	.+162    	; 0x2d18 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer1A_Callback_Ctc = callback;
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7a:	90 93 79 00 	sts	0x0079, r25
    2c7e:	80 93 78 00 	sts	0x0078, r24
            SET_BIT(TIMSK, TIMSK_OCIE1A);
    2c82:	a9 e5       	ldi	r26, 0x59	; 89
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	e9 e5       	ldi	r30, 0x59	; 89
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	80 61       	ori	r24, 0x10	; 16
    2c8e:	8c 93       	st	X, r24
    2c90:	43 c0       	rjmp	.+134    	; 0x2d18 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    2c92:	8a 81       	ldd	r24, Y+2	; 0x02
    2c94:	88 23       	and	r24, r24
    2c96:	71 f4       	brne	.+28     	; 0x2cb4 <Gpt_EnableNotification+0x106>
        {
            Gpt_Timer1_Callback_Normal = callback;
    2c98:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c9c:	90 93 7d 00 	sts	0x007D, r25
    2ca0:	80 93 7c 00 	sts	0x007C, r24
            SET_BIT(TIMSK, TIMSK_TOIE1);
    2ca4:	a9 e5       	ldi	r26, 0x59	; 89
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	e9 e5       	ldi	r30, 0x59	; 89
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	84 60       	ori	r24, 0x04	; 4
    2cb0:	8c 93       	st	X, r24
    2cb2:	32 c0       	rjmp	.+100    	; 0x2d18 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	81 30       	cpi	r24, 0x01	; 1
    2cb8:	79 f5       	brne	.+94     	; 0x2d18 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer1B_Callback_Ctc = callback;
    2cba:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cbe:	90 93 75 00 	sts	0x0075, r25
    2cc2:	80 93 74 00 	sts	0x0074, r24
            SET_BIT(TIMSK, TIMSK_OCIE1B);
    2cc6:	a9 e5       	ldi	r26, 0x59	; 89
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	e9 e5       	ldi	r30, 0x59	; 89
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	88 60       	ori	r24, 0x08	; 8
    2cd2:	8c 93       	st	X, r24
    2cd4:	21 c0       	rjmp	.+66     	; 0x2d18 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    2cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd8:	88 23       	and	r24, r24
    2cda:	71 f4       	brne	.+28     	; 0x2cf8 <Gpt_EnableNotification+0x14a>
        {
            Gpt_Timer2_Callback_Normal = callback;
    2cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cde:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce0:	90 93 77 00 	sts	0x0077, r25
    2ce4:	80 93 76 00 	sts	0x0076, r24
            SET_BIT(TIMSK, TIMSK_TOIE2);
    2ce8:	a9 e5       	ldi	r26, 0x59	; 89
    2cea:	b0 e0       	ldi	r27, 0x00	; 0
    2cec:	e9 e5       	ldi	r30, 0x59	; 89
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	80 81       	ld	r24, Z
    2cf2:	80 64       	ori	r24, 0x40	; 64
    2cf4:	8c 93       	st	X, r24
    2cf6:	10 c0       	rjmp	.+32     	; 0x2d18 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    2cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfa:	81 30       	cpi	r24, 0x01	; 1
    2cfc:	69 f4       	brne	.+26     	; 0x2d18 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer2_Callback_Ctc = callback;
    2cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2d00:	9c 81       	ldd	r25, Y+4	; 0x04
    2d02:	90 93 73 00 	sts	0x0073, r25
    2d06:	80 93 72 00 	sts	0x0072, r24
            SET_BIT(TIMSK, TIMSK_OCIE2);
    2d0a:	a9 e5       	ldi	r26, 0x59	; 89
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	e9 e5       	ldi	r30, 0x59	; 89
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	80 81       	ld	r24, Z
    2d14:	80 68       	ori	r24, 0x80	; 128
    2d16:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
    2d18:	26 96       	adiw	r28, 0x06	; 6
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	f8 94       	cli
    2d1e:	de bf       	out	0x3e, r29	; 62
    2d20:	0f be       	out	0x3f, r0	; 63
    2d22:	cd bf       	out	0x3d, r28	; 61
    2d24:	cf 91       	pop	r28
    2d26:	df 91       	pop	r29
    2d28:	08 95       	ret

00002d2a <Gpt_DisableNotification>:

void Gpt_DisableNotification(Gpt_ChannelType channel, Gpt_ModeType mode)
{
    2d2a:	df 93       	push	r29
    2d2c:	cf 93       	push	r28
    2d2e:	00 d0       	rcall	.+0      	; 0x2d30 <Gpt_DisableNotification+0x6>
    2d30:	00 d0       	rcall	.+0      	; 0x2d32 <Gpt_DisableNotification+0x8>
    2d32:	cd b7       	in	r28, 0x3d	; 61
    2d34:	de b7       	in	r29, 0x3e	; 62
    2d36:	89 83       	std	Y+1, r24	; 0x01
    2d38:	6a 83       	std	Y+2, r22	; 0x02
    switch (channel)
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	28 2f       	mov	r18, r24
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	3c 83       	std	Y+4, r19	; 0x04
    2d42:	2b 83       	std	Y+3, r18	; 0x03
    2d44:	8b 81       	ldd	r24, Y+3	; 0x03
    2d46:	9c 81       	ldd	r25, Y+4	; 0x04
    2d48:	81 30       	cpi	r24, 0x01	; 1
    2d4a:	91 05       	cpc	r25, r1
    2d4c:	69 f1       	breq	.+90     	; 0x2da8 <Gpt_DisableNotification+0x7e>
    2d4e:	2b 81       	ldd	r18, Y+3	; 0x03
    2d50:	3c 81       	ldd	r19, Y+4	; 0x04
    2d52:	22 30       	cpi	r18, 0x02	; 2
    2d54:	31 05       	cpc	r19, r1
    2d56:	2c f4       	brge	.+10     	; 0x2d62 <Gpt_DisableNotification+0x38>
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5c:	00 97       	sbiw	r24, 0x00	; 0
    2d5e:	69 f0       	breq	.+26     	; 0x2d7a <Gpt_DisableNotification+0x50>
    2d60:	64 c0       	rjmp	.+200    	; 0x2e2a <Gpt_DisableNotification+0x100>
    2d62:	2b 81       	ldd	r18, Y+3	; 0x03
    2d64:	3c 81       	ldd	r19, Y+4	; 0x04
    2d66:	22 30       	cpi	r18, 0x02	; 2
    2d68:	31 05       	cpc	r19, r1
    2d6a:	a1 f1       	breq	.+104    	; 0x2dd4 <Gpt_DisableNotification+0xaa>
    2d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d70:	83 30       	cpi	r24, 0x03	; 3
    2d72:	91 05       	cpc	r25, r1
    2d74:	09 f4       	brne	.+2      	; 0x2d78 <Gpt_DisableNotification+0x4e>
    2d76:	44 c0       	rjmp	.+136    	; 0x2e00 <Gpt_DisableNotification+0xd6>
    2d78:	58 c0       	rjmp	.+176    	; 0x2e2a <Gpt_DisableNotification+0x100>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    2d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7c:	88 23       	and	r24, r24
    2d7e:	41 f4       	brne	.+16     	; 0x2d90 <Gpt_DisableNotification+0x66>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE0);
    2d80:	a9 e5       	ldi	r26, 0x59	; 89
    2d82:	b0 e0       	ldi	r27, 0x00	; 0
    2d84:	e9 e5       	ldi	r30, 0x59	; 89
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	80 81       	ld	r24, Z
    2d8a:	8e 7f       	andi	r24, 0xFE	; 254
    2d8c:	8c 93       	st	X, r24
    2d8e:	4d c0       	rjmp	.+154    	; 0x2e2a <Gpt_DisableNotification+0x100>
        }
        else if (mode == GPT_MODE_CTC)
    2d90:	8a 81       	ldd	r24, Y+2	; 0x02
    2d92:	81 30       	cpi	r24, 0x01	; 1
    2d94:	09 f0       	breq	.+2      	; 0x2d98 <Gpt_DisableNotification+0x6e>
    2d96:	49 c0       	rjmp	.+146    	; 0x2e2a <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE0);
    2d98:	a9 e5       	ldi	r26, 0x59	; 89
    2d9a:	b0 e0       	ldi	r27, 0x00	; 0
    2d9c:	e9 e5       	ldi	r30, 0x59	; 89
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	80 81       	ld	r24, Z
    2da2:	8d 7f       	andi	r24, 0xFD	; 253
    2da4:	8c 93       	st	X, r24
    2da6:	41 c0       	rjmp	.+130    	; 0x2e2a <Gpt_DisableNotification+0x100>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    2da8:	8a 81       	ldd	r24, Y+2	; 0x02
    2daa:	88 23       	and	r24, r24
    2dac:	41 f4       	brne	.+16     	; 0x2dbe <Gpt_DisableNotification+0x94>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE1);
    2dae:	a9 e5       	ldi	r26, 0x59	; 89
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	e9 e5       	ldi	r30, 0x59	; 89
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	80 81       	ld	r24, Z
    2db8:	8b 7f       	andi	r24, 0xFB	; 251
    2dba:	8c 93       	st	X, r24
    2dbc:	36 c0       	rjmp	.+108    	; 0x2e2a <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    2dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc0:	81 30       	cpi	r24, 0x01	; 1
    2dc2:	99 f5       	brne	.+102    	; 0x2e2a <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE1A);
    2dc4:	a9 e5       	ldi	r26, 0x59	; 89
    2dc6:	b0 e0       	ldi	r27, 0x00	; 0
    2dc8:	e9 e5       	ldi	r30, 0x59	; 89
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	80 81       	ld	r24, Z
    2dce:	8f 7e       	andi	r24, 0xEF	; 239
    2dd0:	8c 93       	st	X, r24
    2dd2:	2b c0       	rjmp	.+86     	; 0x2e2a <Gpt_DisableNotification+0x100>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    2dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd6:	88 23       	and	r24, r24
    2dd8:	41 f4       	brne	.+16     	; 0x2dea <Gpt_DisableNotification+0xc0>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE1);
    2dda:	a9 e5       	ldi	r26, 0x59	; 89
    2ddc:	b0 e0       	ldi	r27, 0x00	; 0
    2dde:	e9 e5       	ldi	r30, 0x59	; 89
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	8b 7f       	andi	r24, 0xFB	; 251
    2de6:	8c 93       	st	X, r24
    2de8:	20 c0       	rjmp	.+64     	; 0x2e2a <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	81 30       	cpi	r24, 0x01	; 1
    2dee:	e9 f4       	brne	.+58     	; 0x2e2a <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE1B);
    2df0:	a9 e5       	ldi	r26, 0x59	; 89
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	e9 e5       	ldi	r30, 0x59	; 89
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	87 7f       	andi	r24, 0xF7	; 247
    2dfc:	8c 93       	st	X, r24
    2dfe:	15 c0       	rjmp	.+42     	; 0x2e2a <Gpt_DisableNotification+0x100>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    2e00:	8a 81       	ldd	r24, Y+2	; 0x02
    2e02:	88 23       	and	r24, r24
    2e04:	41 f4       	brne	.+16     	; 0x2e16 <Gpt_DisableNotification+0xec>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE2);
    2e06:	a9 e5       	ldi	r26, 0x59	; 89
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	e9 e5       	ldi	r30, 0x59	; 89
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 81       	ld	r24, Z
    2e10:	8f 7b       	andi	r24, 0xBF	; 191
    2e12:	8c 93       	st	X, r24
    2e14:	0a c0       	rjmp	.+20     	; 0x2e2a <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	81 30       	cpi	r24, 0x01	; 1
    2e1a:	39 f4       	brne	.+14     	; 0x2e2a <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE2);
    2e1c:	a9 e5       	ldi	r26, 0x59	; 89
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	e9 e5       	ldi	r30, 0x59	; 89
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	80 81       	ld	r24, Z
    2e26:	8f 77       	andi	r24, 0x7F	; 127
    2e28:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	cf 91       	pop	r28
    2e34:	df 91       	pop	r29
    2e36:	08 95       	ret

00002e38 <I2C_InitMaster>:
#include "Registers.h"
#include "I2C.h"
#include "I2C_cfg.h"

void I2C_InitMaster(void)
{
    2e38:	df 93       	push	r29
    2e3a:	cf 93       	push	r28
    2e3c:	cd b7       	in	r28, 0x3d	; 61
    2e3e:	de b7       	in	r29, 0x3e	; 62
	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWBR = 0x02;
    2e40:	e0 e2       	ldi	r30, 0x20	; 32
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	82 e0       	ldi	r24, 0x02	; 2
    2e46:	80 83       	st	Z, r24
	TWSR = 0x00;
    2e48:	e1 e2       	ldi	r30, 0x21	; 33
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	10 82       	st	Z, r1

	TWCR = (1<<2); /* enable TWI */
    2e4e:	e6 e5       	ldi	r30, 0x56	; 86
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	84 e0       	ldi	r24, 0x04	; 4
    2e54:	80 83       	st	Z, r24
}
    2e56:	cf 91       	pop	r28
    2e58:	df 91       	pop	r29
    2e5a:	08 95       	ret

00002e5c <I2C_SendStartCondition>:
void I2C_SendStartCondition(void)
{
    2e5c:	df 93       	push	r29
    2e5e:	cf 93       	push	r28
    2e60:	cd b7       	in	r28, 0x3d	; 61
    2e62:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << 7) | (1 << 5) | (1 << 2);
    2e64:	e6 e5       	ldi	r30, 0x56	; 86
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	84 ea       	ldi	r24, 0xA4	; 164
    2e6a:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(GET_BIT(TWCR,7)==0);
    2e6c:	e6 e5       	ldi	r30, 0x56	; 86
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	80 81       	ld	r24, Z
    2e72:	88 23       	and	r24, r24
    2e74:	dc f7       	brge	.-10     	; 0x2e6c <I2C_SendStartCondition+0x10>
}
    2e76:	cf 91       	pop	r28
    2e78:	df 91       	pop	r29
    2e7a:	08 95       	ret

00002e7c <I2C_SendStopCondition>:
void I2C_SendStopCondition(void)
{
    2e7c:	df 93       	push	r29
    2e7e:	cf 93       	push	r28
    2e80:	cd b7       	in	r28, 0x3d	; 61
    2e82:	de b7       	in	r29, 0x3e	; 62
	 *  Enable TWI Module TWEN=1 ---> //SET_BIT(TWCR,2);
		        Sent stop condition on the bus ---> //SET_BIT(TWCR,4);
		        Clear the interrupt flag To start the previous operation
		         //SET_BIT(TWCR,7);
	 */
	TWCR = (1 << 7) | (1 << 4) | (1 << 2);
    2e84:	e6 e5       	ldi	r30, 0x56	; 86
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	84 e9       	ldi	r24, 0x94	; 148
    2e8a:	80 83       	st	Z, r24
}
    2e8c:	cf 91       	pop	r28
    2e8e:	df 91       	pop	r29
    2e90:	08 95       	ret

00002e92 <I2C_MasterWriteDataByte>:
void I2C_MasterWriteDataByte(u8 Data)
{
    2e92:	df 93       	push	r29
    2e94:	cf 93       	push	r28
    2e96:	0f 92       	push	r0
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
    2e9c:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = Data;
    2e9e:	e3 e2       	ldi	r30, 0x23	; 35
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	89 81       	ldd	r24, Y+1	; 0x01
    2ea4:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << 7) | (1 << 2);
    2ea6:	e6 e5       	ldi	r30, 0x56	; 86
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	84 e8       	ldi	r24, 0x84	; 132
    2eac:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(GET_BIT(TWCR,7)==0);
    2eae:	e6 e5       	ldi	r30, 0x56	; 86
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	88 23       	and	r24, r24
    2eb6:	dc f7       	brge	.-10     	; 0x2eae <I2C_MasterWriteDataByte+0x1c>
}
    2eb8:	0f 90       	pop	r0
    2eba:	cf 91       	pop	r28
    2ebc:	df 91       	pop	r29
    2ebe:	08 95       	ret

00002ec0 <I2C_MasterReadDataByteWith_ACK>:
u8   I2C_MasterReadDataByteWith_ACK(void)
{
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
	 * --------------------------------------------
	 *     Enable Acknowledge bit --> //SET_BIT(TWCR,6);
	 *     Clear the interrupt flag To start the previous operation --> //SET_BIT(TWCR,7);
	 *     Enable TWI Module TWEN=1 -->//SET_BIT(TWCR,2);
	 */
	TWCR = (1 << 7) | (1 << 2) | (1 << 6);
    2ec8:	e6 e5       	ldi	r30, 0x56	; 86
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	84 ec       	ldi	r24, 0xC4	; 196
    2ece:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(GET_BIT(TWCR,7)==0);
    2ed0:	e6 e5       	ldi	r30, 0x56	; 86
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	80 81       	ld	r24, Z
    2ed6:	88 23       	and	r24, r24
    2ed8:	dc f7       	brge	.-10     	; 0x2ed0 <I2C_MasterReadDataByteWith_ACK+0x10>
	/* Read Data */
	return TWDR;
    2eda:	e3 e2       	ldi	r30, 0x23	; 35
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
}
    2ee0:	cf 91       	pop	r28
    2ee2:	df 91       	pop	r29
    2ee4:	08 95       	ret

00002ee6 <I2C_MasterReadDataByteWith_NACK>:
u8   I2C_MasterReadDataByteWith_NACK(void)
{
    2ee6:	df 93       	push	r29
    2ee8:	cf 93       	push	r28
    2eea:	cd b7       	in	r28, 0x3d	; 61
    2eec:	de b7       	in	r29, 0x3e	; 62
	 * -------------------------------------------
	 * 	 * Disable Acknowledge bit --> //CLR_BIT(TWCR,6);
	 *     Clear the interrupt flag To start the previous operation --> //SET_BIT(TWCR,7);
	 *     Enable TWI Module TWEN=1 -->//SET_BIT(TWCR,2);
	 */
	TWCR = (1 << 7) | (1 << 2);
    2eee:	e6 e5       	ldi	r30, 0x56	; 86
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	84 e8       	ldi	r24, 0x84	; 132
    2ef4:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(GET_BIT(TWCR,7)==0);
    2ef6:	e6 e5       	ldi	r30, 0x56	; 86
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	80 81       	ld	r24, Z
    2efc:	88 23       	and	r24, r24
    2efe:	dc f7       	brge	.-10     	; 0x2ef6 <I2C_MasterReadDataByteWith_NACK+0x10>
	/* Read Data */
	return TWDR;
    2f00:	e3 e2       	ldi	r30, 0x23	; 35
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
}
    2f06:	cf 91       	pop	r28
    2f08:	df 91       	pop	r29
    2f0a:	08 95       	ret

00002f0c <Keypad_Init>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"
#include "Keypad.h"

void Keypad_Init(void) {
    2f0c:	df 93       	push	r29
    2f0e:	cf 93       	push	r28
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62
    /* Set all rows to input pullup */
    DIO_SetPinMode(KEYPAD_PIN_R0, DIO_INPUT_PULLUP);
    2f14:	83 e0       	ldi	r24, 0x03	; 3
    2f16:	60 e0       	ldi	r22, 0x00	; 0
    2f18:	41 e0       	ldi	r20, 0x01	; 1
    2f1a:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R1, DIO_INPUT_PULLUP);
    2f1e:	83 e0       	ldi	r24, 0x03	; 3
    2f20:	61 e0       	ldi	r22, 0x01	; 1
    2f22:	41 e0       	ldi	r20, 0x01	; 1
    2f24:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R2, DIO_INPUT_PULLUP);
    2f28:	83 e0       	ldi	r24, 0x03	; 3
    2f2a:	62 e0       	ldi	r22, 0x02	; 2
    2f2c:	41 e0       	ldi	r20, 0x01	; 1
    2f2e:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R3, DIO_INPUT_PULLUP);
    2f32:	83 e0       	ldi	r24, 0x03	; 3
    2f34:	63 e0       	ldi	r22, 0x03	; 3
    2f36:	41 e0       	ldi	r20, 0x01	; 1
    2f38:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    /* Set all columns to output */
    DIO_SetPinMode(KEYPAD_PIN_C0, DIO_OUTPUT);
    2f3c:	83 e0       	ldi	r24, 0x03	; 3
    2f3e:	64 e0       	ldi	r22, 0x04	; 4
    2f40:	42 e0       	ldi	r20, 0x02	; 2
    2f42:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C1, DIO_OUTPUT);
    2f46:	83 e0       	ldi	r24, 0x03	; 3
    2f48:	65 e0       	ldi	r22, 0x05	; 5
    2f4a:	42 e0       	ldi	r20, 0x02	; 2
    2f4c:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C2, DIO_OUTPUT);
    2f50:	83 e0       	ldi	r24, 0x03	; 3
    2f52:	66 e0       	ldi	r22, 0x06	; 6
    2f54:	42 e0       	ldi	r20, 0x02	; 2
    2f56:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C3, DIO_OUTPUT);
    2f5a:	83 e0       	ldi	r24, 0x03	; 3
    2f5c:	67 e0       	ldi	r22, 0x07	; 7
    2f5e:	42 e0       	ldi	r20, 0x02	; 2
    2f60:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
}
    2f64:	cf 91       	pop	r28
    2f66:	df 91       	pop	r29
    2f68:	08 95       	ret

00002f6a <Keypad_GetButtonState>:
	low  -> Pressed

*/


Keypad_StateType Keypad_GetButtonState(Keypad_ButtonType button) {
    2f6a:	df 93       	push	r29
    2f6c:	cf 93       	push	r28
    2f6e:	cd b7       	in	r28, 0x3d	; 61
    2f70:	de b7       	in	r29, 0x3e	; 62
    2f72:	28 97       	sbiw	r28, 0x08	; 8
    2f74:	0f b6       	in	r0, 0x3f	; 63
    2f76:	f8 94       	cli
    2f78:	de bf       	out	0x3e, r29	; 62
    2f7a:	0f be       	out	0x3f, r0	; 63
    2f7c:	cd bf       	out	0x3d, r28	; 61
    2f7e:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    2f84:	8c 81       	ldd	r24, Y+4	; 0x04
    2f86:	86 95       	lsr	r24
    2f88:	86 95       	lsr	r24
    2f8a:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    2f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f8e:	83 70       	andi	r24, 0x03	; 3
    2f90:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    2f92:	83 e0       	ldi	r24, 0x03	; 3
    2f94:	64 e0       	ldi	r22, 0x04	; 4
    2f96:	41 e0       	ldi	r20, 0x01	; 1
    2f98:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    2f9c:	83 e0       	ldi	r24, 0x03	; 3
    2f9e:	65 e0       	ldi	r22, 0x05	; 5
    2fa0:	41 e0       	ldi	r20, 0x01	; 1
    2fa2:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    2fa6:	83 e0       	ldi	r24, 0x03	; 3
    2fa8:	66 e0       	ldi	r22, 0x06	; 6
    2faa:	41 e0       	ldi	r20, 0x01	; 1
    2fac:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    2fb0:	83 e0       	ldi	r24, 0x03	; 3
    2fb2:	67 e0       	ldi	r22, 0x07	; 7
    2fb4:	41 e0       	ldi	r20, 0x01	; 1
    2fb6:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    switch (column)
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	28 2f       	mov	r18, r24
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	38 87       	std	Y+8, r19	; 0x08
    2fc2:	2f 83       	std	Y+7, r18	; 0x07
    2fc4:	8f 81       	ldd	r24, Y+7	; 0x07
    2fc6:	98 85       	ldd	r25, Y+8	; 0x08
    2fc8:	81 30       	cpi	r24, 0x01	; 1
    2fca:	91 05       	cpc	r25, r1
    2fcc:	d9 f0       	breq	.+54     	; 0x3004 <Keypad_GetButtonState+0x9a>
    2fce:	2f 81       	ldd	r18, Y+7	; 0x07
    2fd0:	38 85       	ldd	r19, Y+8	; 0x08
    2fd2:	22 30       	cpi	r18, 0x02	; 2
    2fd4:	31 05       	cpc	r19, r1
    2fd6:	2c f4       	brge	.+10     	; 0x2fe2 <Keypad_GetButtonState+0x78>
    2fd8:	8f 81       	ldd	r24, Y+7	; 0x07
    2fda:	98 85       	ldd	r25, Y+8	; 0x08
    2fdc:	00 97       	sbiw	r24, 0x00	; 0
    2fde:	61 f0       	breq	.+24     	; 0x2ff8 <Keypad_GetButtonState+0x8e>
    2fe0:	22 c0       	rjmp	.+68     	; 0x3026 <Keypad_GetButtonState+0xbc>
    2fe2:	2f 81       	ldd	r18, Y+7	; 0x07
    2fe4:	38 85       	ldd	r19, Y+8	; 0x08
    2fe6:	22 30       	cpi	r18, 0x02	; 2
    2fe8:	31 05       	cpc	r19, r1
    2fea:	91 f0       	breq	.+36     	; 0x3010 <Keypad_GetButtonState+0xa6>
    2fec:	8f 81       	ldd	r24, Y+7	; 0x07
    2fee:	98 85       	ldd	r25, Y+8	; 0x08
    2ff0:	83 30       	cpi	r24, 0x03	; 3
    2ff2:	91 05       	cpc	r25, r1
    2ff4:	99 f0       	breq	.+38     	; 0x301c <Keypad_GetButtonState+0xb2>
    2ff6:	17 c0       	rjmp	.+46     	; 0x3026 <Keypad_GetButtonState+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    2ff8:	83 e0       	ldi	r24, 0x03	; 3
    2ffa:	64 e0       	ldi	r22, 0x04	; 4
    2ffc:	40 e0       	ldi	r20, 0x00	; 0
    2ffe:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    3002:	11 c0       	rjmp	.+34     	; 0x3026 <Keypad_GetButtonState+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    3004:	83 e0       	ldi	r24, 0x03	; 3
    3006:	65 e0       	ldi	r22, 0x05	; 5
    3008:	40 e0       	ldi	r20, 0x00	; 0
    300a:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    300e:	0b c0       	rjmp	.+22     	; 0x3026 <Keypad_GetButtonState+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    3010:	83 e0       	ldi	r24, 0x03	; 3
    3012:	66 e0       	ldi	r22, 0x06	; 6
    3014:	40 e0       	ldi	r20, 0x00	; 0
    3016:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    301a:	05 c0       	rjmp	.+10     	; 0x3026 <Keypad_GetButtonState+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    301c:	83 e0       	ldi	r24, 0x03	; 3
    301e:	67 e0       	ldi	r22, 0x07	; 7
    3020:	40 e0       	ldi	r20, 0x00	; 0
    3022:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    3026:	8a 81       	ldd	r24, Y+2	; 0x02
    3028:	28 2f       	mov	r18, r24
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	3e 83       	std	Y+6, r19	; 0x06
    302e:	2d 83       	std	Y+5, r18	; 0x05
    3030:	8d 81       	ldd	r24, Y+5	; 0x05
    3032:	9e 81       	ldd	r25, Y+6	; 0x06
    3034:	81 30       	cpi	r24, 0x01	; 1
    3036:	91 05       	cpc	r25, r1
    3038:	e9 f0       	breq	.+58     	; 0x3074 <Keypad_GetButtonState+0x10a>
    303a:	2d 81       	ldd	r18, Y+5	; 0x05
    303c:	3e 81       	ldd	r19, Y+6	; 0x06
    303e:	22 30       	cpi	r18, 0x02	; 2
    3040:	31 05       	cpc	r19, r1
    3042:	2c f4       	brge	.+10     	; 0x304e <Keypad_GetButtonState+0xe4>
    3044:	8d 81       	ldd	r24, Y+5	; 0x05
    3046:	9e 81       	ldd	r25, Y+6	; 0x06
    3048:	00 97       	sbiw	r24, 0x00	; 0
    304a:	61 f0       	breq	.+24     	; 0x3064 <Keypad_GetButtonState+0xfa>
    304c:	2a c0       	rjmp	.+84     	; 0x30a2 <Keypad_GetButtonState+0x138>
    304e:	2d 81       	ldd	r18, Y+5	; 0x05
    3050:	3e 81       	ldd	r19, Y+6	; 0x06
    3052:	22 30       	cpi	r18, 0x02	; 2
    3054:	31 05       	cpc	r19, r1
    3056:	b1 f0       	breq	.+44     	; 0x3084 <Keypad_GetButtonState+0x11a>
    3058:	8d 81       	ldd	r24, Y+5	; 0x05
    305a:	9e 81       	ldd	r25, Y+6	; 0x06
    305c:	83 30       	cpi	r24, 0x03	; 3
    305e:	91 05       	cpc	r25, r1
    3060:	c9 f0       	breq	.+50     	; 0x3094 <Keypad_GetButtonState+0x12a>
    3062:	1f c0       	rjmp	.+62     	; 0x30a2 <Keypad_GetButtonState+0x138>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    3064:	83 e0       	ldi	r24, 0x03	; 3
    3066:	60 e0       	ldi	r22, 0x00	; 0
    3068:	0e 94 66 0b 	call	0x16cc	; 0x16cc <DIO_ReadPinLevel>
    306c:	88 23       	and	r24, r24
    306e:	c9 f4       	brne	.+50     	; 0x30a2 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    3070:	1b 82       	std	Y+3, r1	; 0x03
    3072:	17 c0       	rjmp	.+46     	; 0x30a2 <Keypad_GetButtonState+0x138>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    3074:	83 e0       	ldi	r24, 0x03	; 3
    3076:	61 e0       	ldi	r22, 0x01	; 1
    3078:	0e 94 66 0b 	call	0x16cc	; 0x16cc <DIO_ReadPinLevel>
    307c:	88 23       	and	r24, r24
    307e:	89 f4       	brne	.+34     	; 0x30a2 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    3080:	1b 82       	std	Y+3, r1	; 0x03
    3082:	0f c0       	rjmp	.+30     	; 0x30a2 <Keypad_GetButtonState+0x138>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    3084:	83 e0       	ldi	r24, 0x03	; 3
    3086:	62 e0       	ldi	r22, 0x02	; 2
    3088:	0e 94 66 0b 	call	0x16cc	; 0x16cc <DIO_ReadPinLevel>
    308c:	88 23       	and	r24, r24
    308e:	49 f4       	brne	.+18     	; 0x30a2 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    3090:	1b 82       	std	Y+3, r1	; 0x03
    3092:	07 c0       	rjmp	.+14     	; 0x30a2 <Keypad_GetButtonState+0x138>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    3094:	83 e0       	ldi	r24, 0x03	; 3
    3096:	63 e0       	ldi	r22, 0x03	; 3
    3098:	0e 94 66 0b 	call	0x16cc	; 0x16cc <DIO_ReadPinLevel>
    309c:	88 23       	and	r24, r24
    309e:	09 f4       	brne	.+2      	; 0x30a2 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    30a0:	1b 82       	std	Y+3, r1	; 0x03
        }
        break;
    default:
        break;
    }
    return state;
    30a2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    30a4:	28 96       	adiw	r28, 0x08	; 8
    30a6:	0f b6       	in	r0, 0x3f	; 63
    30a8:	f8 94       	cli
    30aa:	de bf       	out	0x3e, r29	; 62
    30ac:	0f be       	out	0x3f, r0	; 63
    30ae:	cd bf       	out	0x3d, r28	; 61
    30b0:	cf 91       	pop	r28
    30b2:	df 91       	pop	r29
    30b4:	08 95       	ret

000030b6 <Keypad_GetButtonStatePooling>:

Keypad_StateType Keypad_GetButtonStatePooling(Keypad_ButtonType button) {
    30b6:	df 93       	push	r29
    30b8:	cf 93       	push	r28
    30ba:	cd b7       	in	r28, 0x3d	; 61
    30bc:	de b7       	in	r29, 0x3e	; 62
    30be:	28 97       	sbiw	r28, 0x08	; 8
    30c0:	0f b6       	in	r0, 0x3f	; 63
    30c2:	f8 94       	cli
    30c4:	de bf       	out	0x3e, r29	; 62
    30c6:	0f be       	out	0x3f, r0	; 63
    30c8:	cd bf       	out	0x3d, r28	; 61
    30ca:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    30d0:	8c 81       	ldd	r24, Y+4	; 0x04
    30d2:	86 95       	lsr	r24
    30d4:	86 95       	lsr	r24
    30d6:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    30d8:	8c 81       	ldd	r24, Y+4	; 0x04
    30da:	83 70       	andi	r24, 0x03	; 3
    30dc:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    30de:	83 e0       	ldi	r24, 0x03	; 3
    30e0:	64 e0       	ldi	r22, 0x04	; 4
    30e2:	41 e0       	ldi	r20, 0x01	; 1
    30e4:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    30e8:	83 e0       	ldi	r24, 0x03	; 3
    30ea:	65 e0       	ldi	r22, 0x05	; 5
    30ec:	41 e0       	ldi	r20, 0x01	; 1
    30ee:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    30f2:	83 e0       	ldi	r24, 0x03	; 3
    30f4:	66 e0       	ldi	r22, 0x06	; 6
    30f6:	41 e0       	ldi	r20, 0x01	; 1
    30f8:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    30fc:	83 e0       	ldi	r24, 0x03	; 3
    30fe:	67 e0       	ldi	r22, 0x07	; 7
    3100:	41 e0       	ldi	r20, 0x01	; 1
    3102:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    switch (column)
    3106:	89 81       	ldd	r24, Y+1	; 0x01
    3108:	28 2f       	mov	r18, r24
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	38 87       	std	Y+8, r19	; 0x08
    310e:	2f 83       	std	Y+7, r18	; 0x07
    3110:	8f 81       	ldd	r24, Y+7	; 0x07
    3112:	98 85       	ldd	r25, Y+8	; 0x08
    3114:	81 30       	cpi	r24, 0x01	; 1
    3116:	91 05       	cpc	r25, r1
    3118:	d9 f0       	breq	.+54     	; 0x3150 <Keypad_GetButtonStatePooling+0x9a>
    311a:	2f 81       	ldd	r18, Y+7	; 0x07
    311c:	38 85       	ldd	r19, Y+8	; 0x08
    311e:	22 30       	cpi	r18, 0x02	; 2
    3120:	31 05       	cpc	r19, r1
    3122:	2c f4       	brge	.+10     	; 0x312e <Keypad_GetButtonStatePooling+0x78>
    3124:	8f 81       	ldd	r24, Y+7	; 0x07
    3126:	98 85       	ldd	r25, Y+8	; 0x08
    3128:	00 97       	sbiw	r24, 0x00	; 0
    312a:	61 f0       	breq	.+24     	; 0x3144 <Keypad_GetButtonStatePooling+0x8e>
    312c:	22 c0       	rjmp	.+68     	; 0x3172 <Keypad_GetButtonStatePooling+0xbc>
    312e:	2f 81       	ldd	r18, Y+7	; 0x07
    3130:	38 85       	ldd	r19, Y+8	; 0x08
    3132:	22 30       	cpi	r18, 0x02	; 2
    3134:	31 05       	cpc	r19, r1
    3136:	91 f0       	breq	.+36     	; 0x315c <Keypad_GetButtonStatePooling+0xa6>
    3138:	8f 81       	ldd	r24, Y+7	; 0x07
    313a:	98 85       	ldd	r25, Y+8	; 0x08
    313c:	83 30       	cpi	r24, 0x03	; 3
    313e:	91 05       	cpc	r25, r1
    3140:	99 f0       	breq	.+38     	; 0x3168 <Keypad_GetButtonStatePooling+0xb2>
    3142:	17 c0       	rjmp	.+46     	; 0x3172 <Keypad_GetButtonStatePooling+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    3144:	83 e0       	ldi	r24, 0x03	; 3
    3146:	64 e0       	ldi	r22, 0x04	; 4
    3148:	40 e0       	ldi	r20, 0x00	; 0
    314a:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    314e:	11 c0       	rjmp	.+34     	; 0x3172 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    3150:	83 e0       	ldi	r24, 0x03	; 3
    3152:	65 e0       	ldi	r22, 0x05	; 5
    3154:	40 e0       	ldi	r20, 0x00	; 0
    3156:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    315a:	0b c0       	rjmp	.+22     	; 0x3172 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    315c:	83 e0       	ldi	r24, 0x03	; 3
    315e:	66 e0       	ldi	r22, 0x06	; 6
    3160:	40 e0       	ldi	r20, 0x00	; 0
    3162:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    3166:	05 c0       	rjmp	.+10     	; 0x3172 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    3168:	83 e0       	ldi	r24, 0x03	; 3
    316a:	67 e0       	ldi	r22, 0x07	; 7
    316c:	40 e0       	ldi	r20, 0x00	; 0
    316e:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    3172:	8a 81       	ldd	r24, Y+2	; 0x02
    3174:	28 2f       	mov	r18, r24
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	3e 83       	std	Y+6, r19	; 0x06
    317a:	2d 83       	std	Y+5, r18	; 0x05
    317c:	8d 81       	ldd	r24, Y+5	; 0x05
    317e:	9e 81       	ldd	r25, Y+6	; 0x06
    3180:	81 30       	cpi	r24, 0x01	; 1
    3182:	91 05       	cpc	r25, r1
    3184:	19 f1       	breq	.+70     	; 0x31cc <Keypad_GetButtonStatePooling+0x116>
    3186:	2d 81       	ldd	r18, Y+5	; 0x05
    3188:	3e 81       	ldd	r19, Y+6	; 0x06
    318a:	22 30       	cpi	r18, 0x02	; 2
    318c:	31 05       	cpc	r19, r1
    318e:	2c f4       	brge	.+10     	; 0x319a <Keypad_GetButtonStatePooling+0xe4>
    3190:	8d 81       	ldd	r24, Y+5	; 0x05
    3192:	9e 81       	ldd	r25, Y+6	; 0x06
    3194:	00 97       	sbiw	r24, 0x00	; 0
    3196:	61 f0       	breq	.+24     	; 0x31b0 <Keypad_GetButtonStatePooling+0xfa>
    3198:	42 c0       	rjmp	.+132    	; 0x321e <Keypad_GetButtonStatePooling+0x168>
    319a:	2d 81       	ldd	r18, Y+5	; 0x05
    319c:	3e 81       	ldd	r19, Y+6	; 0x06
    319e:	22 30       	cpi	r18, 0x02	; 2
    31a0:	31 05       	cpc	r19, r1
    31a2:	11 f1       	breq	.+68     	; 0x31e8 <Keypad_GetButtonStatePooling+0x132>
    31a4:	8d 81       	ldd	r24, Y+5	; 0x05
    31a6:	9e 81       	ldd	r25, Y+6	; 0x06
    31a8:	83 30       	cpi	r24, 0x03	; 3
    31aa:	91 05       	cpc	r25, r1
    31ac:	59 f1       	breq	.+86     	; 0x3204 <Keypad_GetButtonStatePooling+0x14e>
    31ae:	37 c0       	rjmp	.+110    	; 0x321e <Keypad_GetButtonStatePooling+0x168>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    31b0:	83 e0       	ldi	r24, 0x03	; 3
    31b2:	60 e0       	ldi	r22, 0x00	; 0
    31b4:	0e 94 66 0b 	call	0x16cc	; 0x16cc <DIO_ReadPinLevel>
    31b8:	88 23       	and	r24, r24
    31ba:	89 f5       	brne	.+98     	; 0x321e <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    31bc:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW);
    31be:	83 e0       	ldi	r24, 0x03	; 3
    31c0:	60 e0       	ldi	r22, 0x00	; 0
    31c2:	0e 94 66 0b 	call	0x16cc	; 0x16cc <DIO_ReadPinLevel>
    31c6:	88 23       	and	r24, r24
    31c8:	d1 f3       	breq	.-12     	; 0x31be <Keypad_GetButtonStatePooling+0x108>
    31ca:	29 c0       	rjmp	.+82     	; 0x321e <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    31cc:	83 e0       	ldi	r24, 0x03	; 3
    31ce:	61 e0       	ldi	r22, 0x01	; 1
    31d0:	0e 94 66 0b 	call	0x16cc	; 0x16cc <DIO_ReadPinLevel>
    31d4:	88 23       	and	r24, r24
    31d6:	19 f5       	brne	.+70     	; 0x321e <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    31d8:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW);
    31da:	83 e0       	ldi	r24, 0x03	; 3
    31dc:	61 e0       	ldi	r22, 0x01	; 1
    31de:	0e 94 66 0b 	call	0x16cc	; 0x16cc <DIO_ReadPinLevel>
    31e2:	88 23       	and	r24, r24
    31e4:	d1 f3       	breq	.-12     	; 0x31da <Keypad_GetButtonStatePooling+0x124>
    31e6:	1b c0       	rjmp	.+54     	; 0x321e <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    31e8:	83 e0       	ldi	r24, 0x03	; 3
    31ea:	62 e0       	ldi	r22, 0x02	; 2
    31ec:	0e 94 66 0b 	call	0x16cc	; 0x16cc <DIO_ReadPinLevel>
    31f0:	88 23       	and	r24, r24
    31f2:	a9 f4       	brne	.+42     	; 0x321e <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    31f4:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW);
    31f6:	83 e0       	ldi	r24, 0x03	; 3
    31f8:	62 e0       	ldi	r22, 0x02	; 2
    31fa:	0e 94 66 0b 	call	0x16cc	; 0x16cc <DIO_ReadPinLevel>
    31fe:	88 23       	and	r24, r24
    3200:	d1 f3       	breq	.-12     	; 0x31f6 <Keypad_GetButtonStatePooling+0x140>
    3202:	0d c0       	rjmp	.+26     	; 0x321e <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    3204:	83 e0       	ldi	r24, 0x03	; 3
    3206:	63 e0       	ldi	r22, 0x03	; 3
    3208:	0e 94 66 0b 	call	0x16cc	; 0x16cc <DIO_ReadPinLevel>
    320c:	88 23       	and	r24, r24
    320e:	39 f4       	brne	.+14     	; 0x321e <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    3210:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW);
    3212:	83 e0       	ldi	r24, 0x03	; 3
    3214:	63 e0       	ldi	r22, 0x03	; 3
    3216:	0e 94 66 0b 	call	0x16cc	; 0x16cc <DIO_ReadPinLevel>
    321a:	88 23       	and	r24, r24
    321c:	d1 f3       	breq	.-12     	; 0x3212 <Keypad_GetButtonStatePooling+0x15c>
        }
        break;
    default:
        break;
    }
    return state;
    321e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3220:	28 96       	adiw	r28, 0x08	; 8
    3222:	0f b6       	in	r0, 0x3f	; 63
    3224:	f8 94       	cli
    3226:	de bf       	out	0x3e, r29	; 62
    3228:	0f be       	out	0x3f, r0	; 63
    322a:	cd bf       	out	0x3d, r28	; 61
    322c:	cf 91       	pop	r28
    322e:	df 91       	pop	r29
    3230:	08 95       	ret

00003232 <Keypad_GetPressedButton>:


Keypad_ButtonType Keypad_GetPressedButton(void) {
    3232:	df 93       	push	r29
    3234:	cf 93       	push	r28
    3236:	00 d0       	rcall	.+0      	; 0x3238 <Keypad_GetPressedButton+0x6>
    3238:	cd b7       	in	r28, 0x3d	; 61
    323a:	de b7       	in	r29, 0x3e	; 62
    u8 i=0;
    323c:	1a 82       	std	Y+2, r1	; 0x02
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    323e:	80 e1       	ldi	r24, 0x10	; 16
    3240:	89 83       	std	Y+1, r24	; 0x01
    for (i=0; i<16; i++) {
    3242:	1a 82       	std	Y+2, r1	; 0x02
    3244:	0b c0       	rjmp	.+22     	; 0x325c <Keypad_GetPressedButton+0x2a>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
    3246:	8a 81       	ldd	r24, Y+2	; 0x02
    3248:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <Keypad_GetButtonStatePooling>
    324c:	88 23       	and	r24, r24
    324e:	19 f4       	brne	.+6      	; 0x3256 <Keypad_GetPressedButton+0x24>
            pressed_button = i;
    3250:	8a 81       	ldd	r24, Y+2	; 0x02
    3252:	89 83       	std	Y+1, r24	; 0x01
    3254:	06 c0       	rjmp	.+12     	; 0x3262 <Keypad_GetPressedButton+0x30>


Keypad_ButtonType Keypad_GetPressedButton(void) {
    u8 i=0;
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    for (i=0; i<16; i++) {
    3256:	8a 81       	ldd	r24, Y+2	; 0x02
    3258:	8f 5f       	subi	r24, 0xFF	; 255
    325a:	8a 83       	std	Y+2, r24	; 0x02
    325c:	8a 81       	ldd	r24, Y+2	; 0x02
    325e:	80 31       	cpi	r24, 0x10	; 16
    3260:	90 f3       	brcs	.-28     	; 0x3246 <Keypad_GetPressedButton+0x14>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
            pressed_button = i;
            break;
        }
    }
    return pressed_button;
    3262:	89 81       	ldd	r24, Y+1	; 0x01
}
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	cf 91       	pop	r28
    326a:	df 91       	pop	r29
    326c:	08 95       	ret

0000326e <LCD_Init>:

static void LCD_SendData(u8 data);
static void LCD_SendCommand(u8 command);
static void LCD_InitPinsMode(void);

void LCD_Init(void) {
    326e:	df 93       	push	r29
    3270:	cf 93       	push	r28
    3272:	cd b7       	in	r28, 0x3d	; 61
    3274:	de b7       	in	r29, 0x3e	; 62
    3276:	2f 97       	sbiw	r28, 0x0f	; 15
    3278:	0f b6       	in	r0, 0x3f	; 63
    327a:	f8 94       	cli
    327c:	de bf       	out	0x3e, r29	; 62
    327e:	0f be       	out	0x3f, r0	; 63
    3280:	cd bf       	out	0x3d, r28	; 61
    u8 command = 0;
    3282:	1f 86       	std	Y+15, r1	; 0x0f
    LCD_InitPinsMode();
    3284:	0e 94 c5 1c 	call	0x398a	; 0x398a <LCD_InitPinsMode>
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	a0 ef       	ldi	r26, 0xF0	; 240
    328e:	b1 e4       	ldi	r27, 0x41	; 65
    3290:	8b 87       	std	Y+11, r24	; 0x0b
    3292:	9c 87       	std	Y+12, r25	; 0x0c
    3294:	ad 87       	std	Y+13, r26	; 0x0d
    3296:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3298:	6b 85       	ldd	r22, Y+11	; 0x0b
    329a:	7c 85       	ldd	r23, Y+12	; 0x0c
    329c:	8d 85       	ldd	r24, Y+13	; 0x0d
    329e:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	4a ef       	ldi	r20, 0xFA	; 250
    32a6:	54 e4       	ldi	r21, 0x44	; 68
    32a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	8f 83       	std	Y+7, r24	; 0x07
    32b2:	98 87       	std	Y+8, r25	; 0x08
    32b4:	a9 87       	std	Y+9, r26	; 0x09
    32b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32b8:	6f 81       	ldd	r22, Y+7	; 0x07
    32ba:	78 85       	ldd	r23, Y+8	; 0x08
    32bc:	89 85       	ldd	r24, Y+9	; 0x09
    32be:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	40 e8       	ldi	r20, 0x80	; 128
    32c6:	5f e3       	ldi	r21, 0x3F	; 63
    32c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32cc:	88 23       	and	r24, r24
    32ce:	2c f4       	brge	.+10     	; 0x32da <LCD_Init+0x6c>
		__ticks = 1;
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	9e 83       	std	Y+6, r25	; 0x06
    32d6:	8d 83       	std	Y+5, r24	; 0x05
    32d8:	3f c0       	rjmp	.+126    	; 0x3358 <LCD_Init+0xea>
	else if (__tmp > 65535)
    32da:	6f 81       	ldd	r22, Y+7	; 0x07
    32dc:	78 85       	ldd	r23, Y+8	; 0x08
    32de:	89 85       	ldd	r24, Y+9	; 0x09
    32e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e2:	20 e0       	ldi	r18, 0x00	; 0
    32e4:	3f ef       	ldi	r19, 0xFF	; 255
    32e6:	4f e7       	ldi	r20, 0x7F	; 127
    32e8:	57 e4       	ldi	r21, 0x47	; 71
    32ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32ee:	18 16       	cp	r1, r24
    32f0:	4c f5       	brge	.+82     	; 0x3344 <LCD_Init+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    32f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    32f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    32f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    32fa:	20 e0       	ldi	r18, 0x00	; 0
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	40 e2       	ldi	r20, 0x20	; 32
    3300:	51 e4       	ldi	r21, 0x41	; 65
    3302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3306:	dc 01       	movw	r26, r24
    3308:	cb 01       	movw	r24, r22
    330a:	bc 01       	movw	r22, r24
    330c:	cd 01       	movw	r24, r26
    330e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	9e 83       	std	Y+6, r25	; 0x06
    3318:	8d 83       	std	Y+5, r24	; 0x05
    331a:	0f c0       	rjmp	.+30     	; 0x333a <LCD_Init+0xcc>
    331c:	88 ec       	ldi	r24, 0xC8	; 200
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	9c 83       	std	Y+4, r25	; 0x04
    3322:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3324:	8b 81       	ldd	r24, Y+3	; 0x03
    3326:	9c 81       	ldd	r25, Y+4	; 0x04
    3328:	01 97       	sbiw	r24, 0x01	; 1
    332a:	f1 f7       	brne	.-4      	; 0x3328 <LCD_Init+0xba>
    332c:	9c 83       	std	Y+4, r25	; 0x04
    332e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3330:	8d 81       	ldd	r24, Y+5	; 0x05
    3332:	9e 81       	ldd	r25, Y+6	; 0x06
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	9e 83       	std	Y+6, r25	; 0x06
    3338:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    333a:	8d 81       	ldd	r24, Y+5	; 0x05
    333c:	9e 81       	ldd	r25, Y+6	; 0x06
    333e:	00 97       	sbiw	r24, 0x00	; 0
    3340:	69 f7       	brne	.-38     	; 0x331c <LCD_Init+0xae>
    3342:	14 c0       	rjmp	.+40     	; 0x336c <LCD_Init+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3344:	6f 81       	ldd	r22, Y+7	; 0x07
    3346:	78 85       	ldd	r23, Y+8	; 0x08
    3348:	89 85       	ldd	r24, Y+9	; 0x09
    334a:	9a 85       	ldd	r25, Y+10	; 0x0a
    334c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	9e 83       	std	Y+6, r25	; 0x06
    3356:	8d 83       	std	Y+5, r24	; 0x05
    3358:	8d 81       	ldd	r24, Y+5	; 0x05
    335a:	9e 81       	ldd	r25, Y+6	; 0x06
    335c:	9a 83       	std	Y+2, r25	; 0x02
    335e:	89 83       	std	Y+1, r24	; 0x01
    3360:	89 81       	ldd	r24, Y+1	; 0x01
    3362:	9a 81       	ldd	r25, Y+2	; 0x02
    3364:	01 97       	sbiw	r24, 0x01	; 1
    3366:	f1 f7       	brne	.-4      	; 0x3364 <LCD_Init+0xf6>
    3368:	9a 83       	std	Y+2, r25	; 0x02
    336a:	89 83       	std	Y+1, r24	; 0x01

    /* Function Set:
        N: 1 (two lines)
        F: 0 (5x7)
    */
    command = 0b00110000;
    336c:	80 e3       	ldi	r24, 0x30	; 48
    336e:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_LINES == LCD_TWO_LINES)
        SET_BIT(command, 3);
    3370:	8f 85       	ldd	r24, Y+15	; 0x0f
    3372:	88 60       	ori	r24, 0x08	; 8
    3374:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_DOTS == LCD_DOTS_5X10)
        SET_BIT(command, 2);
    3376:	8f 85       	ldd	r24, Y+15	; 0x0f
    3378:	84 60       	ori	r24, 0x04	; 4
    337a:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    337c:	8f 85       	ldd	r24, Y+15	; 0x0f
    337e:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
    /* Display ON/OFF
        D: 1 (Display ON)
        C: 0 (Cursor off)
        B: 0 (Cursor not blink)
    */
    command = 0b00001000; 
    3382:	88 e0       	ldi	r24, 0x08	; 8
    3384:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_DISPLAY == LCD_DISPLAY_ON)
        SET_BIT(command, 2);
    3386:	8f 85       	ldd	r24, Y+15	; 0x0f
    3388:	84 60       	ori	r24, 0x04	; 4
    338a:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_BLINK)
        SET_BIT(command, 0);
    338c:	8f 85       	ldd	r24, Y+15	; 0x0f
    338e:	81 60       	ori	r24, 0x01	; 1
    3390:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(command, 1);
    3392:	8f 85       	ldd	r24, Y+15	; 0x0f
    3394:	82 60       	ori	r24, 0x02	; 2
    3396:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_NO_BLINK)
        SET_BIT(command, 1);
    3398:	8f 85       	ldd	r24, Y+15	; 0x0f
    339a:	82 60       	ori	r24, 0x02	; 2
    339c:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    339e:	8f 85       	ldd	r24, Y+15	; 0x0f
    33a0:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>

    /* Display Clear */
    LCD_SendCommand(0b00000001);
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
}
    33aa:	2f 96       	adiw	r28, 0x0f	; 15
    33ac:	0f b6       	in	r0, 0x3f	; 63
    33ae:	f8 94       	cli
    33b0:	de bf       	out	0x3e, r29	; 62
    33b2:	0f be       	out	0x3f, r0	; 63
    33b4:	cd bf       	out	0x3d, r28	; 61
    33b6:	cf 91       	pop	r28
    33b8:	df 91       	pop	r29
    33ba:	08 95       	ret

000033bc <LCD_Clear>:


void LCD_Clear (void) {
    33bc:	df 93       	push	r29
    33be:	cf 93       	push	r28
    33c0:	cd b7       	in	r28, 0x3d	; 61
    33c2:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(0b00000001);
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
}
    33ca:	cf 91       	pop	r28
    33cc:	df 91       	pop	r29
    33ce:	08 95       	ret

000033d0 <LCD_DisplayCharacter>:

void LCD_DisplayCharacter (u8 data) {
    33d0:	df 93       	push	r29
    33d2:	cf 93       	push	r28
    33d4:	0f 92       	push	r0
    33d6:	cd b7       	in	r28, 0x3d	; 61
    33d8:	de b7       	in	r29, 0x3e	; 62
    33da:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
    33dc:	89 81       	ldd	r24, Y+1	; 0x01
    33de:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <LCD_SendData>
}
    33e2:	0f 90       	pop	r0
    33e4:	cf 91       	pop	r28
    33e6:	df 91       	pop	r29
    33e8:	08 95       	ret

000033ea <LCD_DisplayString>:

void LCD_DisplayString (u8 *str) {
    33ea:	df 93       	push	r29
    33ec:	cf 93       	push	r28
    33ee:	00 d0       	rcall	.+0      	; 0x33f0 <LCD_DisplayString+0x6>
    33f0:	0f 92       	push	r0
    33f2:	cd b7       	in	r28, 0x3d	; 61
    33f4:	de b7       	in	r29, 0x3e	; 62
    33f6:	9b 83       	std	Y+3, r25	; 0x03
    33f8:	8a 83       	std	Y+2, r24	; 0x02
    u8 i=0;
    33fa:	19 82       	std	Y+1, r1	; 0x01
    33fc:	0e c0       	rjmp	.+28     	; 0x341a <LCD_DisplayString+0x30>
    while(str[i] != '\0') {
        LCD_DisplayCharacter(str[i]);
    33fe:	89 81       	ldd	r24, Y+1	; 0x01
    3400:	28 2f       	mov	r18, r24
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	8a 81       	ldd	r24, Y+2	; 0x02
    3406:	9b 81       	ldd	r25, Y+3	; 0x03
    3408:	fc 01       	movw	r30, r24
    340a:	e2 0f       	add	r30, r18
    340c:	f3 1f       	adc	r31, r19
    340e:	80 81       	ld	r24, Z
    3410:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <LCD_DisplayCharacter>
        i++;
    3414:	89 81       	ldd	r24, Y+1	; 0x01
    3416:	8f 5f       	subi	r24, 0xFF	; 255
    3418:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
}

void LCD_DisplayString (u8 *str) {
    u8 i=0;
    while(str[i] != '\0') {
    341a:	89 81       	ldd	r24, Y+1	; 0x01
    341c:	28 2f       	mov	r18, r24
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	8a 81       	ldd	r24, Y+2	; 0x02
    3422:	9b 81       	ldd	r25, Y+3	; 0x03
    3424:	fc 01       	movw	r30, r24
    3426:	e2 0f       	add	r30, r18
    3428:	f3 1f       	adc	r31, r19
    342a:	80 81       	ld	r24, Z
    342c:	88 23       	and	r24, r24
    342e:	39 f7       	brne	.-50     	; 0x33fe <LCD_DisplayString+0x14>
        LCD_DisplayCharacter(str[i]);
        i++;
    }
}
    3430:	0f 90       	pop	r0
    3432:	0f 90       	pop	r0
    3434:	0f 90       	pop	r0
    3436:	cf 91       	pop	r28
    3438:	df 91       	pop	r29
    343a:	08 95       	ret

0000343c <LCD_SetCursorPosition>:

void LCD_SetCursorPosition(u8 row, u8 column) {
    343c:	df 93       	push	r29
    343e:	cf 93       	push	r28
    3440:	00 d0       	rcall	.+0      	; 0x3442 <LCD_SetCursorPosition+0x6>
    3442:	0f 92       	push	r0
    3444:	cd b7       	in	r28, 0x3d	; 61
    3446:	de b7       	in	r29, 0x3e	; 62
    3448:	8a 83       	std	Y+2, r24	; 0x02
    344a:	6b 83       	std	Y+3, r22	; 0x03
    u8 address = column + row*0x40;
    344c:	8a 81       	ldd	r24, Y+2	; 0x02
    344e:	88 2f       	mov	r24, r24
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	00 24       	eor	r0, r0
    3454:	96 95       	lsr	r25
    3456:	87 95       	ror	r24
    3458:	07 94       	ror	r0
    345a:	96 95       	lsr	r25
    345c:	87 95       	ror	r24
    345e:	07 94       	ror	r0
    3460:	98 2f       	mov	r25, r24
    3462:	80 2d       	mov	r24, r0
    3464:	98 2f       	mov	r25, r24
    3466:	8b 81       	ldd	r24, Y+3	; 0x03
    3468:	89 0f       	add	r24, r25
    346a:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(address, 7);
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	80 68       	ori	r24, 0x80	; 128
    3470:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendCommand(address);
    3472:	89 81       	ldd	r24, Y+1	; 0x01
    3474:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
}
    3478:	0f 90       	pop	r0
    347a:	0f 90       	pop	r0
    347c:	0f 90       	pop	r0
    347e:	cf 91       	pop	r28
    3480:	df 91       	pop	r29
    3482:	08 95       	ret

00003484 <LCD_DisplayNumber>:

void LCD_DisplayNumber (s32 number) {
    3484:	df 93       	push	r29
    3486:	cf 93       	push	r28
    3488:	00 d0       	rcall	.+0      	; 0x348a <LCD_DisplayNumber+0x6>
    348a:	00 d0       	rcall	.+0      	; 0x348c <LCD_DisplayNumber+0x8>
    348c:	00 d0       	rcall	.+0      	; 0x348e <LCD_DisplayNumber+0xa>
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62
    3492:	9e 83       	std	Y+6, r25	; 0x06
    3494:	8d 83       	std	Y+5, r24	; 0x05
    u32 reversed_number = 0;
    3496:	1c 82       	std	Y+4, r1	; 0x04
    3498:	1b 82       	std	Y+3, r1	; 0x03
    u8 digits = 0;
    349a:	1a 82       	std	Y+2, r1	; 0x02
    if (number < 0) {
    349c:	8d 81       	ldd	r24, Y+5	; 0x05
    349e:	9e 81       	ldd	r25, Y+6	; 0x06
    34a0:	99 23       	and	r25, r25
    34a2:	5c f4       	brge	.+22     	; 0x34ba <LCD_DisplayNumber+0x36>
        number = number*-1;
    34a4:	8d 81       	ldd	r24, Y+5	; 0x05
    34a6:	9e 81       	ldd	r25, Y+6	; 0x06
    34a8:	90 95       	com	r25
    34aa:	81 95       	neg	r24
    34ac:	9f 4f       	sbci	r25, 0xFF	; 255
    34ae:	9e 83       	std	Y+6, r25	; 0x06
    34b0:	8d 83       	std	Y+5, r24	; 0x05
        LCD_DisplayCharacter('-');
    34b2:	8d e2       	ldi	r24, 0x2D	; 45
    34b4:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <LCD_DisplayCharacter>
    34b8:	2d c0       	rjmp	.+90     	; 0x3514 <LCD_DisplayNumber+0x90>
    }
    else if (number == 0) {
    34ba:	8d 81       	ldd	r24, Y+5	; 0x05
    34bc:	9e 81       	ldd	r25, Y+6	; 0x06
    34be:	00 97       	sbiw	r24, 0x00	; 0
    34c0:	49 f5       	brne	.+82     	; 0x3514 <LCD_DisplayNumber+0x90>
        LCD_DisplayCharacter('0');
    34c2:	80 e3       	ldi	r24, 0x30	; 48
    34c4:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <LCD_DisplayCharacter>
    34c8:	25 c0       	rjmp	.+74     	; 0x3514 <LCD_DisplayNumber+0x90>
    }
    while (number != 0)
    {
        reversed_number = (reversed_number*10) + (number%10);
    34ca:	8b 81       	ldd	r24, Y+3	; 0x03
    34cc:	9c 81       	ldd	r25, Y+4	; 0x04
    34ce:	9c 01       	movw	r18, r24
    34d0:	22 0f       	add	r18, r18
    34d2:	33 1f       	adc	r19, r19
    34d4:	c9 01       	movw	r24, r18
    34d6:	88 0f       	add	r24, r24
    34d8:	99 1f       	adc	r25, r25
    34da:	88 0f       	add	r24, r24
    34dc:	99 1f       	adc	r25, r25
    34de:	f9 01       	movw	r30, r18
    34e0:	e8 0f       	add	r30, r24
    34e2:	f9 1f       	adc	r31, r25
    34e4:	8d 81       	ldd	r24, Y+5	; 0x05
    34e6:	9e 81       	ldd	r25, Y+6	; 0x06
    34e8:	2a e0       	ldi	r18, 0x0A	; 10
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	b9 01       	movw	r22, r18
    34ee:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__divmodhi4>
    34f2:	8e 0f       	add	r24, r30
    34f4:	9f 1f       	adc	r25, r31
    34f6:	9c 83       	std	Y+4, r25	; 0x04
    34f8:	8b 83       	std	Y+3, r24	; 0x03
        number = number / 10;
    34fa:	8d 81       	ldd	r24, Y+5	; 0x05
    34fc:	9e 81       	ldd	r25, Y+6	; 0x06
    34fe:	2a e0       	ldi	r18, 0x0A	; 10
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	b9 01       	movw	r22, r18
    3504:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__divmodhi4>
    3508:	cb 01       	movw	r24, r22
    350a:	9e 83       	std	Y+6, r25	; 0x06
    350c:	8d 83       	std	Y+5, r24	; 0x05
        digits++;
    350e:	8a 81       	ldd	r24, Y+2	; 0x02
    3510:	8f 5f       	subi	r24, 0xFF	; 255
    3512:	8a 83       	std	Y+2, r24	; 0x02
        LCD_DisplayCharacter('-');
    }
    else if (number == 0) {
        LCD_DisplayCharacter('0');
    }
    while (number != 0)
    3514:	8d 81       	ldd	r24, Y+5	; 0x05
    3516:	9e 81       	ldd	r25, Y+6	; 0x06
    3518:	00 97       	sbiw	r24, 0x00	; 0
    351a:	b9 f6       	brne	.-82     	; 0x34ca <LCD_DisplayNumber+0x46>
    351c:	1b c0       	rjmp	.+54     	; 0x3554 <LCD_DisplayNumber+0xd0>
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    {
        u8 data = reversed_number % 10;
    351e:	8b 81       	ldd	r24, Y+3	; 0x03
    3520:	9c 81       	ldd	r25, Y+4	; 0x04
    3522:	2a e0       	ldi	r18, 0x0A	; 10
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	b9 01       	movw	r22, r18
    3528:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <__udivmodhi4>
    352c:	89 83       	std	Y+1, r24	; 0x01
        data = data + '0';
    352e:	89 81       	ldd	r24, Y+1	; 0x01
    3530:	80 5d       	subi	r24, 0xD0	; 208
    3532:	89 83       	std	Y+1, r24	; 0x01
        LCD_DisplayCharacter(data);
    3534:	89 81       	ldd	r24, Y+1	; 0x01
    3536:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <LCD_DisplayCharacter>
        reversed_number = reversed_number / 10;
    353a:	8b 81       	ldd	r24, Y+3	; 0x03
    353c:	9c 81       	ldd	r25, Y+4	; 0x04
    353e:	2a e0       	ldi	r18, 0x0A	; 10
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	b9 01       	movw	r22, r18
    3544:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <__udivmodhi4>
    3548:	cb 01       	movw	r24, r22
    354a:	9c 83       	std	Y+4, r25	; 0x04
    354c:	8b 83       	std	Y+3, r24	; 0x03
        digits--;
    354e:	8a 81       	ldd	r24, Y+2	; 0x02
    3550:	81 50       	subi	r24, 0x01	; 1
    3552:	8a 83       	std	Y+2, r24	; 0x02
    {
        reversed_number = (reversed_number*10) + (number%10);
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    3554:	8b 81       	ldd	r24, Y+3	; 0x03
    3556:	9c 81       	ldd	r25, Y+4	; 0x04
    3558:	00 97       	sbiw	r24, 0x00	; 0
    355a:	09 f7       	brne	.-62     	; 0x351e <LCD_DisplayNumber+0x9a>
    355c:	06 c0       	rjmp	.+12     	; 0x356a <LCD_DisplayNumber+0xe6>
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
        LCD_DisplayCharacter('0');
    355e:	80 e3       	ldi	r24, 0x30	; 48
    3560:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <LCD_DisplayCharacter>
        digits--;
    3564:	8a 81       	ldd	r24, Y+2	; 0x02
    3566:	81 50       	subi	r24, 0x01	; 1
    3568:	8a 83       	std	Y+2, r24	; 0x02
        data = data + '0';
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
    356a:	8a 81       	ldd	r24, Y+2	; 0x02
    356c:	88 23       	and	r24, r24
    356e:	b9 f7       	brne	.-18     	; 0x355e <LCD_DisplayNumber+0xda>
        LCD_DisplayCharacter('0');
        digits--;
    }
    
}
    3570:	26 96       	adiw	r28, 0x06	; 6
    3572:	0f b6       	in	r0, 0x3f	; 63
    3574:	f8 94       	cli
    3576:	de bf       	out	0x3e, r29	; 62
    3578:	0f be       	out	0x3f, r0	; 63
    357a:	cd bf       	out	0x3d, r28	; 61
    357c:	cf 91       	pop	r28
    357e:	df 91       	pop	r29
    3580:	08 95       	ret

00003582 <LCD_ShiftLeft>:

void LCD_ShiftLeft (u8 counter) {
    3582:	df 93       	push	r29
    3584:	cf 93       	push	r28
    3586:	00 d0       	rcall	.+0      	; 0x3588 <LCD_ShiftLeft+0x6>
    3588:	cd b7       	in	r28, 0x3d	; 61
    358a:	de b7       	in	r29, 0x3e	; 62
    358c:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    358e:	19 82       	std	Y+1, r1	; 0x01
    3590:	06 c0       	rjmp	.+12     	; 0x359e <LCD_ShiftLeft+0x1c>
        LCD_SendCommand(0b00011000);
    3592:	88 e1       	ldi	r24, 0x18	; 24
    3594:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
    
}

void LCD_ShiftLeft (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    3598:	89 81       	ldd	r24, Y+1	; 0x01
    359a:	8f 5f       	subi	r24, 0xFF	; 255
    359c:	89 83       	std	Y+1, r24	; 0x01
    359e:	99 81       	ldd	r25, Y+1	; 0x01
    35a0:	8a 81       	ldd	r24, Y+2	; 0x02
    35a2:	98 17       	cp	r25, r24
    35a4:	b0 f3       	brcs	.-20     	; 0x3592 <LCD_ShiftLeft+0x10>
        LCD_SendCommand(0b00011000);
    }
}
    35a6:	0f 90       	pop	r0
    35a8:	0f 90       	pop	r0
    35aa:	cf 91       	pop	r28
    35ac:	df 91       	pop	r29
    35ae:	08 95       	ret

000035b0 <LCD_ShiftRight>:
void LCD_ShiftRight (u8 counter) {
    35b0:	df 93       	push	r29
    35b2:	cf 93       	push	r28
    35b4:	00 d0       	rcall	.+0      	; 0x35b6 <LCD_ShiftRight+0x6>
    35b6:	cd b7       	in	r28, 0x3d	; 61
    35b8:	de b7       	in	r29, 0x3e	; 62
    35ba:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    35bc:	19 82       	std	Y+1, r1	; 0x01
    35be:	06 c0       	rjmp	.+12     	; 0x35cc <LCD_ShiftRight+0x1c>
        LCD_SendCommand(0b00011100);
    35c0:	8c e1       	ldi	r24, 0x1C	; 28
    35c2:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
        LCD_SendCommand(0b00011000);
    }
}
void LCD_ShiftRight (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    35c6:	89 81       	ldd	r24, Y+1	; 0x01
    35c8:	8f 5f       	subi	r24, 0xFF	; 255
    35ca:	89 83       	std	Y+1, r24	; 0x01
    35cc:	99 81       	ldd	r25, Y+1	; 0x01
    35ce:	8a 81       	ldd	r24, Y+2	; 0x02
    35d0:	98 17       	cp	r25, r24
    35d2:	b0 f3       	brcs	.-20     	; 0x35c0 <LCD_ShiftRight+0x10>
        LCD_SendCommand(0b00011100);
    }
}
    35d4:	0f 90       	pop	r0
    35d6:	0f 90       	pop	r0
    35d8:	cf 91       	pop	r28
    35da:	df 91       	pop	r29
    35dc:	08 95       	ret

000035de <LCD_SendCommand>:

static void LCD_SendCommand(u8 command) {
    35de:	df 93       	push	r29
    35e0:	cf 93       	push	r28
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
    35e6:	2f 97       	sbiw	r28, 0x0f	; 15
    35e8:	0f b6       	in	r0, 0x3f	; 63
    35ea:	f8 94       	cli
    35ec:	de bf       	out	0x3e, r29	; 62
    35ee:	0f be       	out	0x3f, r0	; 63
    35f0:	cd bf       	out	0x3d, r28	; 61
    35f2:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 0 Command
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_LOW);
    35f4:	82 e0       	ldi	r24, 0x02	; 2
    35f6:	60 e0       	ldi	r22, 0x00	; 0
    35f8:	40 e0       	ldi	r20, 0x00	; 0
    35fa:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    35fe:	82 e0       	ldi	r24, 0x02	; 2
    3600:	61 e0       	ldi	r22, 0x01	; 1
    3602:	40 e0       	ldi	r20, 0x00	; 0
    3604:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    
    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(command, 0));
    3608:	8f 85       	ldd	r24, Y+15	; 0x0f
    360a:	98 2f       	mov	r25, r24
    360c:	91 70       	andi	r25, 0x01	; 1
    360e:	83 e0       	ldi	r24, 0x03	; 3
    3610:	60 e0       	ldi	r22, 0x00	; 0
    3612:	49 2f       	mov	r20, r25
    3614:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(command, 1));
    3618:	8f 85       	ldd	r24, Y+15	; 0x0f
    361a:	86 95       	lsr	r24
    361c:	98 2f       	mov	r25, r24
    361e:	91 70       	andi	r25, 0x01	; 1
    3620:	83 e0       	ldi	r24, 0x03	; 3
    3622:	61 e0       	ldi	r22, 0x01	; 1
    3624:	49 2f       	mov	r20, r25
    3626:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(command, 2));
    362a:	8f 85       	ldd	r24, Y+15	; 0x0f
    362c:	86 95       	lsr	r24
    362e:	86 95       	lsr	r24
    3630:	98 2f       	mov	r25, r24
    3632:	91 70       	andi	r25, 0x01	; 1
    3634:	83 e0       	ldi	r24, 0x03	; 3
    3636:	62 e0       	ldi	r22, 0x02	; 2
    3638:	49 2f       	mov	r20, r25
    363a:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(command, 3));
    363e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3640:	86 95       	lsr	r24
    3642:	86 95       	lsr	r24
    3644:	86 95       	lsr	r24
    3646:	98 2f       	mov	r25, r24
    3648:	91 70       	andi	r25, 0x01	; 1
    364a:	83 e0       	ldi	r24, 0x03	; 3
    364c:	63 e0       	ldi	r22, 0x03	; 3
    364e:	49 2f       	mov	r20, r25
    3650:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(command, 4));
    3654:	8f 85       	ldd	r24, Y+15	; 0x0f
    3656:	82 95       	swap	r24
    3658:	8f 70       	andi	r24, 0x0F	; 15
    365a:	98 2f       	mov	r25, r24
    365c:	91 70       	andi	r25, 0x01	; 1
    365e:	83 e0       	ldi	r24, 0x03	; 3
    3660:	64 e0       	ldi	r22, 0x04	; 4
    3662:	49 2f       	mov	r20, r25
    3664:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(command, 5));
    3668:	8f 85       	ldd	r24, Y+15	; 0x0f
    366a:	82 95       	swap	r24
    366c:	86 95       	lsr	r24
    366e:	87 70       	andi	r24, 0x07	; 7
    3670:	98 2f       	mov	r25, r24
    3672:	91 70       	andi	r25, 0x01	; 1
    3674:	83 e0       	ldi	r24, 0x03	; 3
    3676:	65 e0       	ldi	r22, 0x05	; 5
    3678:	49 2f       	mov	r20, r25
    367a:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(command, 6));
    367e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3680:	82 95       	swap	r24
    3682:	86 95       	lsr	r24
    3684:	86 95       	lsr	r24
    3686:	83 70       	andi	r24, 0x03	; 3
    3688:	98 2f       	mov	r25, r24
    368a:	91 70       	andi	r25, 0x01	; 1
    368c:	83 e0       	ldi	r24, 0x03	; 3
    368e:	66 e0       	ldi	r22, 0x06	; 6
    3690:	49 2f       	mov	r20, r25
    3692:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(command, 7));
    3696:	8f 85       	ldd	r24, Y+15	; 0x0f
    3698:	98 2f       	mov	r25, r24
    369a:	99 1f       	adc	r25, r25
    369c:	99 27       	eor	r25, r25
    369e:	99 1f       	adc	r25, r25
    36a0:	83 e0       	ldi	r24, 0x03	; 3
    36a2:	67 e0       	ldi	r22, 0x07	; 7
    36a4:	49 2f       	mov	r20, r25
    36a6:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    36aa:	82 e0       	ldi	r24, 0x02	; 2
    36ac:	62 e0       	ldi	r22, 0x02	; 2
    36ae:	41 e0       	ldi	r20, 0x01	; 1
    36b0:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	a0 e0       	ldi	r26, 0x00	; 0
    36ba:	b0 e4       	ldi	r27, 0x40	; 64
    36bc:	8b 87       	std	Y+11, r24	; 0x0b
    36be:	9c 87       	std	Y+12, r25	; 0x0c
    36c0:	ad 87       	std	Y+13, r26	; 0x0d
    36c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    36c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    36c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	4a ef       	ldi	r20, 0xFA	; 250
    36d2:	54 e4       	ldi	r21, 0x44	; 68
    36d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	8f 83       	std	Y+7, r24	; 0x07
    36de:	98 87       	std	Y+8, r25	; 0x08
    36e0:	a9 87       	std	Y+9, r26	; 0x09
    36e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36e4:	6f 81       	ldd	r22, Y+7	; 0x07
    36e6:	78 85       	ldd	r23, Y+8	; 0x08
    36e8:	89 85       	ldd	r24, Y+9	; 0x09
    36ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	40 e8       	ldi	r20, 0x80	; 128
    36f2:	5f e3       	ldi	r21, 0x3F	; 63
    36f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36f8:	88 23       	and	r24, r24
    36fa:	2c f4       	brge	.+10     	; 0x3706 <LCD_SendCommand+0x128>
		__ticks = 1;
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	9e 83       	std	Y+6, r25	; 0x06
    3702:	8d 83       	std	Y+5, r24	; 0x05
    3704:	3f c0       	rjmp	.+126    	; 0x3784 <LCD_SendCommand+0x1a6>
	else if (__tmp > 65535)
    3706:	6f 81       	ldd	r22, Y+7	; 0x07
    3708:	78 85       	ldd	r23, Y+8	; 0x08
    370a:	89 85       	ldd	r24, Y+9	; 0x09
    370c:	9a 85       	ldd	r25, Y+10	; 0x0a
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	3f ef       	ldi	r19, 0xFF	; 255
    3712:	4f e7       	ldi	r20, 0x7F	; 127
    3714:	57 e4       	ldi	r21, 0x47	; 71
    3716:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    371a:	18 16       	cp	r1, r24
    371c:	4c f5       	brge	.+82     	; 0x3770 <LCD_SendCommand+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    371e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3720:	7c 85       	ldd	r23, Y+12	; 0x0c
    3722:	8d 85       	ldd	r24, Y+13	; 0x0d
    3724:	9e 85       	ldd	r25, Y+14	; 0x0e
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	40 e2       	ldi	r20, 0x20	; 32
    372c:	51 e4       	ldi	r21, 0x41	; 65
    372e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	bc 01       	movw	r22, r24
    3738:	cd 01       	movw	r24, r26
    373a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	9e 83       	std	Y+6, r25	; 0x06
    3744:	8d 83       	std	Y+5, r24	; 0x05
    3746:	0f c0       	rjmp	.+30     	; 0x3766 <LCD_SendCommand+0x188>
    3748:	88 ec       	ldi	r24, 0xC8	; 200
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	9c 83       	std	Y+4, r25	; 0x04
    374e:	8b 83       	std	Y+3, r24	; 0x03
    3750:	8b 81       	ldd	r24, Y+3	; 0x03
    3752:	9c 81       	ldd	r25, Y+4	; 0x04
    3754:	01 97       	sbiw	r24, 0x01	; 1
    3756:	f1 f7       	brne	.-4      	; 0x3754 <LCD_SendCommand+0x176>
    3758:	9c 83       	std	Y+4, r25	; 0x04
    375a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    375c:	8d 81       	ldd	r24, Y+5	; 0x05
    375e:	9e 81       	ldd	r25, Y+6	; 0x06
    3760:	01 97       	sbiw	r24, 0x01	; 1
    3762:	9e 83       	std	Y+6, r25	; 0x06
    3764:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3766:	8d 81       	ldd	r24, Y+5	; 0x05
    3768:	9e 81       	ldd	r25, Y+6	; 0x06
    376a:	00 97       	sbiw	r24, 0x00	; 0
    376c:	69 f7       	brne	.-38     	; 0x3748 <LCD_SendCommand+0x16a>
    376e:	14 c0       	rjmp	.+40     	; 0x3798 <LCD_SendCommand+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3770:	6f 81       	ldd	r22, Y+7	; 0x07
    3772:	78 85       	ldd	r23, Y+8	; 0x08
    3774:	89 85       	ldd	r24, Y+9	; 0x09
    3776:	9a 85       	ldd	r25, Y+10	; 0x0a
    3778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	9e 83       	std	Y+6, r25	; 0x06
    3782:	8d 83       	std	Y+5, r24	; 0x05
    3784:	8d 81       	ldd	r24, Y+5	; 0x05
    3786:	9e 81       	ldd	r25, Y+6	; 0x06
    3788:	9a 83       	std	Y+2, r25	; 0x02
    378a:	89 83       	std	Y+1, r24	; 0x01
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	9a 81       	ldd	r25, Y+2	; 0x02
    3790:	01 97       	sbiw	r24, 0x01	; 1
    3792:	f1 f7       	brne	.-4      	; 0x3790 <LCD_SendCommand+0x1b2>
    3794:	9a 83       	std	Y+2, r25	; 0x02
    3796:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    3798:	82 e0       	ldi	r24, 0x02	; 2
    379a:	62 e0       	ldi	r22, 0x02	; 2
    379c:	40 e0       	ldi	r20, 0x00	; 0
    379e:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
}
    37a2:	2f 96       	adiw	r28, 0x0f	; 15
    37a4:	0f b6       	in	r0, 0x3f	; 63
    37a6:	f8 94       	cli
    37a8:	de bf       	out	0x3e, r29	; 62
    37aa:	0f be       	out	0x3f, r0	; 63
    37ac:	cd bf       	out	0x3d, r28	; 61
    37ae:	cf 91       	pop	r28
    37b0:	df 91       	pop	r29
    37b2:	08 95       	ret

000037b4 <LCD_SendData>:

static void LCD_SendData(u8 data) {
    37b4:	df 93       	push	r29
    37b6:	cf 93       	push	r28
    37b8:	cd b7       	in	r28, 0x3d	; 61
    37ba:	de b7       	in	r29, 0x3e	; 62
    37bc:	2f 97       	sbiw	r28, 0x0f	; 15
    37be:	0f b6       	in	r0, 0x3f	; 63
    37c0:	f8 94       	cli
    37c2:	de bf       	out	0x3e, r29	; 62
    37c4:	0f be       	out	0x3f, r0	; 63
    37c6:	cd bf       	out	0x3d, r28	; 61
    37c8:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 1 Data
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_HIGH);
    37ca:	82 e0       	ldi	r24, 0x02	; 2
    37cc:	60 e0       	ldi	r22, 0x00	; 0
    37ce:	41 e0       	ldi	r20, 0x01	; 1
    37d0:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    37d4:	82 e0       	ldi	r24, 0x02	; 2
    37d6:	61 e0       	ldi	r22, 0x01	; 1
    37d8:	40 e0       	ldi	r20, 0x00	; 0
    37da:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    
    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(data, 0));
    37de:	8f 85       	ldd	r24, Y+15	; 0x0f
    37e0:	98 2f       	mov	r25, r24
    37e2:	91 70       	andi	r25, 0x01	; 1
    37e4:	83 e0       	ldi	r24, 0x03	; 3
    37e6:	60 e0       	ldi	r22, 0x00	; 0
    37e8:	49 2f       	mov	r20, r25
    37ea:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(data, 1));
    37ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    37f0:	86 95       	lsr	r24
    37f2:	98 2f       	mov	r25, r24
    37f4:	91 70       	andi	r25, 0x01	; 1
    37f6:	83 e0       	ldi	r24, 0x03	; 3
    37f8:	61 e0       	ldi	r22, 0x01	; 1
    37fa:	49 2f       	mov	r20, r25
    37fc:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(data, 2));
    3800:	8f 85       	ldd	r24, Y+15	; 0x0f
    3802:	86 95       	lsr	r24
    3804:	86 95       	lsr	r24
    3806:	98 2f       	mov	r25, r24
    3808:	91 70       	andi	r25, 0x01	; 1
    380a:	83 e0       	ldi	r24, 0x03	; 3
    380c:	62 e0       	ldi	r22, 0x02	; 2
    380e:	49 2f       	mov	r20, r25
    3810:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(data, 3));
    3814:	8f 85       	ldd	r24, Y+15	; 0x0f
    3816:	86 95       	lsr	r24
    3818:	86 95       	lsr	r24
    381a:	86 95       	lsr	r24
    381c:	98 2f       	mov	r25, r24
    381e:	91 70       	andi	r25, 0x01	; 1
    3820:	83 e0       	ldi	r24, 0x03	; 3
    3822:	63 e0       	ldi	r22, 0x03	; 3
    3824:	49 2f       	mov	r20, r25
    3826:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(data, 4));
    382a:	8f 85       	ldd	r24, Y+15	; 0x0f
    382c:	82 95       	swap	r24
    382e:	8f 70       	andi	r24, 0x0F	; 15
    3830:	98 2f       	mov	r25, r24
    3832:	91 70       	andi	r25, 0x01	; 1
    3834:	83 e0       	ldi	r24, 0x03	; 3
    3836:	64 e0       	ldi	r22, 0x04	; 4
    3838:	49 2f       	mov	r20, r25
    383a:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(data, 5));
    383e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3840:	82 95       	swap	r24
    3842:	86 95       	lsr	r24
    3844:	87 70       	andi	r24, 0x07	; 7
    3846:	98 2f       	mov	r25, r24
    3848:	91 70       	andi	r25, 0x01	; 1
    384a:	83 e0       	ldi	r24, 0x03	; 3
    384c:	65 e0       	ldi	r22, 0x05	; 5
    384e:	49 2f       	mov	r20, r25
    3850:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(data, 6));
    3854:	8f 85       	ldd	r24, Y+15	; 0x0f
    3856:	82 95       	swap	r24
    3858:	86 95       	lsr	r24
    385a:	86 95       	lsr	r24
    385c:	83 70       	andi	r24, 0x03	; 3
    385e:	98 2f       	mov	r25, r24
    3860:	91 70       	andi	r25, 0x01	; 1
    3862:	83 e0       	ldi	r24, 0x03	; 3
    3864:	66 e0       	ldi	r22, 0x06	; 6
    3866:	49 2f       	mov	r20, r25
    3868:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(data, 7));
    386c:	8f 85       	ldd	r24, Y+15	; 0x0f
    386e:	98 2f       	mov	r25, r24
    3870:	99 1f       	adc	r25, r25
    3872:	99 27       	eor	r25, r25
    3874:	99 1f       	adc	r25, r25
    3876:	83 e0       	ldi	r24, 0x03	; 3
    3878:	67 e0       	ldi	r22, 0x07	; 7
    387a:	49 2f       	mov	r20, r25
    387c:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    3880:	82 e0       	ldi	r24, 0x02	; 2
    3882:	62 e0       	ldi	r22, 0x02	; 2
    3884:	41 e0       	ldi	r20, 0x01	; 1
    3886:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	a0 e0       	ldi	r26, 0x00	; 0
    3890:	b0 e4       	ldi	r27, 0x40	; 64
    3892:	8b 87       	std	Y+11, r24	; 0x0b
    3894:	9c 87       	std	Y+12, r25	; 0x0c
    3896:	ad 87       	std	Y+13, r26	; 0x0d
    3898:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    389a:	6b 85       	ldd	r22, Y+11	; 0x0b
    389c:	7c 85       	ldd	r23, Y+12	; 0x0c
    389e:	8d 85       	ldd	r24, Y+13	; 0x0d
    38a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	4a ef       	ldi	r20, 0xFA	; 250
    38a8:	54 e4       	ldi	r21, 0x44	; 68
    38aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ae:	dc 01       	movw	r26, r24
    38b0:	cb 01       	movw	r24, r22
    38b2:	8f 83       	std	Y+7, r24	; 0x07
    38b4:	98 87       	std	Y+8, r25	; 0x08
    38b6:	a9 87       	std	Y+9, r26	; 0x09
    38b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38ba:	6f 81       	ldd	r22, Y+7	; 0x07
    38bc:	78 85       	ldd	r23, Y+8	; 0x08
    38be:	89 85       	ldd	r24, Y+9	; 0x09
    38c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	40 e8       	ldi	r20, 0x80	; 128
    38c8:	5f e3       	ldi	r21, 0x3F	; 63
    38ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38ce:	88 23       	and	r24, r24
    38d0:	2c f4       	brge	.+10     	; 0x38dc <LCD_SendData+0x128>
		__ticks = 1;
    38d2:	81 e0       	ldi	r24, 0x01	; 1
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	9e 83       	std	Y+6, r25	; 0x06
    38d8:	8d 83       	std	Y+5, r24	; 0x05
    38da:	3f c0       	rjmp	.+126    	; 0x395a <LCD_SendData+0x1a6>
	else if (__tmp > 65535)
    38dc:	6f 81       	ldd	r22, Y+7	; 0x07
    38de:	78 85       	ldd	r23, Y+8	; 0x08
    38e0:	89 85       	ldd	r24, Y+9	; 0x09
    38e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	3f ef       	ldi	r19, 0xFF	; 255
    38e8:	4f e7       	ldi	r20, 0x7F	; 127
    38ea:	57 e4       	ldi	r21, 0x47	; 71
    38ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38f0:	18 16       	cp	r1, r24
    38f2:	4c f5       	brge	.+82     	; 0x3946 <LCD_SendData+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    38f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    38f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    38fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	40 e2       	ldi	r20, 0x20	; 32
    3902:	51 e4       	ldi	r21, 0x41	; 65
    3904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	bc 01       	movw	r22, r24
    390e:	cd 01       	movw	r24, r26
    3910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3914:	dc 01       	movw	r26, r24
    3916:	cb 01       	movw	r24, r22
    3918:	9e 83       	std	Y+6, r25	; 0x06
    391a:	8d 83       	std	Y+5, r24	; 0x05
    391c:	0f c0       	rjmp	.+30     	; 0x393c <LCD_SendData+0x188>
    391e:	88 ec       	ldi	r24, 0xC8	; 200
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	9c 83       	std	Y+4, r25	; 0x04
    3924:	8b 83       	std	Y+3, r24	; 0x03
    3926:	8b 81       	ldd	r24, Y+3	; 0x03
    3928:	9c 81       	ldd	r25, Y+4	; 0x04
    392a:	01 97       	sbiw	r24, 0x01	; 1
    392c:	f1 f7       	brne	.-4      	; 0x392a <LCD_SendData+0x176>
    392e:	9c 83       	std	Y+4, r25	; 0x04
    3930:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3932:	8d 81       	ldd	r24, Y+5	; 0x05
    3934:	9e 81       	ldd	r25, Y+6	; 0x06
    3936:	01 97       	sbiw	r24, 0x01	; 1
    3938:	9e 83       	std	Y+6, r25	; 0x06
    393a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    393c:	8d 81       	ldd	r24, Y+5	; 0x05
    393e:	9e 81       	ldd	r25, Y+6	; 0x06
    3940:	00 97       	sbiw	r24, 0x00	; 0
    3942:	69 f7       	brne	.-38     	; 0x391e <LCD_SendData+0x16a>
    3944:	14 c0       	rjmp	.+40     	; 0x396e <LCD_SendData+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3946:	6f 81       	ldd	r22, Y+7	; 0x07
    3948:	78 85       	ldd	r23, Y+8	; 0x08
    394a:	89 85       	ldd	r24, Y+9	; 0x09
    394c:	9a 85       	ldd	r25, Y+10	; 0x0a
    394e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3952:	dc 01       	movw	r26, r24
    3954:	cb 01       	movw	r24, r22
    3956:	9e 83       	std	Y+6, r25	; 0x06
    3958:	8d 83       	std	Y+5, r24	; 0x05
    395a:	8d 81       	ldd	r24, Y+5	; 0x05
    395c:	9e 81       	ldd	r25, Y+6	; 0x06
    395e:	9a 83       	std	Y+2, r25	; 0x02
    3960:	89 83       	std	Y+1, r24	; 0x01
    3962:	89 81       	ldd	r24, Y+1	; 0x01
    3964:	9a 81       	ldd	r25, Y+2	; 0x02
    3966:	01 97       	sbiw	r24, 0x01	; 1
    3968:	f1 f7       	brne	.-4      	; 0x3966 <LCD_SendData+0x1b2>
    396a:	9a 83       	std	Y+2, r25	; 0x02
    396c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    396e:	82 e0       	ldi	r24, 0x02	; 2
    3970:	62 e0       	ldi	r22, 0x02	; 2
    3972:	40 e0       	ldi	r20, 0x00	; 0
    3974:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
}
    3978:	2f 96       	adiw	r28, 0x0f	; 15
    397a:	0f b6       	in	r0, 0x3f	; 63
    397c:	f8 94       	cli
    397e:	de bf       	out	0x3e, r29	; 62
    3980:	0f be       	out	0x3f, r0	; 63
    3982:	cd bf       	out	0x3d, r28	; 61
    3984:	cf 91       	pop	r28
    3986:	df 91       	pop	r29
    3988:	08 95       	ret

0000398a <LCD_InitPinsMode>:


static void LCD_InitPinsMode(void) {
    398a:	df 93       	push	r29
    398c:	cf 93       	push	r28
    398e:	cd b7       	in	r28, 0x3d	; 61
    3990:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(LCD_PIN_RS, DIO_OUTPUT);
    3992:	82 e0       	ldi	r24, 0x02	; 2
    3994:	60 e0       	ldi	r22, 0x00	; 0
    3996:	42 e0       	ldi	r20, 0x02	; 2
    3998:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_RW, DIO_OUTPUT);
    399c:	82 e0       	ldi	r24, 0x02	; 2
    399e:	61 e0       	ldi	r22, 0x01	; 1
    39a0:	42 e0       	ldi	r20, 0x02	; 2
    39a2:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_E , DIO_OUTPUT);
    39a6:	82 e0       	ldi	r24, 0x02	; 2
    39a8:	62 e0       	ldi	r22, 0x02	; 2
    39aa:	42 e0       	ldi	r20, 0x02	; 2
    39ac:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D0, DIO_OUTPUT);
    39b0:	83 e0       	ldi	r24, 0x03	; 3
    39b2:	60 e0       	ldi	r22, 0x00	; 0
    39b4:	42 e0       	ldi	r20, 0x02	; 2
    39b6:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D1, DIO_OUTPUT);
    39ba:	83 e0       	ldi	r24, 0x03	; 3
    39bc:	61 e0       	ldi	r22, 0x01	; 1
    39be:	42 e0       	ldi	r20, 0x02	; 2
    39c0:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D2, DIO_OUTPUT);
    39c4:	83 e0       	ldi	r24, 0x03	; 3
    39c6:	62 e0       	ldi	r22, 0x02	; 2
    39c8:	42 e0       	ldi	r20, 0x02	; 2
    39ca:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D3, DIO_OUTPUT);
    39ce:	83 e0       	ldi	r24, 0x03	; 3
    39d0:	63 e0       	ldi	r22, 0x03	; 3
    39d2:	42 e0       	ldi	r20, 0x02	; 2
    39d4:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D4, DIO_OUTPUT);
    39d8:	83 e0       	ldi	r24, 0x03	; 3
    39da:	64 e0       	ldi	r22, 0x04	; 4
    39dc:	42 e0       	ldi	r20, 0x02	; 2
    39de:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D5, DIO_OUTPUT);
    39e2:	83 e0       	ldi	r24, 0x03	; 3
    39e4:	65 e0       	ldi	r22, 0x05	; 5
    39e6:	42 e0       	ldi	r20, 0x02	; 2
    39e8:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D6, DIO_OUTPUT);
    39ec:	83 e0       	ldi	r24, 0x03	; 3
    39ee:	66 e0       	ldi	r22, 0x06	; 6
    39f0:	42 e0       	ldi	r20, 0x02	; 2
    39f2:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D7, DIO_OUTPUT);
    39f6:	83 e0       	ldi	r24, 0x03	; 3
    39f8:	67 e0       	ldi	r22, 0x07	; 7
    39fa:	42 e0       	ldi	r20, 0x02	; 2
    39fc:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
}
    3a00:	cf 91       	pop	r28
    3a02:	df 91       	pop	r29
    3a04:	08 95       	ret

00003a06 <SPI_Init>:
#include "SPI.h"
#include "SPI_cfg.h"
#include "DIO.h"


void SPI_Init () {
    3a06:	df 93       	push	r29
    3a08:	cf 93       	push	r28
    3a0a:	cd b7       	in	r28, 0x3d	; 61
    3a0c:	de b7       	in	r29, 0x3e	; 62

    #if (DATA_ORDER == LSB)
    SET_BIT(SPCR,SPCR_DORD);
    3a0e:	ad e2       	ldi	r26, 0x2D	; 45
    3a10:	b0 e0       	ldi	r27, 0x00	; 0
    3a12:	ed e2       	ldi	r30, 0x2D	; 45
    3a14:	f0 e0       	ldi	r31, 0x00	; 0
    3a16:	80 81       	ld	r24, Z
    3a18:	80 62       	ori	r24, 0x20	; 32
    3a1a:	8c 93       	st	X, r24
    DIO_SetPinMode(DIO_PORTB,DIO_PIN5,DIO_OUTPUT);
    DIO_SetPinMode(DIO_PORTB,DIO_PIN4,DIO_OUTPUT);
    DIO_SetPinMode(DIO_PORTB,DIO_PIN7,DIO_OUTPUT);
    DIO_SetPinMode(DIO_PORTB,DIO_PIN6,DIO_INPUT_FLOATING);
    #elif (SPI_MODE == SLAVE)
    CLR_BIT(SPCR,SPCR_MSTR);
    3a1c:	ad e2       	ldi	r26, 0x2D	; 45
    3a1e:	b0 e0       	ldi	r27, 0x00	; 0
    3a20:	ed e2       	ldi	r30, 0x2D	; 45
    3a22:	f0 e0       	ldi	r31, 0x00	; 0
    3a24:	80 81       	ld	r24, Z
    3a26:	8f 7e       	andi	r24, 0xEF	; 239
    3a28:	8c 93       	st	X, r24
    DIO_SetPinMode(DIO_PORTB,DIO_PIN5,DIO_INPUT_FLOATING);
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
    3a2c:	65 e0       	ldi	r22, 0x05	; 5
    3a2e:	40 e0       	ldi	r20, 0x00	; 0
    3a30:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTB,DIO_PIN4,DIO_INPUT_FLOATING);
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	64 e0       	ldi	r22, 0x04	; 4
    3a38:	40 e0       	ldi	r20, 0x00	; 0
    3a3a:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTB,DIO_PIN7,DIO_INPUT_FLOATING);
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	67 e0       	ldi	r22, 0x07	; 7
    3a42:	40 e0       	ldi	r20, 0x00	; 0
    3a44:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTB,DIO_PIN6,DIO_OUTPUT);
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	66 e0       	ldi	r22, 0x06	; 6
    3a4c:	42 e0       	ldi	r20, 0x02	; 2
    3a4e:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    #endif

    SET_BIT(SPCR,SPCR_SPE);
    3a52:	ad e2       	ldi	r26, 0x2D	; 45
    3a54:	b0 e0       	ldi	r27, 0x00	; 0
    3a56:	ed e2       	ldi	r30, 0x2D	; 45
    3a58:	f0 e0       	ldi	r31, 0x00	; 0
    3a5a:	80 81       	ld	r24, Z
    3a5c:	80 64       	ori	r24, 0x40	; 64
    3a5e:	8c 93       	st	X, r24
}
    3a60:	cf 91       	pop	r28
    3a62:	df 91       	pop	r29
    3a64:	08 95       	ret

00003a66 <SPI_Send_Data>:
void SPI_Send_Data(u8 data) {
    3a66:	df 93       	push	r29
    3a68:	cf 93       	push	r28
    3a6a:	0f 92       	push	r0
    3a6c:	cd b7       	in	r28, 0x3d	; 61
    3a6e:	de b7       	in	r29, 0x3e	; 62
    3a70:	89 83       	std	Y+1, r24	; 0x01
    SPDR = data;
    3a72:	ef e2       	ldi	r30, 0x2F	; 47
    3a74:	f0 e0       	ldi	r31, 0x00	; 0
    3a76:	89 81       	ldd	r24, Y+1	; 0x01
    3a78:	80 83       	st	Z, r24
    while (GET_BIT(SPSR,SPSR_SPIF) == 0);
    3a7a:	ee e2       	ldi	r30, 0x2E	; 46
    3a7c:	f0 e0       	ldi	r31, 0x00	; 0
    3a7e:	80 81       	ld	r24, Z
    3a80:	88 23       	and	r24, r24
    3a82:	dc f7       	brge	.-10     	; 0x3a7a <SPI_Send_Data+0x14>
}
    3a84:	0f 90       	pop	r0
    3a86:	cf 91       	pop	r28
    3a88:	df 91       	pop	r29
    3a8a:	08 95       	ret

00003a8c <SPI_Recieve_Data>:
u8 SPI_Recieve_Data() {
    3a8c:	df 93       	push	r29
    3a8e:	cf 93       	push	r28
    3a90:	cd b7       	in	r28, 0x3d	; 61
    3a92:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(SPSR,SPSR_SPIF) == 0);
    3a94:	ee e2       	ldi	r30, 0x2E	; 46
    3a96:	f0 e0       	ldi	r31, 0x00	; 0
    3a98:	80 81       	ld	r24, Z
    3a9a:	88 23       	and	r24, r24
    3a9c:	dc f7       	brge	.-10     	; 0x3a94 <SPI_Recieve_Data+0x8>
    return SPDR;
    3a9e:	ef e2       	ldi	r30, 0x2F	; 47
    3aa0:	f0 e0       	ldi	r31, 0x00	; 0
    3aa2:	80 81       	ld	r24, Z
}
    3aa4:	cf 91       	pop	r28
    3aa6:	df 91       	pop	r29
    3aa8:	08 95       	ret

00003aaa <SSD_Init>:
	_delay_ms(500);
	PORTD = 0b01101111; // Print 9
	_delay_ms(500);
	PORTD = 0b00000000; // off*/

void SSD_Init(void) {
    3aaa:	df 93       	push	r29
    3aac:	cf 93       	push	r28
    3aae:	cd b7       	in	r28, 0x3d	; 61
    3ab0:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(SSD_PIN_A, DIO_OUTPUT);
    3ab2:	83 e0       	ldi	r24, 0x03	; 3
    3ab4:	60 e0       	ldi	r22, 0x00	; 0
    3ab6:	42 e0       	ldi	r20, 0x02	; 2
    3ab8:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_B, DIO_OUTPUT);
    3abc:	83 e0       	ldi	r24, 0x03	; 3
    3abe:	61 e0       	ldi	r22, 0x01	; 1
    3ac0:	42 e0       	ldi	r20, 0x02	; 2
    3ac2:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_C, DIO_OUTPUT);
    3ac6:	83 e0       	ldi	r24, 0x03	; 3
    3ac8:	62 e0       	ldi	r22, 0x02	; 2
    3aca:	42 e0       	ldi	r20, 0x02	; 2
    3acc:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_D, DIO_OUTPUT);
    3ad0:	83 e0       	ldi	r24, 0x03	; 3
    3ad2:	63 e0       	ldi	r22, 0x03	; 3
    3ad4:	42 e0       	ldi	r20, 0x02	; 2
    3ad6:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_E, DIO_OUTPUT);
    3ada:	83 e0       	ldi	r24, 0x03	; 3
    3adc:	64 e0       	ldi	r22, 0x04	; 4
    3ade:	42 e0       	ldi	r20, 0x02	; 2
    3ae0:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_F, DIO_OUTPUT);
    3ae4:	83 e0       	ldi	r24, 0x03	; 3
    3ae6:	65 e0       	ldi	r22, 0x05	; 5
    3ae8:	42 e0       	ldi	r20, 0x02	; 2
    3aea:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_G, DIO_OUTPUT);
    3aee:	83 e0       	ldi	r24, 0x03	; 3
    3af0:	66 e0       	ldi	r22, 0x06	; 6
    3af2:	42 e0       	ldi	r20, 0x02	; 2
    3af4:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_SetPinMode>

}
    3af8:	cf 91       	pop	r28
    3afa:	df 91       	pop	r29
    3afc:	08 95       	ret

00003afe <SSD_Write>:
void SSD_Write (SSD_NumberType number) {
    3afe:	df 93       	push	r29
    3b00:	cf 93       	push	r28
    3b02:	00 d0       	rcall	.+0      	; 0x3b04 <SSD_Write+0x6>
    3b04:	0f 92       	push	r0
    3b06:	cd b7       	in	r28, 0x3d	; 61
    3b08:	de b7       	in	r29, 0x3e	; 62
    3b0a:	89 83       	std	Y+1, r24	; 0x01
    switch (number)
    3b0c:	89 81       	ldd	r24, Y+1	; 0x01
    3b0e:	28 2f       	mov	r18, r24
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	3b 83       	std	Y+3, r19	; 0x03
    3b14:	2a 83       	std	Y+2, r18	; 0x02
    3b16:	8a 81       	ldd	r24, Y+2	; 0x02
    3b18:	9b 81       	ldd	r25, Y+3	; 0x03
    3b1a:	84 30       	cpi	r24, 0x04	; 4
    3b1c:	91 05       	cpc	r25, r1
    3b1e:	09 f4       	brne	.+2      	; 0x3b22 <SSD_Write+0x24>
    3b20:	d7 c0       	rjmp	.+430    	; 0x3cd0 <SSD_Write+0x1d2>
    3b22:	2a 81       	ldd	r18, Y+2	; 0x02
    3b24:	3b 81       	ldd	r19, Y+3	; 0x03
    3b26:	25 30       	cpi	r18, 0x05	; 5
    3b28:	31 05       	cpc	r19, r1
    3b2a:	ec f4       	brge	.+58     	; 0x3b66 <SSD_Write+0x68>
    3b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b30:	81 30       	cpi	r24, 0x01	; 1
    3b32:	91 05       	cpc	r25, r1
    3b34:	09 f4       	brne	.+2      	; 0x3b38 <SSD_Write+0x3a>
    3b36:	60 c0       	rjmp	.+192    	; 0x3bf8 <SSD_Write+0xfa>
    3b38:	2a 81       	ldd	r18, Y+2	; 0x02
    3b3a:	3b 81       	ldd	r19, Y+3	; 0x03
    3b3c:	22 30       	cpi	r18, 0x02	; 2
    3b3e:	31 05       	cpc	r19, r1
    3b40:	2c f4       	brge	.+10     	; 0x3b4c <SSD_Write+0x4e>
    3b42:	8a 81       	ldd	r24, Y+2	; 0x02
    3b44:	9b 81       	ldd	r25, Y+3	; 0x03
    3b46:	00 97       	sbiw	r24, 0x00	; 0
    3b48:	99 f1       	breq	.+102    	; 0x3bb0 <SSD_Write+0xb2>
    3b4a:	9a c1       	rjmp	.+820    	; 0x3e80 <SSD_Write+0x382>
    3b4c:	2a 81       	ldd	r18, Y+2	; 0x02
    3b4e:	3b 81       	ldd	r19, Y+3	; 0x03
    3b50:	22 30       	cpi	r18, 0x02	; 2
    3b52:	31 05       	cpc	r19, r1
    3b54:	09 f4       	brne	.+2      	; 0x3b58 <SSD_Write+0x5a>
    3b56:	74 c0       	rjmp	.+232    	; 0x3c40 <SSD_Write+0x142>
    3b58:	8a 81       	ldd	r24, Y+2	; 0x02
    3b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b5c:	83 30       	cpi	r24, 0x03	; 3
    3b5e:	91 05       	cpc	r25, r1
    3b60:	09 f4       	brne	.+2      	; 0x3b64 <SSD_Write+0x66>
    3b62:	92 c0       	rjmp	.+292    	; 0x3c88 <SSD_Write+0x18a>
    3b64:	8d c1       	rjmp	.+794    	; 0x3e80 <SSD_Write+0x382>
    3b66:	2a 81       	ldd	r18, Y+2	; 0x02
    3b68:	3b 81       	ldd	r19, Y+3	; 0x03
    3b6a:	27 30       	cpi	r18, 0x07	; 7
    3b6c:	31 05       	cpc	r19, r1
    3b6e:	09 f4       	brne	.+2      	; 0x3b72 <SSD_Write+0x74>
    3b70:	1b c1       	rjmp	.+566    	; 0x3da8 <SSD_Write+0x2aa>
    3b72:	8a 81       	ldd	r24, Y+2	; 0x02
    3b74:	9b 81       	ldd	r25, Y+3	; 0x03
    3b76:	88 30       	cpi	r24, 0x08	; 8
    3b78:	91 05       	cpc	r25, r1
    3b7a:	6c f4       	brge	.+26     	; 0x3b96 <SSD_Write+0x98>
    3b7c:	2a 81       	ldd	r18, Y+2	; 0x02
    3b7e:	3b 81       	ldd	r19, Y+3	; 0x03
    3b80:	25 30       	cpi	r18, 0x05	; 5
    3b82:	31 05       	cpc	r19, r1
    3b84:	09 f4       	brne	.+2      	; 0x3b88 <SSD_Write+0x8a>
    3b86:	c8 c0       	rjmp	.+400    	; 0x3d18 <SSD_Write+0x21a>
    3b88:	8a 81       	ldd	r24, Y+2	; 0x02
    3b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b8c:	86 30       	cpi	r24, 0x06	; 6
    3b8e:	91 05       	cpc	r25, r1
    3b90:	09 f4       	brne	.+2      	; 0x3b94 <SSD_Write+0x96>
    3b92:	e6 c0       	rjmp	.+460    	; 0x3d60 <SSD_Write+0x262>
    3b94:	75 c1       	rjmp	.+746    	; 0x3e80 <SSD_Write+0x382>
    3b96:	2a 81       	ldd	r18, Y+2	; 0x02
    3b98:	3b 81       	ldd	r19, Y+3	; 0x03
    3b9a:	28 30       	cpi	r18, 0x08	; 8
    3b9c:	31 05       	cpc	r19, r1
    3b9e:	09 f4       	brne	.+2      	; 0x3ba2 <SSD_Write+0xa4>
    3ba0:	27 c1       	rjmp	.+590    	; 0x3df0 <SSD_Write+0x2f2>
    3ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ba6:	89 30       	cpi	r24, 0x09	; 9
    3ba8:	91 05       	cpc	r25, r1
    3baa:	09 f4       	brne	.+2      	; 0x3bae <SSD_Write+0xb0>
    3bac:	45 c1       	rjmp	.+650    	; 0x3e38 <SSD_Write+0x33a>
    3bae:	68 c1       	rjmp	.+720    	; 0x3e80 <SSD_Write+0x382>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    3bb0:	83 e0       	ldi	r24, 0x03	; 3
    3bb2:	60 e0       	ldi	r22, 0x00	; 0
    3bb4:	40 e0       	ldi	r20, 0x00	; 0
    3bb6:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    3bba:	83 e0       	ldi	r24, 0x03	; 3
    3bbc:	61 e0       	ldi	r22, 0x01	; 1
    3bbe:	40 e0       	ldi	r20, 0x00	; 0
    3bc0:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    3bc4:	83 e0       	ldi	r24, 0x03	; 3
    3bc6:	62 e0       	ldi	r22, 0x02	; 2
    3bc8:	40 e0       	ldi	r20, 0x00	; 0
    3bca:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    3bce:	83 e0       	ldi	r24, 0x03	; 3
    3bd0:	63 e0       	ldi	r22, 0x03	; 3
    3bd2:	40 e0       	ldi	r20, 0x00	; 0
    3bd4:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    3bd8:	83 e0       	ldi	r24, 0x03	; 3
    3bda:	64 e0       	ldi	r22, 0x04	; 4
    3bdc:	40 e0       	ldi	r20, 0x00	; 0
    3bde:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    3be2:	83 e0       	ldi	r24, 0x03	; 3
    3be4:	65 e0       	ldi	r22, 0x05	; 5
    3be6:	40 e0       	ldi	r20, 0x00	; 0
    3be8:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    3bec:	83 e0       	ldi	r24, 0x03	; 3
    3bee:	66 e0       	ldi	r22, 0x06	; 6
    3bf0:	41 e0       	ldi	r20, 0x01	; 1
    3bf2:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    3bf6:	67 c1       	rjmp	.+718    	; 0x3ec6 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    3bf8:	83 e0       	ldi	r24, 0x03	; 3
    3bfa:	60 e0       	ldi	r22, 0x00	; 0
    3bfc:	41 e0       	ldi	r20, 0x01	; 1
    3bfe:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    3c02:	83 e0       	ldi	r24, 0x03	; 3
    3c04:	61 e0       	ldi	r22, 0x01	; 1
    3c06:	40 e0       	ldi	r20, 0x00	; 0
    3c08:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    3c0c:	83 e0       	ldi	r24, 0x03	; 3
    3c0e:	62 e0       	ldi	r22, 0x02	; 2
    3c10:	40 e0       	ldi	r20, 0x00	; 0
    3c12:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    3c16:	83 e0       	ldi	r24, 0x03	; 3
    3c18:	63 e0       	ldi	r22, 0x03	; 3
    3c1a:	41 e0       	ldi	r20, 0x01	; 1
    3c1c:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    3c20:	83 e0       	ldi	r24, 0x03	; 3
    3c22:	64 e0       	ldi	r22, 0x04	; 4
    3c24:	41 e0       	ldi	r20, 0x01	; 1
    3c26:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    3c2a:	83 e0       	ldi	r24, 0x03	; 3
    3c2c:	65 e0       	ldi	r22, 0x05	; 5
    3c2e:	41 e0       	ldi	r20, 0x01	; 1
    3c30:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    3c34:	83 e0       	ldi	r24, 0x03	; 3
    3c36:	66 e0       	ldi	r22, 0x06	; 6
    3c38:	41 e0       	ldi	r20, 0x01	; 1
    3c3a:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    3c3e:	43 c1       	rjmp	.+646    	; 0x3ec6 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    3c40:	83 e0       	ldi	r24, 0x03	; 3
    3c42:	60 e0       	ldi	r22, 0x00	; 0
    3c44:	40 e0       	ldi	r20, 0x00	; 0
    3c46:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    3c4a:	83 e0       	ldi	r24, 0x03	; 3
    3c4c:	61 e0       	ldi	r22, 0x01	; 1
    3c4e:	40 e0       	ldi	r20, 0x00	; 0
    3c50:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    3c54:	83 e0       	ldi	r24, 0x03	; 3
    3c56:	62 e0       	ldi	r22, 0x02	; 2
    3c58:	41 e0       	ldi	r20, 0x01	; 1
    3c5a:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    3c5e:	83 e0       	ldi	r24, 0x03	; 3
    3c60:	63 e0       	ldi	r22, 0x03	; 3
    3c62:	40 e0       	ldi	r20, 0x00	; 0
    3c64:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    3c68:	83 e0       	ldi	r24, 0x03	; 3
    3c6a:	64 e0       	ldi	r22, 0x04	; 4
    3c6c:	40 e0       	ldi	r20, 0x00	; 0
    3c6e:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    3c72:	83 e0       	ldi	r24, 0x03	; 3
    3c74:	65 e0       	ldi	r22, 0x05	; 5
    3c76:	41 e0       	ldi	r20, 0x01	; 1
    3c78:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    3c7c:	83 e0       	ldi	r24, 0x03	; 3
    3c7e:	66 e0       	ldi	r22, 0x06	; 6
    3c80:	40 e0       	ldi	r20, 0x00	; 0
    3c82:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    3c86:	1f c1       	rjmp	.+574    	; 0x3ec6 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    3c88:	83 e0       	ldi	r24, 0x03	; 3
    3c8a:	60 e0       	ldi	r22, 0x00	; 0
    3c8c:	40 e0       	ldi	r20, 0x00	; 0
    3c8e:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    3c92:	83 e0       	ldi	r24, 0x03	; 3
    3c94:	61 e0       	ldi	r22, 0x01	; 1
    3c96:	40 e0       	ldi	r20, 0x00	; 0
    3c98:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    3c9c:	83 e0       	ldi	r24, 0x03	; 3
    3c9e:	62 e0       	ldi	r22, 0x02	; 2
    3ca0:	40 e0       	ldi	r20, 0x00	; 0
    3ca2:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    3ca6:	83 e0       	ldi	r24, 0x03	; 3
    3ca8:	63 e0       	ldi	r22, 0x03	; 3
    3caa:	40 e0       	ldi	r20, 0x00	; 0
    3cac:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    3cb0:	83 e0       	ldi	r24, 0x03	; 3
    3cb2:	64 e0       	ldi	r22, 0x04	; 4
    3cb4:	41 e0       	ldi	r20, 0x01	; 1
    3cb6:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    3cba:	83 e0       	ldi	r24, 0x03	; 3
    3cbc:	65 e0       	ldi	r22, 0x05	; 5
    3cbe:	41 e0       	ldi	r20, 0x01	; 1
    3cc0:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    3cc4:	83 e0       	ldi	r24, 0x03	; 3
    3cc6:	66 e0       	ldi	r22, 0x06	; 6
    3cc8:	40 e0       	ldi	r20, 0x00	; 0
    3cca:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    3cce:	fb c0       	rjmp	.+502    	; 0x3ec6 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    3cd0:	83 e0       	ldi	r24, 0x03	; 3
    3cd2:	60 e0       	ldi	r22, 0x00	; 0
    3cd4:	41 e0       	ldi	r20, 0x01	; 1
    3cd6:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    3cda:	83 e0       	ldi	r24, 0x03	; 3
    3cdc:	61 e0       	ldi	r22, 0x01	; 1
    3cde:	40 e0       	ldi	r20, 0x00	; 0
    3ce0:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    3ce4:	83 e0       	ldi	r24, 0x03	; 3
    3ce6:	62 e0       	ldi	r22, 0x02	; 2
    3ce8:	40 e0       	ldi	r20, 0x00	; 0
    3cea:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    3cee:	83 e0       	ldi	r24, 0x03	; 3
    3cf0:	63 e0       	ldi	r22, 0x03	; 3
    3cf2:	41 e0       	ldi	r20, 0x01	; 1
    3cf4:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    3cf8:	83 e0       	ldi	r24, 0x03	; 3
    3cfa:	64 e0       	ldi	r22, 0x04	; 4
    3cfc:	41 e0       	ldi	r20, 0x01	; 1
    3cfe:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    3d02:	83 e0       	ldi	r24, 0x03	; 3
    3d04:	65 e0       	ldi	r22, 0x05	; 5
    3d06:	40 e0       	ldi	r20, 0x00	; 0
    3d08:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    3d0c:	83 e0       	ldi	r24, 0x03	; 3
    3d0e:	66 e0       	ldi	r22, 0x06	; 6
    3d10:	40 e0       	ldi	r20, 0x00	; 0
    3d12:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    3d16:	d7 c0       	rjmp	.+430    	; 0x3ec6 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    3d18:	83 e0       	ldi	r24, 0x03	; 3
    3d1a:	60 e0       	ldi	r22, 0x00	; 0
    3d1c:	40 e0       	ldi	r20, 0x00	; 0
    3d1e:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    3d22:	83 e0       	ldi	r24, 0x03	; 3
    3d24:	61 e0       	ldi	r22, 0x01	; 1
    3d26:	41 e0       	ldi	r20, 0x01	; 1
    3d28:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    3d2c:	83 e0       	ldi	r24, 0x03	; 3
    3d2e:	62 e0       	ldi	r22, 0x02	; 2
    3d30:	40 e0       	ldi	r20, 0x00	; 0
    3d32:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    3d36:	83 e0       	ldi	r24, 0x03	; 3
    3d38:	63 e0       	ldi	r22, 0x03	; 3
    3d3a:	40 e0       	ldi	r20, 0x00	; 0
    3d3c:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    3d40:	83 e0       	ldi	r24, 0x03	; 3
    3d42:	64 e0       	ldi	r22, 0x04	; 4
    3d44:	41 e0       	ldi	r20, 0x01	; 1
    3d46:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    3d4a:	83 e0       	ldi	r24, 0x03	; 3
    3d4c:	65 e0       	ldi	r22, 0x05	; 5
    3d4e:	40 e0       	ldi	r20, 0x00	; 0
    3d50:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    3d54:	83 e0       	ldi	r24, 0x03	; 3
    3d56:	66 e0       	ldi	r22, 0x06	; 6
    3d58:	40 e0       	ldi	r20, 0x00	; 0
    3d5a:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    3d5e:	b3 c0       	rjmp	.+358    	; 0x3ec6 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    3d60:	83 e0       	ldi	r24, 0x03	; 3
    3d62:	60 e0       	ldi	r22, 0x00	; 0
    3d64:	40 e0       	ldi	r20, 0x00	; 0
    3d66:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    3d6a:	83 e0       	ldi	r24, 0x03	; 3
    3d6c:	61 e0       	ldi	r22, 0x01	; 1
    3d6e:	41 e0       	ldi	r20, 0x01	; 1
    3d70:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    3d74:	83 e0       	ldi	r24, 0x03	; 3
    3d76:	62 e0       	ldi	r22, 0x02	; 2
    3d78:	40 e0       	ldi	r20, 0x00	; 0
    3d7a:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    3d7e:	83 e0       	ldi	r24, 0x03	; 3
    3d80:	63 e0       	ldi	r22, 0x03	; 3
    3d82:	40 e0       	ldi	r20, 0x00	; 0
    3d84:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    3d88:	83 e0       	ldi	r24, 0x03	; 3
    3d8a:	64 e0       	ldi	r22, 0x04	; 4
    3d8c:	40 e0       	ldi	r20, 0x00	; 0
    3d8e:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    3d92:	83 e0       	ldi	r24, 0x03	; 3
    3d94:	65 e0       	ldi	r22, 0x05	; 5
    3d96:	40 e0       	ldi	r20, 0x00	; 0
    3d98:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    3d9c:	83 e0       	ldi	r24, 0x03	; 3
    3d9e:	66 e0       	ldi	r22, 0x06	; 6
    3da0:	40 e0       	ldi	r20, 0x00	; 0
    3da2:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    3da6:	8f c0       	rjmp	.+286    	; 0x3ec6 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    3da8:	83 e0       	ldi	r24, 0x03	; 3
    3daa:	60 e0       	ldi	r22, 0x00	; 0
    3dac:	40 e0       	ldi	r20, 0x00	; 0
    3dae:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    3db2:	83 e0       	ldi	r24, 0x03	; 3
    3db4:	61 e0       	ldi	r22, 0x01	; 1
    3db6:	40 e0       	ldi	r20, 0x00	; 0
    3db8:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    3dbc:	83 e0       	ldi	r24, 0x03	; 3
    3dbe:	62 e0       	ldi	r22, 0x02	; 2
    3dc0:	40 e0       	ldi	r20, 0x00	; 0
    3dc2:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    3dc6:	83 e0       	ldi	r24, 0x03	; 3
    3dc8:	63 e0       	ldi	r22, 0x03	; 3
    3dca:	41 e0       	ldi	r20, 0x01	; 1
    3dcc:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    3dd0:	83 e0       	ldi	r24, 0x03	; 3
    3dd2:	64 e0       	ldi	r22, 0x04	; 4
    3dd4:	41 e0       	ldi	r20, 0x01	; 1
    3dd6:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    3dda:	83 e0       	ldi	r24, 0x03	; 3
    3ddc:	65 e0       	ldi	r22, 0x05	; 5
    3dde:	41 e0       	ldi	r20, 0x01	; 1
    3de0:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    3de4:	83 e0       	ldi	r24, 0x03	; 3
    3de6:	66 e0       	ldi	r22, 0x06	; 6
    3de8:	41 e0       	ldi	r20, 0x01	; 1
    3dea:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    3dee:	6b c0       	rjmp	.+214    	; 0x3ec6 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    3df0:	83 e0       	ldi	r24, 0x03	; 3
    3df2:	60 e0       	ldi	r22, 0x00	; 0
    3df4:	40 e0       	ldi	r20, 0x00	; 0
    3df6:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    3dfa:	83 e0       	ldi	r24, 0x03	; 3
    3dfc:	61 e0       	ldi	r22, 0x01	; 1
    3dfe:	40 e0       	ldi	r20, 0x00	; 0
    3e00:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    3e04:	83 e0       	ldi	r24, 0x03	; 3
    3e06:	62 e0       	ldi	r22, 0x02	; 2
    3e08:	40 e0       	ldi	r20, 0x00	; 0
    3e0a:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    3e0e:	83 e0       	ldi	r24, 0x03	; 3
    3e10:	63 e0       	ldi	r22, 0x03	; 3
    3e12:	40 e0       	ldi	r20, 0x00	; 0
    3e14:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    3e18:	83 e0       	ldi	r24, 0x03	; 3
    3e1a:	64 e0       	ldi	r22, 0x04	; 4
    3e1c:	40 e0       	ldi	r20, 0x00	; 0
    3e1e:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    3e22:	83 e0       	ldi	r24, 0x03	; 3
    3e24:	65 e0       	ldi	r22, 0x05	; 5
    3e26:	40 e0       	ldi	r20, 0x00	; 0
    3e28:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    3e2c:	83 e0       	ldi	r24, 0x03	; 3
    3e2e:	66 e0       	ldi	r22, 0x06	; 6
    3e30:	40 e0       	ldi	r20, 0x00	; 0
    3e32:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    3e36:	47 c0       	rjmp	.+142    	; 0x3ec6 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    3e38:	83 e0       	ldi	r24, 0x03	; 3
    3e3a:	60 e0       	ldi	r22, 0x00	; 0
    3e3c:	40 e0       	ldi	r20, 0x00	; 0
    3e3e:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    3e42:	83 e0       	ldi	r24, 0x03	; 3
    3e44:	61 e0       	ldi	r22, 0x01	; 1
    3e46:	40 e0       	ldi	r20, 0x00	; 0
    3e48:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    3e4c:	83 e0       	ldi	r24, 0x03	; 3
    3e4e:	62 e0       	ldi	r22, 0x02	; 2
    3e50:	40 e0       	ldi	r20, 0x00	; 0
    3e52:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    3e56:	83 e0       	ldi	r24, 0x03	; 3
    3e58:	63 e0       	ldi	r22, 0x03	; 3
    3e5a:	40 e0       	ldi	r20, 0x00	; 0
    3e5c:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    3e60:	83 e0       	ldi	r24, 0x03	; 3
    3e62:	64 e0       	ldi	r22, 0x04	; 4
    3e64:	41 e0       	ldi	r20, 0x01	; 1
    3e66:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    3e6a:	83 e0       	ldi	r24, 0x03	; 3
    3e6c:	65 e0       	ldi	r22, 0x05	; 5
    3e6e:	40 e0       	ldi	r20, 0x00	; 0
    3e70:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    3e74:	83 e0       	ldi	r24, 0x03	; 3
    3e76:	66 e0       	ldi	r22, 0x06	; 6
    3e78:	40 e0       	ldi	r20, 0x00	; 0
    3e7a:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    3e7e:	23 c0       	rjmp	.+70     	; 0x3ec6 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    3e80:	83 e0       	ldi	r24, 0x03	; 3
    3e82:	60 e0       	ldi	r22, 0x00	; 0
    3e84:	41 e0       	ldi	r20, 0x01	; 1
    3e86:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    3e8a:	83 e0       	ldi	r24, 0x03	; 3
    3e8c:	61 e0       	ldi	r22, 0x01	; 1
    3e8e:	41 e0       	ldi	r20, 0x01	; 1
    3e90:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    3e94:	83 e0       	ldi	r24, 0x03	; 3
    3e96:	62 e0       	ldi	r22, 0x02	; 2
    3e98:	41 e0       	ldi	r20, 0x01	; 1
    3e9a:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    3e9e:	83 e0       	ldi	r24, 0x03	; 3
    3ea0:	63 e0       	ldi	r22, 0x03	; 3
    3ea2:	41 e0       	ldi	r20, 0x01	; 1
    3ea4:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    3ea8:	83 e0       	ldi	r24, 0x03	; 3
    3eaa:	64 e0       	ldi	r22, 0x04	; 4
    3eac:	41 e0       	ldi	r20, 0x01	; 1
    3eae:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    3eb2:	83 e0       	ldi	r24, 0x03	; 3
    3eb4:	65 e0       	ldi	r22, 0x05	; 5
    3eb6:	41 e0       	ldi	r20, 0x01	; 1
    3eb8:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    3ebc:	83 e0       	ldi	r24, 0x03	; 3
    3ebe:	66 e0       	ldi	r22, 0x06	; 6
    3ec0:	41 e0       	ldi	r20, 0x01	; 1
    3ec2:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_SetPinLevel>
    #else 
        #error "Invalid SSD Type"
    #endif
        break;
    }
}
    3ec6:	0f 90       	pop	r0
    3ec8:	0f 90       	pop	r0
    3eca:	0f 90       	pop	r0
    3ecc:	cf 91       	pop	r28
    3ece:	df 91       	pop	r29
    3ed0:	08 95       	ret

00003ed2 <Spt_Init>:
// {
//     Spt_Timer2_Callback_Ctc();
// }

Spt_ReturnType Spt_Init(Spt_ConfigType *config)
{
    3ed2:	df 93       	push	r29
    3ed4:	cf 93       	push	r28
    3ed6:	cd b7       	in	r28, 0x3d	; 61
    3ed8:	de b7       	in	r29, 0x3e	; 62
    3eda:	61 97       	sbiw	r28, 0x11	; 17
    3edc:	0f b6       	in	r0, 0x3f	; 63
    3ede:	f8 94       	cli
    3ee0:	de bf       	out	0x3e, r29	; 62
    3ee2:	0f be       	out	0x3f, r0	; 63
    3ee4:	cd bf       	out	0x3d, r28	; 61
    3ee6:	9b 83       	std	Y+3, r25	; 0x03
    3ee8:	8a 83       	std	Y+2, r24	; 0x02
    Spt_ReturnType returnValue = SPT_OK;
    3eea:	81 e0       	ldi	r24, 0x01	; 1
    3eec:	89 83       	std	Y+1, r24	; 0x01

    switch (config->channel)
    3eee:	ea 81       	ldd	r30, Y+2	; 0x02
    3ef0:	fb 81       	ldd	r31, Y+3	; 0x03
    3ef2:	80 81       	ld	r24, Z
    3ef4:	28 2f       	mov	r18, r24
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
    3ef8:	39 8b       	std	Y+17, r19	; 0x11
    3efa:	28 8b       	std	Y+16, r18	; 0x10
    3efc:	88 89       	ldd	r24, Y+16	; 0x10
    3efe:	99 89       	ldd	r25, Y+17	; 0x11
    3f00:	81 30       	cpi	r24, 0x01	; 1
    3f02:	91 05       	cpc	r25, r1
    3f04:	09 f4       	brne	.+2      	; 0x3f08 <Spt_Init+0x36>
    3f06:	6b c1       	rjmp	.+726    	; 0x41de <Spt_Init+0x30c>
    3f08:	28 89       	ldd	r18, Y+16	; 0x10
    3f0a:	39 89       	ldd	r19, Y+17	; 0x11
    3f0c:	22 30       	cpi	r18, 0x02	; 2
    3f0e:	31 05       	cpc	r19, r1
    3f10:	09 f4       	brne	.+2      	; 0x3f14 <Spt_Init+0x42>
    3f12:	da c2       	rjmp	.+1460   	; 0x44c8 <Spt_Init+0x5f6>
    3f14:	88 89       	ldd	r24, Y+16	; 0x10
    3f16:	99 89       	ldd	r25, Y+17	; 0x11
    3f18:	00 97       	sbiw	r24, 0x00	; 0
    3f1a:	09 f0       	breq	.+2      	; 0x3f1e <Spt_Init+0x4c>
    3f1c:	4a c4       	rjmp	.+2196   	; 0x47b2 <Spt_Init+0x8e0>
    {

    case SPT_CHANNEL_TIMER0:
        /*Waveform Generation Mode*/
        if (config->mode == SPT_MODE_FAST_PWM)
    3f1e:	ea 81       	ldd	r30, Y+2	; 0x02
    3f20:	fb 81       	ldd	r31, Y+3	; 0x03
    3f22:	81 81       	ldd	r24, Z+1	; 0x01
    3f24:	88 23       	and	r24, r24
    3f26:	79 f4       	brne	.+30     	; 0x3f46 <Spt_Init+0x74>
        {
            SET_BIT(TCCR0, TCCR0_WGM00);
    3f28:	a3 e5       	ldi	r26, 0x53	; 83
    3f2a:	b0 e0       	ldi	r27, 0x00	; 0
    3f2c:	e3 e5       	ldi	r30, 0x53	; 83
    3f2e:	f0 e0       	ldi	r31, 0x00	; 0
    3f30:	80 81       	ld	r24, Z
    3f32:	80 64       	ori	r24, 0x40	; 64
    3f34:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_WGM01);
    3f36:	a3 e5       	ldi	r26, 0x53	; 83
    3f38:	b0 e0       	ldi	r27, 0x00	; 0
    3f3a:	e3 e5       	ldi	r30, 0x53	; 83
    3f3c:	f0 e0       	ldi	r31, 0x00	; 0
    3f3e:	80 81       	ld	r24, Z
    3f40:	88 60       	ori	r24, 0x08	; 8
    3f42:	8c 93       	st	X, r24
    3f44:	15 c0       	rjmp	.+42     	; 0x3f70 <Spt_Init+0x9e>
        }
        else if (config->mode == SPT_MODE_PWM_PHASE_CORRECT)
    3f46:	ea 81       	ldd	r30, Y+2	; 0x02
    3f48:	fb 81       	ldd	r31, Y+3	; 0x03
    3f4a:	81 81       	ldd	r24, Z+1	; 0x01
    3f4c:	81 30       	cpi	r24, 0x01	; 1
    3f4e:	79 f4       	brne	.+30     	; 0x3f6e <Spt_Init+0x9c>
        {
            SET_BIT(TCCR0, TCCR0_WGM00);
    3f50:	a3 e5       	ldi	r26, 0x53	; 83
    3f52:	b0 e0       	ldi	r27, 0x00	; 0
    3f54:	e3 e5       	ldi	r30, 0x53	; 83
    3f56:	f0 e0       	ldi	r31, 0x00	; 0
    3f58:	80 81       	ld	r24, Z
    3f5a:	80 64       	ori	r24, 0x40	; 64
    3f5c:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_WGM01);
    3f5e:	a3 e5       	ldi	r26, 0x53	; 83
    3f60:	b0 e0       	ldi	r27, 0x00	; 0
    3f62:	e3 e5       	ldi	r30, 0x53	; 83
    3f64:	f0 e0       	ldi	r31, 0x00	; 0
    3f66:	80 81       	ld	r24, Z
    3f68:	87 7f       	andi	r24, 0xF7	; 247
    3f6a:	8c 93       	st	X, r24
    3f6c:	01 c0       	rjmp	.+2      	; 0x3f70 <Spt_Init+0x9e>
        }
        else
        {
            returnValue = SPT_ERROR;
    3f6e:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    3f70:	ea 81       	ldd	r30, Y+2	; 0x02
    3f72:	fb 81       	ldd	r31, Y+3	; 0x03
    3f74:	82 81       	ldd	r24, Z+2	; 0x02
    3f76:	28 2f       	mov	r18, r24
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	3f 87       	std	Y+15, r19	; 0x0f
    3f7c:	2e 87       	std	Y+14, r18	; 0x0e
    3f7e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f80:	9f 85       	ldd	r25, Y+15	; 0x0f
    3f82:	82 30       	cpi	r24, 0x02	; 2
    3f84:	91 05       	cpc	r25, r1
    3f86:	c1 f0       	breq	.+48     	; 0x3fb8 <Spt_Init+0xe6>
    3f88:	2e 85       	ldd	r18, Y+14	; 0x0e
    3f8a:	3f 85       	ldd	r19, Y+15	; 0x0f
    3f8c:	23 30       	cpi	r18, 0x03	; 3
    3f8e:	31 05       	cpc	r19, r1
    3f90:	11 f1       	breq	.+68     	; 0x3fd6 <Spt_Init+0x104>
    3f92:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f94:	9f 85       	ldd	r25, Y+15	; 0x0f
    3f96:	00 97       	sbiw	r24, 0x00	; 0
    3f98:	69 f5       	brne	.+90     	; 0x3ff4 <Spt_Init+0x122>
        {
        case SPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR0, TCCR0_COM00);
    3f9a:	a3 e5       	ldi	r26, 0x53	; 83
    3f9c:	b0 e0       	ldi	r27, 0x00	; 0
    3f9e:	e3 e5       	ldi	r30, 0x53	; 83
    3fa0:	f0 e0       	ldi	r31, 0x00	; 0
    3fa2:	80 81       	ld	r24, Z
    3fa4:	8f 7e       	andi	r24, 0xEF	; 239
    3fa6:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    3fa8:	a3 e5       	ldi	r26, 0x53	; 83
    3faa:	b0 e0       	ldi	r27, 0x00	; 0
    3fac:	e3 e5       	ldi	r30, 0x53	; 83
    3fae:	f0 e0       	ldi	r31, 0x00	; 0
    3fb0:	80 81       	ld	r24, Z
    3fb2:	8f 7d       	andi	r24, 0xDF	; 223
    3fb4:	8c 93       	st	X, r24
    3fb6:	1f c0       	rjmp	.+62     	; 0x3ff6 <Spt_Init+0x124>
            break;
        case SPT_OUTPUT_SET:
            SET_BIT(TCCR0, TCCR0_COM00);
    3fb8:	a3 e5       	ldi	r26, 0x53	; 83
    3fba:	b0 e0       	ldi	r27, 0x00	; 0
    3fbc:	e3 e5       	ldi	r30, 0x53	; 83
    3fbe:	f0 e0       	ldi	r31, 0x00	; 0
    3fc0:	80 81       	ld	r24, Z
    3fc2:	80 61       	ori	r24, 0x10	; 16
    3fc4:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    3fc6:	a3 e5       	ldi	r26, 0x53	; 83
    3fc8:	b0 e0       	ldi	r27, 0x00	; 0
    3fca:	e3 e5       	ldi	r30, 0x53	; 83
    3fcc:	f0 e0       	ldi	r31, 0x00	; 0
    3fce:	80 81       	ld	r24, Z
    3fd0:	80 62       	ori	r24, 0x20	; 32
    3fd2:	8c 93       	st	X, r24
    3fd4:	10 c0       	rjmp	.+32     	; 0x3ff6 <Spt_Init+0x124>
            // TODO
            break;
        case SPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR0, TCCR0_COM00);
    3fd6:	a3 e5       	ldi	r26, 0x53	; 83
    3fd8:	b0 e0       	ldi	r27, 0x00	; 0
    3fda:	e3 e5       	ldi	r30, 0x53	; 83
    3fdc:	f0 e0       	ldi	r31, 0x00	; 0
    3fde:	80 81       	ld	r24, Z
    3fe0:	8f 7e       	andi	r24, 0xEF	; 239
    3fe2:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    3fe4:	a3 e5       	ldi	r26, 0x53	; 83
    3fe6:	b0 e0       	ldi	r27, 0x00	; 0
    3fe8:	e3 e5       	ldi	r30, 0x53	; 83
    3fea:	f0 e0       	ldi	r31, 0x00	; 0
    3fec:	80 81       	ld	r24, Z
    3fee:	80 62       	ori	r24, 0x20	; 32
    3ff0:	8c 93       	st	X, r24
    3ff2:	01 c0       	rjmp	.+2      	; 0x3ff6 <Spt_Init+0x124>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    3ff4:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    3ff6:	ea 81       	ldd	r30, Y+2	; 0x02
    3ff8:	fb 81       	ldd	r31, Y+3	; 0x03
    3ffa:	83 81       	ldd	r24, Z+3	; 0x03
    3ffc:	28 2f       	mov	r18, r24
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	3d 87       	std	Y+13, r19	; 0x0d
    4002:	2c 87       	std	Y+12, r18	; 0x0c
    4004:	8c 85       	ldd	r24, Y+12	; 0x0c
    4006:	9d 85       	ldd	r25, Y+13	; 0x0d
    4008:	84 30       	cpi	r24, 0x04	; 4
    400a:	91 05       	cpc	r25, r1
    400c:	09 f4       	brne	.+2      	; 0x4010 <Spt_Init+0x13e>
    400e:	77 c0       	rjmp	.+238    	; 0x40fe <Spt_Init+0x22c>
    4010:	2c 85       	ldd	r18, Y+12	; 0x0c
    4012:	3d 85       	ldd	r19, Y+13	; 0x0d
    4014:	25 30       	cpi	r18, 0x05	; 5
    4016:	31 05       	cpc	r19, r1
    4018:	8c f4       	brge	.+34     	; 0x403c <Spt_Init+0x16a>
    401a:	8c 85       	ldd	r24, Y+12	; 0x0c
    401c:	9d 85       	ldd	r25, Y+13	; 0x0d
    401e:	81 30       	cpi	r24, 0x01	; 1
    4020:	91 05       	cpc	r25, r1
    4022:	09 f4       	brne	.+2      	; 0x4026 <Spt_Init+0x154>
    4024:	40 c0       	rjmp	.+128    	; 0x40a6 <Spt_Init+0x1d4>
    4026:	2c 85       	ldd	r18, Y+12	; 0x0c
    4028:	3d 85       	ldd	r19, Y+13	; 0x0d
    402a:	22 30       	cpi	r18, 0x02	; 2
    402c:	31 05       	cpc	r19, r1
    402e:	09 f4       	brne	.+2      	; 0x4032 <Spt_Init+0x160>
    4030:	50 c0       	rjmp	.+160    	; 0x40d2 <Spt_Init+0x200>
    4032:	8c 85       	ldd	r24, Y+12	; 0x0c
    4034:	9d 85       	ldd	r25, Y+13	; 0x0d
    4036:	00 97       	sbiw	r24, 0x00	; 0
    4038:	01 f1       	breq	.+64     	; 0x407a <Spt_Init+0x1a8>
    403a:	cf c0       	rjmp	.+414    	; 0x41da <Spt_Init+0x308>
    403c:	2c 85       	ldd	r18, Y+12	; 0x0c
    403e:	3d 85       	ldd	r19, Y+13	; 0x0d
    4040:	27 30       	cpi	r18, 0x07	; 7
    4042:	31 05       	cpc	r19, r1
    4044:	09 f4       	brne	.+2      	; 0x4048 <Spt_Init+0x176>
    4046:	87 c0       	rjmp	.+270    	; 0x4156 <Spt_Init+0x284>
    4048:	8c 85       	ldd	r24, Y+12	; 0x0c
    404a:	9d 85       	ldd	r25, Y+13	; 0x0d
    404c:	88 30       	cpi	r24, 0x08	; 8
    404e:	91 05       	cpc	r25, r1
    4050:	3c f4       	brge	.+14     	; 0x4060 <Spt_Init+0x18e>
    4052:	2c 85       	ldd	r18, Y+12	; 0x0c
    4054:	3d 85       	ldd	r19, Y+13	; 0x0d
    4056:	26 30       	cpi	r18, 0x06	; 6
    4058:	31 05       	cpc	r19, r1
    405a:	09 f4       	brne	.+2      	; 0x405e <Spt_Init+0x18c>
    405c:	66 c0       	rjmp	.+204    	; 0x412a <Spt_Init+0x258>
    405e:	bd c0       	rjmp	.+378    	; 0x41da <Spt_Init+0x308>
    4060:	8c 85       	ldd	r24, Y+12	; 0x0c
    4062:	9d 85       	ldd	r25, Y+13	; 0x0d
    4064:	88 30       	cpi	r24, 0x08	; 8
    4066:	91 05       	cpc	r25, r1
    4068:	09 f4       	brne	.+2      	; 0x406c <Spt_Init+0x19a>
    406a:	8b c0       	rjmp	.+278    	; 0x4182 <Spt_Init+0x2b0>
    406c:	2c 85       	ldd	r18, Y+12	; 0x0c
    406e:	3d 85       	ldd	r19, Y+13	; 0x0d
    4070:	29 30       	cpi	r18, 0x09	; 9
    4072:	31 05       	cpc	r19, r1
    4074:	09 f4       	brne	.+2      	; 0x4078 <Spt_Init+0x1a6>
    4076:	9b c0       	rjmp	.+310    	; 0x41ae <Spt_Init+0x2dc>
    4078:	b0 c0       	rjmp	.+352    	; 0x41da <Spt_Init+0x308>
        {
        case SPT_PRESCALER_0:
            CLR_BIT(TCCR0, TCCR0_CS00);
    407a:	a3 e5       	ldi	r26, 0x53	; 83
    407c:	b0 e0       	ldi	r27, 0x00	; 0
    407e:	e3 e5       	ldi	r30, 0x53	; 83
    4080:	f0 e0       	ldi	r31, 0x00	; 0
    4082:	80 81       	ld	r24, Z
    4084:	8e 7f       	andi	r24, 0xFE	; 254
    4086:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    4088:	a3 e5       	ldi	r26, 0x53	; 83
    408a:	b0 e0       	ldi	r27, 0x00	; 0
    408c:	e3 e5       	ldi	r30, 0x53	; 83
    408e:	f0 e0       	ldi	r31, 0x00	; 0
    4090:	80 81       	ld	r24, Z
    4092:	8d 7f       	andi	r24, 0xFD	; 253
    4094:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    4096:	a3 e5       	ldi	r26, 0x53	; 83
    4098:	b0 e0       	ldi	r27, 0x00	; 0
    409a:	e3 e5       	ldi	r30, 0x53	; 83
    409c:	f0 e0       	ldi	r31, 0x00	; 0
    409e:	80 81       	ld	r24, Z
    40a0:	8b 7f       	andi	r24, 0xFB	; 251
    40a2:	8c 93       	st	X, r24
    40a4:	87 c3       	rjmp	.+1806   	; 0x47b4 <Spt_Init+0x8e2>
            break;
        case SPT_PRESCALER_1:
            SET_BIT(TCCR0, TCCR0_CS00);
    40a6:	a3 e5       	ldi	r26, 0x53	; 83
    40a8:	b0 e0       	ldi	r27, 0x00	; 0
    40aa:	e3 e5       	ldi	r30, 0x53	; 83
    40ac:	f0 e0       	ldi	r31, 0x00	; 0
    40ae:	80 81       	ld	r24, Z
    40b0:	81 60       	ori	r24, 0x01	; 1
    40b2:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    40b4:	a3 e5       	ldi	r26, 0x53	; 83
    40b6:	b0 e0       	ldi	r27, 0x00	; 0
    40b8:	e3 e5       	ldi	r30, 0x53	; 83
    40ba:	f0 e0       	ldi	r31, 0x00	; 0
    40bc:	80 81       	ld	r24, Z
    40be:	8d 7f       	andi	r24, 0xFD	; 253
    40c0:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    40c2:	a3 e5       	ldi	r26, 0x53	; 83
    40c4:	b0 e0       	ldi	r27, 0x00	; 0
    40c6:	e3 e5       	ldi	r30, 0x53	; 83
    40c8:	f0 e0       	ldi	r31, 0x00	; 0
    40ca:	80 81       	ld	r24, Z
    40cc:	8b 7f       	andi	r24, 0xFB	; 251
    40ce:	8c 93       	st	X, r24
    40d0:	71 c3       	rjmp	.+1762   	; 0x47b4 <Spt_Init+0x8e2>
            break;
        case SPT_PRESCALER_8:
            CLR_BIT(TCCR0, TCCR0_CS00);
    40d2:	a3 e5       	ldi	r26, 0x53	; 83
    40d4:	b0 e0       	ldi	r27, 0x00	; 0
    40d6:	e3 e5       	ldi	r30, 0x53	; 83
    40d8:	f0 e0       	ldi	r31, 0x00	; 0
    40da:	80 81       	ld	r24, Z
    40dc:	8e 7f       	andi	r24, 0xFE	; 254
    40de:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    40e0:	a3 e5       	ldi	r26, 0x53	; 83
    40e2:	b0 e0       	ldi	r27, 0x00	; 0
    40e4:	e3 e5       	ldi	r30, 0x53	; 83
    40e6:	f0 e0       	ldi	r31, 0x00	; 0
    40e8:	80 81       	ld	r24, Z
    40ea:	82 60       	ori	r24, 0x02	; 2
    40ec:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    40ee:	a3 e5       	ldi	r26, 0x53	; 83
    40f0:	b0 e0       	ldi	r27, 0x00	; 0
    40f2:	e3 e5       	ldi	r30, 0x53	; 83
    40f4:	f0 e0       	ldi	r31, 0x00	; 0
    40f6:	80 81       	ld	r24, Z
    40f8:	8b 7f       	andi	r24, 0xFB	; 251
    40fa:	8c 93       	st	X, r24
    40fc:	5b c3       	rjmp	.+1718   	; 0x47b4 <Spt_Init+0x8e2>
            break;
        case SPT_PRESCALER_64:
            SET_BIT(TCCR0, TCCR0_CS00);
    40fe:	a3 e5       	ldi	r26, 0x53	; 83
    4100:	b0 e0       	ldi	r27, 0x00	; 0
    4102:	e3 e5       	ldi	r30, 0x53	; 83
    4104:	f0 e0       	ldi	r31, 0x00	; 0
    4106:	80 81       	ld	r24, Z
    4108:	81 60       	ori	r24, 0x01	; 1
    410a:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    410c:	a3 e5       	ldi	r26, 0x53	; 83
    410e:	b0 e0       	ldi	r27, 0x00	; 0
    4110:	e3 e5       	ldi	r30, 0x53	; 83
    4112:	f0 e0       	ldi	r31, 0x00	; 0
    4114:	80 81       	ld	r24, Z
    4116:	82 60       	ori	r24, 0x02	; 2
    4118:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    411a:	a3 e5       	ldi	r26, 0x53	; 83
    411c:	b0 e0       	ldi	r27, 0x00	; 0
    411e:	e3 e5       	ldi	r30, 0x53	; 83
    4120:	f0 e0       	ldi	r31, 0x00	; 0
    4122:	80 81       	ld	r24, Z
    4124:	8b 7f       	andi	r24, 0xFB	; 251
    4126:	8c 93       	st	X, r24
    4128:	45 c3       	rjmp	.+1674   	; 0x47b4 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_256:
            CLR_BIT(TCCR0, TCCR0_CS00);
    412a:	a3 e5       	ldi	r26, 0x53	; 83
    412c:	b0 e0       	ldi	r27, 0x00	; 0
    412e:	e3 e5       	ldi	r30, 0x53	; 83
    4130:	f0 e0       	ldi	r31, 0x00	; 0
    4132:	80 81       	ld	r24, Z
    4134:	8e 7f       	andi	r24, 0xFE	; 254
    4136:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    4138:	a3 e5       	ldi	r26, 0x53	; 83
    413a:	b0 e0       	ldi	r27, 0x00	; 0
    413c:	e3 e5       	ldi	r30, 0x53	; 83
    413e:	f0 e0       	ldi	r31, 0x00	; 0
    4140:	80 81       	ld	r24, Z
    4142:	8d 7f       	andi	r24, 0xFD	; 253
    4144:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    4146:	a3 e5       	ldi	r26, 0x53	; 83
    4148:	b0 e0       	ldi	r27, 0x00	; 0
    414a:	e3 e5       	ldi	r30, 0x53	; 83
    414c:	f0 e0       	ldi	r31, 0x00	; 0
    414e:	80 81       	ld	r24, Z
    4150:	84 60       	ori	r24, 0x04	; 4
    4152:	8c 93       	st	X, r24
    4154:	2f c3       	rjmp	.+1630   	; 0x47b4 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_1024:
            SET_BIT(TCCR0, TCCR0_CS00);
    4156:	a3 e5       	ldi	r26, 0x53	; 83
    4158:	b0 e0       	ldi	r27, 0x00	; 0
    415a:	e3 e5       	ldi	r30, 0x53	; 83
    415c:	f0 e0       	ldi	r31, 0x00	; 0
    415e:	80 81       	ld	r24, Z
    4160:	81 60       	ori	r24, 0x01	; 1
    4162:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    4164:	a3 e5       	ldi	r26, 0x53	; 83
    4166:	b0 e0       	ldi	r27, 0x00	; 0
    4168:	e3 e5       	ldi	r30, 0x53	; 83
    416a:	f0 e0       	ldi	r31, 0x00	; 0
    416c:	80 81       	ld	r24, Z
    416e:	8d 7f       	andi	r24, 0xFD	; 253
    4170:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    4172:	a3 e5       	ldi	r26, 0x53	; 83
    4174:	b0 e0       	ldi	r27, 0x00	; 0
    4176:	e3 e5       	ldi	r30, 0x53	; 83
    4178:	f0 e0       	ldi	r31, 0x00	; 0
    417a:	80 81       	ld	r24, Z
    417c:	84 60       	ori	r24, 0x04	; 4
    417e:	8c 93       	st	X, r24
    4180:	19 c3       	rjmp	.+1586   	; 0x47b4 <Spt_Init+0x8e2>
            break;
        case SPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR0, TCCR0_CS00);
    4182:	a3 e5       	ldi	r26, 0x53	; 83
    4184:	b0 e0       	ldi	r27, 0x00	; 0
    4186:	e3 e5       	ldi	r30, 0x53	; 83
    4188:	f0 e0       	ldi	r31, 0x00	; 0
    418a:	80 81       	ld	r24, Z
    418c:	8e 7f       	andi	r24, 0xFE	; 254
    418e:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    4190:	a3 e5       	ldi	r26, 0x53	; 83
    4192:	b0 e0       	ldi	r27, 0x00	; 0
    4194:	e3 e5       	ldi	r30, 0x53	; 83
    4196:	f0 e0       	ldi	r31, 0x00	; 0
    4198:	80 81       	ld	r24, Z
    419a:	82 60       	ori	r24, 0x02	; 2
    419c:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    419e:	a3 e5       	ldi	r26, 0x53	; 83
    41a0:	b0 e0       	ldi	r27, 0x00	; 0
    41a2:	e3 e5       	ldi	r30, 0x53	; 83
    41a4:	f0 e0       	ldi	r31, 0x00	; 0
    41a6:	80 81       	ld	r24, Z
    41a8:	84 60       	ori	r24, 0x04	; 4
    41aa:	8c 93       	st	X, r24
    41ac:	03 c3       	rjmp	.+1542   	; 0x47b4 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR0, TCCR0_CS00);
    41ae:	a3 e5       	ldi	r26, 0x53	; 83
    41b0:	b0 e0       	ldi	r27, 0x00	; 0
    41b2:	e3 e5       	ldi	r30, 0x53	; 83
    41b4:	f0 e0       	ldi	r31, 0x00	; 0
    41b6:	80 81       	ld	r24, Z
    41b8:	81 60       	ori	r24, 0x01	; 1
    41ba:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    41bc:	a3 e5       	ldi	r26, 0x53	; 83
    41be:	b0 e0       	ldi	r27, 0x00	; 0
    41c0:	e3 e5       	ldi	r30, 0x53	; 83
    41c2:	f0 e0       	ldi	r31, 0x00	; 0
    41c4:	80 81       	ld	r24, Z
    41c6:	82 60       	ori	r24, 0x02	; 2
    41c8:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    41ca:	a3 e5       	ldi	r26, 0x53	; 83
    41cc:	b0 e0       	ldi	r27, 0x00	; 0
    41ce:	e3 e5       	ldi	r30, 0x53	; 83
    41d0:	f0 e0       	ldi	r31, 0x00	; 0
    41d2:	80 81       	ld	r24, Z
    41d4:	84 60       	ori	r24, 0x04	; 4
    41d6:	8c 93       	st	X, r24
    41d8:	ed c2       	rjmp	.+1498   	; 0x47b4 <Spt_Init+0x8e2>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    41da:	19 82       	std	Y+1, r1	; 0x01
    41dc:	eb c2       	rjmp	.+1494   	; 0x47b4 <Spt_Init+0x8e2>
        }
        break;

    case SPT_CHANNEL_TIMER1A:
        /*Waveform Generation Mode*/
        if (config->mode == SPT_MODE_FAST_PWM)
    41de:	ea 81       	ldd	r30, Y+2	; 0x02
    41e0:	fb 81       	ldd	r31, Y+3	; 0x03
    41e2:	81 81       	ldd	r24, Z+1	; 0x01
    41e4:	88 23       	and	r24, r24
    41e6:	e9 f4       	brne	.+58     	; 0x4222 <Spt_Init+0x350>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    41e8:	af e4       	ldi	r26, 0x4F	; 79
    41ea:	b0 e0       	ldi	r27, 0x00	; 0
    41ec:	ef e4       	ldi	r30, 0x4F	; 79
    41ee:	f0 e0       	ldi	r31, 0x00	; 0
    41f0:	80 81       	ld	r24, Z
    41f2:	8e 7f       	andi	r24, 0xFE	; 254
    41f4:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_WGM11);
    41f6:	af e4       	ldi	r26, 0x4F	; 79
    41f8:	b0 e0       	ldi	r27, 0x00	; 0
    41fa:	ef e4       	ldi	r30, 0x4F	; 79
    41fc:	f0 e0       	ldi	r31, 0x00	; 0
    41fe:	80 81       	ld	r24, Z
    4200:	82 60       	ori	r24, 0x02	; 2
    4202:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    4204:	ae e4       	ldi	r26, 0x4E	; 78
    4206:	b0 e0       	ldi	r27, 0x00	; 0
    4208:	ee e4       	ldi	r30, 0x4E	; 78
    420a:	f0 e0       	ldi	r31, 0x00	; 0
    420c:	80 81       	ld	r24, Z
    420e:	88 60       	ori	r24, 0x08	; 8
    4210:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM13);
    4212:	ae e4       	ldi	r26, 0x4E	; 78
    4214:	b0 e0       	ldi	r27, 0x00	; 0
    4216:	ee e4       	ldi	r30, 0x4E	; 78
    4218:	f0 e0       	ldi	r31, 0x00	; 0
    421a:	80 81       	ld	r24, Z
    421c:	80 61       	ori	r24, 0x10	; 16
    421e:	8c 93       	st	X, r24
    4220:	01 c0       	rjmp	.+2      	; 0x4224 <Spt_Init+0x352>
        //     // TODO
        //     // TODO
        // }
        else
        {
            returnValue = SPT_ERROR;
    4222:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    4224:	ea 81       	ldd	r30, Y+2	; 0x02
    4226:	fb 81       	ldd	r31, Y+3	; 0x03
    4228:	82 81       	ldd	r24, Z+2	; 0x02
    422a:	28 2f       	mov	r18, r24
    422c:	30 e0       	ldi	r19, 0x00	; 0
    422e:	3b 87       	std	Y+11, r19	; 0x0b
    4230:	2a 87       	std	Y+10, r18	; 0x0a
    4232:	8a 85       	ldd	r24, Y+10	; 0x0a
    4234:	9b 85       	ldd	r25, Y+11	; 0x0b
    4236:	81 30       	cpi	r24, 0x01	; 1
    4238:	91 05       	cpc	r25, r1
    423a:	21 f1       	breq	.+72     	; 0x4284 <Spt_Init+0x3b2>
    423c:	2a 85       	ldd	r18, Y+10	; 0x0a
    423e:	3b 85       	ldd	r19, Y+11	; 0x0b
    4240:	22 30       	cpi	r18, 0x02	; 2
    4242:	31 05       	cpc	r19, r1
    4244:	2c f4       	brge	.+10     	; 0x4250 <Spt_Init+0x37e>
    4246:	8a 85       	ldd	r24, Y+10	; 0x0a
    4248:	9b 85       	ldd	r25, Y+11	; 0x0b
    424a:	00 97       	sbiw	r24, 0x00	; 0
    424c:	61 f0       	breq	.+24     	; 0x4266 <Spt_Init+0x394>
    424e:	47 c0       	rjmp	.+142    	; 0x42de <Spt_Init+0x40c>
    4250:	2a 85       	ldd	r18, Y+10	; 0x0a
    4252:	3b 85       	ldd	r19, Y+11	; 0x0b
    4254:	22 30       	cpi	r18, 0x02	; 2
    4256:	31 05       	cpc	r19, r1
    4258:	21 f1       	breq	.+72     	; 0x42a2 <Spt_Init+0x3d0>
    425a:	8a 85       	ldd	r24, Y+10	; 0x0a
    425c:	9b 85       	ldd	r25, Y+11	; 0x0b
    425e:	83 30       	cpi	r24, 0x03	; 3
    4260:	91 05       	cpc	r25, r1
    4262:	71 f1       	breq	.+92     	; 0x42c0 <Spt_Init+0x3ee>
    4264:	3c c0       	rjmp	.+120    	; 0x42de <Spt_Init+0x40c>
        {
        case SPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    4266:	af e4       	ldi	r26, 0x4F	; 79
    4268:	b0 e0       	ldi	r27, 0x00	; 0
    426a:	ef e4       	ldi	r30, 0x4F	; 79
    426c:	f0 e0       	ldi	r31, 0x00	; 0
    426e:	80 81       	ld	r24, Z
    4270:	8f 7b       	andi	r24, 0xBF	; 191
    4272:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    4274:	af e4       	ldi	r26, 0x4F	; 79
    4276:	b0 e0       	ldi	r27, 0x00	; 0
    4278:	ef e4       	ldi	r30, 0x4F	; 79
    427a:	f0 e0       	ldi	r31, 0x00	; 0
    427c:	80 81       	ld	r24, Z
    427e:	8f 77       	andi	r24, 0x7F	; 127
    4280:	8c 93       	st	X, r24
    4282:	2e c0       	rjmp	.+92     	; 0x42e0 <Spt_Init+0x40e>
            // TODO
            break;
        case SPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    4284:	af e4       	ldi	r26, 0x4F	; 79
    4286:	b0 e0       	ldi	r27, 0x00	; 0
    4288:	ef e4       	ldi	r30, 0x4F	; 79
    428a:	f0 e0       	ldi	r31, 0x00	; 0
    428c:	80 81       	ld	r24, Z
    428e:	80 64       	ori	r24, 0x40	; 64
    4290:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    4292:	af e4       	ldi	r26, 0x4F	; 79
    4294:	b0 e0       	ldi	r27, 0x00	; 0
    4296:	ef e4       	ldi	r30, 0x4F	; 79
    4298:	f0 e0       	ldi	r31, 0x00	; 0
    429a:	80 81       	ld	r24, Z
    429c:	8f 77       	andi	r24, 0x7F	; 127
    429e:	8c 93       	st	X, r24
    42a0:	1f c0       	rjmp	.+62     	; 0x42e0 <Spt_Init+0x40e>
            // TODO
            break;
        case SPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    42a2:	af e4       	ldi	r26, 0x4F	; 79
    42a4:	b0 e0       	ldi	r27, 0x00	; 0
    42a6:	ef e4       	ldi	r30, 0x4F	; 79
    42a8:	f0 e0       	ldi	r31, 0x00	; 0
    42aa:	80 81       	ld	r24, Z
    42ac:	80 64       	ori	r24, 0x40	; 64
    42ae:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    42b0:	af e4       	ldi	r26, 0x4F	; 79
    42b2:	b0 e0       	ldi	r27, 0x00	; 0
    42b4:	ef e4       	ldi	r30, 0x4F	; 79
    42b6:	f0 e0       	ldi	r31, 0x00	; 0
    42b8:	80 81       	ld	r24, Z
    42ba:	80 68       	ori	r24, 0x80	; 128
    42bc:	8c 93       	st	X, r24
    42be:	10 c0       	rjmp	.+32     	; 0x42e0 <Spt_Init+0x40e>
            // TODO
            break;
        case SPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    42c0:	af e4       	ldi	r26, 0x4F	; 79
    42c2:	b0 e0       	ldi	r27, 0x00	; 0
    42c4:	ef e4       	ldi	r30, 0x4F	; 79
    42c6:	f0 e0       	ldi	r31, 0x00	; 0
    42c8:	80 81       	ld	r24, Z
    42ca:	8f 7b       	andi	r24, 0xBF	; 191
    42cc:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    42ce:	af e4       	ldi	r26, 0x4F	; 79
    42d0:	b0 e0       	ldi	r27, 0x00	; 0
    42d2:	ef e4       	ldi	r30, 0x4F	; 79
    42d4:	f0 e0       	ldi	r31, 0x00	; 0
    42d6:	80 81       	ld	r24, Z
    42d8:	80 68       	ori	r24, 0x80	; 128
    42da:	8c 93       	st	X, r24
    42dc:	01 c0       	rjmp	.+2      	; 0x42e0 <Spt_Init+0x40e>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    42de:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    42e0:	ea 81       	ldd	r30, Y+2	; 0x02
    42e2:	fb 81       	ldd	r31, Y+3	; 0x03
    42e4:	83 81       	ldd	r24, Z+3	; 0x03
    42e6:	28 2f       	mov	r18, r24
    42e8:	30 e0       	ldi	r19, 0x00	; 0
    42ea:	39 87       	std	Y+9, r19	; 0x09
    42ec:	28 87       	std	Y+8, r18	; 0x08
    42ee:	88 85       	ldd	r24, Y+8	; 0x08
    42f0:	99 85       	ldd	r25, Y+9	; 0x09
    42f2:	84 30       	cpi	r24, 0x04	; 4
    42f4:	91 05       	cpc	r25, r1
    42f6:	09 f4       	brne	.+2      	; 0x42fa <Spt_Init+0x428>
    42f8:	77 c0       	rjmp	.+238    	; 0x43e8 <Spt_Init+0x516>
    42fa:	28 85       	ldd	r18, Y+8	; 0x08
    42fc:	39 85       	ldd	r19, Y+9	; 0x09
    42fe:	25 30       	cpi	r18, 0x05	; 5
    4300:	31 05       	cpc	r19, r1
    4302:	8c f4       	brge	.+34     	; 0x4326 <Spt_Init+0x454>
    4304:	88 85       	ldd	r24, Y+8	; 0x08
    4306:	99 85       	ldd	r25, Y+9	; 0x09
    4308:	81 30       	cpi	r24, 0x01	; 1
    430a:	91 05       	cpc	r25, r1
    430c:	09 f4       	brne	.+2      	; 0x4310 <Spt_Init+0x43e>
    430e:	40 c0       	rjmp	.+128    	; 0x4390 <Spt_Init+0x4be>
    4310:	28 85       	ldd	r18, Y+8	; 0x08
    4312:	39 85       	ldd	r19, Y+9	; 0x09
    4314:	22 30       	cpi	r18, 0x02	; 2
    4316:	31 05       	cpc	r19, r1
    4318:	09 f4       	brne	.+2      	; 0x431c <Spt_Init+0x44a>
    431a:	50 c0       	rjmp	.+160    	; 0x43bc <Spt_Init+0x4ea>
    431c:	88 85       	ldd	r24, Y+8	; 0x08
    431e:	99 85       	ldd	r25, Y+9	; 0x09
    4320:	00 97       	sbiw	r24, 0x00	; 0
    4322:	01 f1       	breq	.+64     	; 0x4364 <Spt_Init+0x492>
    4324:	cf c0       	rjmp	.+414    	; 0x44c4 <Spt_Init+0x5f2>
    4326:	28 85       	ldd	r18, Y+8	; 0x08
    4328:	39 85       	ldd	r19, Y+9	; 0x09
    432a:	27 30       	cpi	r18, 0x07	; 7
    432c:	31 05       	cpc	r19, r1
    432e:	09 f4       	brne	.+2      	; 0x4332 <Spt_Init+0x460>
    4330:	87 c0       	rjmp	.+270    	; 0x4440 <Spt_Init+0x56e>
    4332:	88 85       	ldd	r24, Y+8	; 0x08
    4334:	99 85       	ldd	r25, Y+9	; 0x09
    4336:	88 30       	cpi	r24, 0x08	; 8
    4338:	91 05       	cpc	r25, r1
    433a:	3c f4       	brge	.+14     	; 0x434a <Spt_Init+0x478>
    433c:	28 85       	ldd	r18, Y+8	; 0x08
    433e:	39 85       	ldd	r19, Y+9	; 0x09
    4340:	26 30       	cpi	r18, 0x06	; 6
    4342:	31 05       	cpc	r19, r1
    4344:	09 f4       	brne	.+2      	; 0x4348 <Spt_Init+0x476>
    4346:	66 c0       	rjmp	.+204    	; 0x4414 <Spt_Init+0x542>
    4348:	bd c0       	rjmp	.+378    	; 0x44c4 <Spt_Init+0x5f2>
    434a:	88 85       	ldd	r24, Y+8	; 0x08
    434c:	99 85       	ldd	r25, Y+9	; 0x09
    434e:	88 30       	cpi	r24, 0x08	; 8
    4350:	91 05       	cpc	r25, r1
    4352:	09 f4       	brne	.+2      	; 0x4356 <Spt_Init+0x484>
    4354:	8b c0       	rjmp	.+278    	; 0x446c <Spt_Init+0x59a>
    4356:	28 85       	ldd	r18, Y+8	; 0x08
    4358:	39 85       	ldd	r19, Y+9	; 0x09
    435a:	29 30       	cpi	r18, 0x09	; 9
    435c:	31 05       	cpc	r19, r1
    435e:	09 f4       	brne	.+2      	; 0x4362 <Spt_Init+0x490>
    4360:	9b c0       	rjmp	.+310    	; 0x4498 <Spt_Init+0x5c6>
    4362:	b0 c0       	rjmp	.+352    	; 0x44c4 <Spt_Init+0x5f2>
        {
        case SPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    4364:	ae e4       	ldi	r26, 0x4E	; 78
    4366:	b0 e0       	ldi	r27, 0x00	; 0
    4368:	ee e4       	ldi	r30, 0x4E	; 78
    436a:	f0 e0       	ldi	r31, 0x00	; 0
    436c:	80 81       	ld	r24, Z
    436e:	8e 7f       	andi	r24, 0xFE	; 254
    4370:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    4372:	ae e4       	ldi	r26, 0x4E	; 78
    4374:	b0 e0       	ldi	r27, 0x00	; 0
    4376:	ee e4       	ldi	r30, 0x4E	; 78
    4378:	f0 e0       	ldi	r31, 0x00	; 0
    437a:	80 81       	ld	r24, Z
    437c:	8d 7f       	andi	r24, 0xFD	; 253
    437e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4380:	ae e4       	ldi	r26, 0x4E	; 78
    4382:	b0 e0       	ldi	r27, 0x00	; 0
    4384:	ee e4       	ldi	r30, 0x4E	; 78
    4386:	f0 e0       	ldi	r31, 0x00	; 0
    4388:	80 81       	ld	r24, Z
    438a:	8b 7f       	andi	r24, 0xFB	; 251
    438c:	8c 93       	st	X, r24
    438e:	12 c2       	rjmp	.+1060   	; 0x47b4 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    4390:	ae e4       	ldi	r26, 0x4E	; 78
    4392:	b0 e0       	ldi	r27, 0x00	; 0
    4394:	ee e4       	ldi	r30, 0x4E	; 78
    4396:	f0 e0       	ldi	r31, 0x00	; 0
    4398:	80 81       	ld	r24, Z
    439a:	81 60       	ori	r24, 0x01	; 1
    439c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    439e:	ae e4       	ldi	r26, 0x4E	; 78
    43a0:	b0 e0       	ldi	r27, 0x00	; 0
    43a2:	ee e4       	ldi	r30, 0x4E	; 78
    43a4:	f0 e0       	ldi	r31, 0x00	; 0
    43a6:	80 81       	ld	r24, Z
    43a8:	8d 7f       	andi	r24, 0xFD	; 253
    43aa:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    43ac:	ae e4       	ldi	r26, 0x4E	; 78
    43ae:	b0 e0       	ldi	r27, 0x00	; 0
    43b0:	ee e4       	ldi	r30, 0x4E	; 78
    43b2:	f0 e0       	ldi	r31, 0x00	; 0
    43b4:	80 81       	ld	r24, Z
    43b6:	8b 7f       	andi	r24, 0xFB	; 251
    43b8:	8c 93       	st	X, r24
    43ba:	fc c1       	rjmp	.+1016   	; 0x47b4 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    43bc:	ae e4       	ldi	r26, 0x4E	; 78
    43be:	b0 e0       	ldi	r27, 0x00	; 0
    43c0:	ee e4       	ldi	r30, 0x4E	; 78
    43c2:	f0 e0       	ldi	r31, 0x00	; 0
    43c4:	80 81       	ld	r24, Z
    43c6:	8e 7f       	andi	r24, 0xFE	; 254
    43c8:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    43ca:	ae e4       	ldi	r26, 0x4E	; 78
    43cc:	b0 e0       	ldi	r27, 0x00	; 0
    43ce:	ee e4       	ldi	r30, 0x4E	; 78
    43d0:	f0 e0       	ldi	r31, 0x00	; 0
    43d2:	80 81       	ld	r24, Z
    43d4:	82 60       	ori	r24, 0x02	; 2
    43d6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    43d8:	ae e4       	ldi	r26, 0x4E	; 78
    43da:	b0 e0       	ldi	r27, 0x00	; 0
    43dc:	ee e4       	ldi	r30, 0x4E	; 78
    43de:	f0 e0       	ldi	r31, 0x00	; 0
    43e0:	80 81       	ld	r24, Z
    43e2:	8b 7f       	andi	r24, 0xFB	; 251
    43e4:	8c 93       	st	X, r24
    43e6:	e6 c1       	rjmp	.+972    	; 0x47b4 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    43e8:	ae e4       	ldi	r26, 0x4E	; 78
    43ea:	b0 e0       	ldi	r27, 0x00	; 0
    43ec:	ee e4       	ldi	r30, 0x4E	; 78
    43ee:	f0 e0       	ldi	r31, 0x00	; 0
    43f0:	80 81       	ld	r24, Z
    43f2:	81 60       	ori	r24, 0x01	; 1
    43f4:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    43f6:	ae e4       	ldi	r26, 0x4E	; 78
    43f8:	b0 e0       	ldi	r27, 0x00	; 0
    43fa:	ee e4       	ldi	r30, 0x4E	; 78
    43fc:	f0 e0       	ldi	r31, 0x00	; 0
    43fe:	80 81       	ld	r24, Z
    4400:	82 60       	ori	r24, 0x02	; 2
    4402:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4404:	ae e4       	ldi	r26, 0x4E	; 78
    4406:	b0 e0       	ldi	r27, 0x00	; 0
    4408:	ee e4       	ldi	r30, 0x4E	; 78
    440a:	f0 e0       	ldi	r31, 0x00	; 0
    440c:	80 81       	ld	r24, Z
    440e:	8b 7f       	andi	r24, 0xFB	; 251
    4410:	8c 93       	st	X, r24
    4412:	d0 c1       	rjmp	.+928    	; 0x47b4 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    4414:	ae e4       	ldi	r26, 0x4E	; 78
    4416:	b0 e0       	ldi	r27, 0x00	; 0
    4418:	ee e4       	ldi	r30, 0x4E	; 78
    441a:	f0 e0       	ldi	r31, 0x00	; 0
    441c:	80 81       	ld	r24, Z
    441e:	8e 7f       	andi	r24, 0xFE	; 254
    4420:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    4422:	ae e4       	ldi	r26, 0x4E	; 78
    4424:	b0 e0       	ldi	r27, 0x00	; 0
    4426:	ee e4       	ldi	r30, 0x4E	; 78
    4428:	f0 e0       	ldi	r31, 0x00	; 0
    442a:	80 81       	ld	r24, Z
    442c:	8d 7f       	andi	r24, 0xFD	; 253
    442e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4430:	ae e4       	ldi	r26, 0x4E	; 78
    4432:	b0 e0       	ldi	r27, 0x00	; 0
    4434:	ee e4       	ldi	r30, 0x4E	; 78
    4436:	f0 e0       	ldi	r31, 0x00	; 0
    4438:	80 81       	ld	r24, Z
    443a:	84 60       	ori	r24, 0x04	; 4
    443c:	8c 93       	st	X, r24
    443e:	ba c1       	rjmp	.+884    	; 0x47b4 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    4440:	ae e4       	ldi	r26, 0x4E	; 78
    4442:	b0 e0       	ldi	r27, 0x00	; 0
    4444:	ee e4       	ldi	r30, 0x4E	; 78
    4446:	f0 e0       	ldi	r31, 0x00	; 0
    4448:	80 81       	ld	r24, Z
    444a:	81 60       	ori	r24, 0x01	; 1
    444c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    444e:	ae e4       	ldi	r26, 0x4E	; 78
    4450:	b0 e0       	ldi	r27, 0x00	; 0
    4452:	ee e4       	ldi	r30, 0x4E	; 78
    4454:	f0 e0       	ldi	r31, 0x00	; 0
    4456:	80 81       	ld	r24, Z
    4458:	8d 7f       	andi	r24, 0xFD	; 253
    445a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    445c:	ae e4       	ldi	r26, 0x4E	; 78
    445e:	b0 e0       	ldi	r27, 0x00	; 0
    4460:	ee e4       	ldi	r30, 0x4E	; 78
    4462:	f0 e0       	ldi	r31, 0x00	; 0
    4464:	80 81       	ld	r24, Z
    4466:	84 60       	ori	r24, 0x04	; 4
    4468:	8c 93       	st	X, r24
    446a:	a4 c1       	rjmp	.+840    	; 0x47b4 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    446c:	ae e4       	ldi	r26, 0x4E	; 78
    446e:	b0 e0       	ldi	r27, 0x00	; 0
    4470:	ee e4       	ldi	r30, 0x4E	; 78
    4472:	f0 e0       	ldi	r31, 0x00	; 0
    4474:	80 81       	ld	r24, Z
    4476:	8e 7f       	andi	r24, 0xFE	; 254
    4478:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    447a:	ae e4       	ldi	r26, 0x4E	; 78
    447c:	b0 e0       	ldi	r27, 0x00	; 0
    447e:	ee e4       	ldi	r30, 0x4E	; 78
    4480:	f0 e0       	ldi	r31, 0x00	; 0
    4482:	80 81       	ld	r24, Z
    4484:	82 60       	ori	r24, 0x02	; 2
    4486:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4488:	ae e4       	ldi	r26, 0x4E	; 78
    448a:	b0 e0       	ldi	r27, 0x00	; 0
    448c:	ee e4       	ldi	r30, 0x4E	; 78
    448e:	f0 e0       	ldi	r31, 0x00	; 0
    4490:	80 81       	ld	r24, Z
    4492:	84 60       	ori	r24, 0x04	; 4
    4494:	8c 93       	st	X, r24
    4496:	8e c1       	rjmp	.+796    	; 0x47b4 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    4498:	ae e4       	ldi	r26, 0x4E	; 78
    449a:	b0 e0       	ldi	r27, 0x00	; 0
    449c:	ee e4       	ldi	r30, 0x4E	; 78
    449e:	f0 e0       	ldi	r31, 0x00	; 0
    44a0:	80 81       	ld	r24, Z
    44a2:	81 60       	ori	r24, 0x01	; 1
    44a4:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    44a6:	ae e4       	ldi	r26, 0x4E	; 78
    44a8:	b0 e0       	ldi	r27, 0x00	; 0
    44aa:	ee e4       	ldi	r30, 0x4E	; 78
    44ac:	f0 e0       	ldi	r31, 0x00	; 0
    44ae:	80 81       	ld	r24, Z
    44b0:	82 60       	ori	r24, 0x02	; 2
    44b2:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    44b4:	ae e4       	ldi	r26, 0x4E	; 78
    44b6:	b0 e0       	ldi	r27, 0x00	; 0
    44b8:	ee e4       	ldi	r30, 0x4E	; 78
    44ba:	f0 e0       	ldi	r31, 0x00	; 0
    44bc:	80 81       	ld	r24, Z
    44be:	84 60       	ori	r24, 0x04	; 4
    44c0:	8c 93       	st	X, r24
    44c2:	78 c1       	rjmp	.+752    	; 0x47b4 <Spt_Init+0x8e2>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    44c4:	19 82       	std	Y+1, r1	; 0x01
    44c6:	76 c1       	rjmp	.+748    	; 0x47b4 <Spt_Init+0x8e2>
        }
        break;

        case SPT_CHANNEL_TIMER1B:
        /*Waveform Generation Mode*/
        if (config->mode == SPT_MODE_FAST_PWM)
    44c8:	ea 81       	ldd	r30, Y+2	; 0x02
    44ca:	fb 81       	ldd	r31, Y+3	; 0x03
    44cc:	81 81       	ldd	r24, Z+1	; 0x01
    44ce:	88 23       	and	r24, r24
    44d0:	e9 f4       	brne	.+58     	; 0x450c <Spt_Init+0x63a>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    44d2:	af e4       	ldi	r26, 0x4F	; 79
    44d4:	b0 e0       	ldi	r27, 0x00	; 0
    44d6:	ef e4       	ldi	r30, 0x4F	; 79
    44d8:	f0 e0       	ldi	r31, 0x00	; 0
    44da:	80 81       	ld	r24, Z
    44dc:	8e 7f       	andi	r24, 0xFE	; 254
    44de:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_WGM11);
    44e0:	af e4       	ldi	r26, 0x4F	; 79
    44e2:	b0 e0       	ldi	r27, 0x00	; 0
    44e4:	ef e4       	ldi	r30, 0x4F	; 79
    44e6:	f0 e0       	ldi	r31, 0x00	; 0
    44e8:	80 81       	ld	r24, Z
    44ea:	82 60       	ori	r24, 0x02	; 2
    44ec:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    44ee:	ae e4       	ldi	r26, 0x4E	; 78
    44f0:	b0 e0       	ldi	r27, 0x00	; 0
    44f2:	ee e4       	ldi	r30, 0x4E	; 78
    44f4:	f0 e0       	ldi	r31, 0x00	; 0
    44f6:	80 81       	ld	r24, Z
    44f8:	88 60       	ori	r24, 0x08	; 8
    44fa:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM13);
    44fc:	ae e4       	ldi	r26, 0x4E	; 78
    44fe:	b0 e0       	ldi	r27, 0x00	; 0
    4500:	ee e4       	ldi	r30, 0x4E	; 78
    4502:	f0 e0       	ldi	r31, 0x00	; 0
    4504:	80 81       	ld	r24, Z
    4506:	80 61       	ori	r24, 0x10	; 16
    4508:	8c 93       	st	X, r24
    450a:	01 c0       	rjmp	.+2      	; 0x450e <Spt_Init+0x63c>
        //         // TODO
        //         // TODO
        //     }
        else
        {
            returnValue = SPT_ERROR;
    450c:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    450e:	ea 81       	ldd	r30, Y+2	; 0x02
    4510:	fb 81       	ldd	r31, Y+3	; 0x03
    4512:	82 81       	ldd	r24, Z+2	; 0x02
    4514:	28 2f       	mov	r18, r24
    4516:	30 e0       	ldi	r19, 0x00	; 0
    4518:	3f 83       	std	Y+7, r19	; 0x07
    451a:	2e 83       	std	Y+6, r18	; 0x06
    451c:	8e 81       	ldd	r24, Y+6	; 0x06
    451e:	9f 81       	ldd	r25, Y+7	; 0x07
    4520:	81 30       	cpi	r24, 0x01	; 1
    4522:	91 05       	cpc	r25, r1
    4524:	21 f1       	breq	.+72     	; 0x456e <Spt_Init+0x69c>
    4526:	2e 81       	ldd	r18, Y+6	; 0x06
    4528:	3f 81       	ldd	r19, Y+7	; 0x07
    452a:	22 30       	cpi	r18, 0x02	; 2
    452c:	31 05       	cpc	r19, r1
    452e:	2c f4       	brge	.+10     	; 0x453a <Spt_Init+0x668>
    4530:	8e 81       	ldd	r24, Y+6	; 0x06
    4532:	9f 81       	ldd	r25, Y+7	; 0x07
    4534:	00 97       	sbiw	r24, 0x00	; 0
    4536:	61 f0       	breq	.+24     	; 0x4550 <Spt_Init+0x67e>
    4538:	47 c0       	rjmp	.+142    	; 0x45c8 <Spt_Init+0x6f6>
    453a:	2e 81       	ldd	r18, Y+6	; 0x06
    453c:	3f 81       	ldd	r19, Y+7	; 0x07
    453e:	22 30       	cpi	r18, 0x02	; 2
    4540:	31 05       	cpc	r19, r1
    4542:	21 f1       	breq	.+72     	; 0x458c <Spt_Init+0x6ba>
    4544:	8e 81       	ldd	r24, Y+6	; 0x06
    4546:	9f 81       	ldd	r25, Y+7	; 0x07
    4548:	83 30       	cpi	r24, 0x03	; 3
    454a:	91 05       	cpc	r25, r1
    454c:	71 f1       	breq	.+92     	; 0x45aa <Spt_Init+0x6d8>
    454e:	3c c0       	rjmp	.+120    	; 0x45c8 <Spt_Init+0x6f6>
        {
        case SPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    4550:	af e4       	ldi	r26, 0x4F	; 79
    4552:	b0 e0       	ldi	r27, 0x00	; 0
    4554:	ef e4       	ldi	r30, 0x4F	; 79
    4556:	f0 e0       	ldi	r31, 0x00	; 0
    4558:	80 81       	ld	r24, Z
    455a:	8f 7e       	andi	r24, 0xEF	; 239
    455c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    455e:	af e4       	ldi	r26, 0x4F	; 79
    4560:	b0 e0       	ldi	r27, 0x00	; 0
    4562:	ef e4       	ldi	r30, 0x4F	; 79
    4564:	f0 e0       	ldi	r31, 0x00	; 0
    4566:	80 81       	ld	r24, Z
    4568:	8f 7d       	andi	r24, 0xDF	; 223
    456a:	8c 93       	st	X, r24
    456c:	2e c0       	rjmp	.+92     	; 0x45ca <Spt_Init+0x6f8>
            // TODO
            break;
        case SPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    456e:	af e4       	ldi	r26, 0x4F	; 79
    4570:	b0 e0       	ldi	r27, 0x00	; 0
    4572:	ef e4       	ldi	r30, 0x4F	; 79
    4574:	f0 e0       	ldi	r31, 0x00	; 0
    4576:	80 81       	ld	r24, Z
    4578:	80 61       	ori	r24, 0x10	; 16
    457a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    457c:	af e4       	ldi	r26, 0x4F	; 79
    457e:	b0 e0       	ldi	r27, 0x00	; 0
    4580:	ef e4       	ldi	r30, 0x4F	; 79
    4582:	f0 e0       	ldi	r31, 0x00	; 0
    4584:	80 81       	ld	r24, Z
    4586:	8f 7d       	andi	r24, 0xDF	; 223
    4588:	8c 93       	st	X, r24
    458a:	1f c0       	rjmp	.+62     	; 0x45ca <Spt_Init+0x6f8>
            // TODO
            break;
        case SPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    458c:	af e4       	ldi	r26, 0x4F	; 79
    458e:	b0 e0       	ldi	r27, 0x00	; 0
    4590:	ef e4       	ldi	r30, 0x4F	; 79
    4592:	f0 e0       	ldi	r31, 0x00	; 0
    4594:	80 81       	ld	r24, Z
    4596:	80 61       	ori	r24, 0x10	; 16
    4598:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    459a:	af e4       	ldi	r26, 0x4F	; 79
    459c:	b0 e0       	ldi	r27, 0x00	; 0
    459e:	ef e4       	ldi	r30, 0x4F	; 79
    45a0:	f0 e0       	ldi	r31, 0x00	; 0
    45a2:	80 81       	ld	r24, Z
    45a4:	80 62       	ori	r24, 0x20	; 32
    45a6:	8c 93       	st	X, r24
    45a8:	10 c0       	rjmp	.+32     	; 0x45ca <Spt_Init+0x6f8>
            // TODO
            break;
        case SPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    45aa:	af e4       	ldi	r26, 0x4F	; 79
    45ac:	b0 e0       	ldi	r27, 0x00	; 0
    45ae:	ef e4       	ldi	r30, 0x4F	; 79
    45b0:	f0 e0       	ldi	r31, 0x00	; 0
    45b2:	80 81       	ld	r24, Z
    45b4:	8f 7e       	andi	r24, 0xEF	; 239
    45b6:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    45b8:	af e4       	ldi	r26, 0x4F	; 79
    45ba:	b0 e0       	ldi	r27, 0x00	; 0
    45bc:	ef e4       	ldi	r30, 0x4F	; 79
    45be:	f0 e0       	ldi	r31, 0x00	; 0
    45c0:	80 81       	ld	r24, Z
    45c2:	80 62       	ori	r24, 0x20	; 32
    45c4:	8c 93       	st	X, r24
    45c6:	01 c0       	rjmp	.+2      	; 0x45ca <Spt_Init+0x6f8>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    45c8:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    45ca:	ea 81       	ldd	r30, Y+2	; 0x02
    45cc:	fb 81       	ldd	r31, Y+3	; 0x03
    45ce:	83 81       	ldd	r24, Z+3	; 0x03
    45d0:	28 2f       	mov	r18, r24
    45d2:	30 e0       	ldi	r19, 0x00	; 0
    45d4:	3d 83       	std	Y+5, r19	; 0x05
    45d6:	2c 83       	std	Y+4, r18	; 0x04
    45d8:	8c 81       	ldd	r24, Y+4	; 0x04
    45da:	9d 81       	ldd	r25, Y+5	; 0x05
    45dc:	84 30       	cpi	r24, 0x04	; 4
    45de:	91 05       	cpc	r25, r1
    45e0:	09 f4       	brne	.+2      	; 0x45e4 <Spt_Init+0x712>
    45e2:	77 c0       	rjmp	.+238    	; 0x46d2 <Spt_Init+0x800>
    45e4:	2c 81       	ldd	r18, Y+4	; 0x04
    45e6:	3d 81       	ldd	r19, Y+5	; 0x05
    45e8:	25 30       	cpi	r18, 0x05	; 5
    45ea:	31 05       	cpc	r19, r1
    45ec:	8c f4       	brge	.+34     	; 0x4610 <Spt_Init+0x73e>
    45ee:	8c 81       	ldd	r24, Y+4	; 0x04
    45f0:	9d 81       	ldd	r25, Y+5	; 0x05
    45f2:	81 30       	cpi	r24, 0x01	; 1
    45f4:	91 05       	cpc	r25, r1
    45f6:	09 f4       	brne	.+2      	; 0x45fa <Spt_Init+0x728>
    45f8:	40 c0       	rjmp	.+128    	; 0x467a <Spt_Init+0x7a8>
    45fa:	2c 81       	ldd	r18, Y+4	; 0x04
    45fc:	3d 81       	ldd	r19, Y+5	; 0x05
    45fe:	22 30       	cpi	r18, 0x02	; 2
    4600:	31 05       	cpc	r19, r1
    4602:	09 f4       	brne	.+2      	; 0x4606 <Spt_Init+0x734>
    4604:	50 c0       	rjmp	.+160    	; 0x46a6 <Spt_Init+0x7d4>
    4606:	8c 81       	ldd	r24, Y+4	; 0x04
    4608:	9d 81       	ldd	r25, Y+5	; 0x05
    460a:	00 97       	sbiw	r24, 0x00	; 0
    460c:	01 f1       	breq	.+64     	; 0x464e <Spt_Init+0x77c>
    460e:	cf c0       	rjmp	.+414    	; 0x47ae <Spt_Init+0x8dc>
    4610:	2c 81       	ldd	r18, Y+4	; 0x04
    4612:	3d 81       	ldd	r19, Y+5	; 0x05
    4614:	27 30       	cpi	r18, 0x07	; 7
    4616:	31 05       	cpc	r19, r1
    4618:	09 f4       	brne	.+2      	; 0x461c <Spt_Init+0x74a>
    461a:	87 c0       	rjmp	.+270    	; 0x472a <Spt_Init+0x858>
    461c:	8c 81       	ldd	r24, Y+4	; 0x04
    461e:	9d 81       	ldd	r25, Y+5	; 0x05
    4620:	88 30       	cpi	r24, 0x08	; 8
    4622:	91 05       	cpc	r25, r1
    4624:	3c f4       	brge	.+14     	; 0x4634 <Spt_Init+0x762>
    4626:	2c 81       	ldd	r18, Y+4	; 0x04
    4628:	3d 81       	ldd	r19, Y+5	; 0x05
    462a:	26 30       	cpi	r18, 0x06	; 6
    462c:	31 05       	cpc	r19, r1
    462e:	09 f4       	brne	.+2      	; 0x4632 <Spt_Init+0x760>
    4630:	66 c0       	rjmp	.+204    	; 0x46fe <Spt_Init+0x82c>
    4632:	bd c0       	rjmp	.+378    	; 0x47ae <Spt_Init+0x8dc>
    4634:	8c 81       	ldd	r24, Y+4	; 0x04
    4636:	9d 81       	ldd	r25, Y+5	; 0x05
    4638:	88 30       	cpi	r24, 0x08	; 8
    463a:	91 05       	cpc	r25, r1
    463c:	09 f4       	brne	.+2      	; 0x4640 <Spt_Init+0x76e>
    463e:	8b c0       	rjmp	.+278    	; 0x4756 <Spt_Init+0x884>
    4640:	2c 81       	ldd	r18, Y+4	; 0x04
    4642:	3d 81       	ldd	r19, Y+5	; 0x05
    4644:	29 30       	cpi	r18, 0x09	; 9
    4646:	31 05       	cpc	r19, r1
    4648:	09 f4       	brne	.+2      	; 0x464c <Spt_Init+0x77a>
    464a:	9b c0       	rjmp	.+310    	; 0x4782 <Spt_Init+0x8b0>
    464c:	b0 c0       	rjmp	.+352    	; 0x47ae <Spt_Init+0x8dc>
        {
        case SPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    464e:	ae e4       	ldi	r26, 0x4E	; 78
    4650:	b0 e0       	ldi	r27, 0x00	; 0
    4652:	ee e4       	ldi	r30, 0x4E	; 78
    4654:	f0 e0       	ldi	r31, 0x00	; 0
    4656:	80 81       	ld	r24, Z
    4658:	8e 7f       	andi	r24, 0xFE	; 254
    465a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    465c:	ae e4       	ldi	r26, 0x4E	; 78
    465e:	b0 e0       	ldi	r27, 0x00	; 0
    4660:	ee e4       	ldi	r30, 0x4E	; 78
    4662:	f0 e0       	ldi	r31, 0x00	; 0
    4664:	80 81       	ld	r24, Z
    4666:	8d 7f       	andi	r24, 0xFD	; 253
    4668:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    466a:	ae e4       	ldi	r26, 0x4E	; 78
    466c:	b0 e0       	ldi	r27, 0x00	; 0
    466e:	ee e4       	ldi	r30, 0x4E	; 78
    4670:	f0 e0       	ldi	r31, 0x00	; 0
    4672:	80 81       	ld	r24, Z
    4674:	8b 7f       	andi	r24, 0xFB	; 251
    4676:	8c 93       	st	X, r24
    4678:	9d c0       	rjmp	.+314    	; 0x47b4 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    467a:	ae e4       	ldi	r26, 0x4E	; 78
    467c:	b0 e0       	ldi	r27, 0x00	; 0
    467e:	ee e4       	ldi	r30, 0x4E	; 78
    4680:	f0 e0       	ldi	r31, 0x00	; 0
    4682:	80 81       	ld	r24, Z
    4684:	81 60       	ori	r24, 0x01	; 1
    4686:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    4688:	ae e4       	ldi	r26, 0x4E	; 78
    468a:	b0 e0       	ldi	r27, 0x00	; 0
    468c:	ee e4       	ldi	r30, 0x4E	; 78
    468e:	f0 e0       	ldi	r31, 0x00	; 0
    4690:	80 81       	ld	r24, Z
    4692:	8d 7f       	andi	r24, 0xFD	; 253
    4694:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4696:	ae e4       	ldi	r26, 0x4E	; 78
    4698:	b0 e0       	ldi	r27, 0x00	; 0
    469a:	ee e4       	ldi	r30, 0x4E	; 78
    469c:	f0 e0       	ldi	r31, 0x00	; 0
    469e:	80 81       	ld	r24, Z
    46a0:	8b 7f       	andi	r24, 0xFB	; 251
    46a2:	8c 93       	st	X, r24
    46a4:	87 c0       	rjmp	.+270    	; 0x47b4 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    46a6:	ae e4       	ldi	r26, 0x4E	; 78
    46a8:	b0 e0       	ldi	r27, 0x00	; 0
    46aa:	ee e4       	ldi	r30, 0x4E	; 78
    46ac:	f0 e0       	ldi	r31, 0x00	; 0
    46ae:	80 81       	ld	r24, Z
    46b0:	8e 7f       	andi	r24, 0xFE	; 254
    46b2:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    46b4:	ae e4       	ldi	r26, 0x4E	; 78
    46b6:	b0 e0       	ldi	r27, 0x00	; 0
    46b8:	ee e4       	ldi	r30, 0x4E	; 78
    46ba:	f0 e0       	ldi	r31, 0x00	; 0
    46bc:	80 81       	ld	r24, Z
    46be:	82 60       	ori	r24, 0x02	; 2
    46c0:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    46c2:	ae e4       	ldi	r26, 0x4E	; 78
    46c4:	b0 e0       	ldi	r27, 0x00	; 0
    46c6:	ee e4       	ldi	r30, 0x4E	; 78
    46c8:	f0 e0       	ldi	r31, 0x00	; 0
    46ca:	80 81       	ld	r24, Z
    46cc:	8b 7f       	andi	r24, 0xFB	; 251
    46ce:	8c 93       	st	X, r24
    46d0:	71 c0       	rjmp	.+226    	; 0x47b4 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    46d2:	ae e4       	ldi	r26, 0x4E	; 78
    46d4:	b0 e0       	ldi	r27, 0x00	; 0
    46d6:	ee e4       	ldi	r30, 0x4E	; 78
    46d8:	f0 e0       	ldi	r31, 0x00	; 0
    46da:	80 81       	ld	r24, Z
    46dc:	81 60       	ori	r24, 0x01	; 1
    46de:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    46e0:	ae e4       	ldi	r26, 0x4E	; 78
    46e2:	b0 e0       	ldi	r27, 0x00	; 0
    46e4:	ee e4       	ldi	r30, 0x4E	; 78
    46e6:	f0 e0       	ldi	r31, 0x00	; 0
    46e8:	80 81       	ld	r24, Z
    46ea:	82 60       	ori	r24, 0x02	; 2
    46ec:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    46ee:	ae e4       	ldi	r26, 0x4E	; 78
    46f0:	b0 e0       	ldi	r27, 0x00	; 0
    46f2:	ee e4       	ldi	r30, 0x4E	; 78
    46f4:	f0 e0       	ldi	r31, 0x00	; 0
    46f6:	80 81       	ld	r24, Z
    46f8:	8b 7f       	andi	r24, 0xFB	; 251
    46fa:	8c 93       	st	X, r24
    46fc:	5b c0       	rjmp	.+182    	; 0x47b4 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    46fe:	ae e4       	ldi	r26, 0x4E	; 78
    4700:	b0 e0       	ldi	r27, 0x00	; 0
    4702:	ee e4       	ldi	r30, 0x4E	; 78
    4704:	f0 e0       	ldi	r31, 0x00	; 0
    4706:	80 81       	ld	r24, Z
    4708:	8e 7f       	andi	r24, 0xFE	; 254
    470a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    470c:	ae e4       	ldi	r26, 0x4E	; 78
    470e:	b0 e0       	ldi	r27, 0x00	; 0
    4710:	ee e4       	ldi	r30, 0x4E	; 78
    4712:	f0 e0       	ldi	r31, 0x00	; 0
    4714:	80 81       	ld	r24, Z
    4716:	8d 7f       	andi	r24, 0xFD	; 253
    4718:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    471a:	ae e4       	ldi	r26, 0x4E	; 78
    471c:	b0 e0       	ldi	r27, 0x00	; 0
    471e:	ee e4       	ldi	r30, 0x4E	; 78
    4720:	f0 e0       	ldi	r31, 0x00	; 0
    4722:	80 81       	ld	r24, Z
    4724:	84 60       	ori	r24, 0x04	; 4
    4726:	8c 93       	st	X, r24
    4728:	45 c0       	rjmp	.+138    	; 0x47b4 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    472a:	ae e4       	ldi	r26, 0x4E	; 78
    472c:	b0 e0       	ldi	r27, 0x00	; 0
    472e:	ee e4       	ldi	r30, 0x4E	; 78
    4730:	f0 e0       	ldi	r31, 0x00	; 0
    4732:	80 81       	ld	r24, Z
    4734:	81 60       	ori	r24, 0x01	; 1
    4736:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    4738:	ae e4       	ldi	r26, 0x4E	; 78
    473a:	b0 e0       	ldi	r27, 0x00	; 0
    473c:	ee e4       	ldi	r30, 0x4E	; 78
    473e:	f0 e0       	ldi	r31, 0x00	; 0
    4740:	80 81       	ld	r24, Z
    4742:	8d 7f       	andi	r24, 0xFD	; 253
    4744:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4746:	ae e4       	ldi	r26, 0x4E	; 78
    4748:	b0 e0       	ldi	r27, 0x00	; 0
    474a:	ee e4       	ldi	r30, 0x4E	; 78
    474c:	f0 e0       	ldi	r31, 0x00	; 0
    474e:	80 81       	ld	r24, Z
    4750:	84 60       	ori	r24, 0x04	; 4
    4752:	8c 93       	st	X, r24
    4754:	2f c0       	rjmp	.+94     	; 0x47b4 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    4756:	ae e4       	ldi	r26, 0x4E	; 78
    4758:	b0 e0       	ldi	r27, 0x00	; 0
    475a:	ee e4       	ldi	r30, 0x4E	; 78
    475c:	f0 e0       	ldi	r31, 0x00	; 0
    475e:	80 81       	ld	r24, Z
    4760:	8e 7f       	andi	r24, 0xFE	; 254
    4762:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4764:	ae e4       	ldi	r26, 0x4E	; 78
    4766:	b0 e0       	ldi	r27, 0x00	; 0
    4768:	ee e4       	ldi	r30, 0x4E	; 78
    476a:	f0 e0       	ldi	r31, 0x00	; 0
    476c:	80 81       	ld	r24, Z
    476e:	82 60       	ori	r24, 0x02	; 2
    4770:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4772:	ae e4       	ldi	r26, 0x4E	; 78
    4774:	b0 e0       	ldi	r27, 0x00	; 0
    4776:	ee e4       	ldi	r30, 0x4E	; 78
    4778:	f0 e0       	ldi	r31, 0x00	; 0
    477a:	80 81       	ld	r24, Z
    477c:	84 60       	ori	r24, 0x04	; 4
    477e:	8c 93       	st	X, r24
    4780:	19 c0       	rjmp	.+50     	; 0x47b4 <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    4782:	ae e4       	ldi	r26, 0x4E	; 78
    4784:	b0 e0       	ldi	r27, 0x00	; 0
    4786:	ee e4       	ldi	r30, 0x4E	; 78
    4788:	f0 e0       	ldi	r31, 0x00	; 0
    478a:	80 81       	ld	r24, Z
    478c:	81 60       	ori	r24, 0x01	; 1
    478e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4790:	ae e4       	ldi	r26, 0x4E	; 78
    4792:	b0 e0       	ldi	r27, 0x00	; 0
    4794:	ee e4       	ldi	r30, 0x4E	; 78
    4796:	f0 e0       	ldi	r31, 0x00	; 0
    4798:	80 81       	ld	r24, Z
    479a:	82 60       	ori	r24, 0x02	; 2
    479c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    479e:	ae e4       	ldi	r26, 0x4E	; 78
    47a0:	b0 e0       	ldi	r27, 0x00	; 0
    47a2:	ee e4       	ldi	r30, 0x4E	; 78
    47a4:	f0 e0       	ldi	r31, 0x00	; 0
    47a6:	80 81       	ld	r24, Z
    47a8:	84 60       	ori	r24, 0x04	; 4
    47aa:	8c 93       	st	X, r24
    47ac:	03 c0       	rjmp	.+6      	; 0x47b4 <Spt_Init+0x8e2>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    47ae:	19 82       	std	Y+1, r1	; 0x01
    47b0:	01 c0       	rjmp	.+2      	; 0x47b4 <Spt_Init+0x8e2>
        //         break;
        //     }
        //     break;

        default:
            returnValue = SPT_ERROR;
    47b2:	19 82       	std	Y+1, r1	; 0x01
        }
        return returnValue;
    47b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    47b6:	61 96       	adiw	r28, 0x11	; 17
    47b8:	0f b6       	in	r0, 0x3f	; 63
    47ba:	f8 94       	cli
    47bc:	de bf       	out	0x3e, r29	; 62
    47be:	0f be       	out	0x3f, r0	; 63
    47c0:	cd bf       	out	0x3d, r28	; 61
    47c2:	cf 91       	pop	r28
    47c4:	df 91       	pop	r29
    47c6:	08 95       	ret

000047c8 <Spt_Set_ICR1>:

void Spt_Set_ICR1(u16 value) {
    47c8:	df 93       	push	r29
    47ca:	cf 93       	push	r28
    47cc:	00 d0       	rcall	.+0      	; 0x47ce <Spt_Set_ICR1+0x6>
    47ce:	cd b7       	in	r28, 0x3d	; 61
    47d0:	de b7       	in	r29, 0x3e	; 62
    47d2:	9a 83       	std	Y+2, r25	; 0x02
    47d4:	89 83       	std	Y+1, r24	; 0x01
    ICR1 = value;
    47d6:	e6 e4       	ldi	r30, 0x46	; 70
    47d8:	f0 e0       	ldi	r31, 0x00	; 0
    47da:	89 81       	ldd	r24, Y+1	; 0x01
    47dc:	9a 81       	ldd	r25, Y+2	; 0x02
    47de:	91 83       	std	Z+1, r25	; 0x01
    47e0:	80 83       	st	Z, r24
}
    47e2:	0f 90       	pop	r0
    47e4:	0f 90       	pop	r0
    47e6:	cf 91       	pop	r28
    47e8:	df 91       	pop	r29
    47ea:	08 95       	ret

000047ec <Get_OCR_Value>:

u16 Get_OCR_Value (u8 angle) {
    47ec:	df 93       	push	r29
    47ee:	cf 93       	push	r28
    47f0:	0f 92       	push	r0
    47f2:	cd b7       	in	r28, 0x3d	; 61
    47f4:	de b7       	in	r29, 0x3e	; 62
    47f6:	89 83       	std	Y+1, r24	; 0x01
    return ((angle*1000)/180)+1000;
    47f8:	89 81       	ldd	r24, Y+1	; 0x01
    47fa:	28 2f       	mov	r18, r24
    47fc:	30 e0       	ldi	r19, 0x00	; 0
    47fe:	88 ee       	ldi	r24, 0xE8	; 232
    4800:	93 e0       	ldi	r25, 0x03	; 3
    4802:	ac 01       	movw	r20, r24
    4804:	24 9f       	mul	r18, r20
    4806:	c0 01       	movw	r24, r0
    4808:	25 9f       	mul	r18, r21
    480a:	90 0d       	add	r25, r0
    480c:	34 9f       	mul	r19, r20
    480e:	90 0d       	add	r25, r0
    4810:	11 24       	eor	r1, r1
    4812:	24 eb       	ldi	r18, 0xB4	; 180
    4814:	30 e0       	ldi	r19, 0x00	; 0
    4816:	b9 01       	movw	r22, r18
    4818:	0e 94 00 26 	call	0x4c00	; 0x4c00 <__divmodhi4>
    481c:	cb 01       	movw	r24, r22
    481e:	88 51       	subi	r24, 0x18	; 24
    4820:	9c 4f       	sbci	r25, 0xFC	; 252
}
    4822:	0f 90       	pop	r0
    4824:	cf 91       	pop	r28
    4826:	df 91       	pop	r29
    4828:	08 95       	ret

0000482a <Spt_StartTimer>:

Spt_ReturnType Spt_StartTimer(Spt_ChannelType channel, u16 value)
{
    482a:	df 93       	push	r29
    482c:	cf 93       	push	r28
    482e:	00 d0       	rcall	.+0      	; 0x4830 <Spt_StartTimer+0x6>
    4830:	00 d0       	rcall	.+0      	; 0x4832 <Spt_StartTimer+0x8>
    4832:	00 d0       	rcall	.+0      	; 0x4834 <Spt_StartTimer+0xa>
    4834:	cd b7       	in	r28, 0x3d	; 61
    4836:	de b7       	in	r29, 0x3e	; 62
    4838:	8a 83       	std	Y+2, r24	; 0x02
    483a:	7c 83       	std	Y+4, r23	; 0x04
    483c:	6b 83       	std	Y+3, r22	; 0x03
    Spt_ReturnType returnValue = SPT_OK;
    483e:	81 e0       	ldi	r24, 0x01	; 1
    4840:	89 83       	std	Y+1, r24	; 0x01
    switch (channel)
    4842:	8a 81       	ldd	r24, Y+2	; 0x02
    4844:	28 2f       	mov	r18, r24
    4846:	30 e0       	ldi	r19, 0x00	; 0
    4848:	3e 83       	std	Y+6, r19	; 0x06
    484a:	2d 83       	std	Y+5, r18	; 0x05
    484c:	8d 81       	ldd	r24, Y+5	; 0x05
    484e:	9e 81       	ldd	r25, Y+6	; 0x06
    4850:	81 30       	cpi	r24, 0x01	; 1
    4852:	91 05       	cpc	r25, r1
    4854:	b1 f0       	breq	.+44     	; 0x4882 <Spt_StartTimer+0x58>
    4856:	2d 81       	ldd	r18, Y+5	; 0x05
    4858:	3e 81       	ldd	r19, Y+6	; 0x06
    485a:	22 30       	cpi	r18, 0x02	; 2
    485c:	31 05       	cpc	r19, r1
    485e:	c1 f0       	breq	.+48     	; 0x4890 <Spt_StartTimer+0x66>
    4860:	8d 81       	ldd	r24, Y+5	; 0x05
    4862:	9e 81       	ldd	r25, Y+6	; 0x06
    4864:	00 97       	sbiw	r24, 0x00	; 0
    4866:	d1 f4       	brne	.+52     	; 0x489c <Spt_StartTimer+0x72>
    {
    case SPT_CHANNEL_TIMER0:
        if (value < 256)
    4868:	8b 81       	ldd	r24, Y+3	; 0x03
    486a:	9c 81       	ldd	r25, Y+4	; 0x04
    486c:	8f 3f       	cpi	r24, 0xFF	; 255
    486e:	91 05       	cpc	r25, r1
    4870:	09 f0       	breq	.+2      	; 0x4874 <Spt_StartTimer+0x4a>
    4872:	28 f4       	brcc	.+10     	; 0x487e <Spt_StartTimer+0x54>
        {
            OCR0 = value;
    4874:	ec e5       	ldi	r30, 0x5C	; 92
    4876:	f0 e0       	ldi	r31, 0x00	; 0
    4878:	8b 81       	ldd	r24, Y+3	; 0x03
    487a:	80 83       	st	Z, r24
    487c:	0f c0       	rjmp	.+30     	; 0x489c <Spt_StartTimer+0x72>
        }
        else
        {
            returnValue = SPT_ERROR;
    487e:	19 82       	std	Y+1, r1	; 0x01
    4880:	0d c0       	rjmp	.+26     	; 0x489c <Spt_StartTimer+0x72>
        }
        break;
    case SPT_CHANNEL_TIMER1A:
        if (value < 65536)
        {
            OCR1A = value;
    4882:	ea e4       	ldi	r30, 0x4A	; 74
    4884:	f0 e0       	ldi	r31, 0x00	; 0
    4886:	8b 81       	ldd	r24, Y+3	; 0x03
    4888:	9c 81       	ldd	r25, Y+4	; 0x04
    488a:	91 83       	std	Z+1, r25	; 0x01
    488c:	80 83       	st	Z, r24
    488e:	06 c0       	rjmp	.+12     	; 0x489c <Spt_StartTimer+0x72>
        // TODO
        break;
    case SPT_CHANNEL_TIMER1B:
        if (value < 65536)
        {
            OCR1B = value;
    4890:	e8 e4       	ldi	r30, 0x48	; 72
    4892:	f0 e0       	ldi	r31, 0x00	; 0
    4894:	8b 81       	ldd	r24, Y+3	; 0x03
    4896:	9c 81       	ldd	r25, Y+4	; 0x04
    4898:	91 83       	std	Z+1, r25	; 0x01
    489a:	80 83       	st	Z, r24
    //     break;

    default:
        break;
    }
    return returnValue;
    489c:	89 81       	ldd	r24, Y+1	; 0x01
}
    489e:	26 96       	adiw	r28, 0x06	; 6
    48a0:	0f b6       	in	r0, 0x3f	; 63
    48a2:	f8 94       	cli
    48a4:	de bf       	out	0x3e, r29	; 62
    48a6:	0f be       	out	0x3f, r0	; 63
    48a8:	cd bf       	out	0x3d, r28	; 61
    48aa:	cf 91       	pop	r28
    48ac:	df 91       	pop	r29
    48ae:	08 95       	ret

000048b0 <UART_Init>:
#define UCSRB_RXEN 4

#define UCSRA_TXC 6
#define UCSRA_RXC 7

void UART_Init (UART_ConfigType* config) {
    48b0:	df 93       	push	r29
    48b2:	cf 93       	push	r28
    48b4:	cd b7       	in	r28, 0x3d	; 61
    48b6:	de b7       	in	r29, 0x3e	; 62
    48b8:	28 97       	sbiw	r28, 0x08	; 8
    48ba:	0f b6       	in	r0, 0x3f	; 63
    48bc:	f8 94       	cli
    48be:	de bf       	out	0x3e, r29	; 62
    48c0:	0f be       	out	0x3f, r0	; 63
    48c2:	cd bf       	out	0x3d, r28	; 61
    48c4:	9a 83       	std	Y+2, r25	; 0x02
    48c6:	89 83       	std	Y+1, r24	; 0x01

    SET_BIT(UCSRC,UCSRC_URSEL);
    48c8:	a0 e4       	ldi	r26, 0x40	; 64
    48ca:	b0 e0       	ldi	r27, 0x00	; 0
    48cc:	e0 e4       	ldi	r30, 0x40	; 64
    48ce:	f0 e0       	ldi	r31, 0x00	; 0
    48d0:	80 81       	ld	r24, Z
    48d2:	80 68       	ori	r24, 0x80	; 128
    48d4:	8c 93       	st	X, r24
    CLR_BIT(UCSRC,UCSRC_UMSEL);
    48d6:	a0 e4       	ldi	r26, 0x40	; 64
    48d8:	b0 e0       	ldi	r27, 0x00	; 0
    48da:	e0 e4       	ldi	r30, 0x40	; 64
    48dc:	f0 e0       	ldi	r31, 0x00	; 0
    48de:	80 81       	ld	r24, Z
    48e0:	8f 7b       	andi	r24, 0xBF	; 191
    48e2:	8c 93       	st	X, r24

    switch (config->parity)
    48e4:	e9 81       	ldd	r30, Y+1	; 0x01
    48e6:	fa 81       	ldd	r31, Y+2	; 0x02
    48e8:	80 81       	ld	r24, Z
    48ea:	28 2f       	mov	r18, r24
    48ec:	30 e0       	ldi	r19, 0x00	; 0
    48ee:	38 87       	std	Y+8, r19	; 0x08
    48f0:	2f 83       	std	Y+7, r18	; 0x07
    48f2:	8f 81       	ldd	r24, Y+7	; 0x07
    48f4:	98 85       	ldd	r25, Y+8	; 0x08
    48f6:	81 30       	cpi	r24, 0x01	; 1
    48f8:	91 05       	cpc	r25, r1
    48fa:	c1 f0       	breq	.+48     	; 0x492c <UART_Init+0x7c>
    48fc:	2f 81       	ldd	r18, Y+7	; 0x07
    48fe:	38 85       	ldd	r19, Y+8	; 0x08
    4900:	22 30       	cpi	r18, 0x02	; 2
    4902:	31 05       	cpc	r19, r1
    4904:	11 f1       	breq	.+68     	; 0x494a <UART_Init+0x9a>
    4906:	8f 81       	ldd	r24, Y+7	; 0x07
    4908:	98 85       	ldd	r25, Y+8	; 0x08
    490a:	00 97       	sbiw	r24, 0x00	; 0
    490c:	61 f5       	brne	.+88     	; 0x4966 <UART_Init+0xb6>
    {
        case DISABLE_PRITY:
            CLR_BIT(UCSRC,UCSRC_UPM0);
    490e:	a0 e4       	ldi	r26, 0x40	; 64
    4910:	b0 e0       	ldi	r27, 0x00	; 0
    4912:	e0 e4       	ldi	r30, 0x40	; 64
    4914:	f0 e0       	ldi	r31, 0x00	; 0
    4916:	80 81       	ld	r24, Z
    4918:	8f 7e       	andi	r24, 0xEF	; 239
    491a:	8c 93       	st	X, r24
            CLR_BIT(UCSRC,UCSRC_UPM1);
    491c:	a0 e4       	ldi	r26, 0x40	; 64
    491e:	b0 e0       	ldi	r27, 0x00	; 0
    4920:	e0 e4       	ldi	r30, 0x40	; 64
    4922:	f0 e0       	ldi	r31, 0x00	; 0
    4924:	80 81       	ld	r24, Z
    4926:	8f 7d       	andi	r24, 0xDF	; 223
    4928:	8c 93       	st	X, r24
    492a:	1d c0       	rjmp	.+58     	; 0x4966 <UART_Init+0xb6>
            break;
        case ENABLE_EVEN_PARITY:
            CLR_BIT(UCSRC,UCSRC_UPM0);
    492c:	a0 e4       	ldi	r26, 0x40	; 64
    492e:	b0 e0       	ldi	r27, 0x00	; 0
    4930:	e0 e4       	ldi	r30, 0x40	; 64
    4932:	f0 e0       	ldi	r31, 0x00	; 0
    4934:	80 81       	ld	r24, Z
    4936:	8f 7e       	andi	r24, 0xEF	; 239
    4938:	8c 93       	st	X, r24
            SET_BIT(UCSRC,UCSRC_UPM1);
    493a:	a0 e4       	ldi	r26, 0x40	; 64
    493c:	b0 e0       	ldi	r27, 0x00	; 0
    493e:	e0 e4       	ldi	r30, 0x40	; 64
    4940:	f0 e0       	ldi	r31, 0x00	; 0
    4942:	80 81       	ld	r24, Z
    4944:	80 62       	ori	r24, 0x20	; 32
    4946:	8c 93       	st	X, r24
    4948:	0e c0       	rjmp	.+28     	; 0x4966 <UART_Init+0xb6>
            break;
        case ENABLE_ODD_PARITY:
            SET_BIT(UCSRC,UCSRC_UPM0);
    494a:	a0 e4       	ldi	r26, 0x40	; 64
    494c:	b0 e0       	ldi	r27, 0x00	; 0
    494e:	e0 e4       	ldi	r30, 0x40	; 64
    4950:	f0 e0       	ldi	r31, 0x00	; 0
    4952:	80 81       	ld	r24, Z
    4954:	80 61       	ori	r24, 0x10	; 16
    4956:	8c 93       	st	X, r24
            SET_BIT(UCSRC,UCSRC_UPM1);
    4958:	a0 e4       	ldi	r26, 0x40	; 64
    495a:	b0 e0       	ldi	r27, 0x00	; 0
    495c:	e0 e4       	ldi	r30, 0x40	; 64
    495e:	f0 e0       	ldi	r31, 0x00	; 0
    4960:	80 81       	ld	r24, Z
    4962:	80 62       	ori	r24, 0x20	; 32
    4964:	8c 93       	st	X, r24
            break;
        default:
            break;
    }

    switch (config->stop_bit)
    4966:	e9 81       	ldd	r30, Y+1	; 0x01
    4968:	fa 81       	ldd	r31, Y+2	; 0x02
    496a:	81 81       	ldd	r24, Z+1	; 0x01
    496c:	28 2f       	mov	r18, r24
    496e:	30 e0       	ldi	r19, 0x00	; 0
    4970:	3e 83       	std	Y+6, r19	; 0x06
    4972:	2d 83       	std	Y+5, r18	; 0x05
    4974:	8d 81       	ldd	r24, Y+5	; 0x05
    4976:	9e 81       	ldd	r25, Y+6	; 0x06
    4978:	00 97       	sbiw	r24, 0x00	; 0
    497a:	31 f0       	breq	.+12     	; 0x4988 <UART_Init+0xd8>
    497c:	2d 81       	ldd	r18, Y+5	; 0x05
    497e:	3e 81       	ldd	r19, Y+6	; 0x06
    4980:	21 30       	cpi	r18, 0x01	; 1
    4982:	31 05       	cpc	r19, r1
    4984:	49 f0       	breq	.+18     	; 0x4998 <UART_Init+0xe8>
    4986:	0f c0       	rjmp	.+30     	; 0x49a6 <UART_Init+0xf6>
    {
        case ONE_STOP_BIT:
            CLR_BIT(UCSRC,UCSRC_USBS);
    4988:	a0 e4       	ldi	r26, 0x40	; 64
    498a:	b0 e0       	ldi	r27, 0x00	; 0
    498c:	e0 e4       	ldi	r30, 0x40	; 64
    498e:	f0 e0       	ldi	r31, 0x00	; 0
    4990:	80 81       	ld	r24, Z
    4992:	87 7f       	andi	r24, 0xF7	; 247
    4994:	8c 93       	st	X, r24
    4996:	07 c0       	rjmp	.+14     	; 0x49a6 <UART_Init+0xf6>
            break;
        case TWO_STOP_BIT:
            SET_BIT(UCSRC,UCSRC_USBS);
    4998:	a0 e4       	ldi	r26, 0x40	; 64
    499a:	b0 e0       	ldi	r27, 0x00	; 0
    499c:	e0 e4       	ldi	r30, 0x40	; 64
    499e:	f0 e0       	ldi	r31, 0x00	; 0
    49a0:	80 81       	ld	r24, Z
    49a2:	88 60       	ori	r24, 0x08	; 8
    49a4:	8c 93       	st	X, r24
            break;
        default:
            break;
    }

    switch (config->char_size)
    49a6:	e9 81       	ldd	r30, Y+1	; 0x01
    49a8:	fa 81       	ldd	r31, Y+2	; 0x02
    49aa:	82 81       	ldd	r24, Z+2	; 0x02
    49ac:	28 2f       	mov	r18, r24
    49ae:	30 e0       	ldi	r19, 0x00	; 0
    49b0:	3c 83       	std	Y+4, r19	; 0x04
    49b2:	2b 83       	std	Y+3, r18	; 0x03
    49b4:	8b 81       	ldd	r24, Y+3	; 0x03
    49b6:	9c 81       	ldd	r25, Y+4	; 0x04
    49b8:	82 30       	cpi	r24, 0x02	; 2
    49ba:	91 05       	cpc	r25, r1
    49bc:	09 f4       	brne	.+2      	; 0x49c0 <UART_Init+0x110>
    49be:	48 c0       	rjmp	.+144    	; 0x4a50 <UART_Init+0x1a0>
    49c0:	2b 81       	ldd	r18, Y+3	; 0x03
    49c2:	3c 81       	ldd	r19, Y+4	; 0x04
    49c4:	23 30       	cpi	r18, 0x03	; 3
    49c6:	31 05       	cpc	r19, r1
    49c8:	54 f4       	brge	.+20     	; 0x49de <UART_Init+0x12e>
    49ca:	8b 81       	ldd	r24, Y+3	; 0x03
    49cc:	9c 81       	ldd	r25, Y+4	; 0x04
    49ce:	00 97       	sbiw	r24, 0x00	; 0
    49d0:	99 f0       	breq	.+38     	; 0x49f8 <UART_Init+0x148>
    49d2:	2b 81       	ldd	r18, Y+3	; 0x03
    49d4:	3c 81       	ldd	r19, Y+4	; 0x04
    49d6:	21 30       	cpi	r18, 0x01	; 1
    49d8:	31 05       	cpc	r19, r1
    49da:	21 f1       	breq	.+72     	; 0x4a24 <UART_Init+0x174>
    49dc:	7a c0       	rjmp	.+244    	; 0x4ad2 <UART_Init+0x222>
    49de:	8b 81       	ldd	r24, Y+3	; 0x03
    49e0:	9c 81       	ldd	r25, Y+4	; 0x04
    49e2:	83 30       	cpi	r24, 0x03	; 3
    49e4:	91 05       	cpc	r25, r1
    49e6:	09 f4       	brne	.+2      	; 0x49ea <UART_Init+0x13a>
    49e8:	49 c0       	rjmp	.+146    	; 0x4a7c <UART_Init+0x1cc>
    49ea:	2b 81       	ldd	r18, Y+3	; 0x03
    49ec:	3c 81       	ldd	r19, Y+4	; 0x04
    49ee:	24 30       	cpi	r18, 0x04	; 4
    49f0:	31 05       	cpc	r19, r1
    49f2:	09 f4       	brne	.+2      	; 0x49f6 <UART_Init+0x146>
    49f4:	59 c0       	rjmp	.+178    	; 0x4aa8 <UART_Init+0x1f8>
    49f6:	6d c0       	rjmp	.+218    	; 0x4ad2 <UART_Init+0x222>
    {
        case CHARACTER_SIZE_5_BIT:
            CLR_BIT(UCSRC,UCSRC_UCSZ0);
    49f8:	a0 e4       	ldi	r26, 0x40	; 64
    49fa:	b0 e0       	ldi	r27, 0x00	; 0
    49fc:	e0 e4       	ldi	r30, 0x40	; 64
    49fe:	f0 e0       	ldi	r31, 0x00	; 0
    4a00:	80 81       	ld	r24, Z
    4a02:	8d 7f       	andi	r24, 0xFD	; 253
    4a04:	8c 93       	st	X, r24
            CLR_BIT(UCSRC,UCSRC_UCSZ1);
    4a06:	a0 e4       	ldi	r26, 0x40	; 64
    4a08:	b0 e0       	ldi	r27, 0x00	; 0
    4a0a:	e0 e4       	ldi	r30, 0x40	; 64
    4a0c:	f0 e0       	ldi	r31, 0x00	; 0
    4a0e:	80 81       	ld	r24, Z
    4a10:	8b 7f       	andi	r24, 0xFB	; 251
    4a12:	8c 93       	st	X, r24
            CLR_BIT(UCSRB,UCSRB_UCSZ2);
    4a14:	aa e2       	ldi	r26, 0x2A	; 42
    4a16:	b0 e0       	ldi	r27, 0x00	; 0
    4a18:	ea e2       	ldi	r30, 0x2A	; 42
    4a1a:	f0 e0       	ldi	r31, 0x00	; 0
    4a1c:	80 81       	ld	r24, Z
    4a1e:	8b 7f       	andi	r24, 0xFB	; 251
    4a20:	8c 93       	st	X, r24
    4a22:	57 c0       	rjmp	.+174    	; 0x4ad2 <UART_Init+0x222>
            break;
        case CHARACTER_SIZE_6_BIT:
            SET_BIT(UCSRC,UCSRC_UCSZ0);
    4a24:	a0 e4       	ldi	r26, 0x40	; 64
    4a26:	b0 e0       	ldi	r27, 0x00	; 0
    4a28:	e0 e4       	ldi	r30, 0x40	; 64
    4a2a:	f0 e0       	ldi	r31, 0x00	; 0
    4a2c:	80 81       	ld	r24, Z
    4a2e:	82 60       	ori	r24, 0x02	; 2
    4a30:	8c 93       	st	X, r24
            CLR_BIT(UCSRC,UCSRC_UCSZ1);
    4a32:	a0 e4       	ldi	r26, 0x40	; 64
    4a34:	b0 e0       	ldi	r27, 0x00	; 0
    4a36:	e0 e4       	ldi	r30, 0x40	; 64
    4a38:	f0 e0       	ldi	r31, 0x00	; 0
    4a3a:	80 81       	ld	r24, Z
    4a3c:	8b 7f       	andi	r24, 0xFB	; 251
    4a3e:	8c 93       	st	X, r24
            CLR_BIT(UCSRB,UCSRB_UCSZ2);
    4a40:	aa e2       	ldi	r26, 0x2A	; 42
    4a42:	b0 e0       	ldi	r27, 0x00	; 0
    4a44:	ea e2       	ldi	r30, 0x2A	; 42
    4a46:	f0 e0       	ldi	r31, 0x00	; 0
    4a48:	80 81       	ld	r24, Z
    4a4a:	8b 7f       	andi	r24, 0xFB	; 251
    4a4c:	8c 93       	st	X, r24
    4a4e:	41 c0       	rjmp	.+130    	; 0x4ad2 <UART_Init+0x222>
            break;
        case CHARACTER_SIZE_7_BIT:
            CLR_BIT(UCSRC,UCSRC_UCSZ0);
    4a50:	a0 e4       	ldi	r26, 0x40	; 64
    4a52:	b0 e0       	ldi	r27, 0x00	; 0
    4a54:	e0 e4       	ldi	r30, 0x40	; 64
    4a56:	f0 e0       	ldi	r31, 0x00	; 0
    4a58:	80 81       	ld	r24, Z
    4a5a:	8d 7f       	andi	r24, 0xFD	; 253
    4a5c:	8c 93       	st	X, r24
            SET_BIT(UCSRC,UCSRC_UCSZ1);
    4a5e:	a0 e4       	ldi	r26, 0x40	; 64
    4a60:	b0 e0       	ldi	r27, 0x00	; 0
    4a62:	e0 e4       	ldi	r30, 0x40	; 64
    4a64:	f0 e0       	ldi	r31, 0x00	; 0
    4a66:	80 81       	ld	r24, Z
    4a68:	84 60       	ori	r24, 0x04	; 4
    4a6a:	8c 93       	st	X, r24
            CLR_BIT(UCSRB,UCSRB_UCSZ2);
    4a6c:	aa e2       	ldi	r26, 0x2A	; 42
    4a6e:	b0 e0       	ldi	r27, 0x00	; 0
    4a70:	ea e2       	ldi	r30, 0x2A	; 42
    4a72:	f0 e0       	ldi	r31, 0x00	; 0
    4a74:	80 81       	ld	r24, Z
    4a76:	8b 7f       	andi	r24, 0xFB	; 251
    4a78:	8c 93       	st	X, r24
    4a7a:	2b c0       	rjmp	.+86     	; 0x4ad2 <UART_Init+0x222>
            break;
        case CHARACTER_SIZE_8_BIT:
            SET_BIT(UCSRC,UCSRC_UCSZ0);
    4a7c:	a0 e4       	ldi	r26, 0x40	; 64
    4a7e:	b0 e0       	ldi	r27, 0x00	; 0
    4a80:	e0 e4       	ldi	r30, 0x40	; 64
    4a82:	f0 e0       	ldi	r31, 0x00	; 0
    4a84:	80 81       	ld	r24, Z
    4a86:	82 60       	ori	r24, 0x02	; 2
    4a88:	8c 93       	st	X, r24
            SET_BIT(UCSRC,UCSRC_UCSZ1);
    4a8a:	a0 e4       	ldi	r26, 0x40	; 64
    4a8c:	b0 e0       	ldi	r27, 0x00	; 0
    4a8e:	e0 e4       	ldi	r30, 0x40	; 64
    4a90:	f0 e0       	ldi	r31, 0x00	; 0
    4a92:	80 81       	ld	r24, Z
    4a94:	84 60       	ori	r24, 0x04	; 4
    4a96:	8c 93       	st	X, r24
            CLR_BIT(UCSRB,UCSRB_UCSZ2);
    4a98:	aa e2       	ldi	r26, 0x2A	; 42
    4a9a:	b0 e0       	ldi	r27, 0x00	; 0
    4a9c:	ea e2       	ldi	r30, 0x2A	; 42
    4a9e:	f0 e0       	ldi	r31, 0x00	; 0
    4aa0:	80 81       	ld	r24, Z
    4aa2:	8b 7f       	andi	r24, 0xFB	; 251
    4aa4:	8c 93       	st	X, r24
    4aa6:	15 c0       	rjmp	.+42     	; 0x4ad2 <UART_Init+0x222>
            break;
        case CHARACTER_SIZE_9_BIT:
            SET_BIT(UCSRC,UCSRC_UCSZ0);
    4aa8:	a0 e4       	ldi	r26, 0x40	; 64
    4aaa:	b0 e0       	ldi	r27, 0x00	; 0
    4aac:	e0 e4       	ldi	r30, 0x40	; 64
    4aae:	f0 e0       	ldi	r31, 0x00	; 0
    4ab0:	80 81       	ld	r24, Z
    4ab2:	82 60       	ori	r24, 0x02	; 2
    4ab4:	8c 93       	st	X, r24
            SET_BIT(UCSRC,UCSRC_UCSZ1);
    4ab6:	a0 e4       	ldi	r26, 0x40	; 64
    4ab8:	b0 e0       	ldi	r27, 0x00	; 0
    4aba:	e0 e4       	ldi	r30, 0x40	; 64
    4abc:	f0 e0       	ldi	r31, 0x00	; 0
    4abe:	80 81       	ld	r24, Z
    4ac0:	84 60       	ori	r24, 0x04	; 4
    4ac2:	8c 93       	st	X, r24
            SET_BIT(UCSRB,UCSRB_UCSZ2);
    4ac4:	aa e2       	ldi	r26, 0x2A	; 42
    4ac6:	b0 e0       	ldi	r27, 0x00	; 0
    4ac8:	ea e2       	ldi	r30, 0x2A	; 42
    4aca:	f0 e0       	ldi	r31, 0x00	; 0
    4acc:	80 81       	ld	r24, Z
    4ace:	84 60       	ori	r24, 0x04	; 4
    4ad0:	8c 93       	st	X, r24
            break;
        default:
            break;
    }

    UBRRL=103;
    4ad2:	e9 e2       	ldi	r30, 0x29	; 41
    4ad4:	f0 e0       	ldi	r31, 0x00	; 0
    4ad6:	87 e6       	ldi	r24, 0x67	; 103
    4ad8:	80 83       	st	Z, r24
    SET_BIT(UCSRB,UCSRB_RXEN);
    4ada:	aa e2       	ldi	r26, 0x2A	; 42
    4adc:	b0 e0       	ldi	r27, 0x00	; 0
    4ade:	ea e2       	ldi	r30, 0x2A	; 42
    4ae0:	f0 e0       	ldi	r31, 0x00	; 0
    4ae2:	80 81       	ld	r24, Z
    4ae4:	80 61       	ori	r24, 0x10	; 16
    4ae6:	8c 93       	st	X, r24
    SET_BIT(UCSRB,UCSRB_TXEN);
    4ae8:	aa e2       	ldi	r26, 0x2A	; 42
    4aea:	b0 e0       	ldi	r27, 0x00	; 0
    4aec:	ea e2       	ldi	r30, 0x2A	; 42
    4aee:	f0 e0       	ldi	r31, 0x00	; 0
    4af0:	80 81       	ld	r24, Z
    4af2:	88 60       	ori	r24, 0x08	; 8
    4af4:	8c 93       	st	X, r24
}
    4af6:	28 96       	adiw	r28, 0x08	; 8
    4af8:	0f b6       	in	r0, 0x3f	; 63
    4afa:	f8 94       	cli
    4afc:	de bf       	out	0x3e, r29	; 62
    4afe:	0f be       	out	0x3f, r0	; 63
    4b00:	cd bf       	out	0x3d, r28	; 61
    4b02:	cf 91       	pop	r28
    4b04:	df 91       	pop	r29
    4b06:	08 95       	ret

00004b08 <UART_Send_Data>:

void UART_Send_Data (u8 data) {
    4b08:	df 93       	push	r29
    4b0a:	cf 93       	push	r28
    4b0c:	0f 92       	push	r0
    4b0e:	cd b7       	in	r28, 0x3d	; 61
    4b10:	de b7       	in	r29, 0x3e	; 62
    4b12:	89 83       	std	Y+1, r24	; 0x01
    UDR=data;
    4b14:	ec e2       	ldi	r30, 0x2C	; 44
    4b16:	f0 e0       	ldi	r31, 0x00	; 0
    4b18:	89 81       	ldd	r24, Y+1	; 0x01
    4b1a:	80 83       	st	Z, r24
    while (GET_BIT(UCSRA,UCSRA_TXC) == 0);
    4b1c:	eb e2       	ldi	r30, 0x2B	; 43
    4b1e:	f0 e0       	ldi	r31, 0x00	; 0
    4b20:	80 81       	ld	r24, Z
    4b22:	82 95       	swap	r24
    4b24:	86 95       	lsr	r24
    4b26:	86 95       	lsr	r24
    4b28:	83 70       	andi	r24, 0x03	; 3
    4b2a:	88 2f       	mov	r24, r24
    4b2c:	90 e0       	ldi	r25, 0x00	; 0
    4b2e:	81 70       	andi	r24, 0x01	; 1
    4b30:	90 70       	andi	r25, 0x00	; 0
    4b32:	00 97       	sbiw	r24, 0x00	; 0
    4b34:	99 f3       	breq	.-26     	; 0x4b1c <UART_Send_Data+0x14>
}
    4b36:	0f 90       	pop	r0
    4b38:	cf 91       	pop	r28
    4b3a:	df 91       	pop	r29
    4b3c:	08 95       	ret

00004b3e <UART_Recieve_Data>:

u8 UART_Recieve_Data (void) {
    4b3e:	df 93       	push	r29
    4b40:	cf 93       	push	r28
    4b42:	cd b7       	in	r28, 0x3d	; 61
    4b44:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(UCSRA,UCSRA_RXC) == 0);
    4b46:	eb e2       	ldi	r30, 0x2B	; 43
    4b48:	f0 e0       	ldi	r31, 0x00	; 0
    4b4a:	80 81       	ld	r24, Z
    4b4c:	88 23       	and	r24, r24
    4b4e:	dc f7       	brge	.-10     	; 0x4b46 <UART_Recieve_Data+0x8>
    return UDR;
    4b50:	ec e2       	ldi	r30, 0x2C	; 44
    4b52:	f0 e0       	ldi	r31, 0x00	; 0
    4b54:	80 81       	ld	r24, Z
}
    4b56:	cf 91       	pop	r28
    4b58:	df 91       	pop	r29
    4b5a:	08 95       	ret

00004b5c <WDT_Enable>:
#include "std_types.h"
#include "macros.h"
#include "Registers.h"
#include "WDT.h"

void WDT_Enable (void) {
    4b5c:	df 93       	push	r29
    4b5e:	cf 93       	push	r28
    4b60:	cd b7       	in	r28, 0x3d	; 61
    4b62:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(WDTCR,3);
    4b64:	a1 e4       	ldi	r26, 0x41	; 65
    4b66:	b0 e0       	ldi	r27, 0x00	; 0
    4b68:	e1 e4       	ldi	r30, 0x41	; 65
    4b6a:	f0 e0       	ldi	r31, 0x00	; 0
    4b6c:	80 81       	ld	r24, Z
    4b6e:	88 60       	ori	r24, 0x08	; 8
    4b70:	8c 93       	st	X, r24
}
    4b72:	cf 91       	pop	r28
    4b74:	df 91       	pop	r29
    4b76:	08 95       	ret

00004b78 <WDT_Disable>:
void WDT_Disable (void) {
    4b78:	df 93       	push	r29
    4b7a:	cf 93       	push	r28
    4b7c:	cd b7       	in	r28, 0x3d	; 61
    4b7e:	de b7       	in	r29, 0x3e	; 62
    WDTCR=0b00011000;
    4b80:	e1 e4       	ldi	r30, 0x41	; 65
    4b82:	f0 e0       	ldi	r31, 0x00	; 0
    4b84:	88 e1       	ldi	r24, 0x18	; 24
    4b86:	80 83       	st	Z, r24
    //WDTCR=0;
}
    4b88:	cf 91       	pop	r28
    4b8a:	df 91       	pop	r29
    4b8c:	08 95       	ret

00004b8e <WDT_SleepTime>:
void WDT_SleepTime (void) {
    4b8e:	df 93       	push	r29
    4b90:	cf 93       	push	r28
    4b92:	cd b7       	in	r28, 0x3d	; 61
    4b94:	de b7       	in	r29, 0x3e	; 62
    #elif (TIME_OUT == 1000)
    CLR_BIT(WDTCR,0);
    SET_BIT(WDTCR,1);
    SET_BIT(WDTCR,2);
    #elif (TIME_OUT == 2100)
    SET_BIT(WDTCR,0);
    4b96:	a1 e4       	ldi	r26, 0x41	; 65
    4b98:	b0 e0       	ldi	r27, 0x00	; 0
    4b9a:	e1 e4       	ldi	r30, 0x41	; 65
    4b9c:	f0 e0       	ldi	r31, 0x00	; 0
    4b9e:	80 81       	ld	r24, Z
    4ba0:	81 60       	ori	r24, 0x01	; 1
    4ba2:	8c 93       	st	X, r24
    SET_BIT(WDTCR,1);
    4ba4:	a1 e4       	ldi	r26, 0x41	; 65
    4ba6:	b0 e0       	ldi	r27, 0x00	; 0
    4ba8:	e1 e4       	ldi	r30, 0x41	; 65
    4baa:	f0 e0       	ldi	r31, 0x00	; 0
    4bac:	80 81       	ld	r24, Z
    4bae:	82 60       	ori	r24, 0x02	; 2
    4bb0:	8c 93       	st	X, r24
    SET_BIT(WDTCR,2);
    4bb2:	a1 e4       	ldi	r26, 0x41	; 65
    4bb4:	b0 e0       	ldi	r27, 0x00	; 0
    4bb6:	e1 e4       	ldi	r30, 0x41	; 65
    4bb8:	f0 e0       	ldi	r31, 0x00	; 0
    4bba:	80 81       	ld	r24, Z
    4bbc:	84 60       	ori	r24, 0x04	; 4
    4bbe:	8c 93       	st	X, r24
    #endif
}
    4bc0:	cf 91       	pop	r28
    4bc2:	df 91       	pop	r29
    4bc4:	08 95       	ret

00004bc6 <main>:
#include "I2C.h"
#include "I2C_cfg.h"
#include "EEPROM.h"
#include "EEPROM_cfg.h"

int main (void) {
    4bc6:	df 93       	push	r29
    4bc8:	cf 93       	push	r28
    4bca:	cd b7       	in	r28, 0x3d	; 61
    4bcc:	de b7       	in	r29, 0x3e	; 62
    4bce:	80 e0       	ldi	r24, 0x00	; 0
    4bd0:	90 e0       	ldi	r25, 0x00	; 0

}
    4bd2:	cf 91       	pop	r28
    4bd4:	df 91       	pop	r29
    4bd6:	08 95       	ret

00004bd8 <__udivmodhi4>:
    4bd8:	aa 1b       	sub	r26, r26
    4bda:	bb 1b       	sub	r27, r27
    4bdc:	51 e1       	ldi	r21, 0x11	; 17
    4bde:	07 c0       	rjmp	.+14     	; 0x4bee <__udivmodhi4_ep>

00004be0 <__udivmodhi4_loop>:
    4be0:	aa 1f       	adc	r26, r26
    4be2:	bb 1f       	adc	r27, r27
    4be4:	a6 17       	cp	r26, r22
    4be6:	b7 07       	cpc	r27, r23
    4be8:	10 f0       	brcs	.+4      	; 0x4bee <__udivmodhi4_ep>
    4bea:	a6 1b       	sub	r26, r22
    4bec:	b7 0b       	sbc	r27, r23

00004bee <__udivmodhi4_ep>:
    4bee:	88 1f       	adc	r24, r24
    4bf0:	99 1f       	adc	r25, r25
    4bf2:	5a 95       	dec	r21
    4bf4:	a9 f7       	brne	.-22     	; 0x4be0 <__udivmodhi4_loop>
    4bf6:	80 95       	com	r24
    4bf8:	90 95       	com	r25
    4bfa:	bc 01       	movw	r22, r24
    4bfc:	cd 01       	movw	r24, r26
    4bfe:	08 95       	ret

00004c00 <__divmodhi4>:
    4c00:	97 fb       	bst	r25, 7
    4c02:	09 2e       	mov	r0, r25
    4c04:	07 26       	eor	r0, r23
    4c06:	0a d0       	rcall	.+20     	; 0x4c1c <__divmodhi4_neg1>
    4c08:	77 fd       	sbrc	r23, 7
    4c0a:	04 d0       	rcall	.+8      	; 0x4c14 <__divmodhi4_neg2>
    4c0c:	e5 df       	rcall	.-54     	; 0x4bd8 <__udivmodhi4>
    4c0e:	06 d0       	rcall	.+12     	; 0x4c1c <__divmodhi4_neg1>
    4c10:	00 20       	and	r0, r0
    4c12:	1a f4       	brpl	.+6      	; 0x4c1a <__divmodhi4_exit>

00004c14 <__divmodhi4_neg2>:
    4c14:	70 95       	com	r23
    4c16:	61 95       	neg	r22
    4c18:	7f 4f       	sbci	r23, 0xFF	; 255

00004c1a <__divmodhi4_exit>:
    4c1a:	08 95       	ret

00004c1c <__divmodhi4_neg1>:
    4c1c:	f6 f7       	brtc	.-4      	; 0x4c1a <__divmodhi4_exit>
    4c1e:	90 95       	com	r25
    4c20:	81 95       	neg	r24
    4c22:	9f 4f       	sbci	r25, 0xFF	; 255
    4c24:	08 95       	ret

00004c26 <__prologue_saves__>:
    4c26:	2f 92       	push	r2
    4c28:	3f 92       	push	r3
    4c2a:	4f 92       	push	r4
    4c2c:	5f 92       	push	r5
    4c2e:	6f 92       	push	r6
    4c30:	7f 92       	push	r7
    4c32:	8f 92       	push	r8
    4c34:	9f 92       	push	r9
    4c36:	af 92       	push	r10
    4c38:	bf 92       	push	r11
    4c3a:	cf 92       	push	r12
    4c3c:	df 92       	push	r13
    4c3e:	ef 92       	push	r14
    4c40:	ff 92       	push	r15
    4c42:	0f 93       	push	r16
    4c44:	1f 93       	push	r17
    4c46:	cf 93       	push	r28
    4c48:	df 93       	push	r29
    4c4a:	cd b7       	in	r28, 0x3d	; 61
    4c4c:	de b7       	in	r29, 0x3e	; 62
    4c4e:	ca 1b       	sub	r28, r26
    4c50:	db 0b       	sbc	r29, r27
    4c52:	0f b6       	in	r0, 0x3f	; 63
    4c54:	f8 94       	cli
    4c56:	de bf       	out	0x3e, r29	; 62
    4c58:	0f be       	out	0x3f, r0	; 63
    4c5a:	cd bf       	out	0x3d, r28	; 61
    4c5c:	09 94       	ijmp

00004c5e <__epilogue_restores__>:
    4c5e:	2a 88       	ldd	r2, Y+18	; 0x12
    4c60:	39 88       	ldd	r3, Y+17	; 0x11
    4c62:	48 88       	ldd	r4, Y+16	; 0x10
    4c64:	5f 84       	ldd	r5, Y+15	; 0x0f
    4c66:	6e 84       	ldd	r6, Y+14	; 0x0e
    4c68:	7d 84       	ldd	r7, Y+13	; 0x0d
    4c6a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4c6c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4c6e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4c70:	b9 84       	ldd	r11, Y+9	; 0x09
    4c72:	c8 84       	ldd	r12, Y+8	; 0x08
    4c74:	df 80       	ldd	r13, Y+7	; 0x07
    4c76:	ee 80       	ldd	r14, Y+6	; 0x06
    4c78:	fd 80       	ldd	r15, Y+5	; 0x05
    4c7a:	0c 81       	ldd	r16, Y+4	; 0x04
    4c7c:	1b 81       	ldd	r17, Y+3	; 0x03
    4c7e:	aa 81       	ldd	r26, Y+2	; 0x02
    4c80:	b9 81       	ldd	r27, Y+1	; 0x01
    4c82:	ce 0f       	add	r28, r30
    4c84:	d1 1d       	adc	r29, r1
    4c86:	0f b6       	in	r0, 0x3f	; 63
    4c88:	f8 94       	cli
    4c8a:	de bf       	out	0x3e, r29	; 62
    4c8c:	0f be       	out	0x3f, r0	; 63
    4c8e:	cd bf       	out	0x3d, r28	; 61
    4c90:	ed 01       	movw	r28, r26
    4c92:	08 95       	ret

00004c94 <_exit>:
    4c94:	f8 94       	cli

00004c96 <__stop_program>:
    4c96:	ff cf       	rjmp	.-2      	; 0x4c96 <__stop_program>
