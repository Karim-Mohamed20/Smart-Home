
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005e16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00005e16  00005eaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080016c  0080016c  00005fb6  2**0
                  ALLOC
  3 .stab         00005b14  00000000  00000000  00005fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000024fd  00000000  00000000  0000bacc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000dfc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000e169  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000e35b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00010766  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00011aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00012cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00012e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001317a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013ae8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__vector_4>
      14:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__vector_7>
      20:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <__vector_8>
      24:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <__vector_9>
      28:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__vector_10>
      2c:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	fe e5       	ldi	r31, 0x5E	; 94
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 92 29 	call	0x5324	; 0x5324 <main>
      8a:	0c 94 09 2f 	jmp	0x5e12	; 0x5e12 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d2 2e 	jmp	0x5da4	; 0x5da4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ee 2e 	jmp	0x5ddc	; 0x5ddc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 de 2e 	jmp	0x5dbc	; 0x5dbc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fa 2e 	jmp	0x5df4	; 0x5df4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 de 2e 	jmp	0x5dbc	; 0x5dbc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fa 2e 	jmp	0x5df4	; 0x5df4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d2 2e 	jmp	0x5da4	; 0x5da4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ee 2e 	jmp	0x5ddc	; 0x5ddc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 da 2e 	jmp	0x5db4	; 0x5db4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f6 2e 	jmp	0x5dec	; 0x5dec <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 de 2e 	jmp	0x5dbc	; 0x5dbc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fa 2e 	jmp	0x5df4	; 0x5df4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 de 2e 	jmp	0x5dbc	; 0x5dbc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fa 2e 	jmp	0x5df4	; 0x5df4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 de 2e 	jmp	0x5dbc	; 0x5dbc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fa 2e 	jmp	0x5df4	; 0x5df4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e2 2e 	jmp	0x5dc4	; 0x5dc4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 fe 2e 	jmp	0x5dfc	; 0x5dfc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 da 2e 	jmp	0x5db4	; 0x5db4 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 f6 2e 	jmp	0x5dec	; 0x5dec <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_16>:
#include "Adc_cfg.h"
#include "GlobalInterrupt.h"

void (*Adc_Callback) (u16 res);

ISR(VECTOR_ADC) {
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
    Adc_Callback((ADC_DATA_REGISTER & 0b0000001111111111));
     e58:	20 91 76 01 	lds	r18, 0x0176
     e5c:	30 91 77 01 	lds	r19, 0x0177
     e60:	e4 e2       	ldi	r30, 0x24	; 36
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	91 81       	ldd	r25, Z+1	; 0x01
     e68:	93 70       	andi	r25, 0x03	; 3
     e6a:	f9 01       	movw	r30, r18
     e6c:	09 95       	icall
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <Adc_Init>:

void Adc_Init(void) {
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
    /*Reference Selection Bits*/
#if (ADC_REF_SELECTION == ADC_REF_AREF)
    CLR_BIT(ADMUX, ADMUX_REFS1);
     e9c:	a7 e2       	ldi	r26, 0x27	; 39
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e7 e2       	ldi	r30, 0x27	; 39
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8f 77       	andi	r24, 0x7F	; 127
     ea8:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, ADMUX_REFS0);
     eaa:	a7 e2       	ldi	r26, 0x27	; 39
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e7 e2       	ldi	r30, 0x27	; 39
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8f 7b       	andi	r24, 0xBF	; 191
     eb6:	8c 93       	st	X, r24
#else
    #error "Error Ref Selection Choise"
#endif

    /* No Left Adjust */
    CLR_BIT(ADMUX, ADMUX_ADLAR);
     eb8:	a7 e2       	ldi	r26, 0x27	; 39
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e7 e2       	ldi	r30, 0x27	; 39
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	8f 7d       	andi	r24, 0xDF	; 223
     ec4:	8c 93       	st	X, r24

    /* ADC Enable */
    SET_BIT(ADCSRA, ADCSRA_ADEN);
     ec6:	a6 e2       	ldi	r26, 0x26	; 38
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e6 e2       	ldi	r30, 0x26	; 38
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	80 68       	ori	r24, 0x80	; 128
     ed2:	8c 93       	st	X, r24

    /* ADC Interrupt Enable */
#if (ADC_INT_STATE == ADC_INT_DISABLE)
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
#elif (ADC_INT_STATE == ADC_INT_ENABLE)
    SET_BIT(ADCSRA, ADCSRA_ADIE);
     ed4:	a6 e2       	ldi	r26, 0x26	; 38
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e6 e2       	ldi	r30, 0x26	; 38
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	88 60       	ori	r24, 0x08	; 8
     ee0:	8c 93       	st	X, r24
#endif

    /* ADC Prescaler Select */

#if (ADC_PRESCALER == 128)
    SET_BIT(ADCSRA, ADCSRA_ADPS0);
     ee2:	a6 e2       	ldi	r26, 0x26	; 38
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e6 e2       	ldi	r30, 0x26	; 38
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	81 60       	ori	r24, 0x01	; 1
     eee:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS1);
     ef0:	a6 e2       	ldi	r26, 0x26	; 38
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e6 e2       	ldi	r30, 0x26	; 38
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	82 60       	ori	r24, 0x02	; 2
     efc:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS2);
     efe:	a6 e2       	ldi	r26, 0x26	; 38
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e6 e2       	ldi	r30, 0x26	; 38
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	84 60       	ori	r24, 0x04	; 4
     f0a:	8c 93       	st	X, r24
    CLR_BIT(ADCSRA, ADCSRA_ADPS2);
    // TODO
#else
    #error "Error Prescaler Choise"
#endif
}
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <Adc_StartConversion>:

void Adc_StartConversion(Adc_ChannelType channel) {
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	0f 92       	push	r0
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	89 83       	std	Y+1, r24	; 0x01
    ADMUX &= 0b11100000;
     f1e:	a7 e2       	ldi	r26, 0x27	; 39
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e7 e2       	ldi	r30, 0x27	; 39
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 7e       	andi	r24, 0xE0	; 224
     f2a:	8c 93       	st	X, r24
    ADMUX |= channel;
     f2c:	a7 e2       	ldi	r26, 0x27	; 39
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e7 e2       	ldi	r30, 0x27	; 39
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	90 81       	ld	r25, Z
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	89 2b       	or	r24, r25
     f3a:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADSC);
     f3c:	a6 e2       	ldi	r26, 0x26	; 38
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e6 e2       	ldi	r30, 0x26	; 38
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 64       	ori	r24, 0x40	; 64
     f48:	8c 93       	st	X, r24
}
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <Adc_Enable>:

void Adc_Enable(void) {
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADCSRA, ADCSRA_ADEN);
     f5a:	a6 e2       	ldi	r26, 0x26	; 38
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e6 e2       	ldi	r30, 0x26	; 38
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	80 68       	ori	r24, 0x80	; 128
     f66:	8c 93       	st	X, r24
    // TODO
}
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <Adc_Disable>:

void Adc_Disable(void) {
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADCSRA, ADCSRA_ADEN);
     f76:	a6 e2       	ldi	r26, 0x26	; 38
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e6 e2       	ldi	r30, 0x26	; 38
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	8f 77       	andi	r24, 0x7F	; 127
     f82:	8c 93       	st	X, r24
    // TODO
}
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <Adc_GetResult>:


Adc_ConversionStateType Adc_GetResult(u16* result) {
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <Adc_GetResult+0x6>
     f90:	0f 92       	push	r0
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	9b 83       	std	Y+3, r25	; 0x03
     f98:	8a 83       	std	Y+2, r24	; 0x02
    Adc_ConversionStateType flag = ADC_CONVERSION_NOT_COMPLETE;
     f9a:	19 82       	std	Y+1, r1	; 0x01
    if (GET_BIT(ADCSRA, ADCSRA_ADIF) == 1) {
     f9c:	e6 e2       	ldi	r30, 0x26	; 38
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	82 95       	swap	r24
     fa4:	8f 70       	andi	r24, 0x0F	; 15
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	81 70       	andi	r24, 0x01	; 1
     fac:	90 70       	andi	r25, 0x00	; 0
     fae:	88 23       	and	r24, r24
     fb0:	91 f0       	breq	.+36     	; 0xfd6 <Adc_GetResult+0x4c>
        SET_BIT(ADCSRA, ADCSRA_ADIF);
     fb2:	a6 e2       	ldi	r26, 0x26	; 38
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e6 e2       	ldi	r30, 0x26	; 38
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	80 61       	ori	r24, 0x10	; 16
     fbe:	8c 93       	st	X, r24
        *result = ADC_DATA_REGISTER & 0b0000001111111111;
     fc0:	e4 e2       	ldi	r30, 0x24	; 36
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	91 81       	ldd	r25, Z+1	; 0x01
     fc8:	93 70       	andi	r25, 0x03	; 3
     fca:	ea 81       	ldd	r30, Y+2	; 0x02
     fcc:	fb 81       	ldd	r31, Y+3	; 0x03
     fce:	91 83       	std	Z+1, r25	; 0x01
     fd0:	80 83       	st	Z, r24
        flag = ADC_CONVERSION_COMPLETE;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	89 83       	std	Y+1, r24	; 0x01
    }
    return flag;
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <Adc_GetResultPolling>:

u16 Adc_GetResultPolling(void) {
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(ADCSRA, ADCSRA_ADIF) == 0);
     fec:	e6 e2       	ldi	r30, 0x26	; 38
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	82 95       	swap	r24
     ff4:	8f 70       	andi	r24, 0x0F	; 15
     ff6:	88 2f       	mov	r24, r24
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	81 70       	andi	r24, 0x01	; 1
     ffc:	90 70       	andi	r25, 0x00	; 0
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	a9 f3       	breq	.-22     	; 0xfec <Adc_GetResultPolling+0x8>
    return (ADC_DATA_REGISTER & 0b0000001111111111);
    1002:	e4 e2       	ldi	r30, 0x24	; 36
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	91 81       	ldd	r25, Z+1	; 0x01
    100a:	93 70       	andi	r25, 0x03	; 3
}
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <Adc_SetCallback>:


void Adc_SetCallback (void (*callback) (u16 res)) {
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <Adc_SetCallback+0x6>
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	9a 83       	std	Y+2, r25	; 0x02
    101e:	89 83       	std	Y+1, r24	; 0x01
    Adc_Callback = callback;
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	90 93 77 01 	sts	0x0177, r25
    1028:	80 93 76 01 	sts	0x0176, r24
	}
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <DIO_SetPinMode>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"

void DIO_SetPinMode(DIO_PortType port, DIO_PinType pin, DIO_ModeType mode) {
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	29 97       	sbiw	r28, 0x09	; 9
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	89 83       	std	Y+1, r24	; 0x01
    104c:	6a 83       	std	Y+2, r22	; 0x02
    104e:	4b 83       	std	Y+3, r20	; 0x03
    if (mode == DIO_INPUT_FLOATING) 
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	88 23       	and	r24, r24
    1054:	09 f0       	breq	.+2      	; 0x1058 <DIO_SetPinMode+0x22>
    1056:	c2 c0       	rjmp	.+388    	; 0x11dc <DIO_SetPinMode+0x1a6>
    {
        switch (port)
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	39 87       	std	Y+9, r19	; 0x09
    1060:	28 87       	std	Y+8, r18	; 0x08
    1062:	88 85       	ldd	r24, Y+8	; 0x08
    1064:	99 85       	ldd	r25, Y+9	; 0x09
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	91 05       	cpc	r25, r1
    106a:	09 f4       	brne	.+2      	; 0x106e <DIO_SetPinMode+0x38>
    106c:	3f c0       	rjmp	.+126    	; 0x10ec <DIO_SetPinMode+0xb6>
    106e:	28 85       	ldd	r18, Y+8	; 0x08
    1070:	39 85       	ldd	r19, Y+9	; 0x09
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	2c f4       	brge	.+10     	; 0x1082 <DIO_SetPinMode+0x4c>
    1078:	88 85       	ldd	r24, Y+8	; 0x08
    107a:	99 85       	ldd	r25, Y+9	; 0x09
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	71 f0       	breq	.+28     	; 0x109c <DIO_SetPinMode+0x66>
    1080:	e1 c1       	rjmp	.+962    	; 0x1444 <DIO_SetPinMode+0x40e>
    1082:	28 85       	ldd	r18, Y+8	; 0x08
    1084:	39 85       	ldd	r19, Y+9	; 0x09
    1086:	22 30       	cpi	r18, 0x02	; 2
    1088:	31 05       	cpc	r19, r1
    108a:	09 f4       	brne	.+2      	; 0x108e <DIO_SetPinMode+0x58>
    108c:	57 c0       	rjmp	.+174    	; 0x113c <DIO_SetPinMode+0x106>
    108e:	88 85       	ldd	r24, Y+8	; 0x08
    1090:	99 85       	ldd	r25, Y+9	; 0x09
    1092:	83 30       	cpi	r24, 0x03	; 3
    1094:	91 05       	cpc	r25, r1
    1096:	09 f4       	brne	.+2      	; 0x109a <DIO_SetPinMode+0x64>
    1098:	79 c0       	rjmp	.+242    	; 0x118c <DIO_SetPinMode+0x156>
    109a:	d4 c1       	rjmp	.+936    	; 0x1444 <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
    109c:	aa e3       	ldi	r26, 0x3A	; 58
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	ea e3       	ldi	r30, 0x3A	; 58
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_SetPinMode+0x82>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	2a 95       	dec	r18
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_SetPinMode+0x7e>
    10bc:	80 95       	com	r24
    10be:	84 23       	and	r24, r20
    10c0:	8c 93       	st	X, r24
            CLR_BIT(PORTA, pin);
    10c2:	ab e3       	ldi	r26, 0x3B	; 59
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	eb e3       	ldi	r30, 0x3B	; 59
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_SetPinMode+0xaa>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_SetPinMode+0xa6>
    10e4:	80 95       	com	r24
    10e6:	84 23       	and	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	ac c1       	rjmp	.+856    	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
    10ec:	a7 e3       	ldi	r26, 0x37	; 55
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e7 e3       	ldi	r30, 0x37	; 55
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_SetPinMode+0xd2>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	2a 95       	dec	r18
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <DIO_SetPinMode+0xce>
    110c:	80 95       	com	r24
    110e:	84 23       	and	r24, r20
    1110:	8c 93       	st	X, r24
            CLR_BIT(PORTB, pin);
    1112:	a8 e3       	ldi	r26, 0x38	; 56
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e8 e3       	ldi	r30, 0x38	; 56
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_SetPinMode+0xfa>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_SetPinMode+0xf6>
    1134:	80 95       	com	r24
    1136:	84 23       	and	r24, r20
    1138:	8c 93       	st	X, r24
    113a:	84 c1       	rjmp	.+776    	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    113c:	a4 e3       	ldi	r26, 0x34	; 52
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e4 e3       	ldi	r30, 0x34	; 52
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <DIO_SetPinMode+0x122>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	2a 95       	dec	r18
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <DIO_SetPinMode+0x11e>
    115c:	80 95       	com	r24
    115e:	84 23       	and	r24, r20
    1160:	8c 93       	st	X, r24
            CLR_BIT(PORTC, pin);
    1162:	a5 e3       	ldi	r26, 0x35	; 53
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e5 e3       	ldi	r30, 0x35	; 53
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_SetPinMode+0x14a>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <DIO_SetPinMode+0x146>
    1184:	80 95       	com	r24
    1186:	84 23       	and	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	5c c1       	rjmp	.+696    	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    118c:	a1 e3       	ldi	r26, 0x31	; 49
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e1 e3       	ldi	r30, 0x31	; 49
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <DIO_SetPinMode+0x172>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	2a 95       	dec	r18
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <DIO_SetPinMode+0x16e>
    11ac:	80 95       	com	r24
    11ae:	84 23       	and	r24, r20
    11b0:	8c 93       	st	X, r24
            CLR_BIT(PORTD, pin);
    11b2:	a2 e3       	ldi	r26, 0x32	; 50
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e2 e3       	ldi	r30, 0x32	; 50
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_SetPinMode+0x19a>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_SetPinMode+0x196>
    11d4:	80 95       	com	r24
    11d6:	84 23       	and	r24, r20
    11d8:	8c 93       	st	X, r24
    11da:	34 c1       	rjmp	.+616    	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP) 
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <DIO_SetPinMode+0x1ae>
    11e2:	be c0       	rjmp	.+380    	; 0x1360 <DIO_SetPinMode+0x32a>
    {
        switch (port)
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	3f 83       	std	Y+7, r19	; 0x07
    11ec:	2e 83       	std	Y+6, r18	; 0x06
    11ee:	8e 81       	ldd	r24, Y+6	; 0x06
    11f0:	9f 81       	ldd	r25, Y+7	; 0x07
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	91 05       	cpc	r25, r1
    11f6:	09 f4       	brne	.+2      	; 0x11fa <DIO_SetPinMode+0x1c4>
    11f8:	3e c0       	rjmp	.+124    	; 0x1276 <DIO_SetPinMode+0x240>
    11fa:	2e 81       	ldd	r18, Y+6	; 0x06
    11fc:	3f 81       	ldd	r19, Y+7	; 0x07
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	31 05       	cpc	r19, r1
    1202:	2c f4       	brge	.+10     	; 0x120e <DIO_SetPinMode+0x1d8>
    1204:	8e 81       	ldd	r24, Y+6	; 0x06
    1206:	9f 81       	ldd	r25, Y+7	; 0x07
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	71 f0       	breq	.+28     	; 0x1228 <DIO_SetPinMode+0x1f2>
    120c:	1b c1       	rjmp	.+566    	; 0x1444 <DIO_SetPinMode+0x40e>
    120e:	2e 81       	ldd	r18, Y+6	; 0x06
    1210:	3f 81       	ldd	r19, Y+7	; 0x07
    1212:	22 30       	cpi	r18, 0x02	; 2
    1214:	31 05       	cpc	r19, r1
    1216:	09 f4       	brne	.+2      	; 0x121a <DIO_SetPinMode+0x1e4>
    1218:	55 c0       	rjmp	.+170    	; 0x12c4 <DIO_SetPinMode+0x28e>
    121a:	8e 81       	ldd	r24, Y+6	; 0x06
    121c:	9f 81       	ldd	r25, Y+7	; 0x07
    121e:	83 30       	cpi	r24, 0x03	; 3
    1220:	91 05       	cpc	r25, r1
    1222:	09 f4       	brne	.+2      	; 0x1226 <DIO_SetPinMode+0x1f0>
    1224:	76 c0       	rjmp	.+236    	; 0x1312 <DIO_SetPinMode+0x2dc>
    1226:	0e c1       	rjmp	.+540    	; 0x1444 <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
    1228:	aa e3       	ldi	r26, 0x3A	; 58
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ea e3       	ldi	r30, 0x3A	; 58
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_SetPinMode+0x20e>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	2a 95       	dec	r18
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO_SetPinMode+0x20a>
    1248:	80 95       	com	r24
    124a:	84 23       	and	r24, r20
    124c:	8c 93       	st	X, r24
            SET_BIT(PORTA, pin);
    124e:	ab e3       	ldi	r26, 0x3B	; 59
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	eb e3       	ldi	r30, 0x3B	; 59
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <DIO_SetPinMode+0x236>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <DIO_SetPinMode+0x232>
    1270:	84 2b       	or	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	e7 c0       	rjmp	.+462    	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
    1276:	a7 e3       	ldi	r26, 0x37	; 55
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e7 e3       	ldi	r30, 0x37	; 55
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_SetPinMode+0x25c>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	2a 95       	dec	r18
    1294:	e2 f7       	brpl	.-8      	; 0x128e <DIO_SetPinMode+0x258>
    1296:	80 95       	com	r24
    1298:	84 23       	and	r24, r20
    129a:	8c 93       	st	X, r24
            SET_BIT(PORTB, pin);
    129c:	a8 e3       	ldi	r26, 0x38	; 56
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e8 e3       	ldi	r30, 0x38	; 56
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_SetPinMode+0x284>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_SetPinMode+0x280>
    12be:	84 2b       	or	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	c0 c0       	rjmp	.+384    	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    12c4:	a4 e3       	ldi	r26, 0x34	; 52
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e4 e3       	ldi	r30, 0x34	; 52
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_SetPinMode+0x2aa>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	2a 95       	dec	r18
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <DIO_SetPinMode+0x2a6>
    12e4:	80 95       	com	r24
    12e6:	84 23       	and	r24, r20
    12e8:	8c 93       	st	X, r24
            SET_BIT(PORTC, pin);
    12ea:	a5 e3       	ldi	r26, 0x35	; 53
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e5 e3       	ldi	r30, 0x35	; 53
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_SetPinMode+0x2d2>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_SetPinMode+0x2ce>
    130c:	84 2b       	or	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	99 c0       	rjmp	.+306    	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    1312:	a1 e3       	ldi	r26, 0x31	; 49
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e1 e3       	ldi	r30, 0x31	; 49
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_SetPinMode+0x2f8>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	2a 95       	dec	r18
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_SetPinMode+0x2f4>
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	8c 93       	st	X, r24
            SET_BIT(PORTD, pin);
    1338:	a2 e3       	ldi	r26, 0x32	; 50
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e2 e3       	ldi	r30, 0x32	; 50
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_SetPinMode+0x320>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_SetPinMode+0x31c>
    135a:	84 2b       	or	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	72 c0       	rjmp	.+228    	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT) 
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	82 30       	cpi	r24, 0x02	; 2
    1364:	09 f0       	breq	.+2      	; 0x1368 <DIO_SetPinMode+0x332>
    1366:	6e c0       	rjmp	.+220    	; 0x1444 <DIO_SetPinMode+0x40e>
    {
        switch (port)
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	3d 83       	std	Y+5, r19	; 0x05
    1370:	2c 83       	std	Y+4, r18	; 0x04
    1372:	8c 81       	ldd	r24, Y+4	; 0x04
    1374:	9d 81       	ldd	r25, Y+5	; 0x05
    1376:	81 30       	cpi	r24, 0x01	; 1
    1378:	91 05       	cpc	r25, r1
    137a:	49 f1       	breq	.+82     	; 0x13ce <DIO_SetPinMode+0x398>
    137c:	2c 81       	ldd	r18, Y+4	; 0x04
    137e:	3d 81       	ldd	r19, Y+5	; 0x05
    1380:	22 30       	cpi	r18, 0x02	; 2
    1382:	31 05       	cpc	r19, r1
    1384:	2c f4       	brge	.+10     	; 0x1390 <DIO_SetPinMode+0x35a>
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	9d 81       	ldd	r25, Y+5	; 0x05
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	61 f0       	breq	.+24     	; 0x13a6 <DIO_SetPinMode+0x370>
    138e:	5a c0       	rjmp	.+180    	; 0x1444 <DIO_SetPinMode+0x40e>
    1390:	2c 81       	ldd	r18, Y+4	; 0x04
    1392:	3d 81       	ldd	r19, Y+5	; 0x05
    1394:	22 30       	cpi	r18, 0x02	; 2
    1396:	31 05       	cpc	r19, r1
    1398:	71 f1       	breq	.+92     	; 0x13f6 <DIO_SetPinMode+0x3c0>
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	9d 81       	ldd	r25, Y+5	; 0x05
    139e:	83 30       	cpi	r24, 0x03	; 3
    13a0:	91 05       	cpc	r25, r1
    13a2:	e9 f1       	breq	.+122    	; 0x141e <DIO_SetPinMode+0x3e8>
    13a4:	4f c0       	rjmp	.+158    	; 0x1444 <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            SET_BIT(DDRA, pin);
    13a6:	aa e3       	ldi	r26, 0x3A	; 58
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	ea e3       	ldi	r30, 0x3A	; 58
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	48 2f       	mov	r20, r24
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	02 2e       	mov	r0, r18
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <DIO_SetPinMode+0x38e>
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	0a 94       	dec	r0
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <DIO_SetPinMode+0x38a>
    13c8:	84 2b       	or	r24, r20
    13ca:	8c 93       	st	X, r24
    13cc:	3b c0       	rjmp	.+118    	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            SET_BIT(DDRB, pin);
    13ce:	a7 e3       	ldi	r26, 0x37	; 55
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e7 e3       	ldi	r30, 0x37	; 55
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	48 2f       	mov	r20, r24
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 2e       	mov	r0, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <DIO_SetPinMode+0x3b6>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <DIO_SetPinMode+0x3b2>
    13f0:	84 2b       	or	r24, r20
    13f2:	8c 93       	st	X, r24
    13f4:	27 c0       	rjmp	.+78     	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            SET_BIT(DDRC, pin);
    13f6:	a4 e3       	ldi	r26, 0x34	; 52
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e4 e3       	ldi	r30, 0x34	; 52
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <DIO_SetPinMode+0x3de>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <DIO_SetPinMode+0x3da>
    1418:	84 2b       	or	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	13 c0       	rjmp	.+38     	; 0x1444 <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            SET_BIT(DDRD, pin);
    141e:	a1 e3       	ldi	r26, 0x31	; 49
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e1 e3       	ldi	r30, 0x31	; 49
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_SetPinMode+0x406>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <DIO_SetPinMode+0x402>
    1440:	84 2b       	or	r24, r20
    1442:	8c 93       	st	X, r24
        default:
            break;
        }

    }
}
    1444:	29 96       	adiw	r28, 0x09	; 9
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <DIO_SetPortMode>:

void DIO_SetPortMode(DIO_PortType port, DIO_ModeType mode) {
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	2a 97       	sbiw	r28, 0x0a	; 10
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
    146a:	89 83       	std	Y+1, r24	; 0x01
    146c:	6a 83       	std	Y+2, r22	; 0x02
    if (mode == DIO_INPUT_FLOATING) 
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	88 23       	and	r24, r24
    1472:	d9 f5       	brne	.+118    	; 0x14ea <DIO_SetPortMode+0x94>
    {
        switch (port)
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	3a 87       	std	Y+10, r19	; 0x0a
    147c:	29 87       	std	Y+9, r18	; 0x09
    147e:	89 85       	ldd	r24, Y+9	; 0x09
    1480:	9a 85       	ldd	r25, Y+10	; 0x0a
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	91 05       	cpc	r25, r1
    1486:	e1 f0       	breq	.+56     	; 0x14c0 <DIO_SetPortMode+0x6a>
    1488:	29 85       	ldd	r18, Y+9	; 0x09
    148a:	3a 85       	ldd	r19, Y+10	; 0x0a
    148c:	22 30       	cpi	r18, 0x02	; 2
    148e:	31 05       	cpc	r19, r1
    1490:	2c f4       	brge	.+10     	; 0x149c <DIO_SetPortMode+0x46>
    1492:	89 85       	ldd	r24, Y+9	; 0x09
    1494:	9a 85       	ldd	r25, Y+10	; 0x0a
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	61 f0       	breq	.+24     	; 0x14b2 <DIO_SetPortMode+0x5c>
    149a:	d2 c0       	rjmp	.+420    	; 0x1640 <DIO_SetPortMode+0x1ea>
    149c:	29 85       	ldd	r18, Y+9	; 0x09
    149e:	3a 85       	ldd	r19, Y+10	; 0x0a
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	a1 f0       	breq	.+40     	; 0x14ce <DIO_SetPortMode+0x78>
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14aa:	83 30       	cpi	r24, 0x03	; 3
    14ac:	91 05       	cpc	r25, r1
    14ae:	b1 f0       	breq	.+44     	; 0x14dc <DIO_SetPortMode+0x86>
    14b0:	c7 c0       	rjmp	.+398    	; 0x1640 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    14b2:	ea e3       	ldi	r30, 0x3A	; 58
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	10 82       	st	Z, r1
            PORTA = 0x00;
    14b8:	eb e3       	ldi	r30, 0x3B	; 59
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	10 82       	st	Z, r1
    14be:	c0 c0       	rjmp	.+384    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    14c0:	e7 e3       	ldi	r30, 0x37	; 55
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	10 82       	st	Z, r1
            PORTB = 0x00;
    14c6:	e8 e3       	ldi	r30, 0x38	; 56
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	10 82       	st	Z, r1
    14cc:	b9 c0       	rjmp	.+370    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    14ce:	e4 e3       	ldi	r30, 0x34	; 52
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	10 82       	st	Z, r1
            PORTC = 0x00;
    14d4:	e5 e3       	ldi	r30, 0x35	; 53
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	10 82       	st	Z, r1
    14da:	b2 c0       	rjmp	.+356    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    14dc:	e1 e3       	ldi	r30, 0x31	; 49
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	10 82       	st	Z, r1
            PORTD = 0x00;
    14e2:	e2 e3       	ldi	r30, 0x32	; 50
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	10 82       	st	Z, r1
    14e8:	ab c0       	rjmp	.+342    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP) 
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <DIO_SetPortMode+0x9c>
    14f0:	3f c0       	rjmp	.+126    	; 0x1570 <DIO_SetPortMode+0x11a>
    {
        switch (port)
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	38 87       	std	Y+8, r19	; 0x08
    14fa:	2f 83       	std	Y+7, r18	; 0x07
    14fc:	8f 81       	ldd	r24, Y+7	; 0x07
    14fe:	98 85       	ldd	r25, Y+8	; 0x08
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	91 05       	cpc	r25, r1
    1504:	e9 f0       	breq	.+58     	; 0x1540 <DIO_SetPortMode+0xea>
    1506:	2f 81       	ldd	r18, Y+7	; 0x07
    1508:	38 85       	ldd	r19, Y+8	; 0x08
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	2c f4       	brge	.+10     	; 0x151a <DIO_SetPortMode+0xc4>
    1510:	8f 81       	ldd	r24, Y+7	; 0x07
    1512:	98 85       	ldd	r25, Y+8	; 0x08
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	61 f0       	breq	.+24     	; 0x1530 <DIO_SetPortMode+0xda>
    1518:	93 c0       	rjmp	.+294    	; 0x1640 <DIO_SetPortMode+0x1ea>
    151a:	2f 81       	ldd	r18, Y+7	; 0x07
    151c:	38 85       	ldd	r19, Y+8	; 0x08
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	b1 f0       	breq	.+44     	; 0x1550 <DIO_SetPortMode+0xfa>
    1524:	8f 81       	ldd	r24, Y+7	; 0x07
    1526:	98 85       	ldd	r25, Y+8	; 0x08
    1528:	83 30       	cpi	r24, 0x03	; 3
    152a:	91 05       	cpc	r25, r1
    152c:	c9 f0       	breq	.+50     	; 0x1560 <DIO_SetPortMode+0x10a>
    152e:	88 c0       	rjmp	.+272    	; 0x1640 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    1530:	ea e3       	ldi	r30, 0x3A	; 58
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	10 82       	st	Z, r1
            PORTA = 0xFF;
    1536:	eb e3       	ldi	r30, 0x3B	; 59
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	8f ef       	ldi	r24, 0xFF	; 255
    153c:	80 83       	st	Z, r24
    153e:	80 c0       	rjmp	.+256    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    1540:	e7 e3       	ldi	r30, 0x37	; 55
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	10 82       	st	Z, r1
            PORTB = 0xFF;
    1546:	e8 e3       	ldi	r30, 0x38	; 56
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	8f ef       	ldi	r24, 0xFF	; 255
    154c:	80 83       	st	Z, r24
    154e:	78 c0       	rjmp	.+240    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    1550:	e4 e3       	ldi	r30, 0x34	; 52
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	10 82       	st	Z, r1
            PORTC = 0xFF;
    1556:	e5 e3       	ldi	r30, 0x35	; 53
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	8f ef       	ldi	r24, 0xFF	; 255
    155c:	80 83       	st	Z, r24
    155e:	70 c0       	rjmp	.+224    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    1560:	e1 e3       	ldi	r30, 0x31	; 49
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	10 82       	st	Z, r1
            PORTD = 0xFF;
    1566:	e2 e3       	ldi	r30, 0x32	; 50
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	80 83       	st	Z, r24
    156e:	68 c0       	rjmp	.+208    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT) 
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	82 30       	cpi	r24, 0x02	; 2
    1574:	99 f5       	brne	.+102    	; 0x15dc <DIO_SetPortMode+0x186>
    {
        switch (port)
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	3e 83       	std	Y+6, r19	; 0x06
    157e:	2d 83       	std	Y+5, r18	; 0x05
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
    1582:	9e 81       	ldd	r25, Y+6	; 0x06
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	91 05       	cpc	r25, r1
    1588:	d1 f0       	breq	.+52     	; 0x15be <DIO_SetPortMode+0x168>
    158a:	2d 81       	ldd	r18, Y+5	; 0x05
    158c:	3e 81       	ldd	r19, Y+6	; 0x06
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	2c f4       	brge	.+10     	; 0x159e <DIO_SetPortMode+0x148>
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	9e 81       	ldd	r25, Y+6	; 0x06
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	61 f0       	breq	.+24     	; 0x15b4 <DIO_SetPortMode+0x15e>
    159c:	51 c0       	rjmp	.+162    	; 0x1640 <DIO_SetPortMode+0x1ea>
    159e:	2d 81       	ldd	r18, Y+5	; 0x05
    15a0:	3e 81       	ldd	r19, Y+6	; 0x06
    15a2:	22 30       	cpi	r18, 0x02	; 2
    15a4:	31 05       	cpc	r19, r1
    15a6:	81 f0       	breq	.+32     	; 0x15c8 <DIO_SetPortMode+0x172>
    15a8:	8d 81       	ldd	r24, Y+5	; 0x05
    15aa:	9e 81       	ldd	r25, Y+6	; 0x06
    15ac:	83 30       	cpi	r24, 0x03	; 3
    15ae:	91 05       	cpc	r25, r1
    15b0:	81 f0       	breq	.+32     	; 0x15d2 <DIO_SetPortMode+0x17c>
    15b2:	46 c0       	rjmp	.+140    	; 0x1640 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0xFF;
    15b4:	ea e3       	ldi	r30, 0x3A	; 58
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
    15ba:	80 83       	st	Z, r24
    15bc:	41 c0       	rjmp	.+130    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0xFF;
    15be:	e7 e3       	ldi	r30, 0x37	; 55
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	8f ef       	ldi	r24, 0xFF	; 255
    15c4:	80 83       	st	Z, r24
    15c6:	3c c0       	rjmp	.+120    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0xFF;
    15c8:	e4 e3       	ldi	r30, 0x34	; 52
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	8f ef       	ldi	r24, 0xFF	; 255
    15ce:	80 83       	st	Z, r24
    15d0:	37 c0       	rjmp	.+110    	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0xFF;
    15d2:	e1 e3       	ldi	r30, 0x31	; 49
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	8f ef       	ldi	r24, 0xFF	; 255
    15d8:	80 83       	st	Z, r24
    15da:	32 c0       	rjmp	.+100    	; 0x1640 <DIO_SetPortMode+0x1ea>
        }

    }
    else
    {
        switch (port)
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	3c 83       	std	Y+4, r19	; 0x04
    15e4:	2b 83       	std	Y+3, r18	; 0x03
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	91 05       	cpc	r25, r1
    15ee:	d1 f0       	breq	.+52     	; 0x1624 <DIO_SetPortMode+0x1ce>
    15f0:	2b 81       	ldd	r18, Y+3	; 0x03
    15f2:	3c 81       	ldd	r19, Y+4	; 0x04
    15f4:	22 30       	cpi	r18, 0x02	; 2
    15f6:	31 05       	cpc	r19, r1
    15f8:	2c f4       	brge	.+10     	; 0x1604 <DIO_SetPortMode+0x1ae>
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	61 f0       	breq	.+24     	; 0x161a <DIO_SetPortMode+0x1c4>
    1602:	1e c0       	rjmp	.+60     	; 0x1640 <DIO_SetPortMode+0x1ea>
    1604:	2b 81       	ldd	r18, Y+3	; 0x03
    1606:	3c 81       	ldd	r19, Y+4	; 0x04
    1608:	22 30       	cpi	r18, 0x02	; 2
    160a:	31 05       	cpc	r19, r1
    160c:	81 f0       	breq	.+32     	; 0x162e <DIO_SetPortMode+0x1d8>
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	9c 81       	ldd	r25, Y+4	; 0x04
    1612:	83 30       	cpi	r24, 0x03	; 3
    1614:	91 05       	cpc	r25, r1
    1616:	81 f0       	breq	.+32     	; 0x1638 <DIO_SetPortMode+0x1e2>
    1618:	13 c0       	rjmp	.+38     	; 0x1640 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = mode;
    161a:	ea e3       	ldi	r30, 0x3A	; 58
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	80 83       	st	Z, r24
    1622:	0e c0       	rjmp	.+28     	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = mode;
    1624:	e7 e3       	ldi	r30, 0x37	; 55
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	80 83       	st	Z, r24
    162c:	09 c0       	rjmp	.+18     	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = mode;
    162e:	e4 e3       	ldi	r30, 0x34	; 52
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	80 83       	st	Z, r24
    1636:	04 c0       	rjmp	.+8      	; 0x1640 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = mode;
    1638:	e1 e3       	ldi	r30, 0x31	; 49
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    1640:	2a 96       	adiw	r28, 0x0a	; 10
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	de bf       	out	0x3e, r29	; 62
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	08 95       	ret

00001652 <DIO_FlipPinLevel>:

void DIO_FlipPinLevel(DIO_PortType port, DIO_PinType pin) {
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	00 d0       	rcall	.+0      	; 0x1658 <DIO_FlipPinLevel+0x6>
    1658:	00 d0       	rcall	.+0      	; 0x165a <DIO_FlipPinLevel+0x8>
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	6a 83       	std	Y+2, r22	; 0x02
    switch (port)
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	3c 83       	std	Y+4, r19	; 0x04
    166a:	2b 83       	std	Y+3, r18	; 0x03
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	9c 81       	ldd	r25, Y+4	; 0x04
    1670:	81 30       	cpi	r24, 0x01	; 1
    1672:	91 05       	cpc	r25, r1
    1674:	49 f1       	breq	.+82     	; 0x16c8 <DIO_FlipPinLevel+0x76>
    1676:	2b 81       	ldd	r18, Y+3	; 0x03
    1678:	3c 81       	ldd	r19, Y+4	; 0x04
    167a:	22 30       	cpi	r18, 0x02	; 2
    167c:	31 05       	cpc	r19, r1
    167e:	2c f4       	brge	.+10     	; 0x168a <DIO_FlipPinLevel+0x38>
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	9c 81       	ldd	r25, Y+4	; 0x04
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	61 f0       	breq	.+24     	; 0x16a0 <DIO_FlipPinLevel+0x4e>
    1688:	5a c0       	rjmp	.+180    	; 0x173e <DIO_FlipPinLevel+0xec>
    168a:	2b 81       	ldd	r18, Y+3	; 0x03
    168c:	3c 81       	ldd	r19, Y+4	; 0x04
    168e:	22 30       	cpi	r18, 0x02	; 2
    1690:	31 05       	cpc	r19, r1
    1692:	71 f1       	breq	.+92     	; 0x16f0 <DIO_FlipPinLevel+0x9e>
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	9c 81       	ldd	r25, Y+4	; 0x04
    1698:	83 30       	cpi	r24, 0x03	; 3
    169a:	91 05       	cpc	r25, r1
    169c:	e9 f1       	breq	.+122    	; 0x1718 <DIO_FlipPinLevel+0xc6>
    169e:	4f c0       	rjmp	.+158    	; 0x173e <DIO_FlipPinLevel+0xec>
    {
    case DIO_PORTA:
        TOG_BIT(PORTA, pin);
    16a0:	ab e3       	ldi	r26, 0x3B	; 59
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	eb e3       	ldi	r30, 0x3B	; 59
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	48 2f       	mov	r20, r24
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	02 2e       	mov	r0, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <DIO_FlipPinLevel+0x6c>
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	0a 94       	dec	r0
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <DIO_FlipPinLevel+0x68>
    16c2:	84 27       	eor	r24, r20
    16c4:	8c 93       	st	X, r24
    16c6:	3b c0       	rjmp	.+118    	; 0x173e <DIO_FlipPinLevel+0xec>
        break;
    case DIO_PORTB:
        TOG_BIT(PORTB, pin);
    16c8:	a8 e3       	ldi	r26, 0x38	; 56
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e8 e3       	ldi	r30, 0x38	; 56
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <DIO_FlipPinLevel+0x94>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <DIO_FlipPinLevel+0x90>
    16ea:	84 27       	eor	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	27 c0       	rjmp	.+78     	; 0x173e <DIO_FlipPinLevel+0xec>
        break;
    case DIO_PORTC:
        TOG_BIT(PORTC, pin);
    16f0:	a5 e3       	ldi	r26, 0x35	; 53
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e5 e3       	ldi	r30, 0x35	; 53
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	48 2f       	mov	r20, r24
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	02 2e       	mov	r0, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <DIO_FlipPinLevel+0xbc>
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	0a 94       	dec	r0
    1710:	e2 f7       	brpl	.-8      	; 0x170a <DIO_FlipPinLevel+0xb8>
    1712:	84 27       	eor	r24, r20
    1714:	8c 93       	st	X, r24
    1716:	13 c0       	rjmp	.+38     	; 0x173e <DIO_FlipPinLevel+0xec>
        break;
    case DIO_PORTD:
        TOG_BIT(PORTD, pin);
    1718:	a2 e3       	ldi	r26, 0x32	; 50
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e2 e3       	ldi	r30, 0x32	; 50
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	48 2f       	mov	r20, r24
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	02 2e       	mov	r0, r18
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <DIO_FlipPinLevel+0xe4>
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	0a 94       	dec	r0
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <DIO_FlipPinLevel+0xe0>
    173a:	84 27       	eor	r24, r20
    173c:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <DIO_SetPinLevel>:

void DIO_SetPinLevel(DIO_PortType port, DIO_PinType pin, DIO_LevelType level) {
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	27 97       	sbiw	r28, 0x07	; 7
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	89 83       	std	Y+1, r24	; 0x01
    1762:	6a 83       	std	Y+2, r22	; 0x02
    1764:	4b 83       	std	Y+3, r20	; 0x03
    if (level == DIO_HIGH) 
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	09 f0       	breq	.+2      	; 0x176e <DIO_SetPinLevel+0x22>
    176c:	6f c0       	rjmp	.+222    	; 0x184c <DIO_SetPinLevel+0x100>
    {
        switch (port)
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	3f 83       	std	Y+7, r19	; 0x07
    1776:	2e 83       	std	Y+6, r18	; 0x06
    1778:	8e 81       	ldd	r24, Y+6	; 0x06
    177a:	9f 81       	ldd	r25, Y+7	; 0x07
    177c:	81 30       	cpi	r24, 0x01	; 1
    177e:	91 05       	cpc	r25, r1
    1780:	49 f1       	breq	.+82     	; 0x17d4 <DIO_SetPinLevel+0x88>
    1782:	2e 81       	ldd	r18, Y+6	; 0x06
    1784:	3f 81       	ldd	r19, Y+7	; 0x07
    1786:	22 30       	cpi	r18, 0x02	; 2
    1788:	31 05       	cpc	r19, r1
    178a:	2c f4       	brge	.+10     	; 0x1796 <DIO_SetPinLevel+0x4a>
    178c:	8e 81       	ldd	r24, Y+6	; 0x06
    178e:	9f 81       	ldd	r25, Y+7	; 0x07
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	61 f0       	breq	.+24     	; 0x17ac <DIO_SetPinLevel+0x60>
    1794:	d2 c0       	rjmp	.+420    	; 0x193a <DIO_SetPinLevel+0x1ee>
    1796:	2e 81       	ldd	r18, Y+6	; 0x06
    1798:	3f 81       	ldd	r19, Y+7	; 0x07
    179a:	22 30       	cpi	r18, 0x02	; 2
    179c:	31 05       	cpc	r19, r1
    179e:	71 f1       	breq	.+92     	; 0x17fc <DIO_SetPinLevel+0xb0>
    17a0:	8e 81       	ldd	r24, Y+6	; 0x06
    17a2:	9f 81       	ldd	r25, Y+7	; 0x07
    17a4:	83 30       	cpi	r24, 0x03	; 3
    17a6:	91 05       	cpc	r25, r1
    17a8:	e9 f1       	breq	.+122    	; 0x1824 <DIO_SetPinLevel+0xd8>
    17aa:	c7 c0       	rjmp	.+398    	; 0x193a <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            SET_BIT(PORTA, pin);
    17ac:	ab e3       	ldi	r26, 0x3B	; 59
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	eb e3       	ldi	r30, 0x3B	; 59
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	48 2f       	mov	r20, r24
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 2e       	mov	r0, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <DIO_SetPinLevel+0x7e>
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	0a 94       	dec	r0
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <DIO_SetPinLevel+0x7a>
    17ce:	84 2b       	or	r24, r20
    17d0:	8c 93       	st	X, r24
    17d2:	b3 c0       	rjmp	.+358    	; 0x193a <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            SET_BIT(PORTB, pin);
    17d4:	a8 e3       	ldi	r26, 0x38	; 56
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e8 e3       	ldi	r30, 0x38	; 56
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	48 2f       	mov	r20, r24
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 2e       	mov	r0, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <DIO_SetPinLevel+0xa6>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	0a 94       	dec	r0
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <DIO_SetPinLevel+0xa2>
    17f6:	84 2b       	or	r24, r20
    17f8:	8c 93       	st	X, r24
    17fa:	9f c0       	rjmp	.+318    	; 0x193a <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            SET_BIT(PORTC, pin);
    17fc:	a5 e3       	ldi	r26, 0x35	; 53
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e5 e3       	ldi	r30, 0x35	; 53
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	48 2f       	mov	r20, r24
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	02 2e       	mov	r0, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <DIO_SetPinLevel+0xce>
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	0a 94       	dec	r0
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <DIO_SetPinLevel+0xca>
    181e:	84 2b       	or	r24, r20
    1820:	8c 93       	st	X, r24
    1822:	8b c0       	rjmp	.+278    	; 0x193a <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            SET_BIT(PORTD, pin);
    1824:	a2 e3       	ldi	r26, 0x32	; 50
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e2 e3       	ldi	r30, 0x32	; 50
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	48 2f       	mov	r20, r24
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 2e       	mov	r0, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <DIO_SetPinLevel+0xf6>
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	0a 94       	dec	r0
    1844:	e2 f7       	brpl	.-8      	; 0x183e <DIO_SetPinLevel+0xf2>
    1846:	84 2b       	or	r24, r20
    1848:	8c 93       	st	X, r24
    184a:	77 c0       	rjmp	.+238    	; 0x193a <DIO_SetPinLevel+0x1ee>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW) 
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	88 23       	and	r24, r24
    1850:	09 f0       	breq	.+2      	; 0x1854 <DIO_SetPinLevel+0x108>
    1852:	73 c0       	rjmp	.+230    	; 0x193a <DIO_SetPinLevel+0x1ee>
    {
        switch (port)
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	3d 83       	std	Y+5, r19	; 0x05
    185c:	2c 83       	std	Y+4, r18	; 0x04
    185e:	8c 81       	ldd	r24, Y+4	; 0x04
    1860:	9d 81       	ldd	r25, Y+5	; 0x05
    1862:	81 30       	cpi	r24, 0x01	; 1
    1864:	91 05       	cpc	r25, r1
    1866:	59 f1       	breq	.+86     	; 0x18be <DIO_SetPinLevel+0x172>
    1868:	2c 81       	ldd	r18, Y+4	; 0x04
    186a:	3d 81       	ldd	r19, Y+5	; 0x05
    186c:	22 30       	cpi	r18, 0x02	; 2
    186e:	31 05       	cpc	r19, r1
    1870:	2c f4       	brge	.+10     	; 0x187c <DIO_SetPinLevel+0x130>
    1872:	8c 81       	ldd	r24, Y+4	; 0x04
    1874:	9d 81       	ldd	r25, Y+5	; 0x05
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	69 f0       	breq	.+26     	; 0x1894 <DIO_SetPinLevel+0x148>
    187a:	5f c0       	rjmp	.+190    	; 0x193a <DIO_SetPinLevel+0x1ee>
    187c:	2c 81       	ldd	r18, Y+4	; 0x04
    187e:	3d 81       	ldd	r19, Y+5	; 0x05
    1880:	22 30       	cpi	r18, 0x02	; 2
    1882:	31 05       	cpc	r19, r1
    1884:	89 f1       	breq	.+98     	; 0x18e8 <DIO_SetPinLevel+0x19c>
    1886:	8c 81       	ldd	r24, Y+4	; 0x04
    1888:	9d 81       	ldd	r25, Y+5	; 0x05
    188a:	83 30       	cpi	r24, 0x03	; 3
    188c:	91 05       	cpc	r25, r1
    188e:	09 f4       	brne	.+2      	; 0x1892 <DIO_SetPinLevel+0x146>
    1890:	40 c0       	rjmp	.+128    	; 0x1912 <DIO_SetPinLevel+0x1c6>
    1892:	53 c0       	rjmp	.+166    	; 0x193a <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            CLR_BIT(PORTA, pin);
    1894:	ab e3       	ldi	r26, 0x3B	; 59
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	eb e3       	ldi	r30, 0x3B	; 59
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	48 2f       	mov	r20, r24
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 2e       	mov	r0, r18
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <DIO_SetPinLevel+0x166>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	0a 94       	dec	r0
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <DIO_SetPinLevel+0x162>
    18b6:	80 95       	com	r24
    18b8:	84 23       	and	r24, r20
    18ba:	8c 93       	st	X, r24
    18bc:	3e c0       	rjmp	.+124    	; 0x193a <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            CLR_BIT(PORTB, pin);
    18be:	a8 e3       	ldi	r26, 0x38	; 56
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e8 e3       	ldi	r30, 0x38	; 56
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	48 2f       	mov	r20, r24
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 2e       	mov	r0, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <DIO_SetPinLevel+0x190>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <DIO_SetPinLevel+0x18c>
    18e0:	80 95       	com	r24
    18e2:	84 23       	and	r24, r20
    18e4:	8c 93       	st	X, r24
    18e6:	29 c0       	rjmp	.+82     	; 0x193a <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            CLR_BIT(PORTC, pin);
    18e8:	a5 e3       	ldi	r26, 0x35	; 53
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e5 e3       	ldi	r30, 0x35	; 53
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	48 2f       	mov	r20, r24
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 2e       	mov	r0, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <DIO_SetPinLevel+0x1ba>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	0a 94       	dec	r0
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <DIO_SetPinLevel+0x1b6>
    190a:	80 95       	com	r24
    190c:	84 23       	and	r24, r20
    190e:	8c 93       	st	X, r24
    1910:	14 c0       	rjmp	.+40     	; 0x193a <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            CLR_BIT(PORTD, pin);
    1912:	a2 e3       	ldi	r26, 0x32	; 50
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e2 e3       	ldi	r30, 0x32	; 50
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	48 2f       	mov	r20, r24
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 2e       	mov	r0, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <DIO_SetPinLevel+0x1e4>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <DIO_SetPinLevel+0x1e0>
    1934:	80 95       	com	r24
    1936:	84 23       	and	r24, r20
    1938:	8c 93       	st	X, r24
            break;
        default:
            break;
        }
    }
}
    193a:	27 96       	adiw	r28, 0x07	; 7
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <DIO_SetPortLevel>:

void DIO_SetPortLevel (DIO_PortType port, DIO_LevelType level) {
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	28 97       	sbiw	r28, 0x08	; 8
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	89 83       	std	Y+1, r24	; 0x01
    1962:	6a 83       	std	Y+2, r22	; 0x02
    if (level == DIO_HIGH) {
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	99 f5       	brne	.+102    	; 0x19d0 <DIO_SetPortLevel+0x84>
        switch (port)
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	38 87       	std	Y+8, r19	; 0x08
    1972:	2f 83       	std	Y+7, r18	; 0x07
    1974:	8f 81       	ldd	r24, Y+7	; 0x07
    1976:	98 85       	ldd	r25, Y+8	; 0x08
    1978:	81 30       	cpi	r24, 0x01	; 1
    197a:	91 05       	cpc	r25, r1
    197c:	d1 f0       	breq	.+52     	; 0x19b2 <DIO_SetPortLevel+0x66>
    197e:	2f 81       	ldd	r18, Y+7	; 0x07
    1980:	38 85       	ldd	r19, Y+8	; 0x08
    1982:	22 30       	cpi	r18, 0x02	; 2
    1984:	31 05       	cpc	r19, r1
    1986:	2c f4       	brge	.+10     	; 0x1992 <DIO_SetPortLevel+0x46>
    1988:	8f 81       	ldd	r24, Y+7	; 0x07
    198a:	98 85       	ldd	r25, Y+8	; 0x08
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	61 f0       	breq	.+24     	; 0x19a8 <DIO_SetPortLevel+0x5c>
    1990:	83 c0       	rjmp	.+262    	; 0x1a98 <DIO_SetPortLevel+0x14c>
    1992:	2f 81       	ldd	r18, Y+7	; 0x07
    1994:	38 85       	ldd	r19, Y+8	; 0x08
    1996:	22 30       	cpi	r18, 0x02	; 2
    1998:	31 05       	cpc	r19, r1
    199a:	81 f0       	breq	.+32     	; 0x19bc <DIO_SetPortLevel+0x70>
    199c:	8f 81       	ldd	r24, Y+7	; 0x07
    199e:	98 85       	ldd	r25, Y+8	; 0x08
    19a0:	83 30       	cpi	r24, 0x03	; 3
    19a2:	91 05       	cpc	r25, r1
    19a4:	81 f0       	breq	.+32     	; 0x19c6 <DIO_SetPortLevel+0x7a>
    19a6:	78 c0       	rjmp	.+240    	; 0x1a98 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0xFF;
    19a8:	eb e3       	ldi	r30, 0x3B	; 59
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	8f ef       	ldi	r24, 0xFF	; 255
    19ae:	80 83       	st	Z, r24
    19b0:	73 c0       	rjmp	.+230    	; 0x1a98 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0xFF;
    19b2:	e8 e3       	ldi	r30, 0x38	; 56
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	8f ef       	ldi	r24, 0xFF	; 255
    19b8:	80 83       	st	Z, r24
    19ba:	6e c0       	rjmp	.+220    	; 0x1a98 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0xFF;
    19bc:	e5 e3       	ldi	r30, 0x35	; 53
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	8f ef       	ldi	r24, 0xFF	; 255
    19c2:	80 83       	st	Z, r24
    19c4:	69 c0       	rjmp	.+210    	; 0x1a98 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0xFF;
    19c6:	e2 e3       	ldi	r30, 0x32	; 50
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	8f ef       	ldi	r24, 0xFF	; 255
    19cc:	80 83       	st	Z, r24
    19ce:	64 c0       	rjmp	.+200    	; 0x1a98 <DIO_SetPortLevel+0x14c>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW) {
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	88 23       	and	r24, r24
    19d4:	79 f5       	brne	.+94     	; 0x1a34 <DIO_SetPortLevel+0xe8>
        switch (port)
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	3e 83       	std	Y+6, r19	; 0x06
    19de:	2d 83       	std	Y+5, r18	; 0x05
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	9e 81       	ldd	r25, Y+6	; 0x06
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	91 05       	cpc	r25, r1
    19e8:	c9 f0       	breq	.+50     	; 0x1a1c <DIO_SetPortLevel+0xd0>
    19ea:	2d 81       	ldd	r18, Y+5	; 0x05
    19ec:	3e 81       	ldd	r19, Y+6	; 0x06
    19ee:	22 30       	cpi	r18, 0x02	; 2
    19f0:	31 05       	cpc	r19, r1
    19f2:	2c f4       	brge	.+10     	; 0x19fe <DIO_SetPortLevel+0xb2>
    19f4:	8d 81       	ldd	r24, Y+5	; 0x05
    19f6:	9e 81       	ldd	r25, Y+6	; 0x06
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	61 f0       	breq	.+24     	; 0x1a14 <DIO_SetPortLevel+0xc8>
    19fc:	4d c0       	rjmp	.+154    	; 0x1a98 <DIO_SetPortLevel+0x14c>
    19fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1a00:	3e 81       	ldd	r19, Y+6	; 0x06
    1a02:	22 30       	cpi	r18, 0x02	; 2
    1a04:	31 05       	cpc	r19, r1
    1a06:	71 f0       	breq	.+28     	; 0x1a24 <DIO_SetPortLevel+0xd8>
    1a08:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0c:	83 30       	cpi	r24, 0x03	; 3
    1a0e:	91 05       	cpc	r25, r1
    1a10:	69 f0       	breq	.+26     	; 0x1a2c <DIO_SetPortLevel+0xe0>
    1a12:	42 c0       	rjmp	.+132    	; 0x1a98 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0x00;
    1a14:	eb e3       	ldi	r30, 0x3B	; 59
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	10 82       	st	Z, r1
    1a1a:	3e c0       	rjmp	.+124    	; 0x1a98 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0x00;
    1a1c:	e8 e3       	ldi	r30, 0x38	; 56
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	10 82       	st	Z, r1
    1a22:	3a c0       	rjmp	.+116    	; 0x1a98 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0x00;
    1a24:	e5 e3       	ldi	r30, 0x35	; 53
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	10 82       	st	Z, r1
    1a2a:	36 c0       	rjmp	.+108    	; 0x1a98 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0x00;
    1a2c:	e2 e3       	ldi	r30, 0x32	; 50
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	10 82       	st	Z, r1
    1a32:	32 c0       	rjmp	.+100    	; 0x1a98 <DIO_SetPortLevel+0x14c>
        default:
            break;
        }
    }
    else {
        switch (port)
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	3c 83       	std	Y+4, r19	; 0x04
    1a3c:	2b 83       	std	Y+3, r18	; 0x03
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	9c 81       	ldd	r25, Y+4	; 0x04
    1a42:	81 30       	cpi	r24, 0x01	; 1
    1a44:	91 05       	cpc	r25, r1
    1a46:	d1 f0       	breq	.+52     	; 0x1a7c <DIO_SetPortLevel+0x130>
    1a48:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a4c:	22 30       	cpi	r18, 0x02	; 2
    1a4e:	31 05       	cpc	r19, r1
    1a50:	2c f4       	brge	.+10     	; 0x1a5c <DIO_SetPortLevel+0x110>
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	9c 81       	ldd	r25, Y+4	; 0x04
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	61 f0       	breq	.+24     	; 0x1a72 <DIO_SetPortLevel+0x126>
    1a5a:	1e c0       	rjmp	.+60     	; 0x1a98 <DIO_SetPortLevel+0x14c>
    1a5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a60:	22 30       	cpi	r18, 0x02	; 2
    1a62:	31 05       	cpc	r19, r1
    1a64:	81 f0       	breq	.+32     	; 0x1a86 <DIO_SetPortLevel+0x13a>
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6a:	83 30       	cpi	r24, 0x03	; 3
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	81 f0       	breq	.+32     	; 0x1a90 <DIO_SetPortLevel+0x144>
    1a70:	13 c0       	rjmp	.+38     	; 0x1a98 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = level;
    1a72:	eb e3       	ldi	r30, 0x3B	; 59
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	80 83       	st	Z, r24
    1a7a:	0e c0       	rjmp	.+28     	; 0x1a98 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = level;
    1a7c:	e8 e3       	ldi	r30, 0x38	; 56
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	80 83       	st	Z, r24
    1a84:	09 c0       	rjmp	.+18     	; 0x1a98 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = level;
    1a86:	e5 e3       	ldi	r30, 0x35	; 53
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	80 83       	st	Z, r24
    1a8e:	04 c0       	rjmp	.+8      	; 0x1a98 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = level;
    1a90:	e2 e3       	ldi	r30, 0x32	; 50
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    1a98:	28 96       	adiw	r28, 0x08	; 8
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <DIO_ReadPinLevel>:



DIO_LevelType DIO_ReadPinLevel(DIO_PortType port, DIO_PinType pin) {
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <DIO_ReadPinLevel+0x6>
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <DIO_ReadPinLevel+0x8>
    1ab2:	0f 92       	push	r0
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	8a 83       	std	Y+2, r24	; 0x02
    1aba:	6b 83       	std	Y+3, r22	; 0x03
    DIO_LevelType result = DIO_LOW;
    1abc:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	3d 83       	std	Y+5, r19	; 0x05
    1ac6:	2c 83       	std	Y+4, r18	; 0x04
    1ac8:	4c 81       	ldd	r20, Y+4	; 0x04
    1aca:	5d 81       	ldd	r21, Y+5	; 0x05
    1acc:	41 30       	cpi	r20, 0x01	; 1
    1ace:	51 05       	cpc	r21, r1
    1ad0:	41 f1       	breq	.+80     	; 0x1b22 <DIO_ReadPinLevel+0x78>
    1ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad6:	82 30       	cpi	r24, 0x02	; 2
    1ad8:	91 05       	cpc	r25, r1
    1ada:	34 f4       	brge	.+12     	; 0x1ae8 <DIO_ReadPinLevel+0x3e>
    1adc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ade:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae0:	21 15       	cp	r18, r1
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	61 f0       	breq	.+24     	; 0x1afe <DIO_ReadPinLevel+0x54>
    1ae6:	52 c0       	rjmp	.+164    	; 0x1b8c <DIO_ReadPinLevel+0xe2>
    1ae8:	4c 81       	ldd	r20, Y+4	; 0x04
    1aea:	5d 81       	ldd	r21, Y+5	; 0x05
    1aec:	42 30       	cpi	r20, 0x02	; 2
    1aee:	51 05       	cpc	r21, r1
    1af0:	51 f1       	breq	.+84     	; 0x1b46 <DIO_ReadPinLevel+0x9c>
    1af2:	8c 81       	ldd	r24, Y+4	; 0x04
    1af4:	9d 81       	ldd	r25, Y+5	; 0x05
    1af6:	83 30       	cpi	r24, 0x03	; 3
    1af8:	91 05       	cpc	r25, r1
    1afa:	b9 f1       	breq	.+110    	; 0x1b6a <DIO_ReadPinLevel+0xc0>
    1afc:	47 c0       	rjmp	.+142    	; 0x1b8c <DIO_ReadPinLevel+0xe2>
    {
    case DIO_PORTA:
        result = GET_BIT(PINA, pin);
    1afe:	e9 e3       	ldi	r30, 0x39	; 57
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	88 2f       	mov	r24, r24
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	a9 01       	movw	r20, r18
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <DIO_ReadPinLevel+0x6c>
    1b12:	55 95       	asr	r21
    1b14:	47 95       	ror	r20
    1b16:	8a 95       	dec	r24
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <DIO_ReadPinLevel+0x68>
    1b1a:	ca 01       	movw	r24, r20
    1b1c:	81 70       	andi	r24, 0x01	; 1
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	35 c0       	rjmp	.+106    	; 0x1b8c <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTB:
        result = GET_BIT(PINB, pin);
    1b22:	e6 e3       	ldi	r30, 0x36	; 54
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	88 2f       	mov	r24, r24
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	a9 01       	movw	r20, r18
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <DIO_ReadPinLevel+0x90>
    1b36:	55 95       	asr	r21
    1b38:	47 95       	ror	r20
    1b3a:	8a 95       	dec	r24
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <DIO_ReadPinLevel+0x8c>
    1b3e:	ca 01       	movw	r24, r20
    1b40:	81 70       	andi	r24, 0x01	; 1
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	23 c0       	rjmp	.+70     	; 0x1b8c <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTC:
        result = GET_BIT(PINC, pin);
    1b46:	e3 e3       	ldi	r30, 0x33	; 51
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	88 2f       	mov	r24, r24
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	a9 01       	movw	r20, r18
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <DIO_ReadPinLevel+0xb4>
    1b5a:	55 95       	asr	r21
    1b5c:	47 95       	ror	r20
    1b5e:	8a 95       	dec	r24
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <DIO_ReadPinLevel+0xb0>
    1b62:	ca 01       	movw	r24, r20
    1b64:	81 70       	andi	r24, 0x01	; 1
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	11 c0       	rjmp	.+34     	; 0x1b8c <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTD:
        result = GET_BIT(PIND, pin);
    1b6a:	e0 e3       	ldi	r30, 0x30	; 48
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	88 2f       	mov	r24, r24
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	a9 01       	movw	r20, r18
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <DIO_ReadPinLevel+0xd8>
    1b7e:	55 95       	asr	r21
    1b80:	47 95       	ror	r20
    1b82:	8a 95       	dec	r24
    1b84:	e2 f7       	brpl	.-8      	; 0x1b7e <DIO_ReadPinLevel+0xd4>
    1b86:	ca 01       	movw	r24, r20
    1b88:	81 70       	andi	r24, 0x01	; 1
    1b8a:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return result;
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <DIO_ReadPortLevel>:

DIO_LevelType DIO_ReadPortLevel (DIO_PortType port) {
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <DIO_ReadPortLevel+0x6>
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <DIO_ReadPortLevel+0x8>
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	8a 83       	std	Y+2, r24	; 0x02
    u8 result = 0x00;
    1bac:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	3c 83       	std	Y+4, r19	; 0x04
    1bb6:	2b 83       	std	Y+3, r18	; 0x03
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	49 f1       	breq	.+82     	; 0x1c14 <DIO_ReadPortLevel+0x76>
    1bc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc6:	22 30       	cpi	r18, 0x02	; 2
    1bc8:	31 05       	cpc	r19, r1
    1bca:	2c f4       	brge	.+10     	; 0x1bd6 <DIO_ReadPortLevel+0x38>
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	61 f0       	breq	.+24     	; 0x1bec <DIO_ReadPortLevel+0x4e>
    1bd4:	5a c0       	rjmp	.+180    	; 0x1c8a <DIO_ReadPortLevel+0xec>
    1bd6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bda:	22 30       	cpi	r18, 0x02	; 2
    1bdc:	31 05       	cpc	r19, r1
    1bde:	71 f1       	breq	.+92     	; 0x1c3c <DIO_ReadPortLevel+0x9e>
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	9c 81       	ldd	r25, Y+4	; 0x04
    1be4:	83 30       	cpi	r24, 0x03	; 3
    1be6:	91 05       	cpc	r25, r1
    1be8:	e9 f1       	breq	.+122    	; 0x1c64 <DIO_ReadPortLevel+0xc6>
    1bea:	4f c0       	rjmp	.+158    	; 0x1c8a <DIO_ReadPortLevel+0xec>
    {
    case DIO_PORTA:
        if (PINA == 0xFF) {
    1bec:	e9 e3       	ldi	r30, 0x39	; 57
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf4:	19 f4       	brne	.+6      	; 0x1bfc <DIO_ReadPortLevel+0x5e>
            result = DIO_HIGH;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	47 c0       	rjmp	.+142    	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        else if (PINA == 0x00) {
    1bfc:	e9 e3       	ldi	r30, 0x39	; 57
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	88 23       	and	r24, r24
    1c04:	11 f4       	brne	.+4      	; 0x1c0a <DIO_ReadPortLevel+0x6c>
            result = DIO_LOW;
    1c06:	19 82       	std	Y+1, r1	; 0x01
    1c08:	40 c0       	rjmp	.+128    	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINA;
    1c0a:	e9 e3       	ldi	r30, 0x39	; 57
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	3b c0       	rjmp	.+118    	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTB:
        if (PINB == 0xFF) {
    1c14:	e6 e3       	ldi	r30, 0x36	; 54
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c1c:	19 f4       	brne	.+6      	; 0x1c24 <DIO_ReadPortLevel+0x86>
            result = DIO_HIGH;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	33 c0       	rjmp	.+102    	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        else if (PINB == 0x00) {
    1c24:	e6 e3       	ldi	r30, 0x36	; 54
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	88 23       	and	r24, r24
    1c2c:	11 f4       	brne	.+4      	; 0x1c32 <DIO_ReadPortLevel+0x94>
            result = DIO_LOW;
    1c2e:	19 82       	std	Y+1, r1	; 0x01
    1c30:	2c c0       	rjmp	.+88     	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINB;
    1c32:	e6 e3       	ldi	r30, 0x36	; 54
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	89 83       	std	Y+1, r24	; 0x01
    1c3a:	27 c0       	rjmp	.+78     	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTC:
        if (PINC == 0xFF) {
    1c3c:	e3 e3       	ldi	r30, 0x33	; 51
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	8f 3f       	cpi	r24, 0xFF	; 255
    1c44:	19 f4       	brne	.+6      	; 0x1c4c <DIO_ReadPortLevel+0xae>
            result = DIO_HIGH;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	1f c0       	rjmp	.+62     	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        else if (PINC == 0x00) {
    1c4c:	e3 e3       	ldi	r30, 0x33	; 51
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	88 23       	and	r24, r24
    1c54:	11 f4       	brne	.+4      	; 0x1c5a <DIO_ReadPortLevel+0xbc>
            result = DIO_LOW;
    1c56:	19 82       	std	Y+1, r1	; 0x01
    1c58:	18 c0       	rjmp	.+48     	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINC;
    1c5a:	e3 e3       	ldi	r30, 0x33	; 51
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	13 c0       	rjmp	.+38     	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTD:
        if (PIND == 0xFF) {
    1c64:	e0 e3       	ldi	r30, 0x30	; 48
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c6c:	19 f4       	brne	.+6      	; 0x1c74 <DIO_ReadPortLevel+0xd6>
            result = DIO_HIGH;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	89 83       	std	Y+1, r24	; 0x01
    1c72:	0b c0       	rjmp	.+22     	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        else if (PIND == 0x00) {
    1c74:	e0 e3       	ldi	r30, 0x30	; 48
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	88 23       	and	r24, r24
    1c7c:	11 f4       	brne	.+4      	; 0x1c82 <DIO_ReadPortLevel+0xe4>
            result = DIO_LOW;
    1c7e:	19 82       	std	Y+1, r1	; 0x01
    1c80:	04 c0       	rjmp	.+8      	; 0x1c8a <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PIND;
    1c82:	e0 e3       	ldi	r30, 0x30	; 48
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	89 83       	std	Y+1, r24	; 0x01
        }
        break;
    default:
        break;
    }
    return result;
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	08 95       	ret

00001c9a <EEPROM_Init>:
#include "I2C.h"
#include "EEPROM.h"
#include "EEPROM_cfg.h"

void EEPROM_Init(void)
{
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
	I2C_InitMaster();
    1ca2:	0e 94 1b 19 	call	0x3236	; 0x3236 <I2C_InitMaster>
}
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <EEPROM_Write_Byte>:

/*Send byte to EEPROM*/
void EEPROM_Write_Byte(u8 AddressSlave ,u8 AddressLocation,u8 Data)
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <EEPROM_Write_Byte+0x6>
    1cb2:	0f 92       	push	r0
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	89 83       	std	Y+1, r24	; 0x01
    1cba:	6a 83       	std	Y+2, r22	; 0x02
    1cbc:	4b 83       	std	Y+3, r20	; 0x03
	I2C_SendStartCondition();
    1cbe:	0e 94 2d 19 	call	0x325a	; 0x325a <I2C_SendStartCondition>
	//write the device address and so we need to get A2 A1 A0 address bits and R/W=0 (write)
	I2C_MasterWriteDataByte(AddressSlave);
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	0e 94 48 19 	call	0x3290	; 0x3290 <I2C_MasterWriteDataByte>

	//send the required location address
	I2C_MasterWriteDataByte(AddressLocation);
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	0e 94 48 19 	call	0x3290	; 0x3290 <I2C_MasterWriteDataByte>

	//write byte to eeprom
	I2C_MasterWriteDataByte(Data);
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	0e 94 48 19 	call	0x3290	; 0x3290 <I2C_MasterWriteDataByte>

	I2C_SendStopCondition();
    1cd4:	0e 94 3d 19 	call	0x327a	; 0x327a <I2C_SendStopCondition>
}
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <EEPROM_Read_Byte>:

u8 EEPROM_Read_Byte(u8 AddressSlave ,u8 AddressLocation)
{
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <EEPROM_Read_Byte+0x6>
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	6a 83       	std	Y+2, r22	; 0x02

	I2C_SendStartCondition();
    1cf2:	0e 94 2d 19 	call	0x325a	; 0x325a <I2C_SendStartCondition>

	//write the device address and so we need to get A2 A1 A0 address bits and R/W=0 (write)
	I2C_MasterWriteDataByte(AddressSlave);
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	0e 94 48 19 	call	0x3290	; 0x3290 <I2C_MasterWriteDataByte>

	//send the required location address
	I2C_MasterWriteDataByte(AddressLocation);
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	0e 94 48 19 	call	0x3290	; 0x3290 <I2C_MasterWriteDataByte>

	//send a repeated start
	I2C_SendStartCondition();
    1d02:	0e 94 2d 19 	call	0x325a	; 0x325a <I2C_SendStartCondition>

	//write the device address and so we need to get A2 A1 A0 address bits and R/W=1 (Read)
	SET_BIT(AddressSlave,0);
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	81 60       	ori	r24, 0x01	; 1
    1d0a:	89 83       	std	Y+1, r24	; 0x01
	I2C_MasterWriteDataByte(AddressSlave);
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	0e 94 48 19 	call	0x3290	; 0x3290 <I2C_MasterWriteDataByte>

	return I2C_MasterReadDataByteWith_NACK();
    1d12:	0e 94 72 19 	call	0x32e4	; 0x32e4 <I2C_MasterReadDataByteWith_NACK>

	I2C_SendStopCondition();
}
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <ExtInterrupt_Init>:
//void __vector_1 (void) __attribute__ ((signal));
//void __vector_1 (void) {
//	// TODO
//}

void ExtInterrupt_Init(void) {
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62

    /*************************** Interrupt 0 Init ***************************/
#ifdef EXT_INTERRUPT_INT0
    /* Interrupt Enable */
#if EXT_INTERRUPT_INT0_INT_ENABLE == EXT_INTERRUPT_ENABLE
    SET_BIT(GICR, GICR_INT0); // External Interrupt Request 0 Enable
    1d28:	ab e5       	ldi	r26, 0x5B	; 91
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	eb e5       	ldi	r30, 0x5B	; 91
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	80 64       	ori	r24, 0x40	; 64
    1d34:	8c 93       	st	X, r24
    SET_BIT(MCUCR, MCUCR_ISC01);
#elif EXT_INTERRUPT_INT0_SENSE == EXT_INTERRUPT_RISING_EDGE
    // TODO
#elif EXT_INTERRUPT_INT0_SENSE == EXT_INTERRUPT_ON_CHANGE
    /* Any logical change on INT0 generates an interrupt request. */
    SET_BIT(MCUCR, MCUCR_ISC00);
    1d36:	a5 e5       	ldi	r26, 0x55	; 85
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	e5 e5       	ldi	r30, 0x55	; 85
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	81 60       	ori	r24, 0x01	; 1
    1d42:	8c 93       	st	X, r24
    CLR_BIT(MCUCR, MCUCR_ISC01);
    1d44:	a5 e5       	ldi	r26, 0x55	; 85
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e5 e5       	ldi	r30, 0x55	; 85
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	8d 7f       	andi	r24, 0xFD	; 253
    1d50:	8c 93       	st	X, r24
#endif
#endif



}
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <ExtInterrupt_SetINT0Callback>:

void ExtInterrupt_SetINT0Callback (void (*callback) (void)) {
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <ExtInterrupt_SetINT0Callback+0x6>
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	9a 83       	std	Y+2, r25	; 0x02
    1d64:	89 83       	std	Y+1, r24	; 0x01
    ExtInterrupt_INT0Callback = callback;
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6a:	90 93 7b 01 	sts	0x017B, r25
    1d6e:	80 93 7a 01 	sts	0x017A, r24
}
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <GlobalInterrupt_Enable>:
#include "std_types.h"
#include "macros.h"
#include "Registers.h"
#include "GlobalInterrupt.h"

void GlobalInterrupt_Enable(void) {
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
    1d84:	af e5       	ldi	r26, 0x5F	; 95
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	ef e5       	ldi	r30, 0x5F	; 95
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	80 68       	ori	r24, 0x80	; 128
    1d90:	8c 93       	st	X, r24
}
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	08 95       	ret

00001d98 <GlobalInterrupt_Disable>:

void GlobalInterrupt_Disable(void) {
    1d98:	df 93       	push	r29
    1d9a:	cf 93       	push	r28
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
    1da0:	af e5       	ldi	r26, 0x5F	; 95
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	ef e5       	ldi	r30, 0x5F	; 95
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	8f 77       	andi	r24, 0x7F	; 127
    1dac:	8c 93       	st	X, r24
}
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <__vector_10>:
void (*Gpt_Timer2_Callback_Ctc)(void);
void (*Gpt_Timer2_Callback_Normal)(void);

/************ ISR ************/
ISR(VECTOR_TIMER0_CTC)
{
    1db4:	1f 92       	push	r1
    1db6:	0f 92       	push	r0
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	0f 92       	push	r0
    1dbc:	11 24       	eor	r1, r1
    1dbe:	2f 93       	push	r18
    1dc0:	3f 93       	push	r19
    1dc2:	4f 93       	push	r20
    1dc4:	5f 93       	push	r21
    1dc6:	6f 93       	push	r22
    1dc8:	7f 93       	push	r23
    1dca:	8f 93       	push	r24
    1dcc:	9f 93       	push	r25
    1dce:	af 93       	push	r26
    1dd0:	bf 93       	push	r27
    1dd2:	ef 93       	push	r30
    1dd4:	ff 93       	push	r31
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer0_Callback_Ctc();
    1dde:	e0 91 7e 01 	lds	r30, 0x017E
    1de2:	f0 91 7f 01 	lds	r31, 0x017F
    1de6:	09 95       	icall
}
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	ff 91       	pop	r31
    1dee:	ef 91       	pop	r30
    1df0:	bf 91       	pop	r27
    1df2:	af 91       	pop	r26
    1df4:	9f 91       	pop	r25
    1df6:	8f 91       	pop	r24
    1df8:	7f 91       	pop	r23
    1dfa:	6f 91       	pop	r22
    1dfc:	5f 91       	pop	r21
    1dfe:	4f 91       	pop	r20
    1e00:	3f 91       	pop	r19
    1e02:	2f 91       	pop	r18
    1e04:	0f 90       	pop	r0
    1e06:	0f be       	out	0x3f, r0	; 63
    1e08:	0f 90       	pop	r0
    1e0a:	1f 90       	pop	r1
    1e0c:	18 95       	reti

00001e0e <__vector_11>:
ISR(VECTOR_TIMER0_NORM)
{
    1e0e:	1f 92       	push	r1
    1e10:	0f 92       	push	r0
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	0f 92       	push	r0
    1e16:	11 24       	eor	r1, r1
    1e18:	2f 93       	push	r18
    1e1a:	3f 93       	push	r19
    1e1c:	4f 93       	push	r20
    1e1e:	5f 93       	push	r21
    1e20:	6f 93       	push	r22
    1e22:	7f 93       	push	r23
    1e24:	8f 93       	push	r24
    1e26:	9f 93       	push	r25
    1e28:	af 93       	push	r26
    1e2a:	bf 93       	push	r27
    1e2c:	ef 93       	push	r30
    1e2e:	ff 93       	push	r31
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer0_Callback_Normal();
    1e38:	e0 91 88 01 	lds	r30, 0x0188
    1e3c:	f0 91 89 01 	lds	r31, 0x0189
    1e40:	09 95       	icall
}
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	ff 91       	pop	r31
    1e48:	ef 91       	pop	r30
    1e4a:	bf 91       	pop	r27
    1e4c:	af 91       	pop	r26
    1e4e:	9f 91       	pop	r25
    1e50:	8f 91       	pop	r24
    1e52:	7f 91       	pop	r23
    1e54:	6f 91       	pop	r22
    1e56:	5f 91       	pop	r21
    1e58:	4f 91       	pop	r20
    1e5a:	3f 91       	pop	r19
    1e5c:	2f 91       	pop	r18
    1e5e:	0f 90       	pop	r0
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	0f 90       	pop	r0
    1e64:	1f 90       	pop	r1
    1e66:	18 95       	reti

00001e68 <__vector_9>:
ISR(VECTOR_TIMER1_NORM)
{
    1e68:	1f 92       	push	r1
    1e6a:	0f 92       	push	r0
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	0f 92       	push	r0
    1e70:	11 24       	eor	r1, r1
    1e72:	2f 93       	push	r18
    1e74:	3f 93       	push	r19
    1e76:	4f 93       	push	r20
    1e78:	5f 93       	push	r21
    1e7a:	6f 93       	push	r22
    1e7c:	7f 93       	push	r23
    1e7e:	8f 93       	push	r24
    1e80:	9f 93       	push	r25
    1e82:	af 93       	push	r26
    1e84:	bf 93       	push	r27
    1e86:	ef 93       	push	r30
    1e88:	ff 93       	push	r31
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1_Callback_Normal();
    1e92:	e0 91 8a 01 	lds	r30, 0x018A
    1e96:	f0 91 8b 01 	lds	r31, 0x018B
    1e9a:	09 95       	icall
}
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	ff 91       	pop	r31
    1ea2:	ef 91       	pop	r30
    1ea4:	bf 91       	pop	r27
    1ea6:	af 91       	pop	r26
    1ea8:	9f 91       	pop	r25
    1eaa:	8f 91       	pop	r24
    1eac:	7f 91       	pop	r23
    1eae:	6f 91       	pop	r22
    1eb0:	5f 91       	pop	r21
    1eb2:	4f 91       	pop	r20
    1eb4:	3f 91       	pop	r19
    1eb6:	2f 91       	pop	r18
    1eb8:	0f 90       	pop	r0
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	0f 90       	pop	r0
    1ebe:	1f 90       	pop	r1
    1ec0:	18 95       	reti

00001ec2 <__vector_7>:
ISR(VECTOR_TIMER1A_CTC)
{
    1ec2:	1f 92       	push	r1
    1ec4:	0f 92       	push	r0
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	0f 92       	push	r0
    1eca:	11 24       	eor	r1, r1
    1ecc:	2f 93       	push	r18
    1ece:	3f 93       	push	r19
    1ed0:	4f 93       	push	r20
    1ed2:	5f 93       	push	r21
    1ed4:	6f 93       	push	r22
    1ed6:	7f 93       	push	r23
    1ed8:	8f 93       	push	r24
    1eda:	9f 93       	push	r25
    1edc:	af 93       	push	r26
    1ede:	bf 93       	push	r27
    1ee0:	ef 93       	push	r30
    1ee2:	ff 93       	push	r31
    1ee4:	df 93       	push	r29
    1ee6:	cf 93       	push	r28
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1A_Callback_Ctc();
    1eec:	e0 91 86 01 	lds	r30, 0x0186
    1ef0:	f0 91 87 01 	lds	r31, 0x0187
    1ef4:	09 95       	icall
}
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	ff 91       	pop	r31
    1efc:	ef 91       	pop	r30
    1efe:	bf 91       	pop	r27
    1f00:	af 91       	pop	r26
    1f02:	9f 91       	pop	r25
    1f04:	8f 91       	pop	r24
    1f06:	7f 91       	pop	r23
    1f08:	6f 91       	pop	r22
    1f0a:	5f 91       	pop	r21
    1f0c:	4f 91       	pop	r20
    1f0e:	3f 91       	pop	r19
    1f10:	2f 91       	pop	r18
    1f12:	0f 90       	pop	r0
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	0f 90       	pop	r0
    1f18:	1f 90       	pop	r1
    1f1a:	18 95       	reti

00001f1c <__vector_8>:
ISR(VECTOR_TIMER1B_CTC)
{
    1f1c:	1f 92       	push	r1
    1f1e:	0f 92       	push	r0
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	0f 92       	push	r0
    1f24:	11 24       	eor	r1, r1
    1f26:	2f 93       	push	r18
    1f28:	3f 93       	push	r19
    1f2a:	4f 93       	push	r20
    1f2c:	5f 93       	push	r21
    1f2e:	6f 93       	push	r22
    1f30:	7f 93       	push	r23
    1f32:	8f 93       	push	r24
    1f34:	9f 93       	push	r25
    1f36:	af 93       	push	r26
    1f38:	bf 93       	push	r27
    1f3a:	ef 93       	push	r30
    1f3c:	ff 93       	push	r31
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1B_Callback_Ctc();
    1f46:	e0 91 82 01 	lds	r30, 0x0182
    1f4a:	f0 91 83 01 	lds	r31, 0x0183
    1f4e:	09 95       	icall
}
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	ff 91       	pop	r31
    1f56:	ef 91       	pop	r30
    1f58:	bf 91       	pop	r27
    1f5a:	af 91       	pop	r26
    1f5c:	9f 91       	pop	r25
    1f5e:	8f 91       	pop	r24
    1f60:	7f 91       	pop	r23
    1f62:	6f 91       	pop	r22
    1f64:	5f 91       	pop	r21
    1f66:	4f 91       	pop	r20
    1f68:	3f 91       	pop	r19
    1f6a:	2f 91       	pop	r18
    1f6c:	0f 90       	pop	r0
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	0f 90       	pop	r0
    1f72:	1f 90       	pop	r1
    1f74:	18 95       	reti

00001f76 <__vector_5>:
ISR(VECTOR_TIMER2_NORM)
{
    1f76:	1f 92       	push	r1
    1f78:	0f 92       	push	r0
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	0f 92       	push	r0
    1f7e:	11 24       	eor	r1, r1
    1f80:	2f 93       	push	r18
    1f82:	3f 93       	push	r19
    1f84:	4f 93       	push	r20
    1f86:	5f 93       	push	r21
    1f88:	6f 93       	push	r22
    1f8a:	7f 93       	push	r23
    1f8c:	8f 93       	push	r24
    1f8e:	9f 93       	push	r25
    1f90:	af 93       	push	r26
    1f92:	bf 93       	push	r27
    1f94:	ef 93       	push	r30
    1f96:	ff 93       	push	r31
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer2_Callback_Normal();
    1fa0:	e0 91 84 01 	lds	r30, 0x0184
    1fa4:	f0 91 85 01 	lds	r31, 0x0185
    1fa8:	09 95       	icall
}
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	ff 91       	pop	r31
    1fb0:	ef 91       	pop	r30
    1fb2:	bf 91       	pop	r27
    1fb4:	af 91       	pop	r26
    1fb6:	9f 91       	pop	r25
    1fb8:	8f 91       	pop	r24
    1fba:	7f 91       	pop	r23
    1fbc:	6f 91       	pop	r22
    1fbe:	5f 91       	pop	r21
    1fc0:	4f 91       	pop	r20
    1fc2:	3f 91       	pop	r19
    1fc4:	2f 91       	pop	r18
    1fc6:	0f 90       	pop	r0
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	0f 90       	pop	r0
    1fcc:	1f 90       	pop	r1
    1fce:	18 95       	reti

00001fd0 <__vector_4>:
ISR(VECTOR_TIMER2_CTC)
{
    1fd0:	1f 92       	push	r1
    1fd2:	0f 92       	push	r0
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	0f 92       	push	r0
    1fd8:	11 24       	eor	r1, r1
    1fda:	2f 93       	push	r18
    1fdc:	3f 93       	push	r19
    1fde:	4f 93       	push	r20
    1fe0:	5f 93       	push	r21
    1fe2:	6f 93       	push	r22
    1fe4:	7f 93       	push	r23
    1fe6:	8f 93       	push	r24
    1fe8:	9f 93       	push	r25
    1fea:	af 93       	push	r26
    1fec:	bf 93       	push	r27
    1fee:	ef 93       	push	r30
    1ff0:	ff 93       	push	r31
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer2_Callback_Ctc();
    1ffa:	e0 91 80 01 	lds	r30, 0x0180
    1ffe:	f0 91 81 01 	lds	r31, 0x0181
    2002:	09 95       	icall
}
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	ff 91       	pop	r31
    200a:	ef 91       	pop	r30
    200c:	bf 91       	pop	r27
    200e:	af 91       	pop	r26
    2010:	9f 91       	pop	r25
    2012:	8f 91       	pop	r24
    2014:	7f 91       	pop	r23
    2016:	6f 91       	pop	r22
    2018:	5f 91       	pop	r21
    201a:	4f 91       	pop	r20
    201c:	3f 91       	pop	r19
    201e:	2f 91       	pop	r18
    2020:	0f 90       	pop	r0
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	0f 90       	pop	r0
    2026:	1f 90       	pop	r1
    2028:	18 95       	reti

0000202a <Gpt_Init>:

Gpt_ReturnType Gpt_Init(Gpt_ConfigType *config)
{
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	65 97       	sbiw	r28, 0x15	; 21
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
    203e:	9b 83       	std	Y+3, r25	; 0x03
    2040:	8a 83       	std	Y+2, r24	; 0x02
    Gpt_ReturnType returnValue = GPT_OK;
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	89 83       	std	Y+1, r24	; 0x01

    switch (config->channel)
    2046:	ea 81       	ldd	r30, Y+2	; 0x02
    2048:	fb 81       	ldd	r31, Y+3	; 0x03
    204a:	80 81       	ld	r24, Z
    204c:	28 2f       	mov	r18, r24
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	3d 8b       	std	Y+21, r19	; 0x15
    2052:	2c 8b       	std	Y+20, r18	; 0x14
    2054:	8c 89       	ldd	r24, Y+20	; 0x14
    2056:	9d 89       	ldd	r25, Y+21	; 0x15
    2058:	81 30       	cpi	r24, 0x01	; 1
    205a:	91 05       	cpc	r25, r1
    205c:	09 f4       	brne	.+2      	; 0x2060 <Gpt_Init+0x36>
    205e:	92 c1       	rjmp	.+804    	; 0x2384 <Gpt_Init+0x35a>
    2060:	2c 89       	ldd	r18, Y+20	; 0x14
    2062:	3d 89       	ldd	r19, Y+21	; 0x15
    2064:	22 30       	cpi	r18, 0x02	; 2
    2066:	31 05       	cpc	r19, r1
    2068:	2c f4       	brge	.+10     	; 0x2074 <Gpt_Init+0x4a>
    206a:	8c 89       	ldd	r24, Y+20	; 0x14
    206c:	9d 89       	ldd	r25, Y+21	; 0x15
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	71 f0       	breq	.+28     	; 0x208e <Gpt_Init+0x64>
    2072:	2a c6       	rjmp	.+3156   	; 0x2cc8 <Gpt_Init+0xc9e>
    2074:	2c 89       	ldd	r18, Y+20	; 0x14
    2076:	3d 89       	ldd	r19, Y+21	; 0x15
    2078:	22 30       	cpi	r18, 0x02	; 2
    207a:	31 05       	cpc	r19, r1
    207c:	09 f4       	brne	.+2      	; 0x2080 <Gpt_Init+0x56>
    207e:	19 c3       	rjmp	.+1586   	; 0x26b2 <Gpt_Init+0x688>
    2080:	8c 89       	ldd	r24, Y+20	; 0x14
    2082:	9d 89       	ldd	r25, Y+21	; 0x15
    2084:	83 30       	cpi	r24, 0x03	; 3
    2086:	91 05       	cpc	r25, r1
    2088:	09 f4       	brne	.+2      	; 0x208c <Gpt_Init+0x62>
    208a:	aa c4       	rjmp	.+2388   	; 0x29e0 <Gpt_Init+0x9b6>
    208c:	1d c6       	rjmp	.+3130   	; 0x2cc8 <Gpt_Init+0xc9e>
    {

    case GPT_CHANNEL_TIMER0:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    208e:	ea 81       	ldd	r30, Y+2	; 0x02
    2090:	fb 81       	ldd	r31, Y+3	; 0x03
    2092:	81 81       	ldd	r24, Z+1	; 0x01
    2094:	88 23       	and	r24, r24
    2096:	79 f4       	brne	.+30     	; 0x20b6 <Gpt_Init+0x8c>
        {
            CLR_BIT(TCCR0, TCCR0_WGM00);
    2098:	a3 e5       	ldi	r26, 0x53	; 83
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e3 e5       	ldi	r30, 0x53	; 83
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	8f 7b       	andi	r24, 0xBF	; 191
    20a4:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_WGM01);
    20a6:	a3 e5       	ldi	r26, 0x53	; 83
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	e3 e5       	ldi	r30, 0x53	; 83
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	87 7f       	andi	r24, 0xF7	; 247
    20b2:	8c 93       	st	X, r24
    20b4:	15 c0       	rjmp	.+42     	; 0x20e0 <Gpt_Init+0xb6>
        }
        else if (config->mode == GPT_MODE_CTC)
    20b6:	ea 81       	ldd	r30, Y+2	; 0x02
    20b8:	fb 81       	ldd	r31, Y+3	; 0x03
    20ba:	81 81       	ldd	r24, Z+1	; 0x01
    20bc:	81 30       	cpi	r24, 0x01	; 1
    20be:	79 f4       	brne	.+30     	; 0x20de <Gpt_Init+0xb4>
        {
            CLR_BIT(TCCR0, TCCR0_WGM00);
    20c0:	a3 e5       	ldi	r26, 0x53	; 83
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e3 e5       	ldi	r30, 0x53	; 83
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	8f 7b       	andi	r24, 0xBF	; 191
    20cc:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_WGM01);
    20ce:	a3 e5       	ldi	r26, 0x53	; 83
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e3 e5       	ldi	r30, 0x53	; 83
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	88 60       	ori	r24, 0x08	; 8
    20da:	8c 93       	st	X, r24
    20dc:	01 c0       	rjmp	.+2      	; 0x20e0 <Gpt_Init+0xb6>
        }
        else
        {
            returnValue = GPT_ERROR;
    20de:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    20e0:	ea 81       	ldd	r30, Y+2	; 0x02
    20e2:	fb 81       	ldd	r31, Y+3	; 0x03
    20e4:	82 81       	ldd	r24, Z+2	; 0x02
    20e6:	28 2f       	mov	r18, r24
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	3b 8b       	std	Y+19, r19	; 0x13
    20ec:	2a 8b       	std	Y+18, r18	; 0x12
    20ee:	8a 89       	ldd	r24, Y+18	; 0x12
    20f0:	9b 89       	ldd	r25, Y+19	; 0x13
    20f2:	81 30       	cpi	r24, 0x01	; 1
    20f4:	91 05       	cpc	r25, r1
    20f6:	21 f1       	breq	.+72     	; 0x2140 <Gpt_Init+0x116>
    20f8:	2a 89       	ldd	r18, Y+18	; 0x12
    20fa:	3b 89       	ldd	r19, Y+19	; 0x13
    20fc:	22 30       	cpi	r18, 0x02	; 2
    20fe:	31 05       	cpc	r19, r1
    2100:	2c f4       	brge	.+10     	; 0x210c <Gpt_Init+0xe2>
    2102:	8a 89       	ldd	r24, Y+18	; 0x12
    2104:	9b 89       	ldd	r25, Y+19	; 0x13
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	61 f0       	breq	.+24     	; 0x2122 <Gpt_Init+0xf8>
    210a:	47 c0       	rjmp	.+142    	; 0x219a <Gpt_Init+0x170>
    210c:	2a 89       	ldd	r18, Y+18	; 0x12
    210e:	3b 89       	ldd	r19, Y+19	; 0x13
    2110:	22 30       	cpi	r18, 0x02	; 2
    2112:	31 05       	cpc	r19, r1
    2114:	21 f1       	breq	.+72     	; 0x215e <Gpt_Init+0x134>
    2116:	8a 89       	ldd	r24, Y+18	; 0x12
    2118:	9b 89       	ldd	r25, Y+19	; 0x13
    211a:	83 30       	cpi	r24, 0x03	; 3
    211c:	91 05       	cpc	r25, r1
    211e:	71 f1       	breq	.+92     	; 0x217c <Gpt_Init+0x152>
    2120:	3c c0       	rjmp	.+120    	; 0x219a <Gpt_Init+0x170>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR0, TCCR0_COM00);
    2122:	a3 e5       	ldi	r26, 0x53	; 83
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e3 e5       	ldi	r30, 0x53	; 83
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	8f 7e       	andi	r24, 0xEF	; 239
    212e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    2130:	a3 e5       	ldi	r26, 0x53	; 83
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e3 e5       	ldi	r30, 0x53	; 83
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	8f 7d       	andi	r24, 0xDF	; 223
    213c:	8c 93       	st	X, r24
    213e:	2e c0       	rjmp	.+92     	; 0x219c <Gpt_Init+0x172>
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR0, TCCR0_COM00);
    2140:	a3 e5       	ldi	r26, 0x53	; 83
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e3 e5       	ldi	r30, 0x53	; 83
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	80 61       	ori	r24, 0x10	; 16
    214c:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    214e:	a3 e5       	ldi	r26, 0x53	; 83
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e3 e5       	ldi	r30, 0x53	; 83
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	8f 7d       	andi	r24, 0xDF	; 223
    215a:	8c 93       	st	X, r24
    215c:	1f c0       	rjmp	.+62     	; 0x219c <Gpt_Init+0x172>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR0, TCCR0_COM00);
    215e:	a3 e5       	ldi	r26, 0x53	; 83
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e3 e5       	ldi	r30, 0x53	; 83
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	80 61       	ori	r24, 0x10	; 16
    216a:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    216c:	a3 e5       	ldi	r26, 0x53	; 83
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e3 e5       	ldi	r30, 0x53	; 83
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	80 62       	ori	r24, 0x20	; 32
    2178:	8c 93       	st	X, r24
    217a:	10 c0       	rjmp	.+32     	; 0x219c <Gpt_Init+0x172>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR0, TCCR0_COM00);
    217c:	a3 e5       	ldi	r26, 0x53	; 83
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e3 e5       	ldi	r30, 0x53	; 83
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	8f 7e       	andi	r24, 0xEF	; 239
    2188:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    218a:	a3 e5       	ldi	r26, 0x53	; 83
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	e3 e5       	ldi	r30, 0x53	; 83
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	80 62       	ori	r24, 0x20	; 32
    2196:	8c 93       	st	X, r24
    2198:	01 c0       	rjmp	.+2      	; 0x219c <Gpt_Init+0x172>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    219a:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    219c:	ea 81       	ldd	r30, Y+2	; 0x02
    219e:	fb 81       	ldd	r31, Y+3	; 0x03
    21a0:	83 81       	ldd	r24, Z+3	; 0x03
    21a2:	28 2f       	mov	r18, r24
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	39 8b       	std	Y+17, r19	; 0x11
    21a8:	28 8b       	std	Y+16, r18	; 0x10
    21aa:	88 89       	ldd	r24, Y+16	; 0x10
    21ac:	99 89       	ldd	r25, Y+17	; 0x11
    21ae:	84 30       	cpi	r24, 0x04	; 4
    21b0:	91 05       	cpc	r25, r1
    21b2:	09 f4       	brne	.+2      	; 0x21b6 <Gpt_Init+0x18c>
    21b4:	77 c0       	rjmp	.+238    	; 0x22a4 <Gpt_Init+0x27a>
    21b6:	28 89       	ldd	r18, Y+16	; 0x10
    21b8:	39 89       	ldd	r19, Y+17	; 0x11
    21ba:	25 30       	cpi	r18, 0x05	; 5
    21bc:	31 05       	cpc	r19, r1
    21be:	8c f4       	brge	.+34     	; 0x21e2 <Gpt_Init+0x1b8>
    21c0:	88 89       	ldd	r24, Y+16	; 0x10
    21c2:	99 89       	ldd	r25, Y+17	; 0x11
    21c4:	81 30       	cpi	r24, 0x01	; 1
    21c6:	91 05       	cpc	r25, r1
    21c8:	09 f4       	brne	.+2      	; 0x21cc <Gpt_Init+0x1a2>
    21ca:	40 c0       	rjmp	.+128    	; 0x224c <Gpt_Init+0x222>
    21cc:	28 89       	ldd	r18, Y+16	; 0x10
    21ce:	39 89       	ldd	r19, Y+17	; 0x11
    21d0:	22 30       	cpi	r18, 0x02	; 2
    21d2:	31 05       	cpc	r19, r1
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <Gpt_Init+0x1ae>
    21d6:	50 c0       	rjmp	.+160    	; 0x2278 <Gpt_Init+0x24e>
    21d8:	88 89       	ldd	r24, Y+16	; 0x10
    21da:	99 89       	ldd	r25, Y+17	; 0x11
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	01 f1       	breq	.+64     	; 0x2220 <Gpt_Init+0x1f6>
    21e0:	cf c0       	rjmp	.+414    	; 0x2380 <Gpt_Init+0x356>
    21e2:	28 89       	ldd	r18, Y+16	; 0x10
    21e4:	39 89       	ldd	r19, Y+17	; 0x11
    21e6:	27 30       	cpi	r18, 0x07	; 7
    21e8:	31 05       	cpc	r19, r1
    21ea:	09 f4       	brne	.+2      	; 0x21ee <Gpt_Init+0x1c4>
    21ec:	87 c0       	rjmp	.+270    	; 0x22fc <Gpt_Init+0x2d2>
    21ee:	88 89       	ldd	r24, Y+16	; 0x10
    21f0:	99 89       	ldd	r25, Y+17	; 0x11
    21f2:	88 30       	cpi	r24, 0x08	; 8
    21f4:	91 05       	cpc	r25, r1
    21f6:	3c f4       	brge	.+14     	; 0x2206 <Gpt_Init+0x1dc>
    21f8:	28 89       	ldd	r18, Y+16	; 0x10
    21fa:	39 89       	ldd	r19, Y+17	; 0x11
    21fc:	26 30       	cpi	r18, 0x06	; 6
    21fe:	31 05       	cpc	r19, r1
    2200:	09 f4       	brne	.+2      	; 0x2204 <Gpt_Init+0x1da>
    2202:	66 c0       	rjmp	.+204    	; 0x22d0 <Gpt_Init+0x2a6>
    2204:	bd c0       	rjmp	.+378    	; 0x2380 <Gpt_Init+0x356>
    2206:	88 89       	ldd	r24, Y+16	; 0x10
    2208:	99 89       	ldd	r25, Y+17	; 0x11
    220a:	88 30       	cpi	r24, 0x08	; 8
    220c:	91 05       	cpc	r25, r1
    220e:	09 f4       	brne	.+2      	; 0x2212 <Gpt_Init+0x1e8>
    2210:	8b c0       	rjmp	.+278    	; 0x2328 <Gpt_Init+0x2fe>
    2212:	28 89       	ldd	r18, Y+16	; 0x10
    2214:	39 89       	ldd	r19, Y+17	; 0x11
    2216:	29 30       	cpi	r18, 0x09	; 9
    2218:	31 05       	cpc	r19, r1
    221a:	09 f4       	brne	.+2      	; 0x221e <Gpt_Init+0x1f4>
    221c:	9b c0       	rjmp	.+310    	; 0x2354 <Gpt_Init+0x32a>
    221e:	b0 c0       	rjmp	.+352    	; 0x2380 <Gpt_Init+0x356>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2220:	a3 e5       	ldi	r26, 0x53	; 83
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	e3 e5       	ldi	r30, 0x53	; 83
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	8e 7f       	andi	r24, 0xFE	; 254
    222c:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    222e:	a3 e5       	ldi	r26, 0x53	; 83
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	e3 e5       	ldi	r30, 0x53	; 83
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	8d 7f       	andi	r24, 0xFD	; 253
    223a:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    223c:	a3 e5       	ldi	r26, 0x53	; 83
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	e3 e5       	ldi	r30, 0x53	; 83
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	8b 7f       	andi	r24, 0xFB	; 251
    2248:	8c 93       	st	X, r24
    224a:	3f c5       	rjmp	.+2686   	; 0x2cca <Gpt_Init+0xca0>
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR0, TCCR0_CS00);
    224c:	a3 e5       	ldi	r26, 0x53	; 83
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	e3 e5       	ldi	r30, 0x53	; 83
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	81 60       	ori	r24, 0x01	; 1
    2258:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    225a:	a3 e5       	ldi	r26, 0x53	; 83
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e3 e5       	ldi	r30, 0x53	; 83
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	8d 7f       	andi	r24, 0xFD	; 253
    2266:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2268:	a3 e5       	ldi	r26, 0x53	; 83
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	e3 e5       	ldi	r30, 0x53	; 83
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	8b 7f       	andi	r24, 0xFB	; 251
    2274:	8c 93       	st	X, r24
    2276:	29 c5       	rjmp	.+2642   	; 0x2cca <Gpt_Init+0xca0>
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2278:	a3 e5       	ldi	r26, 0x53	; 83
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e3 e5       	ldi	r30, 0x53	; 83
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	8e 7f       	andi	r24, 0xFE	; 254
    2284:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2286:	a3 e5       	ldi	r26, 0x53	; 83
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e3 e5       	ldi	r30, 0x53	; 83
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	82 60       	ori	r24, 0x02	; 2
    2292:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2294:	a3 e5       	ldi	r26, 0x53	; 83
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e3 e5       	ldi	r30, 0x53	; 83
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	8b 7f       	andi	r24, 0xFB	; 251
    22a0:	8c 93       	st	X, r24
    22a2:	13 c5       	rjmp	.+2598   	; 0x2cca <Gpt_Init+0xca0>
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR0, TCCR0_CS00);
    22a4:	a3 e5       	ldi	r26, 0x53	; 83
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e3 e5       	ldi	r30, 0x53	; 83
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	81 60       	ori	r24, 0x01	; 1
    22b0:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    22b2:	a3 e5       	ldi	r26, 0x53	; 83
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e3 e5       	ldi	r30, 0x53	; 83
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	82 60       	ori	r24, 0x02	; 2
    22be:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    22c0:	a3 e5       	ldi	r26, 0x53	; 83
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	e3 e5       	ldi	r30, 0x53	; 83
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	8b 7f       	andi	r24, 0xFB	; 251
    22cc:	8c 93       	st	X, r24
    22ce:	fd c4       	rjmp	.+2554   	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR0, TCCR0_CS00);
    22d0:	a3 e5       	ldi	r26, 0x53	; 83
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	e3 e5       	ldi	r30, 0x53	; 83
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	8e 7f       	andi	r24, 0xFE	; 254
    22dc:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    22de:	a3 e5       	ldi	r26, 0x53	; 83
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	e3 e5       	ldi	r30, 0x53	; 83
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	8d 7f       	andi	r24, 0xFD	; 253
    22ea:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    22ec:	a3 e5       	ldi	r26, 0x53	; 83
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	e3 e5       	ldi	r30, 0x53	; 83
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	84 60       	ori	r24, 0x04	; 4
    22f8:	8c 93       	st	X, r24
    22fa:	e7 c4       	rjmp	.+2510   	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR0, TCCR0_CS00);
    22fc:	a3 e5       	ldi	r26, 0x53	; 83
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	e3 e5       	ldi	r30, 0x53	; 83
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	81 60       	ori	r24, 0x01	; 1
    2308:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    230a:	a3 e5       	ldi	r26, 0x53	; 83
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	e3 e5       	ldi	r30, 0x53	; 83
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	8d 7f       	andi	r24, 0xFD	; 253
    2316:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2318:	a3 e5       	ldi	r26, 0x53	; 83
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e3 e5       	ldi	r30, 0x53	; 83
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	84 60       	ori	r24, 0x04	; 4
    2324:	8c 93       	st	X, r24
    2326:	d1 c4       	rjmp	.+2466   	; 0x2cca <Gpt_Init+0xca0>
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR0, TCCR0_CS00);
    2328:	a3 e5       	ldi	r26, 0x53	; 83
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e3 e5       	ldi	r30, 0x53	; 83
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	8e 7f       	andi	r24, 0xFE	; 254
    2334:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2336:	a3 e5       	ldi	r26, 0x53	; 83
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	e3 e5       	ldi	r30, 0x53	; 83
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	82 60       	ori	r24, 0x02	; 2
    2342:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2344:	a3 e5       	ldi	r26, 0x53	; 83
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e3 e5       	ldi	r30, 0x53	; 83
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	84 60       	ori	r24, 0x04	; 4
    2350:	8c 93       	st	X, r24
    2352:	bb c4       	rjmp	.+2422   	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR0, TCCR0_CS00);
    2354:	a3 e5       	ldi	r26, 0x53	; 83
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e3 e5       	ldi	r30, 0x53	; 83
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	81 60       	ori	r24, 0x01	; 1
    2360:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2362:	a3 e5       	ldi	r26, 0x53	; 83
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e3 e5       	ldi	r30, 0x53	; 83
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	82 60       	ori	r24, 0x02	; 2
    236e:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2370:	a3 e5       	ldi	r26, 0x53	; 83
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e3 e5       	ldi	r30, 0x53	; 83
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	84 60       	ori	r24, 0x04	; 4
    237c:	8c 93       	st	X, r24
    237e:	a5 c4       	rjmp	.+2378   	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2380:	19 82       	std	Y+1, r1	; 0x01
    2382:	a3 c4       	rjmp	.+2374   	; 0x2cca <Gpt_Init+0xca0>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    2384:	ea 81       	ldd	r30, Y+2	; 0x02
    2386:	fb 81       	ldd	r31, Y+3	; 0x03
    2388:	81 81       	ldd	r24, Z+1	; 0x01
    238a:	88 23       	and	r24, r24
    238c:	e9 f4       	brne	.+58     	; 0x23c8 <Gpt_Init+0x39e>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    238e:	af e4       	ldi	r26, 0x4F	; 79
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	ef e4       	ldi	r30, 0x4F	; 79
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	8e 7f       	andi	r24, 0xFE	; 254
    239a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    239c:	af e4       	ldi	r26, 0x4F	; 79
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	ef e4       	ldi	r30, 0x4F	; 79
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	8d 7f       	andi	r24, 0xFD	; 253
    23a8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM12);
    23aa:	ae e4       	ldi	r26, 0x4E	; 78
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	ee e4       	ldi	r30, 0x4E	; 78
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	87 7f       	andi	r24, 0xF7	; 247
    23b6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    23b8:	ae e4       	ldi	r26, 0x4E	; 78
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	ee e4       	ldi	r30, 0x4E	; 78
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	8f 7e       	andi	r24, 0xEF	; 239
    23c4:	8c 93       	st	X, r24
    23c6:	23 c0       	rjmp	.+70     	; 0x240e <Gpt_Init+0x3e4>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    23c8:	ea 81       	ldd	r30, Y+2	; 0x02
    23ca:	fb 81       	ldd	r31, Y+3	; 0x03
    23cc:	81 81       	ldd	r24, Z+1	; 0x01
    23ce:	81 30       	cpi	r24, 0x01	; 1
    23d0:	e9 f4       	brne	.+58     	; 0x240c <Gpt_Init+0x3e2>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    23d2:	af e4       	ldi	r26, 0x4F	; 79
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	ef e4       	ldi	r30, 0x4F	; 79
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	8e 7f       	andi	r24, 0xFE	; 254
    23de:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    23e0:	af e4       	ldi	r26, 0x4F	; 79
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	ef e4       	ldi	r30, 0x4F	; 79
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	8d 7f       	andi	r24, 0xFD	; 253
    23ec:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    23ee:	ae e4       	ldi	r26, 0x4E	; 78
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	ee e4       	ldi	r30, 0x4E	; 78
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	88 60       	ori	r24, 0x08	; 8
    23fa:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    23fc:	ae e4       	ldi	r26, 0x4E	; 78
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	ee e4       	ldi	r30, 0x4E	; 78
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	8f 7e       	andi	r24, 0xEF	; 239
    2408:	8c 93       	st	X, r24
    240a:	01 c0       	rjmp	.+2      	; 0x240e <Gpt_Init+0x3e4>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    240c:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    240e:	ea 81       	ldd	r30, Y+2	; 0x02
    2410:	fb 81       	ldd	r31, Y+3	; 0x03
    2412:	82 81       	ldd	r24, Z+2	; 0x02
    2414:	28 2f       	mov	r18, r24
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	3f 87       	std	Y+15, r19	; 0x0f
    241a:	2e 87       	std	Y+14, r18	; 0x0e
    241c:	8e 85       	ldd	r24, Y+14	; 0x0e
    241e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2420:	81 30       	cpi	r24, 0x01	; 1
    2422:	91 05       	cpc	r25, r1
    2424:	21 f1       	breq	.+72     	; 0x246e <Gpt_Init+0x444>
    2426:	2e 85       	ldd	r18, Y+14	; 0x0e
    2428:	3f 85       	ldd	r19, Y+15	; 0x0f
    242a:	22 30       	cpi	r18, 0x02	; 2
    242c:	31 05       	cpc	r19, r1
    242e:	2c f4       	brge	.+10     	; 0x243a <Gpt_Init+0x410>
    2430:	8e 85       	ldd	r24, Y+14	; 0x0e
    2432:	9f 85       	ldd	r25, Y+15	; 0x0f
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	61 f0       	breq	.+24     	; 0x2450 <Gpt_Init+0x426>
    2438:	47 c0       	rjmp	.+142    	; 0x24c8 <Gpt_Init+0x49e>
    243a:	2e 85       	ldd	r18, Y+14	; 0x0e
    243c:	3f 85       	ldd	r19, Y+15	; 0x0f
    243e:	22 30       	cpi	r18, 0x02	; 2
    2440:	31 05       	cpc	r19, r1
    2442:	21 f1       	breq	.+72     	; 0x248c <Gpt_Init+0x462>
    2444:	8e 85       	ldd	r24, Y+14	; 0x0e
    2446:	9f 85       	ldd	r25, Y+15	; 0x0f
    2448:	83 30       	cpi	r24, 0x03	; 3
    244a:	91 05       	cpc	r25, r1
    244c:	71 f1       	breq	.+92     	; 0x24aa <Gpt_Init+0x480>
    244e:	3c c0       	rjmp	.+120    	; 0x24c8 <Gpt_Init+0x49e>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    2450:	af e4       	ldi	r26, 0x4F	; 79
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	ef e4       	ldi	r30, 0x4F	; 79
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	8f 7b       	andi	r24, 0xBF	; 191
    245c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    245e:	af e4       	ldi	r26, 0x4F	; 79
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	ef e4       	ldi	r30, 0x4F	; 79
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	8f 77       	andi	r24, 0x7F	; 127
    246a:	8c 93       	st	X, r24
    246c:	2e c0       	rjmp	.+92     	; 0x24ca <Gpt_Init+0x4a0>
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    246e:	af e4       	ldi	r26, 0x4F	; 79
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	ef e4       	ldi	r30, 0x4F	; 79
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	80 64       	ori	r24, 0x40	; 64
    247a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    247c:	af e4       	ldi	r26, 0x4F	; 79
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	ef e4       	ldi	r30, 0x4F	; 79
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	8f 77       	andi	r24, 0x7F	; 127
    2488:	8c 93       	st	X, r24
    248a:	1f c0       	rjmp	.+62     	; 0x24ca <Gpt_Init+0x4a0>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    248c:	af e4       	ldi	r26, 0x4F	; 79
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	ef e4       	ldi	r30, 0x4F	; 79
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	80 64       	ori	r24, 0x40	; 64
    2498:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    249a:	af e4       	ldi	r26, 0x4F	; 79
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	ef e4       	ldi	r30, 0x4F	; 79
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	80 68       	ori	r24, 0x80	; 128
    24a6:	8c 93       	st	X, r24
    24a8:	10 c0       	rjmp	.+32     	; 0x24ca <Gpt_Init+0x4a0>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    24aa:	af e4       	ldi	r26, 0x4F	; 79
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	ef e4       	ldi	r30, 0x4F	; 79
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	8f 7b       	andi	r24, 0xBF	; 191
    24b6:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    24b8:	af e4       	ldi	r26, 0x4F	; 79
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	ef e4       	ldi	r30, 0x4F	; 79
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	80 68       	ori	r24, 0x80	; 128
    24c4:	8c 93       	st	X, r24
    24c6:	01 c0       	rjmp	.+2      	; 0x24ca <Gpt_Init+0x4a0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    24c8:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    24ca:	ea 81       	ldd	r30, Y+2	; 0x02
    24cc:	fb 81       	ldd	r31, Y+3	; 0x03
    24ce:	83 81       	ldd	r24, Z+3	; 0x03
    24d0:	28 2f       	mov	r18, r24
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	3d 87       	std	Y+13, r19	; 0x0d
    24d6:	2c 87       	std	Y+12, r18	; 0x0c
    24d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    24da:	9d 85       	ldd	r25, Y+13	; 0x0d
    24dc:	84 30       	cpi	r24, 0x04	; 4
    24de:	91 05       	cpc	r25, r1
    24e0:	09 f4       	brne	.+2      	; 0x24e4 <Gpt_Init+0x4ba>
    24e2:	77 c0       	rjmp	.+238    	; 0x25d2 <Gpt_Init+0x5a8>
    24e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    24e6:	3d 85       	ldd	r19, Y+13	; 0x0d
    24e8:	25 30       	cpi	r18, 0x05	; 5
    24ea:	31 05       	cpc	r19, r1
    24ec:	8c f4       	brge	.+34     	; 0x2510 <Gpt_Init+0x4e6>
    24ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    24f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    24f2:	81 30       	cpi	r24, 0x01	; 1
    24f4:	91 05       	cpc	r25, r1
    24f6:	09 f4       	brne	.+2      	; 0x24fa <Gpt_Init+0x4d0>
    24f8:	40 c0       	rjmp	.+128    	; 0x257a <Gpt_Init+0x550>
    24fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    24fc:	3d 85       	ldd	r19, Y+13	; 0x0d
    24fe:	22 30       	cpi	r18, 0x02	; 2
    2500:	31 05       	cpc	r19, r1
    2502:	09 f4       	brne	.+2      	; 0x2506 <Gpt_Init+0x4dc>
    2504:	50 c0       	rjmp	.+160    	; 0x25a6 <Gpt_Init+0x57c>
    2506:	8c 85       	ldd	r24, Y+12	; 0x0c
    2508:	9d 85       	ldd	r25, Y+13	; 0x0d
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	01 f1       	breq	.+64     	; 0x254e <Gpt_Init+0x524>
    250e:	cf c0       	rjmp	.+414    	; 0x26ae <Gpt_Init+0x684>
    2510:	2c 85       	ldd	r18, Y+12	; 0x0c
    2512:	3d 85       	ldd	r19, Y+13	; 0x0d
    2514:	27 30       	cpi	r18, 0x07	; 7
    2516:	31 05       	cpc	r19, r1
    2518:	09 f4       	brne	.+2      	; 0x251c <Gpt_Init+0x4f2>
    251a:	87 c0       	rjmp	.+270    	; 0x262a <Gpt_Init+0x600>
    251c:	8c 85       	ldd	r24, Y+12	; 0x0c
    251e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2520:	88 30       	cpi	r24, 0x08	; 8
    2522:	91 05       	cpc	r25, r1
    2524:	3c f4       	brge	.+14     	; 0x2534 <Gpt_Init+0x50a>
    2526:	2c 85       	ldd	r18, Y+12	; 0x0c
    2528:	3d 85       	ldd	r19, Y+13	; 0x0d
    252a:	26 30       	cpi	r18, 0x06	; 6
    252c:	31 05       	cpc	r19, r1
    252e:	09 f4       	brne	.+2      	; 0x2532 <Gpt_Init+0x508>
    2530:	66 c0       	rjmp	.+204    	; 0x25fe <Gpt_Init+0x5d4>
    2532:	bd c0       	rjmp	.+378    	; 0x26ae <Gpt_Init+0x684>
    2534:	8c 85       	ldd	r24, Y+12	; 0x0c
    2536:	9d 85       	ldd	r25, Y+13	; 0x0d
    2538:	88 30       	cpi	r24, 0x08	; 8
    253a:	91 05       	cpc	r25, r1
    253c:	09 f4       	brne	.+2      	; 0x2540 <Gpt_Init+0x516>
    253e:	8b c0       	rjmp	.+278    	; 0x2656 <Gpt_Init+0x62c>
    2540:	2c 85       	ldd	r18, Y+12	; 0x0c
    2542:	3d 85       	ldd	r19, Y+13	; 0x0d
    2544:	29 30       	cpi	r18, 0x09	; 9
    2546:	31 05       	cpc	r19, r1
    2548:	09 f4       	brne	.+2      	; 0x254c <Gpt_Init+0x522>
    254a:	9b c0       	rjmp	.+310    	; 0x2682 <Gpt_Init+0x658>
    254c:	b0 c0       	rjmp	.+352    	; 0x26ae <Gpt_Init+0x684>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    254e:	ae e4       	ldi	r26, 0x4E	; 78
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	ee e4       	ldi	r30, 0x4E	; 78
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	8e 7f       	andi	r24, 0xFE	; 254
    255a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    255c:	ae e4       	ldi	r26, 0x4E	; 78
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	ee e4       	ldi	r30, 0x4E	; 78
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	8d 7f       	andi	r24, 0xFD	; 253
    2568:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    256a:	ae e4       	ldi	r26, 0x4E	; 78
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	ee e4       	ldi	r30, 0x4E	; 78
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	8b 7f       	andi	r24, 0xFB	; 251
    2576:	8c 93       	st	X, r24
    2578:	a8 c3       	rjmp	.+1872   	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    257a:	ae e4       	ldi	r26, 0x4E	; 78
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	ee e4       	ldi	r30, 0x4E	; 78
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	81 60       	ori	r24, 0x01	; 1
    2586:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    2588:	ae e4       	ldi	r26, 0x4E	; 78
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	ee e4       	ldi	r30, 0x4E	; 78
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	8d 7f       	andi	r24, 0xFD	; 253
    2594:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2596:	ae e4       	ldi	r26, 0x4E	; 78
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	ee e4       	ldi	r30, 0x4E	; 78
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	8b 7f       	andi	r24, 0xFB	; 251
    25a2:	8c 93       	st	X, r24
    25a4:	92 c3       	rjmp	.+1828   	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    25a6:	ae e4       	ldi	r26, 0x4E	; 78
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	ee e4       	ldi	r30, 0x4E	; 78
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	8e 7f       	andi	r24, 0xFE	; 254
    25b2:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    25b4:	ae e4       	ldi	r26, 0x4E	; 78
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	ee e4       	ldi	r30, 0x4E	; 78
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	82 60       	ori	r24, 0x02	; 2
    25c0:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    25c2:	ae e4       	ldi	r26, 0x4E	; 78
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	ee e4       	ldi	r30, 0x4E	; 78
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	8b 7f       	andi	r24, 0xFB	; 251
    25ce:	8c 93       	st	X, r24
    25d0:	7c c3       	rjmp	.+1784   	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    25d2:	ae e4       	ldi	r26, 0x4E	; 78
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	ee e4       	ldi	r30, 0x4E	; 78
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	81 60       	ori	r24, 0x01	; 1
    25de:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    25e0:	ae e4       	ldi	r26, 0x4E	; 78
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	ee e4       	ldi	r30, 0x4E	; 78
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	82 60       	ori	r24, 0x02	; 2
    25ec:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    25ee:	ae e4       	ldi	r26, 0x4E	; 78
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	ee e4       	ldi	r30, 0x4E	; 78
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	8b 7f       	andi	r24, 0xFB	; 251
    25fa:	8c 93       	st	X, r24
    25fc:	66 c3       	rjmp	.+1740   	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    25fe:	ae e4       	ldi	r26, 0x4E	; 78
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	ee e4       	ldi	r30, 0x4E	; 78
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	8e 7f       	andi	r24, 0xFE	; 254
    260a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    260c:	ae e4       	ldi	r26, 0x4E	; 78
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	ee e4       	ldi	r30, 0x4E	; 78
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	8d 7f       	andi	r24, 0xFD	; 253
    2618:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    261a:	ae e4       	ldi	r26, 0x4E	; 78
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	ee e4       	ldi	r30, 0x4E	; 78
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	84 60       	ori	r24, 0x04	; 4
    2626:	8c 93       	st	X, r24
    2628:	50 c3       	rjmp	.+1696   	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    262a:	ae e4       	ldi	r26, 0x4E	; 78
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	ee e4       	ldi	r30, 0x4E	; 78
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	81 60       	ori	r24, 0x01	; 1
    2636:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    2638:	ae e4       	ldi	r26, 0x4E	; 78
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	ee e4       	ldi	r30, 0x4E	; 78
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	8d 7f       	andi	r24, 0xFD	; 253
    2644:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2646:	ae e4       	ldi	r26, 0x4E	; 78
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	ee e4       	ldi	r30, 0x4E	; 78
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	84 60       	ori	r24, 0x04	; 4
    2652:	8c 93       	st	X, r24
    2654:	3a c3       	rjmp	.+1652   	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2656:	ae e4       	ldi	r26, 0x4E	; 78
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	ee e4       	ldi	r30, 0x4E	; 78
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	8e 7f       	andi	r24, 0xFE	; 254
    2662:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2664:	ae e4       	ldi	r26, 0x4E	; 78
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	ee e4       	ldi	r30, 0x4E	; 78
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	82 60       	ori	r24, 0x02	; 2
    2670:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2672:	ae e4       	ldi	r26, 0x4E	; 78
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	ee e4       	ldi	r30, 0x4E	; 78
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	84 60       	ori	r24, 0x04	; 4
    267e:	8c 93       	st	X, r24
    2680:	24 c3       	rjmp	.+1608   	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2682:	ae e4       	ldi	r26, 0x4E	; 78
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	ee e4       	ldi	r30, 0x4E	; 78
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	81 60       	ori	r24, 0x01	; 1
    268e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2690:	ae e4       	ldi	r26, 0x4E	; 78
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	ee e4       	ldi	r30, 0x4E	; 78
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	82 60       	ori	r24, 0x02	; 2
    269c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    269e:	ae e4       	ldi	r26, 0x4E	; 78
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	ee e4       	ldi	r30, 0x4E	; 78
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	84 60       	ori	r24, 0x04	; 4
    26aa:	8c 93       	st	X, r24
    26ac:	0e c3       	rjmp	.+1564   	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    26ae:	19 82       	std	Y+1, r1	; 0x01
    26b0:	0c c3       	rjmp	.+1560   	; 0x2cca <Gpt_Init+0xca0>
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    26b2:	ea 81       	ldd	r30, Y+2	; 0x02
    26b4:	fb 81       	ldd	r31, Y+3	; 0x03
    26b6:	81 81       	ldd	r24, Z+1	; 0x01
    26b8:	88 23       	and	r24, r24
    26ba:	e9 f4       	brne	.+58     	; 0x26f6 <Gpt_Init+0x6cc>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    26bc:	af e4       	ldi	r26, 0x4F	; 79
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	ef e4       	ldi	r30, 0x4F	; 79
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	8e 7f       	andi	r24, 0xFE	; 254
    26c8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    26ca:	af e4       	ldi	r26, 0x4F	; 79
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	ef e4       	ldi	r30, 0x4F	; 79
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	80 81       	ld	r24, Z
    26d4:	8d 7f       	andi	r24, 0xFD	; 253
    26d6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM12);
    26d8:	ae e4       	ldi	r26, 0x4E	; 78
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	ee e4       	ldi	r30, 0x4E	; 78
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	87 7f       	andi	r24, 0xF7	; 247
    26e4:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    26e6:	ae e4       	ldi	r26, 0x4E	; 78
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	ee e4       	ldi	r30, 0x4E	; 78
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 81       	ld	r24, Z
    26f0:	8f 7e       	andi	r24, 0xEF	; 239
    26f2:	8c 93       	st	X, r24
    26f4:	23 c0       	rjmp	.+70     	; 0x273c <Gpt_Init+0x712>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    26f6:	ea 81       	ldd	r30, Y+2	; 0x02
    26f8:	fb 81       	ldd	r31, Y+3	; 0x03
    26fa:	81 81       	ldd	r24, Z+1	; 0x01
    26fc:	81 30       	cpi	r24, 0x01	; 1
    26fe:	e9 f4       	brne	.+58     	; 0x273a <Gpt_Init+0x710>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2700:	af e4       	ldi	r26, 0x4F	; 79
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	ef e4       	ldi	r30, 0x4F	; 79
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	8e 7f       	andi	r24, 0xFE	; 254
    270c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    270e:	af e4       	ldi	r26, 0x4F	; 79
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	ef e4       	ldi	r30, 0x4F	; 79
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	8d 7f       	andi	r24, 0xFD	; 253
    271a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    271c:	ae e4       	ldi	r26, 0x4E	; 78
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	ee e4       	ldi	r30, 0x4E	; 78
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	88 60       	ori	r24, 0x08	; 8
    2728:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    272a:	ae e4       	ldi	r26, 0x4E	; 78
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	ee e4       	ldi	r30, 0x4E	; 78
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	8f 7e       	andi	r24, 0xEF	; 239
    2736:	8c 93       	st	X, r24
    2738:	01 c0       	rjmp	.+2      	; 0x273c <Gpt_Init+0x712>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    273a:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    273c:	ea 81       	ldd	r30, Y+2	; 0x02
    273e:	fb 81       	ldd	r31, Y+3	; 0x03
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	28 2f       	mov	r18, r24
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	3b 87       	std	Y+11, r19	; 0x0b
    2748:	2a 87       	std	Y+10, r18	; 0x0a
    274a:	8a 85       	ldd	r24, Y+10	; 0x0a
    274c:	9b 85       	ldd	r25, Y+11	; 0x0b
    274e:	81 30       	cpi	r24, 0x01	; 1
    2750:	91 05       	cpc	r25, r1
    2752:	21 f1       	breq	.+72     	; 0x279c <Gpt_Init+0x772>
    2754:	2a 85       	ldd	r18, Y+10	; 0x0a
    2756:	3b 85       	ldd	r19, Y+11	; 0x0b
    2758:	22 30       	cpi	r18, 0x02	; 2
    275a:	31 05       	cpc	r19, r1
    275c:	2c f4       	brge	.+10     	; 0x2768 <Gpt_Init+0x73e>
    275e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2760:	9b 85       	ldd	r25, Y+11	; 0x0b
    2762:	00 97       	sbiw	r24, 0x00	; 0
    2764:	61 f0       	breq	.+24     	; 0x277e <Gpt_Init+0x754>
    2766:	47 c0       	rjmp	.+142    	; 0x27f6 <Gpt_Init+0x7cc>
    2768:	2a 85       	ldd	r18, Y+10	; 0x0a
    276a:	3b 85       	ldd	r19, Y+11	; 0x0b
    276c:	22 30       	cpi	r18, 0x02	; 2
    276e:	31 05       	cpc	r19, r1
    2770:	21 f1       	breq	.+72     	; 0x27ba <Gpt_Init+0x790>
    2772:	8a 85       	ldd	r24, Y+10	; 0x0a
    2774:	9b 85       	ldd	r25, Y+11	; 0x0b
    2776:	83 30       	cpi	r24, 0x03	; 3
    2778:	91 05       	cpc	r25, r1
    277a:	71 f1       	breq	.+92     	; 0x27d8 <Gpt_Init+0x7ae>
    277c:	3c c0       	rjmp	.+120    	; 0x27f6 <Gpt_Init+0x7cc>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    277e:	af e4       	ldi	r26, 0x4F	; 79
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	ef e4       	ldi	r30, 0x4F	; 79
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	8f 7e       	andi	r24, 0xEF	; 239
    278a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    278c:	af e4       	ldi	r26, 0x4F	; 79
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	ef e4       	ldi	r30, 0x4F	; 79
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	8f 7d       	andi	r24, 0xDF	; 223
    2798:	8c 93       	st	X, r24
    279a:	2e c0       	rjmp	.+92     	; 0x27f8 <Gpt_Init+0x7ce>
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    279c:	af e4       	ldi	r26, 0x4F	; 79
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	ef e4       	ldi	r30, 0x4F	; 79
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	80 81       	ld	r24, Z
    27a6:	80 61       	ori	r24, 0x10	; 16
    27a8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    27aa:	af e4       	ldi	r26, 0x4F	; 79
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	ef e4       	ldi	r30, 0x4F	; 79
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	8f 7d       	andi	r24, 0xDF	; 223
    27b6:	8c 93       	st	X, r24
    27b8:	1f c0       	rjmp	.+62     	; 0x27f8 <Gpt_Init+0x7ce>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    27ba:	af e4       	ldi	r26, 0x4F	; 79
    27bc:	b0 e0       	ldi	r27, 0x00	; 0
    27be:	ef e4       	ldi	r30, 0x4F	; 79
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	80 61       	ori	r24, 0x10	; 16
    27c6:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    27c8:	af e4       	ldi	r26, 0x4F	; 79
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	ef e4       	ldi	r30, 0x4F	; 79
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	80 62       	ori	r24, 0x20	; 32
    27d4:	8c 93       	st	X, r24
    27d6:	10 c0       	rjmp	.+32     	; 0x27f8 <Gpt_Init+0x7ce>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    27d8:	af e4       	ldi	r26, 0x4F	; 79
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	ef e4       	ldi	r30, 0x4F	; 79
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	80 81       	ld	r24, Z
    27e2:	8f 7e       	andi	r24, 0xEF	; 239
    27e4:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    27e6:	af e4       	ldi	r26, 0x4F	; 79
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	ef e4       	ldi	r30, 0x4F	; 79
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	80 62       	ori	r24, 0x20	; 32
    27f2:	8c 93       	st	X, r24
    27f4:	01 c0       	rjmp	.+2      	; 0x27f8 <Gpt_Init+0x7ce>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    27f6:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    27f8:	ea 81       	ldd	r30, Y+2	; 0x02
    27fa:	fb 81       	ldd	r31, Y+3	; 0x03
    27fc:	83 81       	ldd	r24, Z+3	; 0x03
    27fe:	28 2f       	mov	r18, r24
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	39 87       	std	Y+9, r19	; 0x09
    2804:	28 87       	std	Y+8, r18	; 0x08
    2806:	88 85       	ldd	r24, Y+8	; 0x08
    2808:	99 85       	ldd	r25, Y+9	; 0x09
    280a:	84 30       	cpi	r24, 0x04	; 4
    280c:	91 05       	cpc	r25, r1
    280e:	09 f4       	brne	.+2      	; 0x2812 <Gpt_Init+0x7e8>
    2810:	77 c0       	rjmp	.+238    	; 0x2900 <Gpt_Init+0x8d6>
    2812:	28 85       	ldd	r18, Y+8	; 0x08
    2814:	39 85       	ldd	r19, Y+9	; 0x09
    2816:	25 30       	cpi	r18, 0x05	; 5
    2818:	31 05       	cpc	r19, r1
    281a:	8c f4       	brge	.+34     	; 0x283e <Gpt_Init+0x814>
    281c:	88 85       	ldd	r24, Y+8	; 0x08
    281e:	99 85       	ldd	r25, Y+9	; 0x09
    2820:	81 30       	cpi	r24, 0x01	; 1
    2822:	91 05       	cpc	r25, r1
    2824:	09 f4       	brne	.+2      	; 0x2828 <Gpt_Init+0x7fe>
    2826:	40 c0       	rjmp	.+128    	; 0x28a8 <Gpt_Init+0x87e>
    2828:	28 85       	ldd	r18, Y+8	; 0x08
    282a:	39 85       	ldd	r19, Y+9	; 0x09
    282c:	22 30       	cpi	r18, 0x02	; 2
    282e:	31 05       	cpc	r19, r1
    2830:	09 f4       	brne	.+2      	; 0x2834 <Gpt_Init+0x80a>
    2832:	50 c0       	rjmp	.+160    	; 0x28d4 <Gpt_Init+0x8aa>
    2834:	88 85       	ldd	r24, Y+8	; 0x08
    2836:	99 85       	ldd	r25, Y+9	; 0x09
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	01 f1       	breq	.+64     	; 0x287c <Gpt_Init+0x852>
    283c:	cf c0       	rjmp	.+414    	; 0x29dc <Gpt_Init+0x9b2>
    283e:	28 85       	ldd	r18, Y+8	; 0x08
    2840:	39 85       	ldd	r19, Y+9	; 0x09
    2842:	27 30       	cpi	r18, 0x07	; 7
    2844:	31 05       	cpc	r19, r1
    2846:	09 f4       	brne	.+2      	; 0x284a <Gpt_Init+0x820>
    2848:	87 c0       	rjmp	.+270    	; 0x2958 <Gpt_Init+0x92e>
    284a:	88 85       	ldd	r24, Y+8	; 0x08
    284c:	99 85       	ldd	r25, Y+9	; 0x09
    284e:	88 30       	cpi	r24, 0x08	; 8
    2850:	91 05       	cpc	r25, r1
    2852:	3c f4       	brge	.+14     	; 0x2862 <Gpt_Init+0x838>
    2854:	28 85       	ldd	r18, Y+8	; 0x08
    2856:	39 85       	ldd	r19, Y+9	; 0x09
    2858:	26 30       	cpi	r18, 0x06	; 6
    285a:	31 05       	cpc	r19, r1
    285c:	09 f4       	brne	.+2      	; 0x2860 <Gpt_Init+0x836>
    285e:	66 c0       	rjmp	.+204    	; 0x292c <Gpt_Init+0x902>
    2860:	bd c0       	rjmp	.+378    	; 0x29dc <Gpt_Init+0x9b2>
    2862:	88 85       	ldd	r24, Y+8	; 0x08
    2864:	99 85       	ldd	r25, Y+9	; 0x09
    2866:	88 30       	cpi	r24, 0x08	; 8
    2868:	91 05       	cpc	r25, r1
    286a:	09 f4       	brne	.+2      	; 0x286e <Gpt_Init+0x844>
    286c:	8b c0       	rjmp	.+278    	; 0x2984 <Gpt_Init+0x95a>
    286e:	28 85       	ldd	r18, Y+8	; 0x08
    2870:	39 85       	ldd	r19, Y+9	; 0x09
    2872:	29 30       	cpi	r18, 0x09	; 9
    2874:	31 05       	cpc	r19, r1
    2876:	09 f4       	brne	.+2      	; 0x287a <Gpt_Init+0x850>
    2878:	9b c0       	rjmp	.+310    	; 0x29b0 <Gpt_Init+0x986>
    287a:	b0 c0       	rjmp	.+352    	; 0x29dc <Gpt_Init+0x9b2>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    287c:	ae e4       	ldi	r26, 0x4E	; 78
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	ee e4       	ldi	r30, 0x4E	; 78
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	8e 7f       	andi	r24, 0xFE	; 254
    2888:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    288a:	ae e4       	ldi	r26, 0x4E	; 78
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	ee e4       	ldi	r30, 0x4E	; 78
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	8d 7f       	andi	r24, 0xFD	; 253
    2896:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2898:	ae e4       	ldi	r26, 0x4E	; 78
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	ee e4       	ldi	r30, 0x4E	; 78
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	8b 7f       	andi	r24, 0xFB	; 251
    28a4:	8c 93       	st	X, r24
    28a6:	11 c2       	rjmp	.+1058   	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    28a8:	ae e4       	ldi	r26, 0x4E	; 78
    28aa:	b0 e0       	ldi	r27, 0x00	; 0
    28ac:	ee e4       	ldi	r30, 0x4E	; 78
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
    28b2:	81 60       	ori	r24, 0x01	; 1
    28b4:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    28b6:	ae e4       	ldi	r26, 0x4E	; 78
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	ee e4       	ldi	r30, 0x4E	; 78
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	8d 7f       	andi	r24, 0xFD	; 253
    28c2:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    28c4:	ae e4       	ldi	r26, 0x4E	; 78
    28c6:	b0 e0       	ldi	r27, 0x00	; 0
    28c8:	ee e4       	ldi	r30, 0x4E	; 78
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	80 81       	ld	r24, Z
    28ce:	8b 7f       	andi	r24, 0xFB	; 251
    28d0:	8c 93       	st	X, r24
    28d2:	fb c1       	rjmp	.+1014   	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    28d4:	ae e4       	ldi	r26, 0x4E	; 78
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	ee e4       	ldi	r30, 0x4E	; 78
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	8e 7f       	andi	r24, 0xFE	; 254
    28e0:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    28e2:	ae e4       	ldi	r26, 0x4E	; 78
    28e4:	b0 e0       	ldi	r27, 0x00	; 0
    28e6:	ee e4       	ldi	r30, 0x4E	; 78
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	80 81       	ld	r24, Z
    28ec:	82 60       	ori	r24, 0x02	; 2
    28ee:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    28f0:	ae e4       	ldi	r26, 0x4E	; 78
    28f2:	b0 e0       	ldi	r27, 0x00	; 0
    28f4:	ee e4       	ldi	r30, 0x4E	; 78
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	80 81       	ld	r24, Z
    28fa:	8b 7f       	andi	r24, 0xFB	; 251
    28fc:	8c 93       	st	X, r24
    28fe:	e5 c1       	rjmp	.+970    	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2900:	ae e4       	ldi	r26, 0x4E	; 78
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	ee e4       	ldi	r30, 0x4E	; 78
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	81 60       	ori	r24, 0x01	; 1
    290c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    290e:	ae e4       	ldi	r26, 0x4E	; 78
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	ee e4       	ldi	r30, 0x4E	; 78
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	82 60       	ori	r24, 0x02	; 2
    291a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    291c:	ae e4       	ldi	r26, 0x4E	; 78
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	ee e4       	ldi	r30, 0x4E	; 78
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	8b 7f       	andi	r24, 0xFB	; 251
    2928:	8c 93       	st	X, r24
    292a:	cf c1       	rjmp	.+926    	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    292c:	ae e4       	ldi	r26, 0x4E	; 78
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	ee e4       	ldi	r30, 0x4E	; 78
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	8e 7f       	andi	r24, 0xFE	; 254
    2938:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    293a:	ae e4       	ldi	r26, 0x4E	; 78
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	ee e4       	ldi	r30, 0x4E	; 78
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	8d 7f       	andi	r24, 0xFD	; 253
    2946:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2948:	ae e4       	ldi	r26, 0x4E	; 78
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	ee e4       	ldi	r30, 0x4E	; 78
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	84 60       	ori	r24, 0x04	; 4
    2954:	8c 93       	st	X, r24
    2956:	b9 c1       	rjmp	.+882    	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2958:	ae e4       	ldi	r26, 0x4E	; 78
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	ee e4       	ldi	r30, 0x4E	; 78
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	81 60       	ori	r24, 0x01	; 1
    2964:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    2966:	ae e4       	ldi	r26, 0x4E	; 78
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	ee e4       	ldi	r30, 0x4E	; 78
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
    2970:	8d 7f       	andi	r24, 0xFD	; 253
    2972:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2974:	ae e4       	ldi	r26, 0x4E	; 78
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	ee e4       	ldi	r30, 0x4E	; 78
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	84 60       	ori	r24, 0x04	; 4
    2980:	8c 93       	st	X, r24
    2982:	a3 c1       	rjmp	.+838    	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2984:	ae e4       	ldi	r26, 0x4E	; 78
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	ee e4       	ldi	r30, 0x4E	; 78
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	80 81       	ld	r24, Z
    298e:	8e 7f       	andi	r24, 0xFE	; 254
    2990:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2992:	ae e4       	ldi	r26, 0x4E	; 78
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	ee e4       	ldi	r30, 0x4E	; 78
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	82 60       	ori	r24, 0x02	; 2
    299e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    29a0:	ae e4       	ldi	r26, 0x4E	; 78
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	ee e4       	ldi	r30, 0x4E	; 78
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	84 60       	ori	r24, 0x04	; 4
    29ac:	8c 93       	st	X, r24
    29ae:	8d c1       	rjmp	.+794    	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    29b0:	ae e4       	ldi	r26, 0x4E	; 78
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	ee e4       	ldi	r30, 0x4E	; 78
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	81 60       	ori	r24, 0x01	; 1
    29bc:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    29be:	ae e4       	ldi	r26, 0x4E	; 78
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
    29c2:	ee e4       	ldi	r30, 0x4E	; 78
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	80 81       	ld	r24, Z
    29c8:	82 60       	ori	r24, 0x02	; 2
    29ca:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    29cc:	ae e4       	ldi	r26, 0x4E	; 78
    29ce:	b0 e0       	ldi	r27, 0x00	; 0
    29d0:	ee e4       	ldi	r30, 0x4E	; 78
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	84 60       	ori	r24, 0x04	; 4
    29d8:	8c 93       	st	X, r24
    29da:	77 c1       	rjmp	.+750    	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    29dc:	19 82       	std	Y+1, r1	; 0x01
    29de:	75 c1       	rjmp	.+746    	; 0x2cca <Gpt_Init+0xca0>
        }
        break;

    case GPT_CHANNEL_TIMER2:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    29e0:	ea 81       	ldd	r30, Y+2	; 0x02
    29e2:	fb 81       	ldd	r31, Y+3	; 0x03
    29e4:	81 81       	ldd	r24, Z+1	; 0x01
    29e6:	88 23       	and	r24, r24
    29e8:	79 f4       	brne	.+30     	; 0x2a08 <Gpt_Init+0x9de>
        {
            CLR_BIT(TCCR2,TCCR2_COM20);
    29ea:	a5 e4       	ldi	r26, 0x45	; 69
    29ec:	b0 e0       	ldi	r27, 0x00	; 0
    29ee:	e5 e4       	ldi	r30, 0x45	; 69
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	80 81       	ld	r24, Z
    29f4:	8f 7e       	andi	r24, 0xEF	; 239
    29f6:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_COM21);
    29f8:	a5 e4       	ldi	r26, 0x45	; 69
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	e5 e4       	ldi	r30, 0x45	; 69
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	8f 7d       	andi	r24, 0xDF	; 223
    2a04:	8c 93       	st	X, r24
    2a06:	15 c0       	rjmp	.+42     	; 0x2a32 <Gpt_Init+0xa08>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    2a08:	ea 81       	ldd	r30, Y+2	; 0x02
    2a0a:	fb 81       	ldd	r31, Y+3	; 0x03
    2a0c:	81 81       	ldd	r24, Z+1	; 0x01
    2a0e:	81 30       	cpi	r24, 0x01	; 1
    2a10:	79 f4       	brne	.+30     	; 0x2a30 <Gpt_Init+0xa06>
        {
            CLR_BIT(TCCR2,TCCR2_COM20);
    2a12:	a5 e4       	ldi	r26, 0x45	; 69
    2a14:	b0 e0       	ldi	r27, 0x00	; 0
    2a16:	e5 e4       	ldi	r30, 0x45	; 69
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	8f 7e       	andi	r24, 0xEF	; 239
    2a1e:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_COM21);
    2a20:	a5 e4       	ldi	r26, 0x45	; 69
    2a22:	b0 e0       	ldi	r27, 0x00	; 0
    2a24:	e5 e4       	ldi	r30, 0x45	; 69
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 81       	ld	r24, Z
    2a2a:	80 62       	ori	r24, 0x20	; 32
    2a2c:	8c 93       	st	X, r24
    2a2e:	01 c0       	rjmp	.+2      	; 0x2a32 <Gpt_Init+0xa08>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    2a30:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    2a32:	ea 81       	ldd	r30, Y+2	; 0x02
    2a34:	fb 81       	ldd	r31, Y+3	; 0x03
    2a36:	82 81       	ldd	r24, Z+2	; 0x02
    2a38:	28 2f       	mov	r18, r24
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	3f 83       	std	Y+7, r19	; 0x07
    2a3e:	2e 83       	std	Y+6, r18	; 0x06
    2a40:	8e 81       	ldd	r24, Y+6	; 0x06
    2a42:	9f 81       	ldd	r25, Y+7	; 0x07
    2a44:	81 30       	cpi	r24, 0x01	; 1
    2a46:	91 05       	cpc	r25, r1
    2a48:	21 f1       	breq	.+72     	; 0x2a92 <Gpt_Init+0xa68>
    2a4a:	2e 81       	ldd	r18, Y+6	; 0x06
    2a4c:	3f 81       	ldd	r19, Y+7	; 0x07
    2a4e:	22 30       	cpi	r18, 0x02	; 2
    2a50:	31 05       	cpc	r19, r1
    2a52:	2c f4       	brge	.+10     	; 0x2a5e <Gpt_Init+0xa34>
    2a54:	8e 81       	ldd	r24, Y+6	; 0x06
    2a56:	9f 81       	ldd	r25, Y+7	; 0x07
    2a58:	00 97       	sbiw	r24, 0x00	; 0
    2a5a:	61 f0       	breq	.+24     	; 0x2a74 <Gpt_Init+0xa4a>
    2a5c:	47 c0       	rjmp	.+142    	; 0x2aec <Gpt_Init+0xac2>
    2a5e:	2e 81       	ldd	r18, Y+6	; 0x06
    2a60:	3f 81       	ldd	r19, Y+7	; 0x07
    2a62:	22 30       	cpi	r18, 0x02	; 2
    2a64:	31 05       	cpc	r19, r1
    2a66:	21 f1       	breq	.+72     	; 0x2ab0 <Gpt_Init+0xa86>
    2a68:	8e 81       	ldd	r24, Y+6	; 0x06
    2a6a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a6c:	83 30       	cpi	r24, 0x03	; 3
    2a6e:	91 05       	cpc	r25, r1
    2a70:	71 f1       	breq	.+92     	; 0x2ace <Gpt_Init+0xaa4>
    2a72:	3c c0       	rjmp	.+120    	; 0x2aec <Gpt_Init+0xac2>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR2,TCCR2_COM20);
    2a74:	a5 e4       	ldi	r26, 0x45	; 69
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	e5 e4       	ldi	r30, 0x45	; 69
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	80 81       	ld	r24, Z
    2a7e:	8f 7e       	andi	r24, 0xEF	; 239
    2a80:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_COM21);
    2a82:	a5 e4       	ldi	r26, 0x45	; 69
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	e5 e4       	ldi	r30, 0x45	; 69
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	8f 7d       	andi	r24, 0xDF	; 223
    2a8e:	8c 93       	st	X, r24
    2a90:	2e c0       	rjmp	.+92     	; 0x2aee <Gpt_Init+0xac4>
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR2,TCCR2_COM20);
    2a92:	a5 e4       	ldi	r26, 0x45	; 69
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	e5 e4       	ldi	r30, 0x45	; 69
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	80 61       	ori	r24, 0x10	; 16
    2a9e:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_COM21);
    2aa0:	a5 e4       	ldi	r26, 0x45	; 69
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e5 e4       	ldi	r30, 0x45	; 69
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	8f 7d       	andi	r24, 0xDF	; 223
    2aac:	8c 93       	st	X, r24
    2aae:	1f c0       	rjmp	.+62     	; 0x2aee <Gpt_Init+0xac4>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR2,TCCR2_COM20);
    2ab0:	a5 e4       	ldi	r26, 0x45	; 69
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	e5 e4       	ldi	r30, 0x45	; 69
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	80 81       	ld	r24, Z
    2aba:	80 61       	ori	r24, 0x10	; 16
    2abc:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_COM21);
    2abe:	a5 e4       	ldi	r26, 0x45	; 69
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	e5 e4       	ldi	r30, 0x45	; 69
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	80 62       	ori	r24, 0x20	; 32
    2aca:	8c 93       	st	X, r24
    2acc:	10 c0       	rjmp	.+32     	; 0x2aee <Gpt_Init+0xac4>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR2,TCCR2_COM20);
    2ace:	a5 e4       	ldi	r26, 0x45	; 69
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	e5 e4       	ldi	r30, 0x45	; 69
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	8f 7e       	andi	r24, 0xEF	; 239
    2ada:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_COM21);
    2adc:	a5 e4       	ldi	r26, 0x45	; 69
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	e5 e4       	ldi	r30, 0x45	; 69
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	80 62       	ori	r24, 0x20	; 32
    2ae8:	8c 93       	st	X, r24
    2aea:	01 c0       	rjmp	.+2      	; 0x2aee <Gpt_Init+0xac4>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2aec:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    2aee:	ea 81       	ldd	r30, Y+2	; 0x02
    2af0:	fb 81       	ldd	r31, Y+3	; 0x03
    2af2:	83 81       	ldd	r24, Z+3	; 0x03
    2af4:	28 2f       	mov	r18, r24
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	3d 83       	std	Y+5, r19	; 0x05
    2afa:	2c 83       	std	Y+4, r18	; 0x04
    2afc:	8c 81       	ldd	r24, Y+4	; 0x04
    2afe:	9d 81       	ldd	r25, Y+5	; 0x05
    2b00:	83 30       	cpi	r24, 0x03	; 3
    2b02:	91 05       	cpc	r25, r1
    2b04:	09 f4       	brne	.+2      	; 0x2b08 <Gpt_Init+0xade>
    2b06:	70 c0       	rjmp	.+224    	; 0x2be8 <Gpt_Init+0xbbe>
    2b08:	2c 81       	ldd	r18, Y+4	; 0x04
    2b0a:	3d 81       	ldd	r19, Y+5	; 0x05
    2b0c:	24 30       	cpi	r18, 0x04	; 4
    2b0e:	31 05       	cpc	r19, r1
    2b10:	84 f4       	brge	.+32     	; 0x2b32 <Gpt_Init+0xb08>
    2b12:	8c 81       	ldd	r24, Y+4	; 0x04
    2b14:	9d 81       	ldd	r25, Y+5	; 0x05
    2b16:	81 30       	cpi	r24, 0x01	; 1
    2b18:	91 05       	cpc	r25, r1
    2b1a:	d1 f1       	breq	.+116    	; 0x2b90 <Gpt_Init+0xb66>
    2b1c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b1e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b20:	22 30       	cpi	r18, 0x02	; 2
    2b22:	31 05       	cpc	r19, r1
    2b24:	0c f0       	brlt	.+2      	; 0x2b28 <Gpt_Init+0xafe>
    2b26:	4a c0       	rjmp	.+148    	; 0x2bbc <Gpt_Init+0xb92>
    2b28:	8c 81       	ldd	r24, Y+4	; 0x04
    2b2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b2c:	00 97       	sbiw	r24, 0x00	; 0
    2b2e:	d1 f0       	breq	.+52     	; 0x2b64 <Gpt_Init+0xb3a>
    2b30:	c9 c0       	rjmp	.+402    	; 0x2cc4 <Gpt_Init+0xc9a>
    2b32:	2c 81       	ldd	r18, Y+4	; 0x04
    2b34:	3d 81       	ldd	r19, Y+5	; 0x05
    2b36:	25 30       	cpi	r18, 0x05	; 5
    2b38:	31 05       	cpc	r19, r1
    2b3a:	09 f4       	brne	.+2      	; 0x2b3e <Gpt_Init+0xb14>
    2b3c:	81 c0       	rjmp	.+258    	; 0x2c40 <Gpt_Init+0xc16>
    2b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b40:	9d 81       	ldd	r25, Y+5	; 0x05
    2b42:	85 30       	cpi	r24, 0x05	; 5
    2b44:	91 05       	cpc	r25, r1
    2b46:	0c f4       	brge	.+2      	; 0x2b4a <Gpt_Init+0xb20>
    2b48:	65 c0       	rjmp	.+202    	; 0x2c14 <Gpt_Init+0xbea>
    2b4a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b4c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b4e:	26 30       	cpi	r18, 0x06	; 6
    2b50:	31 05       	cpc	r19, r1
    2b52:	09 f4       	brne	.+2      	; 0x2b56 <Gpt_Init+0xb2c>
    2b54:	8b c0       	rjmp	.+278    	; 0x2c6c <Gpt_Init+0xc42>
    2b56:	8c 81       	ldd	r24, Y+4	; 0x04
    2b58:	9d 81       	ldd	r25, Y+5	; 0x05
    2b5a:	87 30       	cpi	r24, 0x07	; 7
    2b5c:	91 05       	cpc	r25, r1
    2b5e:	09 f4       	brne	.+2      	; 0x2b62 <Gpt_Init+0xb38>
    2b60:	9b c0       	rjmp	.+310    	; 0x2c98 <Gpt_Init+0xc6e>
    2b62:	b0 c0       	rjmp	.+352    	; 0x2cc4 <Gpt_Init+0xc9a>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR2,TCCR2_CS20);
    2b64:	a5 e4       	ldi	r26, 0x45	; 69
    2b66:	b0 e0       	ldi	r27, 0x00	; 0
    2b68:	e5 e4       	ldi	r30, 0x45	; 69
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
    2b6e:	8e 7f       	andi	r24, 0xFE	; 254
    2b70:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS21);
    2b72:	a5 e4       	ldi	r26, 0x45	; 69
    2b74:	b0 e0       	ldi	r27, 0x00	; 0
    2b76:	e5 e4       	ldi	r30, 0x45	; 69
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	80 81       	ld	r24, Z
    2b7c:	8d 7f       	andi	r24, 0xFD	; 253
    2b7e:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS22);
    2b80:	a5 e4       	ldi	r26, 0x45	; 69
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	e5 e4       	ldi	r30, 0x45	; 69
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	80 81       	ld	r24, Z
    2b8a:	8b 7f       	andi	r24, 0xFB	; 251
    2b8c:	8c 93       	st	X, r24
    2b8e:	9d c0       	rjmp	.+314    	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR2,TCCR2_CS20);
    2b90:	a5 e4       	ldi	r26, 0x45	; 69
    2b92:	b0 e0       	ldi	r27, 0x00	; 0
    2b94:	e5 e4       	ldi	r30, 0x45	; 69
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	80 81       	ld	r24, Z
    2b9a:	81 60       	ori	r24, 0x01	; 1
    2b9c:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS21);
    2b9e:	a5 e4       	ldi	r26, 0x45	; 69
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	e5 e4       	ldi	r30, 0x45	; 69
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	8d 7f       	andi	r24, 0xFD	; 253
    2baa:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS22);
    2bac:	a5 e4       	ldi	r26, 0x45	; 69
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	e5 e4       	ldi	r30, 0x45	; 69
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	8b 7f       	andi	r24, 0xFB	; 251
    2bb8:	8c 93       	st	X, r24
    2bba:	87 c0       	rjmp	.+270    	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR2,TCCR2_CS20);
    2bbc:	a5 e4       	ldi	r26, 0x45	; 69
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	e5 e4       	ldi	r30, 0x45	; 69
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	80 81       	ld	r24, Z
    2bc6:	8e 7f       	andi	r24, 0xFE	; 254
    2bc8:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS21);
    2bca:	a5 e4       	ldi	r26, 0x45	; 69
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	e5 e4       	ldi	r30, 0x45	; 69
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	82 60       	ori	r24, 0x02	; 2
    2bd6:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS22);
    2bd8:	a5 e4       	ldi	r26, 0x45	; 69
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	e5 e4       	ldi	r30, 0x45	; 69
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	80 81       	ld	r24, Z
    2be2:	8b 7f       	andi	r24, 0xFB	; 251
    2be4:	8c 93       	st	X, r24
    2be6:	71 c0       	rjmp	.+226    	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_32:
            SET_BIT(TCCR2,TCCR2_CS20);
    2be8:	a5 e4       	ldi	r26, 0x45	; 69
    2bea:	b0 e0       	ldi	r27, 0x00	; 0
    2bec:	e5 e4       	ldi	r30, 0x45	; 69
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	80 81       	ld	r24, Z
    2bf2:	81 60       	ori	r24, 0x01	; 1
    2bf4:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS21);
    2bf6:	a5 e4       	ldi	r26, 0x45	; 69
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	e5 e4       	ldi	r30, 0x45	; 69
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	82 60       	ori	r24, 0x02	; 2
    2c02:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS22);
    2c04:	a5 e4       	ldi	r26, 0x45	; 69
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	e5 e4       	ldi	r30, 0x45	; 69
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	8b 7f       	andi	r24, 0xFB	; 251
    2c10:	8c 93       	st	X, r24
    2c12:	5b c0       	rjmp	.+182    	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_64:
            CLR_BIT(TCCR2,TCCR2_CS20);
    2c14:	a5 e4       	ldi	r26, 0x45	; 69
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	e5 e4       	ldi	r30, 0x45	; 69
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	8e 7f       	andi	r24, 0xFE	; 254
    2c20:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS21);
    2c22:	a5 e4       	ldi	r26, 0x45	; 69
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	e5 e4       	ldi	r30, 0x45	; 69
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
    2c2c:	8d 7f       	andi	r24, 0xFD	; 253
    2c2e:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS22);
    2c30:	a5 e4       	ldi	r26, 0x45	; 69
    2c32:	b0 e0       	ldi	r27, 0x00	; 0
    2c34:	e5 e4       	ldi	r30, 0x45	; 69
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	80 81       	ld	r24, Z
    2c3a:	84 60       	ori	r24, 0x04	; 4
    2c3c:	8c 93       	st	X, r24
    2c3e:	45 c0       	rjmp	.+138    	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_128:
            SET_BIT(TCCR2,TCCR2_CS20);
    2c40:	a5 e4       	ldi	r26, 0x45	; 69
    2c42:	b0 e0       	ldi	r27, 0x00	; 0
    2c44:	e5 e4       	ldi	r30, 0x45	; 69
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	80 81       	ld	r24, Z
    2c4a:	81 60       	ori	r24, 0x01	; 1
    2c4c:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS21);
    2c4e:	a5 e4       	ldi	r26, 0x45	; 69
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	e5 e4       	ldi	r30, 0x45	; 69
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
    2c56:	80 81       	ld	r24, Z
    2c58:	8d 7f       	andi	r24, 0xFD	; 253
    2c5a:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS22);
    2c5c:	a5 e4       	ldi	r26, 0x45	; 69
    2c5e:	b0 e0       	ldi	r27, 0x00	; 0
    2c60:	e5 e4       	ldi	r30, 0x45	; 69
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	80 81       	ld	r24, Z
    2c66:	84 60       	ori	r24, 0x04	; 4
    2c68:	8c 93       	st	X, r24
    2c6a:	2f c0       	rjmp	.+94     	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR2,TCCR2_CS20);
    2c6c:	a5 e4       	ldi	r26, 0x45	; 69
    2c6e:	b0 e0       	ldi	r27, 0x00	; 0
    2c70:	e5 e4       	ldi	r30, 0x45	; 69
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	80 81       	ld	r24, Z
    2c76:	8e 7f       	andi	r24, 0xFE	; 254
    2c78:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS21);
    2c7a:	a5 e4       	ldi	r26, 0x45	; 69
    2c7c:	b0 e0       	ldi	r27, 0x00	; 0
    2c7e:	e5 e4       	ldi	r30, 0x45	; 69
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	80 81       	ld	r24, Z
    2c84:	82 60       	ori	r24, 0x02	; 2
    2c86:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS22);
    2c88:	a5 e4       	ldi	r26, 0x45	; 69
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	e5 e4       	ldi	r30, 0x45	; 69
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	84 60       	ori	r24, 0x04	; 4
    2c94:	8c 93       	st	X, r24
    2c96:	19 c0       	rjmp	.+50     	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR2,TCCR2_CS20);
    2c98:	a5 e4       	ldi	r26, 0x45	; 69
    2c9a:	b0 e0       	ldi	r27, 0x00	; 0
    2c9c:	e5 e4       	ldi	r30, 0x45	; 69
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	81 60       	ori	r24, 0x01	; 1
    2ca4:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS21);
    2ca6:	a5 e4       	ldi	r26, 0x45	; 69
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	e5 e4       	ldi	r30, 0x45	; 69
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	80 81       	ld	r24, Z
    2cb0:	82 60       	ori	r24, 0x02	; 2
    2cb2:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS22);
    2cb4:	a5 e4       	ldi	r26, 0x45	; 69
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	e5 e4       	ldi	r30, 0x45	; 69
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	84 60       	ori	r24, 0x04	; 4
    2cc0:	8c 93       	st	X, r24
    2cc2:	03 c0       	rjmp	.+6      	; 0x2cca <Gpt_Init+0xca0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2cc4:	19 82       	std	Y+1, r1	; 0x01
    2cc6:	01 c0       	rjmp	.+2      	; 0x2cca <Gpt_Init+0xca0>
            break;
        }
        break;

    default:
        returnValue = GPT_ERROR;
    2cc8:	19 82       	std	Y+1, r1	; 0x01
    }
    return returnValue;
    2cca:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ccc:	65 96       	adiw	r28, 0x15	; 21
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	cd bf       	out	0x3d, r28	; 61
    2cd8:	cf 91       	pop	r28
    2cda:	df 91       	pop	r29
    2cdc:	08 95       	ret

00002cde <Gpt_StartTimer>:

Gpt_ReturnType Gpt_StartTimer(Gpt_ChannelType channel, u16 value)
{
    2cde:	df 93       	push	r29
    2ce0:	cf 93       	push	r28
    2ce2:	00 d0       	rcall	.+0      	; 0x2ce4 <Gpt_StartTimer+0x6>
    2ce4:	00 d0       	rcall	.+0      	; 0x2ce6 <Gpt_StartTimer+0x8>
    2ce6:	00 d0       	rcall	.+0      	; 0x2ce8 <Gpt_StartTimer+0xa>
    2ce8:	cd b7       	in	r28, 0x3d	; 61
    2cea:	de b7       	in	r29, 0x3e	; 62
    2cec:	8a 83       	std	Y+2, r24	; 0x02
    2cee:	7c 83       	std	Y+4, r23	; 0x04
    2cf0:	6b 83       	std	Y+3, r22	; 0x03
    Gpt_ReturnType returnValue = GPT_OK;
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	89 83       	std	Y+1, r24	; 0x01
    switch (channel)
    2cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf8:	28 2f       	mov	r18, r24
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	3e 83       	std	Y+6, r19	; 0x06
    2cfe:	2d 83       	std	Y+5, r18	; 0x05
    2d00:	8d 81       	ldd	r24, Y+5	; 0x05
    2d02:	9e 81       	ldd	r25, Y+6	; 0x06
    2d04:	81 30       	cpi	r24, 0x01	; 1
    2d06:	91 05       	cpc	r25, r1
    2d08:	11 f1       	breq	.+68     	; 0x2d4e <Gpt_StartTimer+0x70>
    2d0a:	2d 81       	ldd	r18, Y+5	; 0x05
    2d0c:	3e 81       	ldd	r19, Y+6	; 0x06
    2d0e:	22 30       	cpi	r18, 0x02	; 2
    2d10:	31 05       	cpc	r19, r1
    2d12:	2c f4       	brge	.+10     	; 0x2d1e <Gpt_StartTimer+0x40>
    2d14:	8d 81       	ldd	r24, Y+5	; 0x05
    2d16:	9e 81       	ldd	r25, Y+6	; 0x06
    2d18:	00 97       	sbiw	r24, 0x00	; 0
    2d1a:	61 f0       	breq	.+24     	; 0x2d34 <Gpt_StartTimer+0x56>
    2d1c:	32 c0       	rjmp	.+100    	; 0x2d82 <Gpt_StartTimer+0xa4>
    2d1e:	2d 81       	ldd	r18, Y+5	; 0x05
    2d20:	3e 81       	ldd	r19, Y+6	; 0x06
    2d22:	22 30       	cpi	r18, 0x02	; 2
    2d24:	31 05       	cpc	r19, r1
    2d26:	d1 f0       	breq	.+52     	; 0x2d5c <Gpt_StartTimer+0x7e>
    2d28:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2c:	83 30       	cpi	r24, 0x03	; 3
    2d2e:	91 05       	cpc	r25, r1
    2d30:	e1 f0       	breq	.+56     	; 0x2d6a <Gpt_StartTimer+0x8c>
    2d32:	27 c0       	rjmp	.+78     	; 0x2d82 <Gpt_StartTimer+0xa4>
    {
    case GPT_CHANNEL_TIMER0:
        if (value < 256)
    2d34:	8b 81       	ldd	r24, Y+3	; 0x03
    2d36:	9c 81       	ldd	r25, Y+4	; 0x04
    2d38:	8f 3f       	cpi	r24, 0xFF	; 255
    2d3a:	91 05       	cpc	r25, r1
    2d3c:	09 f0       	breq	.+2      	; 0x2d40 <Gpt_StartTimer+0x62>
    2d3e:	28 f4       	brcc	.+10     	; 0x2d4a <Gpt_StartTimer+0x6c>
        {
            OCR0 = value;
    2d40:	ec e5       	ldi	r30, 0x5C	; 92
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	8b 81       	ldd	r24, Y+3	; 0x03
    2d46:	80 83       	st	Z, r24
    2d48:	1c c0       	rjmp	.+56     	; 0x2d82 <Gpt_StartTimer+0xa4>
        }
        else
        {
            returnValue = GPT_ERROR;
    2d4a:	19 82       	std	Y+1, r1	; 0x01
    2d4c:	1a c0       	rjmp	.+52     	; 0x2d82 <Gpt_StartTimer+0xa4>
        }
        break;
    case GPT_CHANNEL_TIMER1A:
        if (value < 65536)
        {
            OCR1A = value;
    2d4e:	ea e4       	ldi	r30, 0x4A	; 74
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	8b 81       	ldd	r24, Y+3	; 0x03
    2d54:	9c 81       	ldd	r25, Y+4	; 0x04
    2d56:	91 83       	std	Z+1, r25	; 0x01
    2d58:	80 83       	st	Z, r24
    2d5a:	13 c0       	rjmp	.+38     	; 0x2d82 <Gpt_StartTimer+0xa4>
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        if (value < 65536)
        {
            OCR1B = value;
    2d5c:	e8 e4       	ldi	r30, 0x48	; 72
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	8b 81       	ldd	r24, Y+3	; 0x03
    2d62:	9c 81       	ldd	r25, Y+4	; 0x04
    2d64:	91 83       	std	Z+1, r25	; 0x01
    2d66:	80 83       	st	Z, r24
    2d68:	0c c0       	rjmp	.+24     	; 0x2d82 <Gpt_StartTimer+0xa4>
            returnValue = GPT_ERROR;
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        if (value < 256)
    2d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6e:	8f 3f       	cpi	r24, 0xFF	; 255
    2d70:	91 05       	cpc	r25, r1
    2d72:	09 f0       	breq	.+2      	; 0x2d76 <Gpt_StartTimer+0x98>
    2d74:	28 f4       	brcc	.+10     	; 0x2d80 <Gpt_StartTimer+0xa2>
        {
            OCR2 = value;
    2d76:	e3 e4       	ldi	r30, 0x43	; 67
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7c:	80 83       	st	Z, r24
    2d7e:	01 c0       	rjmp	.+2      	; 0x2d82 <Gpt_StartTimer+0xa4>
        }
        else
        {
            returnValue = GPT_ERROR;
    2d80:	19 82       	std	Y+1, r1	; 0x01
        break;

    default:
        break;
    }
    return returnValue;
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d84:	26 96       	adiw	r28, 0x06	; 6
    2d86:	0f b6       	in	r0, 0x3f	; 63
    2d88:	f8 94       	cli
    2d8a:	de bf       	out	0x3e, r29	; 62
    2d8c:	0f be       	out	0x3f, r0	; 63
    2d8e:	cd bf       	out	0x3d, r28	; 61
    2d90:	cf 91       	pop	r28
    2d92:	df 91       	pop	r29
    2d94:	08 95       	ret

00002d96 <Gpt_GetTimeElapsed>:

u16 Gpt_GetTimeElapsed(Gpt_ChannelType channel)
{
    2d96:	df 93       	push	r29
    2d98:	cf 93       	push	r28
    2d9a:	00 d0       	rcall	.+0      	; 0x2d9c <Gpt_GetTimeElapsed+0x6>
    2d9c:	00 d0       	rcall	.+0      	; 0x2d9e <Gpt_GetTimeElapsed+0x8>
    2d9e:	0f 92       	push	r0
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62
    2da4:	8b 83       	std	Y+3, r24	; 0x03
    u16 value = 0;
    2da6:	1a 82       	std	Y+2, r1	; 0x02
    2da8:	19 82       	std	Y+1, r1	; 0x01
    switch (channel)
    2daa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dac:	28 2f       	mov	r18, r24
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	3d 83       	std	Y+5, r19	; 0x05
    2db2:	2c 83       	std	Y+4, r18	; 0x04
    2db4:	8c 81       	ldd	r24, Y+4	; 0x04
    2db6:	9d 81       	ldd	r25, Y+5	; 0x05
    2db8:	81 30       	cpi	r24, 0x01	; 1
    2dba:	91 05       	cpc	r25, r1
    2dbc:	e9 f0       	breq	.+58     	; 0x2df8 <Gpt_GetTimeElapsed+0x62>
    2dbe:	2c 81       	ldd	r18, Y+4	; 0x04
    2dc0:	3d 81       	ldd	r19, Y+5	; 0x05
    2dc2:	22 30       	cpi	r18, 0x02	; 2
    2dc4:	31 05       	cpc	r19, r1
    2dc6:	2c f4       	brge	.+10     	; 0x2dd2 <Gpt_GetTimeElapsed+0x3c>
    2dc8:	8c 81       	ldd	r24, Y+4	; 0x04
    2dca:	9d 81       	ldd	r25, Y+5	; 0x05
    2dcc:	00 97       	sbiw	r24, 0x00	; 0
    2dce:	61 f0       	breq	.+24     	; 0x2de8 <Gpt_GetTimeElapsed+0x52>
    2dd0:	28 c0       	rjmp	.+80     	; 0x2e22 <Gpt_GetTimeElapsed+0x8c>
    2dd2:	2c 81       	ldd	r18, Y+4	; 0x04
    2dd4:	3d 81       	ldd	r19, Y+5	; 0x05
    2dd6:	22 30       	cpi	r18, 0x02	; 2
    2dd8:	31 05       	cpc	r19, r1
    2dda:	a9 f0       	breq	.+42     	; 0x2e06 <Gpt_GetTimeElapsed+0x70>
    2ddc:	8c 81       	ldd	r24, Y+4	; 0x04
    2dde:	9d 81       	ldd	r25, Y+5	; 0x05
    2de0:	83 30       	cpi	r24, 0x03	; 3
    2de2:	91 05       	cpc	r25, r1
    2de4:	b9 f0       	breq	.+46     	; 0x2e14 <Gpt_GetTimeElapsed+0x7e>
    2de6:	1d c0       	rjmp	.+58     	; 0x2e22 <Gpt_GetTimeElapsed+0x8c>
    {
    case GPT_CHANNEL_TIMER0:
        value = TCNT0;
    2de8:	e2 e5       	ldi	r30, 0x52	; 82
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	80 81       	ld	r24, Z
    2dee:	88 2f       	mov	r24, r24
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	9a 83       	std	Y+2, r25	; 0x02
    2df4:	89 83       	std	Y+1, r24	; 0x01
    2df6:	15 c0       	rjmp	.+42     	; 0x2e22 <Gpt_GetTimeElapsed+0x8c>
        break;
    case GPT_CHANNEL_TIMER1A:
        value = TCNT1;
    2df8:	ec e4       	ldi	r30, 0x4C	; 76
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	80 81       	ld	r24, Z
    2dfe:	91 81       	ldd	r25, Z+1	; 0x01
    2e00:	9a 83       	std	Y+2, r25	; 0x02
    2e02:	89 83       	std	Y+1, r24	; 0x01
    2e04:	0e c0       	rjmp	.+28     	; 0x2e22 <Gpt_GetTimeElapsed+0x8c>
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        value = TCNT1;
    2e06:	ec e4       	ldi	r30, 0x4C	; 76
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	91 81       	ldd	r25, Z+1	; 0x01
    2e0e:	9a 83       	std	Y+2, r25	; 0x02
    2e10:	89 83       	std	Y+1, r24	; 0x01
    2e12:	07 c0       	rjmp	.+14     	; 0x2e22 <Gpt_GetTimeElapsed+0x8c>
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        value = TCNT2;
    2e14:	e4 e4       	ldi	r30, 0x44	; 68
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	88 2f       	mov	r24, r24
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	9a 83       	std	Y+2, r25	; 0x02
    2e20:	89 83       	std	Y+1, r24	; 0x01
        // TODO
        break;
    default:
        break;
    }
    return value;
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	cf 91       	pop	r28
    2e32:	df 91       	pop	r29
    2e34:	08 95       	ret

00002e36 <Gpt_GetTimeRemaining>:

u16 Gpt_GetTimeRemaining(Gpt_ChannelType channel, Gpt_ModeType mode)
{
    2e36:	df 93       	push	r29
    2e38:	cf 93       	push	r28
    2e3a:	00 d0       	rcall	.+0      	; 0x2e3c <Gpt_GetTimeRemaining+0x6>
    2e3c:	00 d0       	rcall	.+0      	; 0x2e3e <Gpt_GetTimeRemaining+0x8>
    2e3e:	00 d0       	rcall	.+0      	; 0x2e40 <Gpt_GetTimeRemaining+0xa>
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	8b 83       	std	Y+3, r24	; 0x03
    2e46:	6c 83       	std	Y+4, r22	; 0x04
    u16 value = 0;
    2e48:	1a 82       	std	Y+2, r1	; 0x02
    2e4a:	19 82       	std	Y+1, r1	; 0x01
    switch (channel)
    2e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4e:	28 2f       	mov	r18, r24
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	3e 83       	std	Y+6, r19	; 0x06
    2e54:	2d 83       	std	Y+5, r18	; 0x05
    2e56:	4d 81       	ldd	r20, Y+5	; 0x05
    2e58:	5e 81       	ldd	r21, Y+6	; 0x06
    2e5a:	41 30       	cpi	r20, 0x01	; 1
    2e5c:	51 05       	cpc	r21, r1
    2e5e:	e1 f1       	breq	.+120    	; 0x2ed8 <Gpt_GetTimeRemaining+0xa2>
    2e60:	8d 81       	ldd	r24, Y+5	; 0x05
    2e62:	9e 81       	ldd	r25, Y+6	; 0x06
    2e64:	82 30       	cpi	r24, 0x02	; 2
    2e66:	91 05       	cpc	r25, r1
    2e68:	34 f4       	brge	.+12     	; 0x2e76 <Gpt_GetTimeRemaining+0x40>
    2e6a:	2d 81       	ldd	r18, Y+5	; 0x05
    2e6c:	3e 81       	ldd	r19, Y+6	; 0x06
    2e6e:	21 15       	cp	r18, r1
    2e70:	31 05       	cpc	r19, r1
    2e72:	71 f0       	breq	.+28     	; 0x2e90 <Gpt_GetTimeRemaining+0x5a>
    2e74:	90 c0       	rjmp	.+288    	; 0x2f96 <Gpt_GetTimeRemaining+0x160>
    2e76:	4d 81       	ldd	r20, Y+5	; 0x05
    2e78:	5e 81       	ldd	r21, Y+6	; 0x06
    2e7a:	42 30       	cpi	r20, 0x02	; 2
    2e7c:	51 05       	cpc	r21, r1
    2e7e:	09 f4       	brne	.+2      	; 0x2e82 <Gpt_GetTimeRemaining+0x4c>
    2e80:	4a c0       	rjmp	.+148    	; 0x2f16 <Gpt_GetTimeRemaining+0xe0>
    2e82:	8d 81       	ldd	r24, Y+5	; 0x05
    2e84:	9e 81       	ldd	r25, Y+6	; 0x06
    2e86:	83 30       	cpi	r24, 0x03	; 3
    2e88:	91 05       	cpc	r25, r1
    2e8a:	09 f4       	brne	.+2      	; 0x2e8e <Gpt_GetTimeRemaining+0x58>
    2e8c:	62 c0       	rjmp	.+196    	; 0x2f52 <Gpt_GetTimeRemaining+0x11c>
    2e8e:	83 c0       	rjmp	.+262    	; 0x2f96 <Gpt_GetTimeRemaining+0x160>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    2e90:	8c 81       	ldd	r24, Y+4	; 0x04
    2e92:	88 23       	and	r24, r24
    2e94:	61 f4       	brne	.+24     	; 0x2eae <Gpt_GetTimeRemaining+0x78>
        {
            value = 0xFF - TCNT0;
    2e96:	e2 e5       	ldi	r30, 0x52	; 82
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	80 81       	ld	r24, Z
    2e9c:	28 2f       	mov	r18, r24
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	8f ef       	ldi	r24, 0xFF	; 255
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	82 1b       	sub	r24, r18
    2ea6:	93 0b       	sbc	r25, r19
    2ea8:	9a 83       	std	Y+2, r25	; 0x02
    2eaa:	89 83       	std	Y+1, r24	; 0x01
    2eac:	74 c0       	rjmp	.+232    	; 0x2f96 <Gpt_GetTimeRemaining+0x160>
        }
        else if (mode == GPT_MODE_CTC)
    2eae:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb0:	81 30       	cpi	r24, 0x01	; 1
    2eb2:	09 f0       	breq	.+2      	; 0x2eb6 <Gpt_GetTimeRemaining+0x80>
    2eb4:	70 c0       	rjmp	.+224    	; 0x2f96 <Gpt_GetTimeRemaining+0x160>
        {
            value = OCR0 - TCNT0;
    2eb6:	ec e5       	ldi	r30, 0x5C	; 92
    2eb8:	f0 e0       	ldi	r31, 0x00	; 0
    2eba:	80 81       	ld	r24, Z
    2ebc:	28 2f       	mov	r18, r24
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	e2 e5       	ldi	r30, 0x52	; 82
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	88 2f       	mov	r24, r24
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	a9 01       	movw	r20, r18
    2ecc:	48 1b       	sub	r20, r24
    2ece:	59 0b       	sbc	r21, r25
    2ed0:	ca 01       	movw	r24, r20
    2ed2:	9a 83       	std	Y+2, r25	; 0x02
    2ed4:	89 83       	std	Y+1, r24	; 0x01
    2ed6:	5f c0       	rjmp	.+190    	; 0x2f96 <Gpt_GetTimeRemaining+0x160>
        }
        break;
    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    2ed8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eda:	88 23       	and	r24, r24
    2edc:	49 f4       	brne	.+18     	; 0x2ef0 <Gpt_GetTimeRemaining+0xba>
        {
            value = 0xFFFF - TCNT1;
    2ede:	ec e4       	ldi	r30, 0x4C	; 76
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	80 81       	ld	r24, Z
    2ee4:	91 81       	ldd	r25, Z+1	; 0x01
    2ee6:	80 95       	com	r24
    2ee8:	90 95       	com	r25
    2eea:	9a 83       	std	Y+2, r25	; 0x02
    2eec:	89 83       	std	Y+1, r24	; 0x01
    2eee:	53 c0       	rjmp	.+166    	; 0x2f96 <Gpt_GetTimeRemaining+0x160>
        }
        else if (mode == GPT_MODE_CTC)
    2ef0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef2:	81 30       	cpi	r24, 0x01	; 1
    2ef4:	09 f0       	breq	.+2      	; 0x2ef8 <Gpt_GetTimeRemaining+0xc2>
    2ef6:	4f c0       	rjmp	.+158    	; 0x2f96 <Gpt_GetTimeRemaining+0x160>
        {
            value = OCR1A - TCNT1;
    2ef8:	ea e4       	ldi	r30, 0x4A	; 74
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	20 81       	ld	r18, Z
    2efe:	31 81       	ldd	r19, Z+1	; 0x01
    2f00:	ec e4       	ldi	r30, 0x4C	; 76
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	91 81       	ldd	r25, Z+1	; 0x01
    2f08:	a9 01       	movw	r20, r18
    2f0a:	48 1b       	sub	r20, r24
    2f0c:	59 0b       	sbc	r21, r25
    2f0e:	ca 01       	movw	r24, r20
    2f10:	9a 83       	std	Y+2, r25	; 0x02
    2f12:	89 83       	std	Y+1, r24	; 0x01
    2f14:	40 c0       	rjmp	.+128    	; 0x2f96 <Gpt_GetTimeRemaining+0x160>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    2f16:	8c 81       	ldd	r24, Y+4	; 0x04
    2f18:	88 23       	and	r24, r24
    2f1a:	49 f4       	brne	.+18     	; 0x2f2e <Gpt_GetTimeRemaining+0xf8>
        {
            value = 0xFFFF - TCNT1;
    2f1c:	ec e4       	ldi	r30, 0x4C	; 76
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	80 81       	ld	r24, Z
    2f22:	91 81       	ldd	r25, Z+1	; 0x01
    2f24:	80 95       	com	r24
    2f26:	90 95       	com	r25
    2f28:	9a 83       	std	Y+2, r25	; 0x02
    2f2a:	89 83       	std	Y+1, r24	; 0x01
    2f2c:	34 c0       	rjmp	.+104    	; 0x2f96 <Gpt_GetTimeRemaining+0x160>
        }
        else if (mode == GPT_MODE_CTC)
    2f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f30:	81 30       	cpi	r24, 0x01	; 1
    2f32:	89 f5       	brne	.+98     	; 0x2f96 <Gpt_GetTimeRemaining+0x160>
        {
            value = OCR1B - TCNT1;
    2f34:	e8 e4       	ldi	r30, 0x48	; 72
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	20 81       	ld	r18, Z
    2f3a:	31 81       	ldd	r19, Z+1	; 0x01
    2f3c:	ec e4       	ldi	r30, 0x4C	; 76
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	80 81       	ld	r24, Z
    2f42:	91 81       	ldd	r25, Z+1	; 0x01
    2f44:	a9 01       	movw	r20, r18
    2f46:	48 1b       	sub	r20, r24
    2f48:	59 0b       	sbc	r21, r25
    2f4a:	ca 01       	movw	r24, r20
    2f4c:	9a 83       	std	Y+2, r25	; 0x02
    2f4e:	89 83       	std	Y+1, r24	; 0x01
    2f50:	22 c0       	rjmp	.+68     	; 0x2f96 <Gpt_GetTimeRemaining+0x160>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    2f52:	8c 81       	ldd	r24, Y+4	; 0x04
    2f54:	88 23       	and	r24, r24
    2f56:	61 f4       	brne	.+24     	; 0x2f70 <Gpt_GetTimeRemaining+0x13a>
        {
            value = 0xFF - TCNT2;
    2f58:	e4 e4       	ldi	r30, 0x44	; 68
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	28 2f       	mov	r18, r24
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	8f ef       	ldi	r24, 0xFF	; 255
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	82 1b       	sub	r24, r18
    2f68:	93 0b       	sbc	r25, r19
    2f6a:	9a 83       	std	Y+2, r25	; 0x02
    2f6c:	89 83       	std	Y+1, r24	; 0x01
    2f6e:	13 c0       	rjmp	.+38     	; 0x2f96 <Gpt_GetTimeRemaining+0x160>
        }
        else if (mode == GPT_MODE_CTC)
    2f70:	8c 81       	ldd	r24, Y+4	; 0x04
    2f72:	81 30       	cpi	r24, 0x01	; 1
    2f74:	81 f4       	brne	.+32     	; 0x2f96 <Gpt_GetTimeRemaining+0x160>
        {
            value = OCR2 - TCNT2;
    2f76:	e3 e4       	ldi	r30, 0x43	; 67
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
    2f7c:	28 2f       	mov	r18, r24
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	e4 e4       	ldi	r30, 0x44	; 68
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	80 81       	ld	r24, Z
    2f86:	88 2f       	mov	r24, r24
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	a9 01       	movw	r20, r18
    2f8c:	48 1b       	sub	r20, r24
    2f8e:	59 0b       	sbc	r21, r25
    2f90:	ca 01       	movw	r24, r20
    2f92:	9a 83       	std	Y+2, r25	; 0x02
    2f94:	89 83       	std	Y+1, r24	; 0x01
        // TODO
        break;
    default:
        break;
    }
    return value;
    2f96:	89 81       	ldd	r24, Y+1	; 0x01
    2f98:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2f9a:	26 96       	adiw	r28, 0x06	; 6
    2f9c:	0f b6       	in	r0, 0x3f	; 63
    2f9e:	f8 94       	cli
    2fa0:	de bf       	out	0x3e, r29	; 62
    2fa2:	0f be       	out	0x3f, r0	; 63
    2fa4:	cd bf       	out	0x3d, r28	; 61
    2fa6:	cf 91       	pop	r28
    2fa8:	df 91       	pop	r29
    2faa:	08 95       	ret

00002fac <Gpt_EnableNotification>:

void Gpt_EnableNotification(Gpt_ChannelType channel, Gpt_ModeType mode, void (*callback)(void))
{
    2fac:	df 93       	push	r29
    2fae:	cf 93       	push	r28
    2fb0:	00 d0       	rcall	.+0      	; 0x2fb2 <Gpt_EnableNotification+0x6>
    2fb2:	00 d0       	rcall	.+0      	; 0x2fb4 <Gpt_EnableNotification+0x8>
    2fb4:	00 d0       	rcall	.+0      	; 0x2fb6 <Gpt_EnableNotification+0xa>
    2fb6:	cd b7       	in	r28, 0x3d	; 61
    2fb8:	de b7       	in	r29, 0x3e	; 62
    2fba:	89 83       	std	Y+1, r24	; 0x01
    2fbc:	6a 83       	std	Y+2, r22	; 0x02
    2fbe:	5c 83       	std	Y+4, r21	; 0x04
    2fc0:	4b 83       	std	Y+3, r20	; 0x03
    switch (channel)
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	28 2f       	mov	r18, r24
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	3e 83       	std	Y+6, r19	; 0x06
    2fca:	2d 83       	std	Y+5, r18	; 0x05
    2fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fce:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd0:	81 30       	cpi	r24, 0x01	; 1
    2fd2:	91 05       	cpc	r25, r1
    2fd4:	d1 f1       	breq	.+116    	; 0x304a <Gpt_EnableNotification+0x9e>
    2fd6:	2d 81       	ldd	r18, Y+5	; 0x05
    2fd8:	3e 81       	ldd	r19, Y+6	; 0x06
    2fda:	22 30       	cpi	r18, 0x02	; 2
    2fdc:	31 05       	cpc	r19, r1
    2fde:	2c f4       	brge	.+10     	; 0x2fea <Gpt_EnableNotification+0x3e>
    2fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe4:	00 97       	sbiw	r24, 0x00	; 0
    2fe6:	71 f0       	breq	.+28     	; 0x3004 <Gpt_EnableNotification+0x58>
    2fe8:	96 c0       	rjmp	.+300    	; 0x3116 <Gpt_EnableNotification+0x16a>
    2fea:	2d 81       	ldd	r18, Y+5	; 0x05
    2fec:	3e 81       	ldd	r19, Y+6	; 0x06
    2fee:	22 30       	cpi	r18, 0x02	; 2
    2ff0:	31 05       	cpc	r19, r1
    2ff2:	09 f4       	brne	.+2      	; 0x2ff6 <Gpt_EnableNotification+0x4a>
    2ff4:	4d c0       	rjmp	.+154    	; 0x3090 <Gpt_EnableNotification+0xe4>
    2ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffa:	83 30       	cpi	r24, 0x03	; 3
    2ffc:	91 05       	cpc	r25, r1
    2ffe:	09 f4       	brne	.+2      	; 0x3002 <Gpt_EnableNotification+0x56>
    3000:	69 c0       	rjmp	.+210    	; 0x30d4 <Gpt_EnableNotification+0x128>
    3002:	89 c0       	rjmp	.+274    	; 0x3116 <Gpt_EnableNotification+0x16a>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    3004:	8a 81       	ldd	r24, Y+2	; 0x02
    3006:	88 23       	and	r24, r24
    3008:	71 f4       	brne	.+28     	; 0x3026 <Gpt_EnableNotification+0x7a>
        {
            Gpt_Timer0_Callback_Normal = callback;
    300a:	8b 81       	ldd	r24, Y+3	; 0x03
    300c:	9c 81       	ldd	r25, Y+4	; 0x04
    300e:	90 93 89 01 	sts	0x0189, r25
    3012:	80 93 88 01 	sts	0x0188, r24
            SET_BIT(TIMSK, TIMSK_TOIE0);
    3016:	a9 e5       	ldi	r26, 0x59	; 89
    3018:	b0 e0       	ldi	r27, 0x00	; 0
    301a:	e9 e5       	ldi	r30, 0x59	; 89
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	80 81       	ld	r24, Z
    3020:	81 60       	ori	r24, 0x01	; 1
    3022:	8c 93       	st	X, r24
    3024:	78 c0       	rjmp	.+240    	; 0x3116 <Gpt_EnableNotification+0x16a>
        }
        else if (mode == GPT_MODE_CTC)
    3026:	8a 81       	ldd	r24, Y+2	; 0x02
    3028:	81 30       	cpi	r24, 0x01	; 1
    302a:	09 f0       	breq	.+2      	; 0x302e <Gpt_EnableNotification+0x82>
    302c:	74 c0       	rjmp	.+232    	; 0x3116 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer0_Callback_Ctc = callback;
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	9c 81       	ldd	r25, Y+4	; 0x04
    3032:	90 93 7f 01 	sts	0x017F, r25
    3036:	80 93 7e 01 	sts	0x017E, r24
            SET_BIT(TIMSK, TIMSK_OCIE0);
    303a:	a9 e5       	ldi	r26, 0x59	; 89
    303c:	b0 e0       	ldi	r27, 0x00	; 0
    303e:	e9 e5       	ldi	r30, 0x59	; 89
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	80 81       	ld	r24, Z
    3044:	82 60       	ori	r24, 0x02	; 2
    3046:	8c 93       	st	X, r24
    3048:	66 c0       	rjmp	.+204    	; 0x3116 <Gpt_EnableNotification+0x16a>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    304a:	8a 81       	ldd	r24, Y+2	; 0x02
    304c:	88 23       	and	r24, r24
    304e:	71 f4       	brne	.+28     	; 0x306c <Gpt_EnableNotification+0xc0>
        {
            Gpt_Timer1_Callback_Normal = callback;
    3050:	8b 81       	ldd	r24, Y+3	; 0x03
    3052:	9c 81       	ldd	r25, Y+4	; 0x04
    3054:	90 93 8b 01 	sts	0x018B, r25
    3058:	80 93 8a 01 	sts	0x018A, r24
            SET_BIT(TIMSK, TIMSK_TOIE1);
    305c:	a9 e5       	ldi	r26, 0x59	; 89
    305e:	b0 e0       	ldi	r27, 0x00	; 0
    3060:	e9 e5       	ldi	r30, 0x59	; 89
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	80 81       	ld	r24, Z
    3066:	84 60       	ori	r24, 0x04	; 4
    3068:	8c 93       	st	X, r24
    306a:	55 c0       	rjmp	.+170    	; 0x3116 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    306c:	8a 81       	ldd	r24, Y+2	; 0x02
    306e:	81 30       	cpi	r24, 0x01	; 1
    3070:	09 f0       	breq	.+2      	; 0x3074 <Gpt_EnableNotification+0xc8>
    3072:	51 c0       	rjmp	.+162    	; 0x3116 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer1A_Callback_Ctc = callback;
    3074:	8b 81       	ldd	r24, Y+3	; 0x03
    3076:	9c 81       	ldd	r25, Y+4	; 0x04
    3078:	90 93 87 01 	sts	0x0187, r25
    307c:	80 93 86 01 	sts	0x0186, r24
            SET_BIT(TIMSK, TIMSK_OCIE1A);
    3080:	a9 e5       	ldi	r26, 0x59	; 89
    3082:	b0 e0       	ldi	r27, 0x00	; 0
    3084:	e9 e5       	ldi	r30, 0x59	; 89
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	80 81       	ld	r24, Z
    308a:	80 61       	ori	r24, 0x10	; 16
    308c:	8c 93       	st	X, r24
    308e:	43 c0       	rjmp	.+134    	; 0x3116 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    3090:	8a 81       	ldd	r24, Y+2	; 0x02
    3092:	88 23       	and	r24, r24
    3094:	71 f4       	brne	.+28     	; 0x30b2 <Gpt_EnableNotification+0x106>
        {
            Gpt_Timer1_Callback_Normal = callback;
    3096:	8b 81       	ldd	r24, Y+3	; 0x03
    3098:	9c 81       	ldd	r25, Y+4	; 0x04
    309a:	90 93 8b 01 	sts	0x018B, r25
    309e:	80 93 8a 01 	sts	0x018A, r24
            SET_BIT(TIMSK, TIMSK_TOIE1);
    30a2:	a9 e5       	ldi	r26, 0x59	; 89
    30a4:	b0 e0       	ldi	r27, 0x00	; 0
    30a6:	e9 e5       	ldi	r30, 0x59	; 89
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	80 81       	ld	r24, Z
    30ac:	84 60       	ori	r24, 0x04	; 4
    30ae:	8c 93       	st	X, r24
    30b0:	32 c0       	rjmp	.+100    	; 0x3116 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    30b2:	8a 81       	ldd	r24, Y+2	; 0x02
    30b4:	81 30       	cpi	r24, 0x01	; 1
    30b6:	79 f5       	brne	.+94     	; 0x3116 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer1B_Callback_Ctc = callback;
    30b8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ba:	9c 81       	ldd	r25, Y+4	; 0x04
    30bc:	90 93 83 01 	sts	0x0183, r25
    30c0:	80 93 82 01 	sts	0x0182, r24
            SET_BIT(TIMSK, TIMSK_OCIE1B);
    30c4:	a9 e5       	ldi	r26, 0x59	; 89
    30c6:	b0 e0       	ldi	r27, 0x00	; 0
    30c8:	e9 e5       	ldi	r30, 0x59	; 89
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	80 81       	ld	r24, Z
    30ce:	88 60       	ori	r24, 0x08	; 8
    30d0:	8c 93       	st	X, r24
    30d2:	21 c0       	rjmp	.+66     	; 0x3116 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    30d4:	8a 81       	ldd	r24, Y+2	; 0x02
    30d6:	88 23       	and	r24, r24
    30d8:	71 f4       	brne	.+28     	; 0x30f6 <Gpt_EnableNotification+0x14a>
        {
            Gpt_Timer2_Callback_Normal = callback;
    30da:	8b 81       	ldd	r24, Y+3	; 0x03
    30dc:	9c 81       	ldd	r25, Y+4	; 0x04
    30de:	90 93 85 01 	sts	0x0185, r25
    30e2:	80 93 84 01 	sts	0x0184, r24
            SET_BIT(TIMSK, TIMSK_TOIE2);
    30e6:	a9 e5       	ldi	r26, 0x59	; 89
    30e8:	b0 e0       	ldi	r27, 0x00	; 0
    30ea:	e9 e5       	ldi	r30, 0x59	; 89
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	80 81       	ld	r24, Z
    30f0:	80 64       	ori	r24, 0x40	; 64
    30f2:	8c 93       	st	X, r24
    30f4:	10 c0       	rjmp	.+32     	; 0x3116 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    30f6:	8a 81       	ldd	r24, Y+2	; 0x02
    30f8:	81 30       	cpi	r24, 0x01	; 1
    30fa:	69 f4       	brne	.+26     	; 0x3116 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer2_Callback_Ctc = callback;
    30fc:	8b 81       	ldd	r24, Y+3	; 0x03
    30fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3100:	90 93 81 01 	sts	0x0181, r25
    3104:	80 93 80 01 	sts	0x0180, r24
            SET_BIT(TIMSK, TIMSK_OCIE2);
    3108:	a9 e5       	ldi	r26, 0x59	; 89
    310a:	b0 e0       	ldi	r27, 0x00	; 0
    310c:	e9 e5       	ldi	r30, 0x59	; 89
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	80 68       	ori	r24, 0x80	; 128
    3114:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
    3116:	26 96       	adiw	r28, 0x06	; 6
    3118:	0f b6       	in	r0, 0x3f	; 63
    311a:	f8 94       	cli
    311c:	de bf       	out	0x3e, r29	; 62
    311e:	0f be       	out	0x3f, r0	; 63
    3120:	cd bf       	out	0x3d, r28	; 61
    3122:	cf 91       	pop	r28
    3124:	df 91       	pop	r29
    3126:	08 95       	ret

00003128 <Gpt_DisableNotification>:

void Gpt_DisableNotification(Gpt_ChannelType channel, Gpt_ModeType mode)
{
    3128:	df 93       	push	r29
    312a:	cf 93       	push	r28
    312c:	00 d0       	rcall	.+0      	; 0x312e <Gpt_DisableNotification+0x6>
    312e:	00 d0       	rcall	.+0      	; 0x3130 <Gpt_DisableNotification+0x8>
    3130:	cd b7       	in	r28, 0x3d	; 61
    3132:	de b7       	in	r29, 0x3e	; 62
    3134:	89 83       	std	Y+1, r24	; 0x01
    3136:	6a 83       	std	Y+2, r22	; 0x02
    switch (channel)
    3138:	89 81       	ldd	r24, Y+1	; 0x01
    313a:	28 2f       	mov	r18, r24
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	3c 83       	std	Y+4, r19	; 0x04
    3140:	2b 83       	std	Y+3, r18	; 0x03
    3142:	8b 81       	ldd	r24, Y+3	; 0x03
    3144:	9c 81       	ldd	r25, Y+4	; 0x04
    3146:	81 30       	cpi	r24, 0x01	; 1
    3148:	91 05       	cpc	r25, r1
    314a:	69 f1       	breq	.+90     	; 0x31a6 <Gpt_DisableNotification+0x7e>
    314c:	2b 81       	ldd	r18, Y+3	; 0x03
    314e:	3c 81       	ldd	r19, Y+4	; 0x04
    3150:	22 30       	cpi	r18, 0x02	; 2
    3152:	31 05       	cpc	r19, r1
    3154:	2c f4       	brge	.+10     	; 0x3160 <Gpt_DisableNotification+0x38>
    3156:	8b 81       	ldd	r24, Y+3	; 0x03
    3158:	9c 81       	ldd	r25, Y+4	; 0x04
    315a:	00 97       	sbiw	r24, 0x00	; 0
    315c:	69 f0       	breq	.+26     	; 0x3178 <Gpt_DisableNotification+0x50>
    315e:	64 c0       	rjmp	.+200    	; 0x3228 <Gpt_DisableNotification+0x100>
    3160:	2b 81       	ldd	r18, Y+3	; 0x03
    3162:	3c 81       	ldd	r19, Y+4	; 0x04
    3164:	22 30       	cpi	r18, 0x02	; 2
    3166:	31 05       	cpc	r19, r1
    3168:	a1 f1       	breq	.+104    	; 0x31d2 <Gpt_DisableNotification+0xaa>
    316a:	8b 81       	ldd	r24, Y+3	; 0x03
    316c:	9c 81       	ldd	r25, Y+4	; 0x04
    316e:	83 30       	cpi	r24, 0x03	; 3
    3170:	91 05       	cpc	r25, r1
    3172:	09 f4       	brne	.+2      	; 0x3176 <Gpt_DisableNotification+0x4e>
    3174:	44 c0       	rjmp	.+136    	; 0x31fe <Gpt_DisableNotification+0xd6>
    3176:	58 c0       	rjmp	.+176    	; 0x3228 <Gpt_DisableNotification+0x100>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    3178:	8a 81       	ldd	r24, Y+2	; 0x02
    317a:	88 23       	and	r24, r24
    317c:	41 f4       	brne	.+16     	; 0x318e <Gpt_DisableNotification+0x66>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE0);
    317e:	a9 e5       	ldi	r26, 0x59	; 89
    3180:	b0 e0       	ldi	r27, 0x00	; 0
    3182:	e9 e5       	ldi	r30, 0x59	; 89
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	80 81       	ld	r24, Z
    3188:	8e 7f       	andi	r24, 0xFE	; 254
    318a:	8c 93       	st	X, r24
    318c:	4d c0       	rjmp	.+154    	; 0x3228 <Gpt_DisableNotification+0x100>
        }
        else if (mode == GPT_MODE_CTC)
    318e:	8a 81       	ldd	r24, Y+2	; 0x02
    3190:	81 30       	cpi	r24, 0x01	; 1
    3192:	09 f0       	breq	.+2      	; 0x3196 <Gpt_DisableNotification+0x6e>
    3194:	49 c0       	rjmp	.+146    	; 0x3228 <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE0);
    3196:	a9 e5       	ldi	r26, 0x59	; 89
    3198:	b0 e0       	ldi	r27, 0x00	; 0
    319a:	e9 e5       	ldi	r30, 0x59	; 89
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	8d 7f       	andi	r24, 0xFD	; 253
    31a2:	8c 93       	st	X, r24
    31a4:	41 c0       	rjmp	.+130    	; 0x3228 <Gpt_DisableNotification+0x100>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    31a6:	8a 81       	ldd	r24, Y+2	; 0x02
    31a8:	88 23       	and	r24, r24
    31aa:	41 f4       	brne	.+16     	; 0x31bc <Gpt_DisableNotification+0x94>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE1);
    31ac:	a9 e5       	ldi	r26, 0x59	; 89
    31ae:	b0 e0       	ldi	r27, 0x00	; 0
    31b0:	e9 e5       	ldi	r30, 0x59	; 89
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	80 81       	ld	r24, Z
    31b6:	8b 7f       	andi	r24, 0xFB	; 251
    31b8:	8c 93       	st	X, r24
    31ba:	36 c0       	rjmp	.+108    	; 0x3228 <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    31bc:	8a 81       	ldd	r24, Y+2	; 0x02
    31be:	81 30       	cpi	r24, 0x01	; 1
    31c0:	99 f5       	brne	.+102    	; 0x3228 <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE1A);
    31c2:	a9 e5       	ldi	r26, 0x59	; 89
    31c4:	b0 e0       	ldi	r27, 0x00	; 0
    31c6:	e9 e5       	ldi	r30, 0x59	; 89
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	8f 7e       	andi	r24, 0xEF	; 239
    31ce:	8c 93       	st	X, r24
    31d0:	2b c0       	rjmp	.+86     	; 0x3228 <Gpt_DisableNotification+0x100>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    31d2:	8a 81       	ldd	r24, Y+2	; 0x02
    31d4:	88 23       	and	r24, r24
    31d6:	41 f4       	brne	.+16     	; 0x31e8 <Gpt_DisableNotification+0xc0>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE1);
    31d8:	a9 e5       	ldi	r26, 0x59	; 89
    31da:	b0 e0       	ldi	r27, 0x00	; 0
    31dc:	e9 e5       	ldi	r30, 0x59	; 89
    31de:	f0 e0       	ldi	r31, 0x00	; 0
    31e0:	80 81       	ld	r24, Z
    31e2:	8b 7f       	andi	r24, 0xFB	; 251
    31e4:	8c 93       	st	X, r24
    31e6:	20 c0       	rjmp	.+64     	; 0x3228 <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    31e8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ea:	81 30       	cpi	r24, 0x01	; 1
    31ec:	e9 f4       	brne	.+58     	; 0x3228 <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE1B);
    31ee:	a9 e5       	ldi	r26, 0x59	; 89
    31f0:	b0 e0       	ldi	r27, 0x00	; 0
    31f2:	e9 e5       	ldi	r30, 0x59	; 89
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	80 81       	ld	r24, Z
    31f8:	87 7f       	andi	r24, 0xF7	; 247
    31fa:	8c 93       	st	X, r24
    31fc:	15 c0       	rjmp	.+42     	; 0x3228 <Gpt_DisableNotification+0x100>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    31fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3200:	88 23       	and	r24, r24
    3202:	41 f4       	brne	.+16     	; 0x3214 <Gpt_DisableNotification+0xec>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE2);
    3204:	a9 e5       	ldi	r26, 0x59	; 89
    3206:	b0 e0       	ldi	r27, 0x00	; 0
    3208:	e9 e5       	ldi	r30, 0x59	; 89
    320a:	f0 e0       	ldi	r31, 0x00	; 0
    320c:	80 81       	ld	r24, Z
    320e:	8f 7b       	andi	r24, 0xBF	; 191
    3210:	8c 93       	st	X, r24
    3212:	0a c0       	rjmp	.+20     	; 0x3228 <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    3214:	8a 81       	ldd	r24, Y+2	; 0x02
    3216:	81 30       	cpi	r24, 0x01	; 1
    3218:	39 f4       	brne	.+14     	; 0x3228 <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE2);
    321a:	a9 e5       	ldi	r26, 0x59	; 89
    321c:	b0 e0       	ldi	r27, 0x00	; 0
    321e:	e9 e5       	ldi	r30, 0x59	; 89
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	80 81       	ld	r24, Z
    3224:	8f 77       	andi	r24, 0x7F	; 127
    3226:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
    3228:	0f 90       	pop	r0
    322a:	0f 90       	pop	r0
    322c:	0f 90       	pop	r0
    322e:	0f 90       	pop	r0
    3230:	cf 91       	pop	r28
    3232:	df 91       	pop	r29
    3234:	08 95       	ret

00003236 <I2C_InitMaster>:
#include "Registers.h"
#include "I2C.h"
#include "I2C_cfg.h"

void I2C_InitMaster(void)
{
    3236:	df 93       	push	r29
    3238:	cf 93       	push	r28
    323a:	cd b7       	in	r28, 0x3d	; 61
    323c:	de b7       	in	r29, 0x3e	; 62
	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWBR = 0x02;
    323e:	e0 e2       	ldi	r30, 0x20	; 32
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	82 e0       	ldi	r24, 0x02	; 2
    3244:	80 83       	st	Z, r24
	TWSR = 0x00;
    3246:	e1 e2       	ldi	r30, 0x21	; 33
    3248:	f0 e0       	ldi	r31, 0x00	; 0
    324a:	10 82       	st	Z, r1

	TWCR = (1<<2); /* enable TWI */
    324c:	e6 e5       	ldi	r30, 0x56	; 86
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	84 e0       	ldi	r24, 0x04	; 4
    3252:	80 83       	st	Z, r24
}
    3254:	cf 91       	pop	r28
    3256:	df 91       	pop	r29
    3258:	08 95       	ret

0000325a <I2C_SendStartCondition>:
void I2C_SendStartCondition(void)
{
    325a:	df 93       	push	r29
    325c:	cf 93       	push	r28
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << 7) | (1 << 5) | (1 << 2);
    3262:	e6 e5       	ldi	r30, 0x56	; 86
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	84 ea       	ldi	r24, 0xA4	; 164
    3268:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(GET_BIT(TWCR,7)==0);
    326a:	e6 e5       	ldi	r30, 0x56	; 86
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	80 81       	ld	r24, Z
    3270:	88 23       	and	r24, r24
    3272:	dc f7       	brge	.-10     	; 0x326a <I2C_SendStartCondition+0x10>
}
    3274:	cf 91       	pop	r28
    3276:	df 91       	pop	r29
    3278:	08 95       	ret

0000327a <I2C_SendStopCondition>:
void I2C_SendStopCondition(void)
{
    327a:	df 93       	push	r29
    327c:	cf 93       	push	r28
    327e:	cd b7       	in	r28, 0x3d	; 61
    3280:	de b7       	in	r29, 0x3e	; 62
	 *  Enable TWI Module TWEN=1 ---> //SET_BIT(TWCR,2);
		        Sent stop condition on the bus ---> //SET_BIT(TWCR,4);
		        Clear the interrupt flag To start the previous operation
		         //SET_BIT(TWCR,7);
	 */
	TWCR = (1 << 7) | (1 << 4) | (1 << 2);
    3282:	e6 e5       	ldi	r30, 0x56	; 86
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	84 e9       	ldi	r24, 0x94	; 148
    3288:	80 83       	st	Z, r24
}
    328a:	cf 91       	pop	r28
    328c:	df 91       	pop	r29
    328e:	08 95       	ret

00003290 <I2C_MasterWriteDataByte>:
void I2C_MasterWriteDataByte(u8 Data)
{
    3290:	df 93       	push	r29
    3292:	cf 93       	push	r28
    3294:	0f 92       	push	r0
    3296:	cd b7       	in	r28, 0x3d	; 61
    3298:	de b7       	in	r29, 0x3e	; 62
    329a:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = Data;
    329c:	e3 e2       	ldi	r30, 0x23	; 35
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << 7) | (1 << 2);
    32a4:	e6 e5       	ldi	r30, 0x56	; 86
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	84 e8       	ldi	r24, 0x84	; 132
    32aa:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(GET_BIT(TWCR,7)==0);
    32ac:	e6 e5       	ldi	r30, 0x56	; 86
    32ae:	f0 e0       	ldi	r31, 0x00	; 0
    32b0:	80 81       	ld	r24, Z
    32b2:	88 23       	and	r24, r24
    32b4:	dc f7       	brge	.-10     	; 0x32ac <I2C_MasterWriteDataByte+0x1c>
}
    32b6:	0f 90       	pop	r0
    32b8:	cf 91       	pop	r28
    32ba:	df 91       	pop	r29
    32bc:	08 95       	ret

000032be <I2C_MasterReadDataByteWith_ACK>:
u8   I2C_MasterReadDataByteWith_ACK(void)
{
    32be:	df 93       	push	r29
    32c0:	cf 93       	push	r28
    32c2:	cd b7       	in	r28, 0x3d	; 61
    32c4:	de b7       	in	r29, 0x3e	; 62
	 * --------------------------------------------
	 *     Enable Acknowledge bit --> //SET_BIT(TWCR,6);
	 *     Clear the interrupt flag To start the previous operation --> //SET_BIT(TWCR,7);
	 *     Enable TWI Module TWEN=1 -->//SET_BIT(TWCR,2);
	 */
	TWCR = (1 << 7) | (1 << 2) | (1 << 6);
    32c6:	e6 e5       	ldi	r30, 0x56	; 86
    32c8:	f0 e0       	ldi	r31, 0x00	; 0
    32ca:	84 ec       	ldi	r24, 0xC4	; 196
    32cc:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(GET_BIT(TWCR,7)==0);
    32ce:	e6 e5       	ldi	r30, 0x56	; 86
    32d0:	f0 e0       	ldi	r31, 0x00	; 0
    32d2:	80 81       	ld	r24, Z
    32d4:	88 23       	and	r24, r24
    32d6:	dc f7       	brge	.-10     	; 0x32ce <I2C_MasterReadDataByteWith_ACK+0x10>
	/* Read Data */
	return TWDR;
    32d8:	e3 e2       	ldi	r30, 0x23	; 35
    32da:	f0 e0       	ldi	r31, 0x00	; 0
    32dc:	80 81       	ld	r24, Z
}
    32de:	cf 91       	pop	r28
    32e0:	df 91       	pop	r29
    32e2:	08 95       	ret

000032e4 <I2C_MasterReadDataByteWith_NACK>:
u8   I2C_MasterReadDataByteWith_NACK(void)
{
    32e4:	df 93       	push	r29
    32e6:	cf 93       	push	r28
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
	 * -------------------------------------------
	 * 	 * Disable Acknowledge bit --> //CLR_BIT(TWCR,6);
	 *     Clear the interrupt flag To start the previous operation --> //SET_BIT(TWCR,7);
	 *     Enable TWI Module TWEN=1 -->//SET_BIT(TWCR,2);
	 */
	TWCR = (1 << 7) | (1 << 2);
    32ec:	e6 e5       	ldi	r30, 0x56	; 86
    32ee:	f0 e0       	ldi	r31, 0x00	; 0
    32f0:	84 e8       	ldi	r24, 0x84	; 132
    32f2:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(GET_BIT(TWCR,7)==0);
    32f4:	e6 e5       	ldi	r30, 0x56	; 86
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	80 81       	ld	r24, Z
    32fa:	88 23       	and	r24, r24
    32fc:	dc f7       	brge	.-10     	; 0x32f4 <I2C_MasterReadDataByteWith_NACK+0x10>
	/* Read Data */
	return TWDR;
    32fe:	e3 e2       	ldi	r30, 0x23	; 35
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	80 81       	ld	r24, Z
}
    3304:	cf 91       	pop	r28
    3306:	df 91       	pop	r29
    3308:	08 95       	ret

0000330a <Keypad_Init>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"
#include "Keypad.h"

void Keypad_Init(void) {
    330a:	df 93       	push	r29
    330c:	cf 93       	push	r28
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
    /* Set all rows to input pullup */
    DIO_SetPinMode(KEYPAD_PIN_R0, DIO_INPUT_PULLUP);
    3312:	83 e0       	ldi	r24, 0x03	; 3
    3314:	60 e0       	ldi	r22, 0x00	; 0
    3316:	41 e0       	ldi	r20, 0x01	; 1
    3318:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R1, DIO_INPUT_PULLUP);
    331c:	83 e0       	ldi	r24, 0x03	; 3
    331e:	61 e0       	ldi	r22, 0x01	; 1
    3320:	41 e0       	ldi	r20, 0x01	; 1
    3322:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R2, DIO_INPUT_PULLUP);
    3326:	83 e0       	ldi	r24, 0x03	; 3
    3328:	62 e0       	ldi	r22, 0x02	; 2
    332a:	41 e0       	ldi	r20, 0x01	; 1
    332c:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R3, DIO_INPUT_PULLUP);
    3330:	83 e0       	ldi	r24, 0x03	; 3
    3332:	63 e0       	ldi	r22, 0x03	; 3
    3334:	41 e0       	ldi	r20, 0x01	; 1
    3336:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    /* Set all columns to output */
    DIO_SetPinMode(KEYPAD_PIN_C0, DIO_OUTPUT);
    333a:	83 e0       	ldi	r24, 0x03	; 3
    333c:	64 e0       	ldi	r22, 0x04	; 4
    333e:	42 e0       	ldi	r20, 0x02	; 2
    3340:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C1, DIO_OUTPUT);
    3344:	83 e0       	ldi	r24, 0x03	; 3
    3346:	65 e0       	ldi	r22, 0x05	; 5
    3348:	42 e0       	ldi	r20, 0x02	; 2
    334a:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C2, DIO_OUTPUT);
    334e:	83 e0       	ldi	r24, 0x03	; 3
    3350:	66 e0       	ldi	r22, 0x06	; 6
    3352:	42 e0       	ldi	r20, 0x02	; 2
    3354:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C3, DIO_OUTPUT);
    3358:	83 e0       	ldi	r24, 0x03	; 3
    335a:	67 e0       	ldi	r22, 0x07	; 7
    335c:	42 e0       	ldi	r20, 0x02	; 2
    335e:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
}
    3362:	cf 91       	pop	r28
    3364:	df 91       	pop	r29
    3366:	08 95       	ret

00003368 <Keypad_GetButtonState>:
	low  -> Pressed

*/


Keypad_StateType Keypad_GetButtonState(Keypad_ButtonType button) {
    3368:	df 93       	push	r29
    336a:	cf 93       	push	r28
    336c:	cd b7       	in	r28, 0x3d	; 61
    336e:	de b7       	in	r29, 0x3e	; 62
    3370:	28 97       	sbiw	r28, 0x08	; 8
    3372:	0f b6       	in	r0, 0x3f	; 63
    3374:	f8 94       	cli
    3376:	de bf       	out	0x3e, r29	; 62
    3378:	0f be       	out	0x3f, r0	; 63
    337a:	cd bf       	out	0x3d, r28	; 61
    337c:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    3382:	8c 81       	ldd	r24, Y+4	; 0x04
    3384:	86 95       	lsr	r24
    3386:	86 95       	lsr	r24
    3388:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    338a:	8c 81       	ldd	r24, Y+4	; 0x04
    338c:	83 70       	andi	r24, 0x03	; 3
    338e:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    3390:	83 e0       	ldi	r24, 0x03	; 3
    3392:	64 e0       	ldi	r22, 0x04	; 4
    3394:	41 e0       	ldi	r20, 0x01	; 1
    3396:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    339a:	83 e0       	ldi	r24, 0x03	; 3
    339c:	65 e0       	ldi	r22, 0x05	; 5
    339e:	41 e0       	ldi	r20, 0x01	; 1
    33a0:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    33a4:	83 e0       	ldi	r24, 0x03	; 3
    33a6:	66 e0       	ldi	r22, 0x06	; 6
    33a8:	41 e0       	ldi	r20, 0x01	; 1
    33aa:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    33ae:	83 e0       	ldi	r24, 0x03	; 3
    33b0:	67 e0       	ldi	r22, 0x07	; 7
    33b2:	41 e0       	ldi	r20, 0x01	; 1
    33b4:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    switch (column)
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	28 2f       	mov	r18, r24
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	38 87       	std	Y+8, r19	; 0x08
    33c0:	2f 83       	std	Y+7, r18	; 0x07
    33c2:	8f 81       	ldd	r24, Y+7	; 0x07
    33c4:	98 85       	ldd	r25, Y+8	; 0x08
    33c6:	81 30       	cpi	r24, 0x01	; 1
    33c8:	91 05       	cpc	r25, r1
    33ca:	d9 f0       	breq	.+54     	; 0x3402 <Keypad_GetButtonState+0x9a>
    33cc:	2f 81       	ldd	r18, Y+7	; 0x07
    33ce:	38 85       	ldd	r19, Y+8	; 0x08
    33d0:	22 30       	cpi	r18, 0x02	; 2
    33d2:	31 05       	cpc	r19, r1
    33d4:	2c f4       	brge	.+10     	; 0x33e0 <Keypad_GetButtonState+0x78>
    33d6:	8f 81       	ldd	r24, Y+7	; 0x07
    33d8:	98 85       	ldd	r25, Y+8	; 0x08
    33da:	00 97       	sbiw	r24, 0x00	; 0
    33dc:	61 f0       	breq	.+24     	; 0x33f6 <Keypad_GetButtonState+0x8e>
    33de:	22 c0       	rjmp	.+68     	; 0x3424 <Keypad_GetButtonState+0xbc>
    33e0:	2f 81       	ldd	r18, Y+7	; 0x07
    33e2:	38 85       	ldd	r19, Y+8	; 0x08
    33e4:	22 30       	cpi	r18, 0x02	; 2
    33e6:	31 05       	cpc	r19, r1
    33e8:	91 f0       	breq	.+36     	; 0x340e <Keypad_GetButtonState+0xa6>
    33ea:	8f 81       	ldd	r24, Y+7	; 0x07
    33ec:	98 85       	ldd	r25, Y+8	; 0x08
    33ee:	83 30       	cpi	r24, 0x03	; 3
    33f0:	91 05       	cpc	r25, r1
    33f2:	99 f0       	breq	.+38     	; 0x341a <Keypad_GetButtonState+0xb2>
    33f4:	17 c0       	rjmp	.+46     	; 0x3424 <Keypad_GetButtonState+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    33f6:	83 e0       	ldi	r24, 0x03	; 3
    33f8:	64 e0       	ldi	r22, 0x04	; 4
    33fa:	40 e0       	ldi	r20, 0x00	; 0
    33fc:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    3400:	11 c0       	rjmp	.+34     	; 0x3424 <Keypad_GetButtonState+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    3402:	83 e0       	ldi	r24, 0x03	; 3
    3404:	65 e0       	ldi	r22, 0x05	; 5
    3406:	40 e0       	ldi	r20, 0x00	; 0
    3408:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    340c:	0b c0       	rjmp	.+22     	; 0x3424 <Keypad_GetButtonState+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    340e:	83 e0       	ldi	r24, 0x03	; 3
    3410:	66 e0       	ldi	r22, 0x06	; 6
    3412:	40 e0       	ldi	r20, 0x00	; 0
    3414:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    3418:	05 c0       	rjmp	.+10     	; 0x3424 <Keypad_GetButtonState+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    341a:	83 e0       	ldi	r24, 0x03	; 3
    341c:	67 e0       	ldi	r22, 0x07	; 7
    341e:	40 e0       	ldi	r20, 0x00	; 0
    3420:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    3424:	8a 81       	ldd	r24, Y+2	; 0x02
    3426:	28 2f       	mov	r18, r24
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	3e 83       	std	Y+6, r19	; 0x06
    342c:	2d 83       	std	Y+5, r18	; 0x05
    342e:	8d 81       	ldd	r24, Y+5	; 0x05
    3430:	9e 81       	ldd	r25, Y+6	; 0x06
    3432:	81 30       	cpi	r24, 0x01	; 1
    3434:	91 05       	cpc	r25, r1
    3436:	e9 f0       	breq	.+58     	; 0x3472 <Keypad_GetButtonState+0x10a>
    3438:	2d 81       	ldd	r18, Y+5	; 0x05
    343a:	3e 81       	ldd	r19, Y+6	; 0x06
    343c:	22 30       	cpi	r18, 0x02	; 2
    343e:	31 05       	cpc	r19, r1
    3440:	2c f4       	brge	.+10     	; 0x344c <Keypad_GetButtonState+0xe4>
    3442:	8d 81       	ldd	r24, Y+5	; 0x05
    3444:	9e 81       	ldd	r25, Y+6	; 0x06
    3446:	00 97       	sbiw	r24, 0x00	; 0
    3448:	61 f0       	breq	.+24     	; 0x3462 <Keypad_GetButtonState+0xfa>
    344a:	2a c0       	rjmp	.+84     	; 0x34a0 <Keypad_GetButtonState+0x138>
    344c:	2d 81       	ldd	r18, Y+5	; 0x05
    344e:	3e 81       	ldd	r19, Y+6	; 0x06
    3450:	22 30       	cpi	r18, 0x02	; 2
    3452:	31 05       	cpc	r19, r1
    3454:	b1 f0       	breq	.+44     	; 0x3482 <Keypad_GetButtonState+0x11a>
    3456:	8d 81       	ldd	r24, Y+5	; 0x05
    3458:	9e 81       	ldd	r25, Y+6	; 0x06
    345a:	83 30       	cpi	r24, 0x03	; 3
    345c:	91 05       	cpc	r25, r1
    345e:	c9 f0       	breq	.+50     	; 0x3492 <Keypad_GetButtonState+0x12a>
    3460:	1f c0       	rjmp	.+62     	; 0x34a0 <Keypad_GetButtonState+0x138>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    3462:	83 e0       	ldi	r24, 0x03	; 3
    3464:	60 e0       	ldi	r22, 0x00	; 0
    3466:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    346a:	88 23       	and	r24, r24
    346c:	c9 f4       	brne	.+50     	; 0x34a0 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    346e:	1b 82       	std	Y+3, r1	; 0x03
    3470:	17 c0       	rjmp	.+46     	; 0x34a0 <Keypad_GetButtonState+0x138>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    3472:	83 e0       	ldi	r24, 0x03	; 3
    3474:	61 e0       	ldi	r22, 0x01	; 1
    3476:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    347a:	88 23       	and	r24, r24
    347c:	89 f4       	brne	.+34     	; 0x34a0 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    347e:	1b 82       	std	Y+3, r1	; 0x03
    3480:	0f c0       	rjmp	.+30     	; 0x34a0 <Keypad_GetButtonState+0x138>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    3482:	83 e0       	ldi	r24, 0x03	; 3
    3484:	62 e0       	ldi	r22, 0x02	; 2
    3486:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    348a:	88 23       	and	r24, r24
    348c:	49 f4       	brne	.+18     	; 0x34a0 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    348e:	1b 82       	std	Y+3, r1	; 0x03
    3490:	07 c0       	rjmp	.+14     	; 0x34a0 <Keypad_GetButtonState+0x138>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    3492:	83 e0       	ldi	r24, 0x03	; 3
    3494:	63 e0       	ldi	r22, 0x03	; 3
    3496:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    349a:	88 23       	and	r24, r24
    349c:	09 f4       	brne	.+2      	; 0x34a0 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    349e:	1b 82       	std	Y+3, r1	; 0x03
        }
        break;
    default:
        break;
    }
    return state;
    34a0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    34a2:	28 96       	adiw	r28, 0x08	; 8
    34a4:	0f b6       	in	r0, 0x3f	; 63
    34a6:	f8 94       	cli
    34a8:	de bf       	out	0x3e, r29	; 62
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	cd bf       	out	0x3d, r28	; 61
    34ae:	cf 91       	pop	r28
    34b0:	df 91       	pop	r29
    34b2:	08 95       	ret

000034b4 <Keypad_GetButtonStatePooling>:

Keypad_StateType Keypad_GetButtonStatePooling(Keypad_ButtonType button) {
    34b4:	df 93       	push	r29
    34b6:	cf 93       	push	r28
    34b8:	cd b7       	in	r28, 0x3d	; 61
    34ba:	de b7       	in	r29, 0x3e	; 62
    34bc:	28 97       	sbiw	r28, 0x08	; 8
    34be:	0f b6       	in	r0, 0x3f	; 63
    34c0:	f8 94       	cli
    34c2:	de bf       	out	0x3e, r29	; 62
    34c4:	0f be       	out	0x3f, r0	; 63
    34c6:	cd bf       	out	0x3d, r28	; 61
    34c8:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    34ce:	8c 81       	ldd	r24, Y+4	; 0x04
    34d0:	86 95       	lsr	r24
    34d2:	86 95       	lsr	r24
    34d4:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    34d6:	8c 81       	ldd	r24, Y+4	; 0x04
    34d8:	83 70       	andi	r24, 0x03	; 3
    34da:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    34dc:	83 e0       	ldi	r24, 0x03	; 3
    34de:	64 e0       	ldi	r22, 0x04	; 4
    34e0:	41 e0       	ldi	r20, 0x01	; 1
    34e2:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    34e6:	83 e0       	ldi	r24, 0x03	; 3
    34e8:	65 e0       	ldi	r22, 0x05	; 5
    34ea:	41 e0       	ldi	r20, 0x01	; 1
    34ec:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    34f0:	83 e0       	ldi	r24, 0x03	; 3
    34f2:	66 e0       	ldi	r22, 0x06	; 6
    34f4:	41 e0       	ldi	r20, 0x01	; 1
    34f6:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    34fa:	83 e0       	ldi	r24, 0x03	; 3
    34fc:	67 e0       	ldi	r22, 0x07	; 7
    34fe:	41 e0       	ldi	r20, 0x01	; 1
    3500:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    switch (column)
    3504:	89 81       	ldd	r24, Y+1	; 0x01
    3506:	28 2f       	mov	r18, r24
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	38 87       	std	Y+8, r19	; 0x08
    350c:	2f 83       	std	Y+7, r18	; 0x07
    350e:	8f 81       	ldd	r24, Y+7	; 0x07
    3510:	98 85       	ldd	r25, Y+8	; 0x08
    3512:	81 30       	cpi	r24, 0x01	; 1
    3514:	91 05       	cpc	r25, r1
    3516:	d9 f0       	breq	.+54     	; 0x354e <Keypad_GetButtonStatePooling+0x9a>
    3518:	2f 81       	ldd	r18, Y+7	; 0x07
    351a:	38 85       	ldd	r19, Y+8	; 0x08
    351c:	22 30       	cpi	r18, 0x02	; 2
    351e:	31 05       	cpc	r19, r1
    3520:	2c f4       	brge	.+10     	; 0x352c <Keypad_GetButtonStatePooling+0x78>
    3522:	8f 81       	ldd	r24, Y+7	; 0x07
    3524:	98 85       	ldd	r25, Y+8	; 0x08
    3526:	00 97       	sbiw	r24, 0x00	; 0
    3528:	61 f0       	breq	.+24     	; 0x3542 <Keypad_GetButtonStatePooling+0x8e>
    352a:	22 c0       	rjmp	.+68     	; 0x3570 <Keypad_GetButtonStatePooling+0xbc>
    352c:	2f 81       	ldd	r18, Y+7	; 0x07
    352e:	38 85       	ldd	r19, Y+8	; 0x08
    3530:	22 30       	cpi	r18, 0x02	; 2
    3532:	31 05       	cpc	r19, r1
    3534:	91 f0       	breq	.+36     	; 0x355a <Keypad_GetButtonStatePooling+0xa6>
    3536:	8f 81       	ldd	r24, Y+7	; 0x07
    3538:	98 85       	ldd	r25, Y+8	; 0x08
    353a:	83 30       	cpi	r24, 0x03	; 3
    353c:	91 05       	cpc	r25, r1
    353e:	99 f0       	breq	.+38     	; 0x3566 <Keypad_GetButtonStatePooling+0xb2>
    3540:	17 c0       	rjmp	.+46     	; 0x3570 <Keypad_GetButtonStatePooling+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    3542:	83 e0       	ldi	r24, 0x03	; 3
    3544:	64 e0       	ldi	r22, 0x04	; 4
    3546:	40 e0       	ldi	r20, 0x00	; 0
    3548:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    354c:	11 c0       	rjmp	.+34     	; 0x3570 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    354e:	83 e0       	ldi	r24, 0x03	; 3
    3550:	65 e0       	ldi	r22, 0x05	; 5
    3552:	40 e0       	ldi	r20, 0x00	; 0
    3554:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    3558:	0b c0       	rjmp	.+22     	; 0x3570 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    355a:	83 e0       	ldi	r24, 0x03	; 3
    355c:	66 e0       	ldi	r22, 0x06	; 6
    355e:	40 e0       	ldi	r20, 0x00	; 0
    3560:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    3564:	05 c0       	rjmp	.+10     	; 0x3570 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    3566:	83 e0       	ldi	r24, 0x03	; 3
    3568:	67 e0       	ldi	r22, 0x07	; 7
    356a:	40 e0       	ldi	r20, 0x00	; 0
    356c:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    3570:	8a 81       	ldd	r24, Y+2	; 0x02
    3572:	28 2f       	mov	r18, r24
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	3e 83       	std	Y+6, r19	; 0x06
    3578:	2d 83       	std	Y+5, r18	; 0x05
    357a:	8d 81       	ldd	r24, Y+5	; 0x05
    357c:	9e 81       	ldd	r25, Y+6	; 0x06
    357e:	81 30       	cpi	r24, 0x01	; 1
    3580:	91 05       	cpc	r25, r1
    3582:	19 f1       	breq	.+70     	; 0x35ca <Keypad_GetButtonStatePooling+0x116>
    3584:	2d 81       	ldd	r18, Y+5	; 0x05
    3586:	3e 81       	ldd	r19, Y+6	; 0x06
    3588:	22 30       	cpi	r18, 0x02	; 2
    358a:	31 05       	cpc	r19, r1
    358c:	2c f4       	brge	.+10     	; 0x3598 <Keypad_GetButtonStatePooling+0xe4>
    358e:	8d 81       	ldd	r24, Y+5	; 0x05
    3590:	9e 81       	ldd	r25, Y+6	; 0x06
    3592:	00 97       	sbiw	r24, 0x00	; 0
    3594:	61 f0       	breq	.+24     	; 0x35ae <Keypad_GetButtonStatePooling+0xfa>
    3596:	42 c0       	rjmp	.+132    	; 0x361c <Keypad_GetButtonStatePooling+0x168>
    3598:	2d 81       	ldd	r18, Y+5	; 0x05
    359a:	3e 81       	ldd	r19, Y+6	; 0x06
    359c:	22 30       	cpi	r18, 0x02	; 2
    359e:	31 05       	cpc	r19, r1
    35a0:	11 f1       	breq	.+68     	; 0x35e6 <Keypad_GetButtonStatePooling+0x132>
    35a2:	8d 81       	ldd	r24, Y+5	; 0x05
    35a4:	9e 81       	ldd	r25, Y+6	; 0x06
    35a6:	83 30       	cpi	r24, 0x03	; 3
    35a8:	91 05       	cpc	r25, r1
    35aa:	59 f1       	breq	.+86     	; 0x3602 <Keypad_GetButtonStatePooling+0x14e>
    35ac:	37 c0       	rjmp	.+110    	; 0x361c <Keypad_GetButtonStatePooling+0x168>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    35ae:	83 e0       	ldi	r24, 0x03	; 3
    35b0:	60 e0       	ldi	r22, 0x00	; 0
    35b2:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    35b6:	88 23       	and	r24, r24
    35b8:	89 f5       	brne	.+98     	; 0x361c <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    35ba:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW);
    35bc:	83 e0       	ldi	r24, 0x03	; 3
    35be:	60 e0       	ldi	r22, 0x00	; 0
    35c0:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    35c4:	88 23       	and	r24, r24
    35c6:	d1 f3       	breq	.-12     	; 0x35bc <Keypad_GetButtonStatePooling+0x108>
    35c8:	29 c0       	rjmp	.+82     	; 0x361c <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    35ca:	83 e0       	ldi	r24, 0x03	; 3
    35cc:	61 e0       	ldi	r22, 0x01	; 1
    35ce:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    35d2:	88 23       	and	r24, r24
    35d4:	19 f5       	brne	.+70     	; 0x361c <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    35d6:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW);
    35d8:	83 e0       	ldi	r24, 0x03	; 3
    35da:	61 e0       	ldi	r22, 0x01	; 1
    35dc:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    35e0:	88 23       	and	r24, r24
    35e2:	d1 f3       	breq	.-12     	; 0x35d8 <Keypad_GetButtonStatePooling+0x124>
    35e4:	1b c0       	rjmp	.+54     	; 0x361c <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    35e6:	83 e0       	ldi	r24, 0x03	; 3
    35e8:	62 e0       	ldi	r22, 0x02	; 2
    35ea:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    35ee:	88 23       	and	r24, r24
    35f0:	a9 f4       	brne	.+42     	; 0x361c <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    35f2:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW);
    35f4:	83 e0       	ldi	r24, 0x03	; 3
    35f6:	62 e0       	ldi	r22, 0x02	; 2
    35f8:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    35fc:	88 23       	and	r24, r24
    35fe:	d1 f3       	breq	.-12     	; 0x35f4 <Keypad_GetButtonStatePooling+0x140>
    3600:	0d c0       	rjmp	.+26     	; 0x361c <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    3602:	83 e0       	ldi	r24, 0x03	; 3
    3604:	63 e0       	ldi	r22, 0x03	; 3
    3606:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    360a:	88 23       	and	r24, r24
    360c:	39 f4       	brne	.+14     	; 0x361c <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    360e:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW);
    3610:	83 e0       	ldi	r24, 0x03	; 3
    3612:	63 e0       	ldi	r22, 0x03	; 3
    3614:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_ReadPinLevel>
    3618:	88 23       	and	r24, r24
    361a:	d1 f3       	breq	.-12     	; 0x3610 <Keypad_GetButtonStatePooling+0x15c>
        }
        break;
    default:
        break;
    }
    return state;
    361c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    361e:	28 96       	adiw	r28, 0x08	; 8
    3620:	0f b6       	in	r0, 0x3f	; 63
    3622:	f8 94       	cli
    3624:	de bf       	out	0x3e, r29	; 62
    3626:	0f be       	out	0x3f, r0	; 63
    3628:	cd bf       	out	0x3d, r28	; 61
    362a:	cf 91       	pop	r28
    362c:	df 91       	pop	r29
    362e:	08 95       	ret

00003630 <Keypad_GetPressedButton>:


Keypad_ButtonType Keypad_GetPressedButton(void) {
    3630:	df 93       	push	r29
    3632:	cf 93       	push	r28
    3634:	00 d0       	rcall	.+0      	; 0x3636 <Keypad_GetPressedButton+0x6>
    3636:	cd b7       	in	r28, 0x3d	; 61
    3638:	de b7       	in	r29, 0x3e	; 62
    u8 i=0;
    363a:	1a 82       	std	Y+2, r1	; 0x02
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    363c:	80 e1       	ldi	r24, 0x10	; 16
    363e:	89 83       	std	Y+1, r24	; 0x01
    for (i=0; i<16; i++) {
    3640:	1a 82       	std	Y+2, r1	; 0x02
    3642:	0b c0       	rjmp	.+22     	; 0x365a <Keypad_GetPressedButton+0x2a>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
    3644:	8a 81       	ldd	r24, Y+2	; 0x02
    3646:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <Keypad_GetButtonStatePooling>
    364a:	88 23       	and	r24, r24
    364c:	19 f4       	brne	.+6      	; 0x3654 <Keypad_GetPressedButton+0x24>
            pressed_button = i;
    364e:	8a 81       	ldd	r24, Y+2	; 0x02
    3650:	89 83       	std	Y+1, r24	; 0x01
    3652:	06 c0       	rjmp	.+12     	; 0x3660 <Keypad_GetPressedButton+0x30>


Keypad_ButtonType Keypad_GetPressedButton(void) {
    u8 i=0;
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    for (i=0; i<16; i++) {
    3654:	8a 81       	ldd	r24, Y+2	; 0x02
    3656:	8f 5f       	subi	r24, 0xFF	; 255
    3658:	8a 83       	std	Y+2, r24	; 0x02
    365a:	8a 81       	ldd	r24, Y+2	; 0x02
    365c:	80 31       	cpi	r24, 0x10	; 16
    365e:	90 f3       	brcs	.-28     	; 0x3644 <Keypad_GetPressedButton+0x14>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
            pressed_button = i;
            break;
        }
    }
    return pressed_button;
    3660:	89 81       	ldd	r24, Y+1	; 0x01
}
    3662:	0f 90       	pop	r0
    3664:	0f 90       	pop	r0
    3666:	cf 91       	pop	r28
    3668:	df 91       	pop	r29
    366a:	08 95       	ret

0000366c <LCD_Init>:

static void LCD_SendData(u8 data);
static void LCD_SendCommand(u8 command);
static void LCD_InitPinsMode(void);

void LCD_Init(void) {
    366c:	df 93       	push	r29
    366e:	cf 93       	push	r28
    3670:	cd b7       	in	r28, 0x3d	; 61
    3672:	de b7       	in	r29, 0x3e	; 62
    3674:	2f 97       	sbiw	r28, 0x0f	; 15
    3676:	0f b6       	in	r0, 0x3f	; 63
    3678:	f8 94       	cli
    367a:	de bf       	out	0x3e, r29	; 62
    367c:	0f be       	out	0x3f, r0	; 63
    367e:	cd bf       	out	0x3d, r28	; 61
    u8 command = 0;
    3680:	1f 86       	std	Y+15, r1	; 0x0f
    LCD_InitPinsMode();
    3682:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <LCD_InitPinsMode>
    3686:	80 e0       	ldi	r24, 0x00	; 0
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	a0 ef       	ldi	r26, 0xF0	; 240
    368c:	b1 e4       	ldi	r27, 0x41	; 65
    368e:	8b 87       	std	Y+11, r24	; 0x0b
    3690:	9c 87       	std	Y+12, r25	; 0x0c
    3692:	ad 87       	std	Y+13, r26	; 0x0d
    3694:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3696:	6b 85       	ldd	r22, Y+11	; 0x0b
    3698:	7c 85       	ldd	r23, Y+12	; 0x0c
    369a:	8d 85       	ldd	r24, Y+13	; 0x0d
    369c:	9e 85       	ldd	r25, Y+14	; 0x0e
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	4a ef       	ldi	r20, 0xFA	; 250
    36a4:	54 e4       	ldi	r21, 0x44	; 68
    36a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36aa:	dc 01       	movw	r26, r24
    36ac:	cb 01       	movw	r24, r22
    36ae:	8f 83       	std	Y+7, r24	; 0x07
    36b0:	98 87       	std	Y+8, r25	; 0x08
    36b2:	a9 87       	std	Y+9, r26	; 0x09
    36b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36b6:	6f 81       	ldd	r22, Y+7	; 0x07
    36b8:	78 85       	ldd	r23, Y+8	; 0x08
    36ba:	89 85       	ldd	r24, Y+9	; 0x09
    36bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    36be:	20 e0       	ldi	r18, 0x00	; 0
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	40 e8       	ldi	r20, 0x80	; 128
    36c4:	5f e3       	ldi	r21, 0x3F	; 63
    36c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36ca:	88 23       	and	r24, r24
    36cc:	2c f4       	brge	.+10     	; 0x36d8 <LCD_Init+0x6c>
		__ticks = 1;
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	9e 83       	std	Y+6, r25	; 0x06
    36d4:	8d 83       	std	Y+5, r24	; 0x05
    36d6:	3f c0       	rjmp	.+126    	; 0x3756 <LCD_Init+0xea>
	else if (__tmp > 65535)
    36d8:	6f 81       	ldd	r22, Y+7	; 0x07
    36da:	78 85       	ldd	r23, Y+8	; 0x08
    36dc:	89 85       	ldd	r24, Y+9	; 0x09
    36de:	9a 85       	ldd	r25, Y+10	; 0x0a
    36e0:	20 e0       	ldi	r18, 0x00	; 0
    36e2:	3f ef       	ldi	r19, 0xFF	; 255
    36e4:	4f e7       	ldi	r20, 0x7F	; 127
    36e6:	57 e4       	ldi	r21, 0x47	; 71
    36e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36ec:	18 16       	cp	r1, r24
    36ee:	4c f5       	brge	.+82     	; 0x3742 <LCD_Init+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	40 e2       	ldi	r20, 0x20	; 32
    36fe:	51 e4       	ldi	r21, 0x41	; 65
    3700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3704:	dc 01       	movw	r26, r24
    3706:	cb 01       	movw	r24, r22
    3708:	bc 01       	movw	r22, r24
    370a:	cd 01       	movw	r24, r26
    370c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3710:	dc 01       	movw	r26, r24
    3712:	cb 01       	movw	r24, r22
    3714:	9e 83       	std	Y+6, r25	; 0x06
    3716:	8d 83       	std	Y+5, r24	; 0x05
    3718:	0f c0       	rjmp	.+30     	; 0x3738 <LCD_Init+0xcc>
    371a:	88 ec       	ldi	r24, 0xC8	; 200
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	9c 83       	std	Y+4, r25	; 0x04
    3720:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3722:	8b 81       	ldd	r24, Y+3	; 0x03
    3724:	9c 81       	ldd	r25, Y+4	; 0x04
    3726:	01 97       	sbiw	r24, 0x01	; 1
    3728:	f1 f7       	brne	.-4      	; 0x3726 <LCD_Init+0xba>
    372a:	9c 83       	std	Y+4, r25	; 0x04
    372c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    372e:	8d 81       	ldd	r24, Y+5	; 0x05
    3730:	9e 81       	ldd	r25, Y+6	; 0x06
    3732:	01 97       	sbiw	r24, 0x01	; 1
    3734:	9e 83       	std	Y+6, r25	; 0x06
    3736:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3738:	8d 81       	ldd	r24, Y+5	; 0x05
    373a:	9e 81       	ldd	r25, Y+6	; 0x06
    373c:	00 97       	sbiw	r24, 0x00	; 0
    373e:	69 f7       	brne	.-38     	; 0x371a <LCD_Init+0xae>
    3740:	14 c0       	rjmp	.+40     	; 0x376a <LCD_Init+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3742:	6f 81       	ldd	r22, Y+7	; 0x07
    3744:	78 85       	ldd	r23, Y+8	; 0x08
    3746:	89 85       	ldd	r24, Y+9	; 0x09
    3748:	9a 85       	ldd	r25, Y+10	; 0x0a
    374a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374e:	dc 01       	movw	r26, r24
    3750:	cb 01       	movw	r24, r22
    3752:	9e 83       	std	Y+6, r25	; 0x06
    3754:	8d 83       	std	Y+5, r24	; 0x05
    3756:	8d 81       	ldd	r24, Y+5	; 0x05
    3758:	9e 81       	ldd	r25, Y+6	; 0x06
    375a:	9a 83       	std	Y+2, r25	; 0x02
    375c:	89 83       	std	Y+1, r24	; 0x01
    375e:	89 81       	ldd	r24, Y+1	; 0x01
    3760:	9a 81       	ldd	r25, Y+2	; 0x02
    3762:	01 97       	sbiw	r24, 0x01	; 1
    3764:	f1 f7       	brne	.-4      	; 0x3762 <LCD_Init+0xf6>
    3766:	9a 83       	std	Y+2, r25	; 0x02
    3768:	89 83       	std	Y+1, r24	; 0x01

    /* Function Set:
        N: 1 (two lines)
        F: 0 (5x7)
    */
    command = 0b00110000;
    376a:	80 e3       	ldi	r24, 0x30	; 48
    376c:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_LINES == LCD_TWO_LINES)
        SET_BIT(command, 3);
    376e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3770:	88 60       	ori	r24, 0x08	; 8
    3772:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_DOTS == LCD_DOTS_5X10)
        SET_BIT(command, 2);
    3774:	8f 85       	ldd	r24, Y+15	; 0x0f
    3776:	84 60       	ori	r24, 0x04	; 4
    3778:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    377a:	8f 85       	ldd	r24, Y+15	; 0x0f
    377c:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_SendCommand>
    /* Display ON/OFF
        D: 1 (Display ON)
        C: 0 (Cursor off)
        B: 0 (Cursor not blink)
    */
    command = 0b00001000; 
    3780:	88 e0       	ldi	r24, 0x08	; 8
    3782:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_DISPLAY == LCD_DISPLAY_ON)
        SET_BIT(command, 2);
    3784:	8f 85       	ldd	r24, Y+15	; 0x0f
    3786:	84 60       	ori	r24, 0x04	; 4
    3788:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_BLINK)
        SET_BIT(command, 0);
    378a:	8f 85       	ldd	r24, Y+15	; 0x0f
    378c:	81 60       	ori	r24, 0x01	; 1
    378e:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(command, 1);
    3790:	8f 85       	ldd	r24, Y+15	; 0x0f
    3792:	82 60       	ori	r24, 0x02	; 2
    3794:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_NO_BLINK)
        SET_BIT(command, 1);
    3796:	8f 85       	ldd	r24, Y+15	; 0x0f
    3798:	82 60       	ori	r24, 0x02	; 2
    379a:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    379c:	8f 85       	ldd	r24, Y+15	; 0x0f
    379e:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_SendCommand>

    /* Display Clear */
    LCD_SendCommand(0b00000001);
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_SendCommand>
}
    37a8:	2f 96       	adiw	r28, 0x0f	; 15
    37aa:	0f b6       	in	r0, 0x3f	; 63
    37ac:	f8 94       	cli
    37ae:	de bf       	out	0x3e, r29	; 62
    37b0:	0f be       	out	0x3f, r0	; 63
    37b2:	cd bf       	out	0x3d, r28	; 61
    37b4:	cf 91       	pop	r28
    37b6:	df 91       	pop	r29
    37b8:	08 95       	ret

000037ba <LCD_Clear>:


void LCD_Clear (void) {
    37ba:	df 93       	push	r29
    37bc:	cf 93       	push	r28
    37be:	cd b7       	in	r28, 0x3d	; 61
    37c0:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(0b00000001);
    37c2:	81 e0       	ldi	r24, 0x01	; 1
    37c4:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_SendCommand>
}
    37c8:	cf 91       	pop	r28
    37ca:	df 91       	pop	r29
    37cc:	08 95       	ret

000037ce <LCD_DisplayCharacter>:

void LCD_DisplayCharacter (u8 data) {
    37ce:	df 93       	push	r29
    37d0:	cf 93       	push	r28
    37d2:	0f 92       	push	r0
    37d4:	cd b7       	in	r28, 0x3d	; 61
    37d6:	de b7       	in	r29, 0x3e	; 62
    37d8:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
    37da:	89 81       	ldd	r24, Y+1	; 0x01
    37dc:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <LCD_SendData>
}
    37e0:	0f 90       	pop	r0
    37e2:	cf 91       	pop	r28
    37e4:	df 91       	pop	r29
    37e6:	08 95       	ret

000037e8 <LCD_DisplayString>:

void LCD_DisplayString (u8 *str) {
    37e8:	df 93       	push	r29
    37ea:	cf 93       	push	r28
    37ec:	00 d0       	rcall	.+0      	; 0x37ee <LCD_DisplayString+0x6>
    37ee:	0f 92       	push	r0
    37f0:	cd b7       	in	r28, 0x3d	; 61
    37f2:	de b7       	in	r29, 0x3e	; 62
    37f4:	9b 83       	std	Y+3, r25	; 0x03
    37f6:	8a 83       	std	Y+2, r24	; 0x02
    u8 i=0;
    37f8:	19 82       	std	Y+1, r1	; 0x01
    37fa:	0e c0       	rjmp	.+28     	; 0x3818 <LCD_DisplayString+0x30>
    while(str[i] != '\0') {
        LCD_DisplayCharacter(str[i]);
    37fc:	89 81       	ldd	r24, Y+1	; 0x01
    37fe:	28 2f       	mov	r18, r24
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	8a 81       	ldd	r24, Y+2	; 0x02
    3804:	9b 81       	ldd	r25, Y+3	; 0x03
    3806:	fc 01       	movw	r30, r24
    3808:	e2 0f       	add	r30, r18
    380a:	f3 1f       	adc	r31, r19
    380c:	80 81       	ld	r24, Z
    380e:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <LCD_DisplayCharacter>
        i++;
    3812:	89 81       	ldd	r24, Y+1	; 0x01
    3814:	8f 5f       	subi	r24, 0xFF	; 255
    3816:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
}

void LCD_DisplayString (u8 *str) {
    u8 i=0;
    while(str[i] != '\0') {
    3818:	89 81       	ldd	r24, Y+1	; 0x01
    381a:	28 2f       	mov	r18, r24
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	8a 81       	ldd	r24, Y+2	; 0x02
    3820:	9b 81       	ldd	r25, Y+3	; 0x03
    3822:	fc 01       	movw	r30, r24
    3824:	e2 0f       	add	r30, r18
    3826:	f3 1f       	adc	r31, r19
    3828:	80 81       	ld	r24, Z
    382a:	88 23       	and	r24, r24
    382c:	39 f7       	brne	.-50     	; 0x37fc <LCD_DisplayString+0x14>
        LCD_DisplayCharacter(str[i]);
        i++;
    }
}
    382e:	0f 90       	pop	r0
    3830:	0f 90       	pop	r0
    3832:	0f 90       	pop	r0
    3834:	cf 91       	pop	r28
    3836:	df 91       	pop	r29
    3838:	08 95       	ret

0000383a <LCD_SetCursorPosition>:

void LCD_SetCursorPosition(u8 row, u8 column) {
    383a:	df 93       	push	r29
    383c:	cf 93       	push	r28
    383e:	00 d0       	rcall	.+0      	; 0x3840 <LCD_SetCursorPosition+0x6>
    3840:	0f 92       	push	r0
    3842:	cd b7       	in	r28, 0x3d	; 61
    3844:	de b7       	in	r29, 0x3e	; 62
    3846:	8a 83       	std	Y+2, r24	; 0x02
    3848:	6b 83       	std	Y+3, r22	; 0x03
    u8 address = column + row*0x40;
    384a:	8a 81       	ldd	r24, Y+2	; 0x02
    384c:	88 2f       	mov	r24, r24
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	00 24       	eor	r0, r0
    3852:	96 95       	lsr	r25
    3854:	87 95       	ror	r24
    3856:	07 94       	ror	r0
    3858:	96 95       	lsr	r25
    385a:	87 95       	ror	r24
    385c:	07 94       	ror	r0
    385e:	98 2f       	mov	r25, r24
    3860:	80 2d       	mov	r24, r0
    3862:	98 2f       	mov	r25, r24
    3864:	8b 81       	ldd	r24, Y+3	; 0x03
    3866:	89 0f       	add	r24, r25
    3868:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(address, 7);
    386a:	89 81       	ldd	r24, Y+1	; 0x01
    386c:	80 68       	ori	r24, 0x80	; 128
    386e:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendCommand(address);
    3870:	89 81       	ldd	r24, Y+1	; 0x01
    3872:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_SendCommand>
}
    3876:	0f 90       	pop	r0
    3878:	0f 90       	pop	r0
    387a:	0f 90       	pop	r0
    387c:	cf 91       	pop	r28
    387e:	df 91       	pop	r29
    3880:	08 95       	ret

00003882 <LCD_DisplayNumber>:

void LCD_DisplayNumber (s32 number) {
    3882:	df 93       	push	r29
    3884:	cf 93       	push	r28
    3886:	00 d0       	rcall	.+0      	; 0x3888 <LCD_DisplayNumber+0x6>
    3888:	00 d0       	rcall	.+0      	; 0x388a <LCD_DisplayNumber+0x8>
    388a:	00 d0       	rcall	.+0      	; 0x388c <LCD_DisplayNumber+0xa>
    388c:	cd b7       	in	r28, 0x3d	; 61
    388e:	de b7       	in	r29, 0x3e	; 62
    3890:	9e 83       	std	Y+6, r25	; 0x06
    3892:	8d 83       	std	Y+5, r24	; 0x05
    u32 reversed_number = 0;
    3894:	1c 82       	std	Y+4, r1	; 0x04
    3896:	1b 82       	std	Y+3, r1	; 0x03
    u8 digits = 0;
    3898:	1a 82       	std	Y+2, r1	; 0x02
    if (number < 0) {
    389a:	8d 81       	ldd	r24, Y+5	; 0x05
    389c:	9e 81       	ldd	r25, Y+6	; 0x06
    389e:	99 23       	and	r25, r25
    38a0:	5c f4       	brge	.+22     	; 0x38b8 <LCD_DisplayNumber+0x36>
        number = number*-1;
    38a2:	8d 81       	ldd	r24, Y+5	; 0x05
    38a4:	9e 81       	ldd	r25, Y+6	; 0x06
    38a6:	90 95       	com	r25
    38a8:	81 95       	neg	r24
    38aa:	9f 4f       	sbci	r25, 0xFF	; 255
    38ac:	9e 83       	std	Y+6, r25	; 0x06
    38ae:	8d 83       	std	Y+5, r24	; 0x05
        LCD_DisplayCharacter('-');
    38b0:	8d e2       	ldi	r24, 0x2D	; 45
    38b2:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <LCD_DisplayCharacter>
    38b6:	2d c0       	rjmp	.+90     	; 0x3912 <LCD_DisplayNumber+0x90>
    }
    else if (number == 0) {
    38b8:	8d 81       	ldd	r24, Y+5	; 0x05
    38ba:	9e 81       	ldd	r25, Y+6	; 0x06
    38bc:	00 97       	sbiw	r24, 0x00	; 0
    38be:	49 f5       	brne	.+82     	; 0x3912 <LCD_DisplayNumber+0x90>
        LCD_DisplayCharacter('0');
    38c0:	80 e3       	ldi	r24, 0x30	; 48
    38c2:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <LCD_DisplayCharacter>
    38c6:	25 c0       	rjmp	.+74     	; 0x3912 <LCD_DisplayNumber+0x90>
    }
    while (number != 0)
    {
        reversed_number = (reversed_number*10) + (number%10);
    38c8:	8b 81       	ldd	r24, Y+3	; 0x03
    38ca:	9c 81       	ldd	r25, Y+4	; 0x04
    38cc:	9c 01       	movw	r18, r24
    38ce:	22 0f       	add	r18, r18
    38d0:	33 1f       	adc	r19, r19
    38d2:	c9 01       	movw	r24, r18
    38d4:	88 0f       	add	r24, r24
    38d6:	99 1f       	adc	r25, r25
    38d8:	88 0f       	add	r24, r24
    38da:	99 1f       	adc	r25, r25
    38dc:	f9 01       	movw	r30, r18
    38de:	e8 0f       	add	r30, r24
    38e0:	f9 1f       	adc	r31, r25
    38e2:	8d 81       	ldd	r24, Y+5	; 0x05
    38e4:	9e 81       	ldd	r25, Y+6	; 0x06
    38e6:	2a e0       	ldi	r18, 0x0A	; 10
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	b9 01       	movw	r22, r18
    38ec:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <__divmodhi4>
    38f0:	8e 0f       	add	r24, r30
    38f2:	9f 1f       	adc	r25, r31
    38f4:	9c 83       	std	Y+4, r25	; 0x04
    38f6:	8b 83       	std	Y+3, r24	; 0x03
        number = number / 10;
    38f8:	8d 81       	ldd	r24, Y+5	; 0x05
    38fa:	9e 81       	ldd	r25, Y+6	; 0x06
    38fc:	2a e0       	ldi	r18, 0x0A	; 10
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	b9 01       	movw	r22, r18
    3902:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <__divmodhi4>
    3906:	cb 01       	movw	r24, r22
    3908:	9e 83       	std	Y+6, r25	; 0x06
    390a:	8d 83       	std	Y+5, r24	; 0x05
        digits++;
    390c:	8a 81       	ldd	r24, Y+2	; 0x02
    390e:	8f 5f       	subi	r24, 0xFF	; 255
    3910:	8a 83       	std	Y+2, r24	; 0x02
        LCD_DisplayCharacter('-');
    }
    else if (number == 0) {
        LCD_DisplayCharacter('0');
    }
    while (number != 0)
    3912:	8d 81       	ldd	r24, Y+5	; 0x05
    3914:	9e 81       	ldd	r25, Y+6	; 0x06
    3916:	00 97       	sbiw	r24, 0x00	; 0
    3918:	b9 f6       	brne	.-82     	; 0x38c8 <LCD_DisplayNumber+0x46>
    391a:	1b c0       	rjmp	.+54     	; 0x3952 <LCD_DisplayNumber+0xd0>
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    {
        u8 data = reversed_number % 10;
    391c:	8b 81       	ldd	r24, Y+3	; 0x03
    391e:	9c 81       	ldd	r25, Y+4	; 0x04
    3920:	2a e0       	ldi	r18, 0x0A	; 10
    3922:	30 e0       	ldi	r19, 0x00	; 0
    3924:	b9 01       	movw	r22, r18
    3926:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <__udivmodhi4>
    392a:	89 83       	std	Y+1, r24	; 0x01
        data = data + '0';
    392c:	89 81       	ldd	r24, Y+1	; 0x01
    392e:	80 5d       	subi	r24, 0xD0	; 208
    3930:	89 83       	std	Y+1, r24	; 0x01
        LCD_DisplayCharacter(data);
    3932:	89 81       	ldd	r24, Y+1	; 0x01
    3934:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <LCD_DisplayCharacter>
        reversed_number = reversed_number / 10;
    3938:	8b 81       	ldd	r24, Y+3	; 0x03
    393a:	9c 81       	ldd	r25, Y+4	; 0x04
    393c:	2a e0       	ldi	r18, 0x0A	; 10
    393e:	30 e0       	ldi	r19, 0x00	; 0
    3940:	b9 01       	movw	r22, r18
    3942:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <__udivmodhi4>
    3946:	cb 01       	movw	r24, r22
    3948:	9c 83       	std	Y+4, r25	; 0x04
    394a:	8b 83       	std	Y+3, r24	; 0x03
        digits--;
    394c:	8a 81       	ldd	r24, Y+2	; 0x02
    394e:	81 50       	subi	r24, 0x01	; 1
    3950:	8a 83       	std	Y+2, r24	; 0x02
    {
        reversed_number = (reversed_number*10) + (number%10);
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    3952:	8b 81       	ldd	r24, Y+3	; 0x03
    3954:	9c 81       	ldd	r25, Y+4	; 0x04
    3956:	00 97       	sbiw	r24, 0x00	; 0
    3958:	09 f7       	brne	.-62     	; 0x391c <LCD_DisplayNumber+0x9a>
    395a:	06 c0       	rjmp	.+12     	; 0x3968 <LCD_DisplayNumber+0xe6>
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
        LCD_DisplayCharacter('0');
    395c:	80 e3       	ldi	r24, 0x30	; 48
    395e:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <LCD_DisplayCharacter>
        digits--;
    3962:	8a 81       	ldd	r24, Y+2	; 0x02
    3964:	81 50       	subi	r24, 0x01	; 1
    3966:	8a 83       	std	Y+2, r24	; 0x02
        data = data + '0';
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
    3968:	8a 81       	ldd	r24, Y+2	; 0x02
    396a:	88 23       	and	r24, r24
    396c:	b9 f7       	brne	.-18     	; 0x395c <LCD_DisplayNumber+0xda>
        LCD_DisplayCharacter('0');
        digits--;
    }
    
}
    396e:	26 96       	adiw	r28, 0x06	; 6
    3970:	0f b6       	in	r0, 0x3f	; 63
    3972:	f8 94       	cli
    3974:	de bf       	out	0x3e, r29	; 62
    3976:	0f be       	out	0x3f, r0	; 63
    3978:	cd bf       	out	0x3d, r28	; 61
    397a:	cf 91       	pop	r28
    397c:	df 91       	pop	r29
    397e:	08 95       	ret

00003980 <LCD_ShiftLeft>:

void LCD_ShiftLeft (u8 counter) {
    3980:	df 93       	push	r29
    3982:	cf 93       	push	r28
    3984:	00 d0       	rcall	.+0      	; 0x3986 <LCD_ShiftLeft+0x6>
    3986:	cd b7       	in	r28, 0x3d	; 61
    3988:	de b7       	in	r29, 0x3e	; 62
    398a:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    398c:	19 82       	std	Y+1, r1	; 0x01
    398e:	06 c0       	rjmp	.+12     	; 0x399c <LCD_ShiftLeft+0x1c>
        LCD_SendCommand(0b00011000);
    3990:	88 e1       	ldi	r24, 0x18	; 24
    3992:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_SendCommand>
    
}

void LCD_ShiftLeft (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    3996:	89 81       	ldd	r24, Y+1	; 0x01
    3998:	8f 5f       	subi	r24, 0xFF	; 255
    399a:	89 83       	std	Y+1, r24	; 0x01
    399c:	99 81       	ldd	r25, Y+1	; 0x01
    399e:	8a 81       	ldd	r24, Y+2	; 0x02
    39a0:	98 17       	cp	r25, r24
    39a2:	b0 f3       	brcs	.-20     	; 0x3990 <LCD_ShiftLeft+0x10>
        LCD_SendCommand(0b00011000);
    }
}
    39a4:	0f 90       	pop	r0
    39a6:	0f 90       	pop	r0
    39a8:	cf 91       	pop	r28
    39aa:	df 91       	pop	r29
    39ac:	08 95       	ret

000039ae <LCD_ShiftRight>:
void LCD_ShiftRight (u8 counter) {
    39ae:	df 93       	push	r29
    39b0:	cf 93       	push	r28
    39b2:	00 d0       	rcall	.+0      	; 0x39b4 <LCD_ShiftRight+0x6>
    39b4:	cd b7       	in	r28, 0x3d	; 61
    39b6:	de b7       	in	r29, 0x3e	; 62
    39b8:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    39ba:	19 82       	std	Y+1, r1	; 0x01
    39bc:	06 c0       	rjmp	.+12     	; 0x39ca <LCD_ShiftRight+0x1c>
        LCD_SendCommand(0b00011100);
    39be:	8c e1       	ldi	r24, 0x1C	; 28
    39c0:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <LCD_SendCommand>
        LCD_SendCommand(0b00011000);
    }
}
void LCD_ShiftRight (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    39c4:	89 81       	ldd	r24, Y+1	; 0x01
    39c6:	8f 5f       	subi	r24, 0xFF	; 255
    39c8:	89 83       	std	Y+1, r24	; 0x01
    39ca:	99 81       	ldd	r25, Y+1	; 0x01
    39cc:	8a 81       	ldd	r24, Y+2	; 0x02
    39ce:	98 17       	cp	r25, r24
    39d0:	b0 f3       	brcs	.-20     	; 0x39be <LCD_ShiftRight+0x10>
        LCD_SendCommand(0b00011100);
    }
}
    39d2:	0f 90       	pop	r0
    39d4:	0f 90       	pop	r0
    39d6:	cf 91       	pop	r28
    39d8:	df 91       	pop	r29
    39da:	08 95       	ret

000039dc <LCD_SendCommand>:

static void LCD_SendCommand(u8 command) {
    39dc:	df 93       	push	r29
    39de:	cf 93       	push	r28
    39e0:	cd b7       	in	r28, 0x3d	; 61
    39e2:	de b7       	in	r29, 0x3e	; 62
    39e4:	2f 97       	sbiw	r28, 0x0f	; 15
    39e6:	0f b6       	in	r0, 0x3f	; 63
    39e8:	f8 94       	cli
    39ea:	de bf       	out	0x3e, r29	; 62
    39ec:	0f be       	out	0x3f, r0	; 63
    39ee:	cd bf       	out	0x3d, r28	; 61
    39f0:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 0 Command
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_LOW);
    39f2:	82 e0       	ldi	r24, 0x02	; 2
    39f4:	60 e0       	ldi	r22, 0x00	; 0
    39f6:	40 e0       	ldi	r20, 0x00	; 0
    39f8:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    39fc:	82 e0       	ldi	r24, 0x02	; 2
    39fe:	61 e0       	ldi	r22, 0x01	; 1
    3a00:	40 e0       	ldi	r20, 0x00	; 0
    3a02:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    
    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(command, 0));
    3a06:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a08:	98 2f       	mov	r25, r24
    3a0a:	91 70       	andi	r25, 0x01	; 1
    3a0c:	83 e0       	ldi	r24, 0x03	; 3
    3a0e:	60 e0       	ldi	r22, 0x00	; 0
    3a10:	49 2f       	mov	r20, r25
    3a12:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(command, 1));
    3a16:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a18:	86 95       	lsr	r24
    3a1a:	98 2f       	mov	r25, r24
    3a1c:	91 70       	andi	r25, 0x01	; 1
    3a1e:	83 e0       	ldi	r24, 0x03	; 3
    3a20:	61 e0       	ldi	r22, 0x01	; 1
    3a22:	49 2f       	mov	r20, r25
    3a24:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(command, 2));
    3a28:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a2a:	86 95       	lsr	r24
    3a2c:	86 95       	lsr	r24
    3a2e:	98 2f       	mov	r25, r24
    3a30:	91 70       	andi	r25, 0x01	; 1
    3a32:	83 e0       	ldi	r24, 0x03	; 3
    3a34:	62 e0       	ldi	r22, 0x02	; 2
    3a36:	49 2f       	mov	r20, r25
    3a38:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(command, 3));
    3a3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a3e:	86 95       	lsr	r24
    3a40:	86 95       	lsr	r24
    3a42:	86 95       	lsr	r24
    3a44:	98 2f       	mov	r25, r24
    3a46:	91 70       	andi	r25, 0x01	; 1
    3a48:	83 e0       	ldi	r24, 0x03	; 3
    3a4a:	63 e0       	ldi	r22, 0x03	; 3
    3a4c:	49 2f       	mov	r20, r25
    3a4e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(command, 4));
    3a52:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a54:	82 95       	swap	r24
    3a56:	8f 70       	andi	r24, 0x0F	; 15
    3a58:	98 2f       	mov	r25, r24
    3a5a:	91 70       	andi	r25, 0x01	; 1
    3a5c:	83 e0       	ldi	r24, 0x03	; 3
    3a5e:	64 e0       	ldi	r22, 0x04	; 4
    3a60:	49 2f       	mov	r20, r25
    3a62:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(command, 5));
    3a66:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a68:	82 95       	swap	r24
    3a6a:	86 95       	lsr	r24
    3a6c:	87 70       	andi	r24, 0x07	; 7
    3a6e:	98 2f       	mov	r25, r24
    3a70:	91 70       	andi	r25, 0x01	; 1
    3a72:	83 e0       	ldi	r24, 0x03	; 3
    3a74:	65 e0       	ldi	r22, 0x05	; 5
    3a76:	49 2f       	mov	r20, r25
    3a78:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(command, 6));
    3a7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a7e:	82 95       	swap	r24
    3a80:	86 95       	lsr	r24
    3a82:	86 95       	lsr	r24
    3a84:	83 70       	andi	r24, 0x03	; 3
    3a86:	98 2f       	mov	r25, r24
    3a88:	91 70       	andi	r25, 0x01	; 1
    3a8a:	83 e0       	ldi	r24, 0x03	; 3
    3a8c:	66 e0       	ldi	r22, 0x06	; 6
    3a8e:	49 2f       	mov	r20, r25
    3a90:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(command, 7));
    3a94:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a96:	98 2f       	mov	r25, r24
    3a98:	99 1f       	adc	r25, r25
    3a9a:	99 27       	eor	r25, r25
    3a9c:	99 1f       	adc	r25, r25
    3a9e:	83 e0       	ldi	r24, 0x03	; 3
    3aa0:	67 e0       	ldi	r22, 0x07	; 7
    3aa2:	49 2f       	mov	r20, r25
    3aa4:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    3aa8:	82 e0       	ldi	r24, 0x02	; 2
    3aaa:	62 e0       	ldi	r22, 0x02	; 2
    3aac:	41 e0       	ldi	r20, 0x01	; 1
    3aae:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    3ab2:	80 e0       	ldi	r24, 0x00	; 0
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	a0 e0       	ldi	r26, 0x00	; 0
    3ab8:	b0 e4       	ldi	r27, 0x40	; 64
    3aba:	8b 87       	std	Y+11, r24	; 0x0b
    3abc:	9c 87       	std	Y+12, r25	; 0x0c
    3abe:	ad 87       	std	Y+13, r26	; 0x0d
    3ac0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ac2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ac4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ac6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ac8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aca:	20 e0       	ldi	r18, 0x00	; 0
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	4a ef       	ldi	r20, 0xFA	; 250
    3ad0:	54 e4       	ldi	r21, 0x44	; 68
    3ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad6:	dc 01       	movw	r26, r24
    3ad8:	cb 01       	movw	r24, r22
    3ada:	8f 83       	std	Y+7, r24	; 0x07
    3adc:	98 87       	std	Y+8, r25	; 0x08
    3ade:	a9 87       	std	Y+9, r26	; 0x09
    3ae0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ae2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ae4:	78 85       	ldd	r23, Y+8	; 0x08
    3ae6:	89 85       	ldd	r24, Y+9	; 0x09
    3ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aea:	20 e0       	ldi	r18, 0x00	; 0
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	40 e8       	ldi	r20, 0x80	; 128
    3af0:	5f e3       	ldi	r21, 0x3F	; 63
    3af2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3af6:	88 23       	and	r24, r24
    3af8:	2c f4       	brge	.+10     	; 0x3b04 <LCD_SendCommand+0x128>
		__ticks = 1;
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	9e 83       	std	Y+6, r25	; 0x06
    3b00:	8d 83       	std	Y+5, r24	; 0x05
    3b02:	3f c0       	rjmp	.+126    	; 0x3b82 <LCD_SendCommand+0x1a6>
	else if (__tmp > 65535)
    3b04:	6f 81       	ldd	r22, Y+7	; 0x07
    3b06:	78 85       	ldd	r23, Y+8	; 0x08
    3b08:	89 85       	ldd	r24, Y+9	; 0x09
    3b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	3f ef       	ldi	r19, 0xFF	; 255
    3b10:	4f e7       	ldi	r20, 0x7F	; 127
    3b12:	57 e4       	ldi	r21, 0x47	; 71
    3b14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b18:	18 16       	cp	r1, r24
    3b1a:	4c f5       	brge	.+82     	; 0x3b6e <LCD_SendCommand+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b20:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b22:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	40 e2       	ldi	r20, 0x20	; 32
    3b2a:	51 e4       	ldi	r21, 0x41	; 65
    3b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	bc 01       	movw	r22, r24
    3b36:	cd 01       	movw	r24, r26
    3b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	9e 83       	std	Y+6, r25	; 0x06
    3b42:	8d 83       	std	Y+5, r24	; 0x05
    3b44:	0f c0       	rjmp	.+30     	; 0x3b64 <LCD_SendCommand+0x188>
    3b46:	88 ec       	ldi	r24, 0xC8	; 200
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	9c 83       	std	Y+4, r25	; 0x04
    3b4c:	8b 83       	std	Y+3, r24	; 0x03
    3b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b50:	9c 81       	ldd	r25, Y+4	; 0x04
    3b52:	01 97       	sbiw	r24, 0x01	; 1
    3b54:	f1 f7       	brne	.-4      	; 0x3b52 <LCD_SendCommand+0x176>
    3b56:	9c 83       	std	Y+4, r25	; 0x04
    3b58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b5e:	01 97       	sbiw	r24, 0x01	; 1
    3b60:	9e 83       	std	Y+6, r25	; 0x06
    3b62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b64:	8d 81       	ldd	r24, Y+5	; 0x05
    3b66:	9e 81       	ldd	r25, Y+6	; 0x06
    3b68:	00 97       	sbiw	r24, 0x00	; 0
    3b6a:	69 f7       	brne	.-38     	; 0x3b46 <LCD_SendCommand+0x16a>
    3b6c:	14 c0       	rjmp	.+40     	; 0x3b96 <LCD_SendCommand+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b6e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b70:	78 85       	ldd	r23, Y+8	; 0x08
    3b72:	89 85       	ldd	r24, Y+9	; 0x09
    3b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	9e 83       	std	Y+6, r25	; 0x06
    3b80:	8d 83       	std	Y+5, r24	; 0x05
    3b82:	8d 81       	ldd	r24, Y+5	; 0x05
    3b84:	9e 81       	ldd	r25, Y+6	; 0x06
    3b86:	9a 83       	std	Y+2, r25	; 0x02
    3b88:	89 83       	std	Y+1, r24	; 0x01
    3b8a:	89 81       	ldd	r24, Y+1	; 0x01
    3b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b8e:	01 97       	sbiw	r24, 0x01	; 1
    3b90:	f1 f7       	brne	.-4      	; 0x3b8e <LCD_SendCommand+0x1b2>
    3b92:	9a 83       	std	Y+2, r25	; 0x02
    3b94:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    3b96:	82 e0       	ldi	r24, 0x02	; 2
    3b98:	62 e0       	ldi	r22, 0x02	; 2
    3b9a:	40 e0       	ldi	r20, 0x00	; 0
    3b9c:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
}
    3ba0:	2f 96       	adiw	r28, 0x0f	; 15
    3ba2:	0f b6       	in	r0, 0x3f	; 63
    3ba4:	f8 94       	cli
    3ba6:	de bf       	out	0x3e, r29	; 62
    3ba8:	0f be       	out	0x3f, r0	; 63
    3baa:	cd bf       	out	0x3d, r28	; 61
    3bac:	cf 91       	pop	r28
    3bae:	df 91       	pop	r29
    3bb0:	08 95       	ret

00003bb2 <LCD_SendData>:

static void LCD_SendData(u8 data) {
    3bb2:	df 93       	push	r29
    3bb4:	cf 93       	push	r28
    3bb6:	cd b7       	in	r28, 0x3d	; 61
    3bb8:	de b7       	in	r29, 0x3e	; 62
    3bba:	2f 97       	sbiw	r28, 0x0f	; 15
    3bbc:	0f b6       	in	r0, 0x3f	; 63
    3bbe:	f8 94       	cli
    3bc0:	de bf       	out	0x3e, r29	; 62
    3bc2:	0f be       	out	0x3f, r0	; 63
    3bc4:	cd bf       	out	0x3d, r28	; 61
    3bc6:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 1 Data
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_HIGH);
    3bc8:	82 e0       	ldi	r24, 0x02	; 2
    3bca:	60 e0       	ldi	r22, 0x00	; 0
    3bcc:	41 e0       	ldi	r20, 0x01	; 1
    3bce:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    3bd2:	82 e0       	ldi	r24, 0x02	; 2
    3bd4:	61 e0       	ldi	r22, 0x01	; 1
    3bd6:	40 e0       	ldi	r20, 0x00	; 0
    3bd8:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    
    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(data, 0));
    3bdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bde:	98 2f       	mov	r25, r24
    3be0:	91 70       	andi	r25, 0x01	; 1
    3be2:	83 e0       	ldi	r24, 0x03	; 3
    3be4:	60 e0       	ldi	r22, 0x00	; 0
    3be6:	49 2f       	mov	r20, r25
    3be8:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(data, 1));
    3bec:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bee:	86 95       	lsr	r24
    3bf0:	98 2f       	mov	r25, r24
    3bf2:	91 70       	andi	r25, 0x01	; 1
    3bf4:	83 e0       	ldi	r24, 0x03	; 3
    3bf6:	61 e0       	ldi	r22, 0x01	; 1
    3bf8:	49 2f       	mov	r20, r25
    3bfa:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(data, 2));
    3bfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c00:	86 95       	lsr	r24
    3c02:	86 95       	lsr	r24
    3c04:	98 2f       	mov	r25, r24
    3c06:	91 70       	andi	r25, 0x01	; 1
    3c08:	83 e0       	ldi	r24, 0x03	; 3
    3c0a:	62 e0       	ldi	r22, 0x02	; 2
    3c0c:	49 2f       	mov	r20, r25
    3c0e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(data, 3));
    3c12:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c14:	86 95       	lsr	r24
    3c16:	86 95       	lsr	r24
    3c18:	86 95       	lsr	r24
    3c1a:	98 2f       	mov	r25, r24
    3c1c:	91 70       	andi	r25, 0x01	; 1
    3c1e:	83 e0       	ldi	r24, 0x03	; 3
    3c20:	63 e0       	ldi	r22, 0x03	; 3
    3c22:	49 2f       	mov	r20, r25
    3c24:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(data, 4));
    3c28:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c2a:	82 95       	swap	r24
    3c2c:	8f 70       	andi	r24, 0x0F	; 15
    3c2e:	98 2f       	mov	r25, r24
    3c30:	91 70       	andi	r25, 0x01	; 1
    3c32:	83 e0       	ldi	r24, 0x03	; 3
    3c34:	64 e0       	ldi	r22, 0x04	; 4
    3c36:	49 2f       	mov	r20, r25
    3c38:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(data, 5));
    3c3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c3e:	82 95       	swap	r24
    3c40:	86 95       	lsr	r24
    3c42:	87 70       	andi	r24, 0x07	; 7
    3c44:	98 2f       	mov	r25, r24
    3c46:	91 70       	andi	r25, 0x01	; 1
    3c48:	83 e0       	ldi	r24, 0x03	; 3
    3c4a:	65 e0       	ldi	r22, 0x05	; 5
    3c4c:	49 2f       	mov	r20, r25
    3c4e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(data, 6));
    3c52:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c54:	82 95       	swap	r24
    3c56:	86 95       	lsr	r24
    3c58:	86 95       	lsr	r24
    3c5a:	83 70       	andi	r24, 0x03	; 3
    3c5c:	98 2f       	mov	r25, r24
    3c5e:	91 70       	andi	r25, 0x01	; 1
    3c60:	83 e0       	ldi	r24, 0x03	; 3
    3c62:	66 e0       	ldi	r22, 0x06	; 6
    3c64:	49 2f       	mov	r20, r25
    3c66:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(data, 7));
    3c6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c6c:	98 2f       	mov	r25, r24
    3c6e:	99 1f       	adc	r25, r25
    3c70:	99 27       	eor	r25, r25
    3c72:	99 1f       	adc	r25, r25
    3c74:	83 e0       	ldi	r24, 0x03	; 3
    3c76:	67 e0       	ldi	r22, 0x07	; 7
    3c78:	49 2f       	mov	r20, r25
    3c7a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    3c7e:	82 e0       	ldi	r24, 0x02	; 2
    3c80:	62 e0       	ldi	r22, 0x02	; 2
    3c82:	41 e0       	ldi	r20, 0x01	; 1
    3c84:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    3c88:	80 e0       	ldi	r24, 0x00	; 0
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	a0 e0       	ldi	r26, 0x00	; 0
    3c8e:	b0 e4       	ldi	r27, 0x40	; 64
    3c90:	8b 87       	std	Y+11, r24	; 0x0b
    3c92:	9c 87       	std	Y+12, r25	; 0x0c
    3c94:	ad 87       	std	Y+13, r26	; 0x0d
    3c96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c98:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ca0:	20 e0       	ldi	r18, 0x00	; 0
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	4a ef       	ldi	r20, 0xFA	; 250
    3ca6:	54 e4       	ldi	r21, 0x44	; 68
    3ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cac:	dc 01       	movw	r26, r24
    3cae:	cb 01       	movw	r24, r22
    3cb0:	8f 83       	std	Y+7, r24	; 0x07
    3cb2:	98 87       	std	Y+8, r25	; 0x08
    3cb4:	a9 87       	std	Y+9, r26	; 0x09
    3cb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3cba:	78 85       	ldd	r23, Y+8	; 0x08
    3cbc:	89 85       	ldd	r24, Y+9	; 0x09
    3cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	40 e8       	ldi	r20, 0x80	; 128
    3cc6:	5f e3       	ldi	r21, 0x3F	; 63
    3cc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ccc:	88 23       	and	r24, r24
    3cce:	2c f4       	brge	.+10     	; 0x3cda <LCD_SendData+0x128>
		__ticks = 1;
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	9e 83       	std	Y+6, r25	; 0x06
    3cd6:	8d 83       	std	Y+5, r24	; 0x05
    3cd8:	3f c0       	rjmp	.+126    	; 0x3d58 <LCD_SendData+0x1a6>
	else if (__tmp > 65535)
    3cda:	6f 81       	ldd	r22, Y+7	; 0x07
    3cdc:	78 85       	ldd	r23, Y+8	; 0x08
    3cde:	89 85       	ldd	r24, Y+9	; 0x09
    3ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	3f ef       	ldi	r19, 0xFF	; 255
    3ce6:	4f e7       	ldi	r20, 0x7F	; 127
    3ce8:	57 e4       	ldi	r21, 0x47	; 71
    3cea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cee:	18 16       	cp	r1, r24
    3cf0:	4c f5       	brge	.+82     	; 0x3d44 <LCD_SendData+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cfa:	20 e0       	ldi	r18, 0x00	; 0
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	40 e2       	ldi	r20, 0x20	; 32
    3d00:	51 e4       	ldi	r21, 0x41	; 65
    3d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d06:	dc 01       	movw	r26, r24
    3d08:	cb 01       	movw	r24, r22
    3d0a:	bc 01       	movw	r22, r24
    3d0c:	cd 01       	movw	r24, r26
    3d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d12:	dc 01       	movw	r26, r24
    3d14:	cb 01       	movw	r24, r22
    3d16:	9e 83       	std	Y+6, r25	; 0x06
    3d18:	8d 83       	std	Y+5, r24	; 0x05
    3d1a:	0f c0       	rjmp	.+30     	; 0x3d3a <LCD_SendData+0x188>
    3d1c:	88 ec       	ldi	r24, 0xC8	; 200
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	9c 83       	std	Y+4, r25	; 0x04
    3d22:	8b 83       	std	Y+3, r24	; 0x03
    3d24:	8b 81       	ldd	r24, Y+3	; 0x03
    3d26:	9c 81       	ldd	r25, Y+4	; 0x04
    3d28:	01 97       	sbiw	r24, 0x01	; 1
    3d2a:	f1 f7       	brne	.-4      	; 0x3d28 <LCD_SendData+0x176>
    3d2c:	9c 83       	std	Y+4, r25	; 0x04
    3d2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d30:	8d 81       	ldd	r24, Y+5	; 0x05
    3d32:	9e 81       	ldd	r25, Y+6	; 0x06
    3d34:	01 97       	sbiw	r24, 0x01	; 1
    3d36:	9e 83       	std	Y+6, r25	; 0x06
    3d38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d3e:	00 97       	sbiw	r24, 0x00	; 0
    3d40:	69 f7       	brne	.-38     	; 0x3d1c <LCD_SendData+0x16a>
    3d42:	14 c0       	rjmp	.+40     	; 0x3d6c <LCD_SendData+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d44:	6f 81       	ldd	r22, Y+7	; 0x07
    3d46:	78 85       	ldd	r23, Y+8	; 0x08
    3d48:	89 85       	ldd	r24, Y+9	; 0x09
    3d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d50:	dc 01       	movw	r26, r24
    3d52:	cb 01       	movw	r24, r22
    3d54:	9e 83       	std	Y+6, r25	; 0x06
    3d56:	8d 83       	std	Y+5, r24	; 0x05
    3d58:	8d 81       	ldd	r24, Y+5	; 0x05
    3d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d5c:	9a 83       	std	Y+2, r25	; 0x02
    3d5e:	89 83       	std	Y+1, r24	; 0x01
    3d60:	89 81       	ldd	r24, Y+1	; 0x01
    3d62:	9a 81       	ldd	r25, Y+2	; 0x02
    3d64:	01 97       	sbiw	r24, 0x01	; 1
    3d66:	f1 f7       	brne	.-4      	; 0x3d64 <LCD_SendData+0x1b2>
    3d68:	9a 83       	std	Y+2, r25	; 0x02
    3d6a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    3d6c:	82 e0       	ldi	r24, 0x02	; 2
    3d6e:	62 e0       	ldi	r22, 0x02	; 2
    3d70:	40 e0       	ldi	r20, 0x00	; 0
    3d72:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
}
    3d76:	2f 96       	adiw	r28, 0x0f	; 15
    3d78:	0f b6       	in	r0, 0x3f	; 63
    3d7a:	f8 94       	cli
    3d7c:	de bf       	out	0x3e, r29	; 62
    3d7e:	0f be       	out	0x3f, r0	; 63
    3d80:	cd bf       	out	0x3d, r28	; 61
    3d82:	cf 91       	pop	r28
    3d84:	df 91       	pop	r29
    3d86:	08 95       	ret

00003d88 <LCD_InitPinsMode>:


static void LCD_InitPinsMode(void) {
    3d88:	df 93       	push	r29
    3d8a:	cf 93       	push	r28
    3d8c:	cd b7       	in	r28, 0x3d	; 61
    3d8e:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(LCD_PIN_RS, DIO_OUTPUT);
    3d90:	82 e0       	ldi	r24, 0x02	; 2
    3d92:	60 e0       	ldi	r22, 0x00	; 0
    3d94:	42 e0       	ldi	r20, 0x02	; 2
    3d96:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_RW, DIO_OUTPUT);
    3d9a:	82 e0       	ldi	r24, 0x02	; 2
    3d9c:	61 e0       	ldi	r22, 0x01	; 1
    3d9e:	42 e0       	ldi	r20, 0x02	; 2
    3da0:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_E , DIO_OUTPUT);
    3da4:	82 e0       	ldi	r24, 0x02	; 2
    3da6:	62 e0       	ldi	r22, 0x02	; 2
    3da8:	42 e0       	ldi	r20, 0x02	; 2
    3daa:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D0, DIO_OUTPUT);
    3dae:	83 e0       	ldi	r24, 0x03	; 3
    3db0:	60 e0       	ldi	r22, 0x00	; 0
    3db2:	42 e0       	ldi	r20, 0x02	; 2
    3db4:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D1, DIO_OUTPUT);
    3db8:	83 e0       	ldi	r24, 0x03	; 3
    3dba:	61 e0       	ldi	r22, 0x01	; 1
    3dbc:	42 e0       	ldi	r20, 0x02	; 2
    3dbe:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D2, DIO_OUTPUT);
    3dc2:	83 e0       	ldi	r24, 0x03	; 3
    3dc4:	62 e0       	ldi	r22, 0x02	; 2
    3dc6:	42 e0       	ldi	r20, 0x02	; 2
    3dc8:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D3, DIO_OUTPUT);
    3dcc:	83 e0       	ldi	r24, 0x03	; 3
    3dce:	63 e0       	ldi	r22, 0x03	; 3
    3dd0:	42 e0       	ldi	r20, 0x02	; 2
    3dd2:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D4, DIO_OUTPUT);
    3dd6:	83 e0       	ldi	r24, 0x03	; 3
    3dd8:	64 e0       	ldi	r22, 0x04	; 4
    3dda:	42 e0       	ldi	r20, 0x02	; 2
    3ddc:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D5, DIO_OUTPUT);
    3de0:	83 e0       	ldi	r24, 0x03	; 3
    3de2:	65 e0       	ldi	r22, 0x05	; 5
    3de4:	42 e0       	ldi	r20, 0x02	; 2
    3de6:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D6, DIO_OUTPUT);
    3dea:	83 e0       	ldi	r24, 0x03	; 3
    3dec:	66 e0       	ldi	r22, 0x06	; 6
    3dee:	42 e0       	ldi	r20, 0x02	; 2
    3df0:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D7, DIO_OUTPUT);
    3df4:	83 e0       	ldi	r24, 0x03	; 3
    3df6:	67 e0       	ldi	r22, 0x07	; 7
    3df8:	42 e0       	ldi	r20, 0x02	; 2
    3dfa:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
}
    3dfe:	cf 91       	pop	r28
    3e00:	df 91       	pop	r29
    3e02:	08 95       	ret

00003e04 <SPI_Init>:
#include "SPI.h"
#include "SPI_cfg.h"
#include "DIO.h"


void SPI_Init () {
    3e04:	df 93       	push	r29
    3e06:	cf 93       	push	r28
    3e08:	cd b7       	in	r28, 0x3d	; 61
    3e0a:	de b7       	in	r29, 0x3e	; 62

    #if (DATA_ORDER == LSB)
    SET_BIT(SPCR,SPCR_DORD);
    3e0c:	ad e2       	ldi	r26, 0x2D	; 45
    3e0e:	b0 e0       	ldi	r27, 0x00	; 0
    3e10:	ed e2       	ldi	r30, 0x2D	; 45
    3e12:	f0 e0       	ldi	r31, 0x00	; 0
    3e14:	80 81       	ld	r24, Z
    3e16:	80 62       	ori	r24, 0x20	; 32
    3e18:	8c 93       	st	X, r24
    DIO_SetPinMode(DIO_PORTB,DIO_PIN5,DIO_OUTPUT);
    DIO_SetPinMode(DIO_PORTB,DIO_PIN4,DIO_OUTPUT);
    DIO_SetPinMode(DIO_PORTB,DIO_PIN7,DIO_OUTPUT);
    DIO_SetPinMode(DIO_PORTB,DIO_PIN6,DIO_INPUT_FLOATING);
    #elif (SPI_MODE == SLAVE)
    CLR_BIT(SPCR,SPCR_MSTR);
    3e1a:	ad e2       	ldi	r26, 0x2D	; 45
    3e1c:	b0 e0       	ldi	r27, 0x00	; 0
    3e1e:	ed e2       	ldi	r30, 0x2D	; 45
    3e20:	f0 e0       	ldi	r31, 0x00	; 0
    3e22:	80 81       	ld	r24, Z
    3e24:	8f 7e       	andi	r24, 0xEF	; 239
    3e26:	8c 93       	st	X, r24
    DIO_SetPinMode(DIO_PORTB,DIO_PIN5,DIO_INPUT_FLOATING);
    3e28:	81 e0       	ldi	r24, 0x01	; 1
    3e2a:	65 e0       	ldi	r22, 0x05	; 5
    3e2c:	40 e0       	ldi	r20, 0x00	; 0
    3e2e:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTB,DIO_PIN4,DIO_INPUT_FLOATING);
    3e32:	81 e0       	ldi	r24, 0x01	; 1
    3e34:	64 e0       	ldi	r22, 0x04	; 4
    3e36:	40 e0       	ldi	r20, 0x00	; 0
    3e38:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTB,DIO_PIN7,DIO_INPUT_FLOATING);
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	67 e0       	ldi	r22, 0x07	; 7
    3e40:	40 e0       	ldi	r20, 0x00	; 0
    3e42:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTB,DIO_PIN6,DIO_OUTPUT);
    3e46:	81 e0       	ldi	r24, 0x01	; 1
    3e48:	66 e0       	ldi	r22, 0x06	; 6
    3e4a:	42 e0       	ldi	r20, 0x02	; 2
    3e4c:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    #endif

    SET_BIT(SPCR,SPCR_SPE);
    3e50:	ad e2       	ldi	r26, 0x2D	; 45
    3e52:	b0 e0       	ldi	r27, 0x00	; 0
    3e54:	ed e2       	ldi	r30, 0x2D	; 45
    3e56:	f0 e0       	ldi	r31, 0x00	; 0
    3e58:	80 81       	ld	r24, Z
    3e5a:	80 64       	ori	r24, 0x40	; 64
    3e5c:	8c 93       	st	X, r24
}
    3e5e:	cf 91       	pop	r28
    3e60:	df 91       	pop	r29
    3e62:	08 95       	ret

00003e64 <SPI_Send_Data>:
void SPI_Send_Data(u8 data) {
    3e64:	df 93       	push	r29
    3e66:	cf 93       	push	r28
    3e68:	0f 92       	push	r0
    3e6a:	cd b7       	in	r28, 0x3d	; 61
    3e6c:	de b7       	in	r29, 0x3e	; 62
    3e6e:	89 83       	std	Y+1, r24	; 0x01
    SPDR = data;
    3e70:	ef e2       	ldi	r30, 0x2F	; 47
    3e72:	f0 e0       	ldi	r31, 0x00	; 0
    3e74:	89 81       	ldd	r24, Y+1	; 0x01
    3e76:	80 83       	st	Z, r24
    while (GET_BIT(SPSR,SPSR_SPIF) == 0);
    3e78:	ee e2       	ldi	r30, 0x2E	; 46
    3e7a:	f0 e0       	ldi	r31, 0x00	; 0
    3e7c:	80 81       	ld	r24, Z
    3e7e:	88 23       	and	r24, r24
    3e80:	dc f7       	brge	.-10     	; 0x3e78 <SPI_Send_Data+0x14>
}
    3e82:	0f 90       	pop	r0
    3e84:	cf 91       	pop	r28
    3e86:	df 91       	pop	r29
    3e88:	08 95       	ret

00003e8a <SPI_Recieve_Data>:
u8 SPI_Recieve_Data() {
    3e8a:	df 93       	push	r29
    3e8c:	cf 93       	push	r28
    3e8e:	cd b7       	in	r28, 0x3d	; 61
    3e90:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(SPSR,SPSR_SPIF) == 0);
    3e92:	ee e2       	ldi	r30, 0x2E	; 46
    3e94:	f0 e0       	ldi	r31, 0x00	; 0
    3e96:	80 81       	ld	r24, Z
    3e98:	88 23       	and	r24, r24
    3e9a:	dc f7       	brge	.-10     	; 0x3e92 <SPI_Recieve_Data+0x8>
    return SPDR;
    3e9c:	ef e2       	ldi	r30, 0x2F	; 47
    3e9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ea0:	80 81       	ld	r24, Z
}
    3ea2:	cf 91       	pop	r28
    3ea4:	df 91       	pop	r29
    3ea6:	08 95       	ret

00003ea8 <SSD_Init>:
	_delay_ms(500);
	PORTD = 0b01101111; // Print 9
	_delay_ms(500);
	PORTD = 0b00000000; // off*/

void SSD_Init(void) {
    3ea8:	df 93       	push	r29
    3eaa:	cf 93       	push	r28
    3eac:	cd b7       	in	r28, 0x3d	; 61
    3eae:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(SSD_PIN_A, DIO_OUTPUT);
    3eb0:	81 e0       	ldi	r24, 0x01	; 1
    3eb2:	66 e0       	ldi	r22, 0x06	; 6
    3eb4:	42 e0       	ldi	r20, 0x02	; 2
    3eb6:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_B, DIO_OUTPUT);
    3eba:	81 e0       	ldi	r24, 0x01	; 1
    3ebc:	65 e0       	ldi	r22, 0x05	; 5
    3ebe:	42 e0       	ldi	r20, 0x02	; 2
    3ec0:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_C, DIO_OUTPUT);
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	64 e0       	ldi	r22, 0x04	; 4
    3ec8:	42 e0       	ldi	r20, 0x02	; 2
    3eca:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_D, DIO_OUTPUT);
    3ece:	81 e0       	ldi	r24, 0x01	; 1
    3ed0:	67 e0       	ldi	r22, 0x07	; 7
    3ed2:	42 e0       	ldi	r20, 0x02	; 2
    3ed4:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_E, DIO_OUTPUT);
    3ed8:	81 e0       	ldi	r24, 0x01	; 1
    3eda:	62 e0       	ldi	r22, 0x02	; 2
    3edc:	42 e0       	ldi	r20, 0x02	; 2
    3ede:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_F, DIO_OUTPUT);
    3ee2:	81 e0       	ldi	r24, 0x01	; 1
    3ee4:	61 e0       	ldi	r22, 0x01	; 1
    3ee6:	42 e0       	ldi	r20, 0x02	; 2
    3ee8:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_G, DIO_OUTPUT);
    3eec:	81 e0       	ldi	r24, 0x01	; 1
    3eee:	60 e0       	ldi	r22, 0x00	; 0
    3ef0:	42 e0       	ldi	r20, 0x02	; 2
    3ef2:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>

}
    3ef6:	cf 91       	pop	r28
    3ef8:	df 91       	pop	r29
    3efa:	08 95       	ret

00003efc <SSD_Write>:
void SSD_Write (SSD_NumberType number) {
    3efc:	df 93       	push	r29
    3efe:	cf 93       	push	r28
    3f00:	00 d0       	rcall	.+0      	; 0x3f02 <SSD_Write+0x6>
    3f02:	0f 92       	push	r0
    3f04:	cd b7       	in	r28, 0x3d	; 61
    3f06:	de b7       	in	r29, 0x3e	; 62
    3f08:	89 83       	std	Y+1, r24	; 0x01
    switch (number)
    3f0a:	89 81       	ldd	r24, Y+1	; 0x01
    3f0c:	28 2f       	mov	r18, r24
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	3b 83       	std	Y+3, r19	; 0x03
    3f12:	2a 83       	std	Y+2, r18	; 0x02
    3f14:	8a 81       	ldd	r24, Y+2	; 0x02
    3f16:	9b 81       	ldd	r25, Y+3	; 0x03
    3f18:	84 30       	cpi	r24, 0x04	; 4
    3f1a:	91 05       	cpc	r25, r1
    3f1c:	09 f4       	brne	.+2      	; 0x3f20 <SSD_Write+0x24>
    3f1e:	d7 c0       	rjmp	.+430    	; 0x40ce <SSD_Write+0x1d2>
    3f20:	2a 81       	ldd	r18, Y+2	; 0x02
    3f22:	3b 81       	ldd	r19, Y+3	; 0x03
    3f24:	25 30       	cpi	r18, 0x05	; 5
    3f26:	31 05       	cpc	r19, r1
    3f28:	ec f4       	brge	.+58     	; 0x3f64 <SSD_Write+0x68>
    3f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f2c:	9b 81       	ldd	r25, Y+3	; 0x03
    3f2e:	81 30       	cpi	r24, 0x01	; 1
    3f30:	91 05       	cpc	r25, r1
    3f32:	09 f4       	brne	.+2      	; 0x3f36 <SSD_Write+0x3a>
    3f34:	60 c0       	rjmp	.+192    	; 0x3ff6 <SSD_Write+0xfa>
    3f36:	2a 81       	ldd	r18, Y+2	; 0x02
    3f38:	3b 81       	ldd	r19, Y+3	; 0x03
    3f3a:	22 30       	cpi	r18, 0x02	; 2
    3f3c:	31 05       	cpc	r19, r1
    3f3e:	2c f4       	brge	.+10     	; 0x3f4a <SSD_Write+0x4e>
    3f40:	8a 81       	ldd	r24, Y+2	; 0x02
    3f42:	9b 81       	ldd	r25, Y+3	; 0x03
    3f44:	00 97       	sbiw	r24, 0x00	; 0
    3f46:	99 f1       	breq	.+102    	; 0x3fae <SSD_Write+0xb2>
    3f48:	9a c1       	rjmp	.+820    	; 0x427e <SSD_Write+0x382>
    3f4a:	2a 81       	ldd	r18, Y+2	; 0x02
    3f4c:	3b 81       	ldd	r19, Y+3	; 0x03
    3f4e:	22 30       	cpi	r18, 0x02	; 2
    3f50:	31 05       	cpc	r19, r1
    3f52:	09 f4       	brne	.+2      	; 0x3f56 <SSD_Write+0x5a>
    3f54:	74 c0       	rjmp	.+232    	; 0x403e <SSD_Write+0x142>
    3f56:	8a 81       	ldd	r24, Y+2	; 0x02
    3f58:	9b 81       	ldd	r25, Y+3	; 0x03
    3f5a:	83 30       	cpi	r24, 0x03	; 3
    3f5c:	91 05       	cpc	r25, r1
    3f5e:	09 f4       	brne	.+2      	; 0x3f62 <SSD_Write+0x66>
    3f60:	92 c0       	rjmp	.+292    	; 0x4086 <SSD_Write+0x18a>
    3f62:	8d c1       	rjmp	.+794    	; 0x427e <SSD_Write+0x382>
    3f64:	2a 81       	ldd	r18, Y+2	; 0x02
    3f66:	3b 81       	ldd	r19, Y+3	; 0x03
    3f68:	27 30       	cpi	r18, 0x07	; 7
    3f6a:	31 05       	cpc	r19, r1
    3f6c:	09 f4       	brne	.+2      	; 0x3f70 <SSD_Write+0x74>
    3f6e:	1b c1       	rjmp	.+566    	; 0x41a6 <SSD_Write+0x2aa>
    3f70:	8a 81       	ldd	r24, Y+2	; 0x02
    3f72:	9b 81       	ldd	r25, Y+3	; 0x03
    3f74:	88 30       	cpi	r24, 0x08	; 8
    3f76:	91 05       	cpc	r25, r1
    3f78:	6c f4       	brge	.+26     	; 0x3f94 <SSD_Write+0x98>
    3f7a:	2a 81       	ldd	r18, Y+2	; 0x02
    3f7c:	3b 81       	ldd	r19, Y+3	; 0x03
    3f7e:	25 30       	cpi	r18, 0x05	; 5
    3f80:	31 05       	cpc	r19, r1
    3f82:	09 f4       	brne	.+2      	; 0x3f86 <SSD_Write+0x8a>
    3f84:	c8 c0       	rjmp	.+400    	; 0x4116 <SSD_Write+0x21a>
    3f86:	8a 81       	ldd	r24, Y+2	; 0x02
    3f88:	9b 81       	ldd	r25, Y+3	; 0x03
    3f8a:	86 30       	cpi	r24, 0x06	; 6
    3f8c:	91 05       	cpc	r25, r1
    3f8e:	09 f4       	brne	.+2      	; 0x3f92 <SSD_Write+0x96>
    3f90:	e6 c0       	rjmp	.+460    	; 0x415e <SSD_Write+0x262>
    3f92:	75 c1       	rjmp	.+746    	; 0x427e <SSD_Write+0x382>
    3f94:	2a 81       	ldd	r18, Y+2	; 0x02
    3f96:	3b 81       	ldd	r19, Y+3	; 0x03
    3f98:	28 30       	cpi	r18, 0x08	; 8
    3f9a:	31 05       	cpc	r19, r1
    3f9c:	09 f4       	brne	.+2      	; 0x3fa0 <SSD_Write+0xa4>
    3f9e:	27 c1       	rjmp	.+590    	; 0x41ee <SSD_Write+0x2f2>
    3fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa2:	9b 81       	ldd	r25, Y+3	; 0x03
    3fa4:	89 30       	cpi	r24, 0x09	; 9
    3fa6:	91 05       	cpc	r25, r1
    3fa8:	09 f4       	brne	.+2      	; 0x3fac <SSD_Write+0xb0>
    3faa:	45 c1       	rjmp	.+650    	; 0x4236 <SSD_Write+0x33a>
    3fac:	68 c1       	rjmp	.+720    	; 0x427e <SSD_Write+0x382>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    3fae:	81 e0       	ldi	r24, 0x01	; 1
    3fb0:	66 e0       	ldi	r22, 0x06	; 6
    3fb2:	40 e0       	ldi	r20, 0x00	; 0
    3fb4:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    3fb8:	81 e0       	ldi	r24, 0x01	; 1
    3fba:	65 e0       	ldi	r22, 0x05	; 5
    3fbc:	40 e0       	ldi	r20, 0x00	; 0
    3fbe:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    3fc2:	81 e0       	ldi	r24, 0x01	; 1
    3fc4:	64 e0       	ldi	r22, 0x04	; 4
    3fc6:	40 e0       	ldi	r20, 0x00	; 0
    3fc8:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    3fcc:	81 e0       	ldi	r24, 0x01	; 1
    3fce:	67 e0       	ldi	r22, 0x07	; 7
    3fd0:	40 e0       	ldi	r20, 0x00	; 0
    3fd2:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    3fd6:	81 e0       	ldi	r24, 0x01	; 1
    3fd8:	62 e0       	ldi	r22, 0x02	; 2
    3fda:	40 e0       	ldi	r20, 0x00	; 0
    3fdc:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	61 e0       	ldi	r22, 0x01	; 1
    3fe4:	40 e0       	ldi	r20, 0x00	; 0
    3fe6:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    3fec:	60 e0       	ldi	r22, 0x00	; 0
    3fee:	41 e0       	ldi	r20, 0x01	; 1
    3ff0:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    3ff4:	67 c1       	rjmp	.+718    	; 0x42c4 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    3ff6:	81 e0       	ldi	r24, 0x01	; 1
    3ff8:	66 e0       	ldi	r22, 0x06	; 6
    3ffa:	41 e0       	ldi	r20, 0x01	; 1
    3ffc:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    4000:	81 e0       	ldi	r24, 0x01	; 1
    4002:	65 e0       	ldi	r22, 0x05	; 5
    4004:	40 e0       	ldi	r20, 0x00	; 0
    4006:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    400a:	81 e0       	ldi	r24, 0x01	; 1
    400c:	64 e0       	ldi	r22, 0x04	; 4
    400e:	40 e0       	ldi	r20, 0x00	; 0
    4010:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    4014:	81 e0       	ldi	r24, 0x01	; 1
    4016:	67 e0       	ldi	r22, 0x07	; 7
    4018:	41 e0       	ldi	r20, 0x01	; 1
    401a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	62 e0       	ldi	r22, 0x02	; 2
    4022:	41 e0       	ldi	r20, 0x01	; 1
    4024:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    4028:	81 e0       	ldi	r24, 0x01	; 1
    402a:	61 e0       	ldi	r22, 0x01	; 1
    402c:	41 e0       	ldi	r20, 0x01	; 1
    402e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    4032:	81 e0       	ldi	r24, 0x01	; 1
    4034:	60 e0       	ldi	r22, 0x00	; 0
    4036:	41 e0       	ldi	r20, 0x01	; 1
    4038:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    403c:	43 c1       	rjmp	.+646    	; 0x42c4 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    403e:	81 e0       	ldi	r24, 0x01	; 1
    4040:	66 e0       	ldi	r22, 0x06	; 6
    4042:	40 e0       	ldi	r20, 0x00	; 0
    4044:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    4048:	81 e0       	ldi	r24, 0x01	; 1
    404a:	65 e0       	ldi	r22, 0x05	; 5
    404c:	40 e0       	ldi	r20, 0x00	; 0
    404e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    4052:	81 e0       	ldi	r24, 0x01	; 1
    4054:	64 e0       	ldi	r22, 0x04	; 4
    4056:	41 e0       	ldi	r20, 0x01	; 1
    4058:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    405c:	81 e0       	ldi	r24, 0x01	; 1
    405e:	67 e0       	ldi	r22, 0x07	; 7
    4060:	40 e0       	ldi	r20, 0x00	; 0
    4062:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    4066:	81 e0       	ldi	r24, 0x01	; 1
    4068:	62 e0       	ldi	r22, 0x02	; 2
    406a:	40 e0       	ldi	r20, 0x00	; 0
    406c:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    4070:	81 e0       	ldi	r24, 0x01	; 1
    4072:	61 e0       	ldi	r22, 0x01	; 1
    4074:	41 e0       	ldi	r20, 0x01	; 1
    4076:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	60 e0       	ldi	r22, 0x00	; 0
    407e:	40 e0       	ldi	r20, 0x00	; 0
    4080:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    4084:	1f c1       	rjmp	.+574    	; 0x42c4 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    4086:	81 e0       	ldi	r24, 0x01	; 1
    4088:	66 e0       	ldi	r22, 0x06	; 6
    408a:	40 e0       	ldi	r20, 0x00	; 0
    408c:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    4090:	81 e0       	ldi	r24, 0x01	; 1
    4092:	65 e0       	ldi	r22, 0x05	; 5
    4094:	40 e0       	ldi	r20, 0x00	; 0
    4096:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    409a:	81 e0       	ldi	r24, 0x01	; 1
    409c:	64 e0       	ldi	r22, 0x04	; 4
    409e:	40 e0       	ldi	r20, 0x00	; 0
    40a0:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    40a4:	81 e0       	ldi	r24, 0x01	; 1
    40a6:	67 e0       	ldi	r22, 0x07	; 7
    40a8:	40 e0       	ldi	r20, 0x00	; 0
    40aa:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    40ae:	81 e0       	ldi	r24, 0x01	; 1
    40b0:	62 e0       	ldi	r22, 0x02	; 2
    40b2:	41 e0       	ldi	r20, 0x01	; 1
    40b4:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    40b8:	81 e0       	ldi	r24, 0x01	; 1
    40ba:	61 e0       	ldi	r22, 0x01	; 1
    40bc:	41 e0       	ldi	r20, 0x01	; 1
    40be:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	60 e0       	ldi	r22, 0x00	; 0
    40c6:	40 e0       	ldi	r20, 0x00	; 0
    40c8:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    40cc:	fb c0       	rjmp	.+502    	; 0x42c4 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    40ce:	81 e0       	ldi	r24, 0x01	; 1
    40d0:	66 e0       	ldi	r22, 0x06	; 6
    40d2:	41 e0       	ldi	r20, 0x01	; 1
    40d4:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    40d8:	81 e0       	ldi	r24, 0x01	; 1
    40da:	65 e0       	ldi	r22, 0x05	; 5
    40dc:	40 e0       	ldi	r20, 0x00	; 0
    40de:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    40e2:	81 e0       	ldi	r24, 0x01	; 1
    40e4:	64 e0       	ldi	r22, 0x04	; 4
    40e6:	40 e0       	ldi	r20, 0x00	; 0
    40e8:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    40ec:	81 e0       	ldi	r24, 0x01	; 1
    40ee:	67 e0       	ldi	r22, 0x07	; 7
    40f0:	41 e0       	ldi	r20, 0x01	; 1
    40f2:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    40f6:	81 e0       	ldi	r24, 0x01	; 1
    40f8:	62 e0       	ldi	r22, 0x02	; 2
    40fa:	41 e0       	ldi	r20, 0x01	; 1
    40fc:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    4100:	81 e0       	ldi	r24, 0x01	; 1
    4102:	61 e0       	ldi	r22, 0x01	; 1
    4104:	40 e0       	ldi	r20, 0x00	; 0
    4106:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    410a:	81 e0       	ldi	r24, 0x01	; 1
    410c:	60 e0       	ldi	r22, 0x00	; 0
    410e:	40 e0       	ldi	r20, 0x00	; 0
    4110:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    4114:	d7 c0       	rjmp	.+430    	; 0x42c4 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    4116:	81 e0       	ldi	r24, 0x01	; 1
    4118:	66 e0       	ldi	r22, 0x06	; 6
    411a:	40 e0       	ldi	r20, 0x00	; 0
    411c:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    4120:	81 e0       	ldi	r24, 0x01	; 1
    4122:	65 e0       	ldi	r22, 0x05	; 5
    4124:	41 e0       	ldi	r20, 0x01	; 1
    4126:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    412a:	81 e0       	ldi	r24, 0x01	; 1
    412c:	64 e0       	ldi	r22, 0x04	; 4
    412e:	40 e0       	ldi	r20, 0x00	; 0
    4130:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	67 e0       	ldi	r22, 0x07	; 7
    4138:	40 e0       	ldi	r20, 0x00	; 0
    413a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    413e:	81 e0       	ldi	r24, 0x01	; 1
    4140:	62 e0       	ldi	r22, 0x02	; 2
    4142:	41 e0       	ldi	r20, 0x01	; 1
    4144:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    4148:	81 e0       	ldi	r24, 0x01	; 1
    414a:	61 e0       	ldi	r22, 0x01	; 1
    414c:	40 e0       	ldi	r20, 0x00	; 0
    414e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    4152:	81 e0       	ldi	r24, 0x01	; 1
    4154:	60 e0       	ldi	r22, 0x00	; 0
    4156:	40 e0       	ldi	r20, 0x00	; 0
    4158:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    415c:	b3 c0       	rjmp	.+358    	; 0x42c4 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    415e:	81 e0       	ldi	r24, 0x01	; 1
    4160:	66 e0       	ldi	r22, 0x06	; 6
    4162:	40 e0       	ldi	r20, 0x00	; 0
    4164:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    4168:	81 e0       	ldi	r24, 0x01	; 1
    416a:	65 e0       	ldi	r22, 0x05	; 5
    416c:	41 e0       	ldi	r20, 0x01	; 1
    416e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    4172:	81 e0       	ldi	r24, 0x01	; 1
    4174:	64 e0       	ldi	r22, 0x04	; 4
    4176:	40 e0       	ldi	r20, 0x00	; 0
    4178:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    417c:	81 e0       	ldi	r24, 0x01	; 1
    417e:	67 e0       	ldi	r22, 0x07	; 7
    4180:	40 e0       	ldi	r20, 0x00	; 0
    4182:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	62 e0       	ldi	r22, 0x02	; 2
    418a:	40 e0       	ldi	r20, 0x00	; 0
    418c:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    4190:	81 e0       	ldi	r24, 0x01	; 1
    4192:	61 e0       	ldi	r22, 0x01	; 1
    4194:	40 e0       	ldi	r20, 0x00	; 0
    4196:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    419a:	81 e0       	ldi	r24, 0x01	; 1
    419c:	60 e0       	ldi	r22, 0x00	; 0
    419e:	40 e0       	ldi	r20, 0x00	; 0
    41a0:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    41a4:	8f c0       	rjmp	.+286    	; 0x42c4 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    41a6:	81 e0       	ldi	r24, 0x01	; 1
    41a8:	66 e0       	ldi	r22, 0x06	; 6
    41aa:	40 e0       	ldi	r20, 0x00	; 0
    41ac:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    41b0:	81 e0       	ldi	r24, 0x01	; 1
    41b2:	65 e0       	ldi	r22, 0x05	; 5
    41b4:	40 e0       	ldi	r20, 0x00	; 0
    41b6:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    41ba:	81 e0       	ldi	r24, 0x01	; 1
    41bc:	64 e0       	ldi	r22, 0x04	; 4
    41be:	40 e0       	ldi	r20, 0x00	; 0
    41c0:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	67 e0       	ldi	r22, 0x07	; 7
    41c8:	41 e0       	ldi	r20, 0x01	; 1
    41ca:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    41ce:	81 e0       	ldi	r24, 0x01	; 1
    41d0:	62 e0       	ldi	r22, 0x02	; 2
    41d2:	41 e0       	ldi	r20, 0x01	; 1
    41d4:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    41d8:	81 e0       	ldi	r24, 0x01	; 1
    41da:	61 e0       	ldi	r22, 0x01	; 1
    41dc:	41 e0       	ldi	r20, 0x01	; 1
    41de:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    41e2:	81 e0       	ldi	r24, 0x01	; 1
    41e4:	60 e0       	ldi	r22, 0x00	; 0
    41e6:	41 e0       	ldi	r20, 0x01	; 1
    41e8:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    41ec:	6b c0       	rjmp	.+214    	; 0x42c4 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    41ee:	81 e0       	ldi	r24, 0x01	; 1
    41f0:	66 e0       	ldi	r22, 0x06	; 6
    41f2:	40 e0       	ldi	r20, 0x00	; 0
    41f4:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    41f8:	81 e0       	ldi	r24, 0x01	; 1
    41fa:	65 e0       	ldi	r22, 0x05	; 5
    41fc:	40 e0       	ldi	r20, 0x00	; 0
    41fe:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    4202:	81 e0       	ldi	r24, 0x01	; 1
    4204:	64 e0       	ldi	r22, 0x04	; 4
    4206:	40 e0       	ldi	r20, 0x00	; 0
    4208:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    420c:	81 e0       	ldi	r24, 0x01	; 1
    420e:	67 e0       	ldi	r22, 0x07	; 7
    4210:	40 e0       	ldi	r20, 0x00	; 0
    4212:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    4216:	81 e0       	ldi	r24, 0x01	; 1
    4218:	62 e0       	ldi	r22, 0x02	; 2
    421a:	40 e0       	ldi	r20, 0x00	; 0
    421c:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    4220:	81 e0       	ldi	r24, 0x01	; 1
    4222:	61 e0       	ldi	r22, 0x01	; 1
    4224:	40 e0       	ldi	r20, 0x00	; 0
    4226:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    422a:	81 e0       	ldi	r24, 0x01	; 1
    422c:	60 e0       	ldi	r22, 0x00	; 0
    422e:	40 e0       	ldi	r20, 0x00	; 0
    4230:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    4234:	47 c0       	rjmp	.+142    	; 0x42c4 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    4236:	81 e0       	ldi	r24, 0x01	; 1
    4238:	66 e0       	ldi	r22, 0x06	; 6
    423a:	40 e0       	ldi	r20, 0x00	; 0
    423c:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    4240:	81 e0       	ldi	r24, 0x01	; 1
    4242:	65 e0       	ldi	r22, 0x05	; 5
    4244:	40 e0       	ldi	r20, 0x00	; 0
    4246:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    424a:	81 e0       	ldi	r24, 0x01	; 1
    424c:	64 e0       	ldi	r22, 0x04	; 4
    424e:	40 e0       	ldi	r20, 0x00	; 0
    4250:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    4254:	81 e0       	ldi	r24, 0x01	; 1
    4256:	67 e0       	ldi	r22, 0x07	; 7
    4258:	40 e0       	ldi	r20, 0x00	; 0
    425a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    425e:	81 e0       	ldi	r24, 0x01	; 1
    4260:	62 e0       	ldi	r22, 0x02	; 2
    4262:	41 e0       	ldi	r20, 0x01	; 1
    4264:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    4268:	81 e0       	ldi	r24, 0x01	; 1
    426a:	61 e0       	ldi	r22, 0x01	; 1
    426c:	40 e0       	ldi	r20, 0x00	; 0
    426e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    4272:	81 e0       	ldi	r24, 0x01	; 1
    4274:	60 e0       	ldi	r22, 0x00	; 0
    4276:	40 e0       	ldi	r20, 0x00	; 0
    4278:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    427c:	23 c0       	rjmp	.+70     	; 0x42c4 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    427e:	81 e0       	ldi	r24, 0x01	; 1
    4280:	66 e0       	ldi	r22, 0x06	; 6
    4282:	41 e0       	ldi	r20, 0x01	; 1
    4284:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    4288:	81 e0       	ldi	r24, 0x01	; 1
    428a:	65 e0       	ldi	r22, 0x05	; 5
    428c:	41 e0       	ldi	r20, 0x01	; 1
    428e:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	64 e0       	ldi	r22, 0x04	; 4
    4296:	41 e0       	ldi	r20, 0x01	; 1
    4298:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    429c:	81 e0       	ldi	r24, 0x01	; 1
    429e:	67 e0       	ldi	r22, 0x07	; 7
    42a0:	41 e0       	ldi	r20, 0x01	; 1
    42a2:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    42a6:	81 e0       	ldi	r24, 0x01	; 1
    42a8:	62 e0       	ldi	r22, 0x02	; 2
    42aa:	41 e0       	ldi	r20, 0x01	; 1
    42ac:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    42b0:	81 e0       	ldi	r24, 0x01	; 1
    42b2:	61 e0       	ldi	r22, 0x01	; 1
    42b4:	41 e0       	ldi	r20, 0x01	; 1
    42b6:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    42ba:	81 e0       	ldi	r24, 0x01	; 1
    42bc:	60 e0       	ldi	r22, 0x00	; 0
    42be:	41 e0       	ldi	r20, 0x01	; 1
    42c0:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    #else 
        #error "Invalid SSD Type"
    #endif
        break;
    }
}
    42c4:	0f 90       	pop	r0
    42c6:	0f 90       	pop	r0
    42c8:	0f 90       	pop	r0
    42ca:	cf 91       	pop	r28
    42cc:	df 91       	pop	r29
    42ce:	08 95       	ret

000042d0 <Spt_Init>:
// {
//     Spt_Timer2_Callback_Ctc();
// }

Spt_ReturnType Spt_Init(Spt_ConfigType *config)
{
    42d0:	df 93       	push	r29
    42d2:	cf 93       	push	r28
    42d4:	cd b7       	in	r28, 0x3d	; 61
    42d6:	de b7       	in	r29, 0x3e	; 62
    42d8:	65 97       	sbiw	r28, 0x15	; 21
    42da:	0f b6       	in	r0, 0x3f	; 63
    42dc:	f8 94       	cli
    42de:	de bf       	out	0x3e, r29	; 62
    42e0:	0f be       	out	0x3f, r0	; 63
    42e2:	cd bf       	out	0x3d, r28	; 61
    42e4:	9b 83       	std	Y+3, r25	; 0x03
    42e6:	8a 83       	std	Y+2, r24	; 0x02
    Spt_ReturnType returnValue = SPT_OK;
    42e8:	81 e0       	ldi	r24, 0x01	; 1
    42ea:	89 83       	std	Y+1, r24	; 0x01

    switch (config->channel)
    42ec:	ea 81       	ldd	r30, Y+2	; 0x02
    42ee:	fb 81       	ldd	r31, Y+3	; 0x03
    42f0:	80 81       	ld	r24, Z
    42f2:	28 2f       	mov	r18, r24
    42f4:	30 e0       	ldi	r19, 0x00	; 0
    42f6:	3d 8b       	std	Y+21, r19	; 0x15
    42f8:	2c 8b       	std	Y+20, r18	; 0x14
    42fa:	8c 89       	ldd	r24, Y+20	; 0x14
    42fc:	9d 89       	ldd	r25, Y+21	; 0x15
    42fe:	81 30       	cpi	r24, 0x01	; 1
    4300:	91 05       	cpc	r25, r1
    4302:	09 f4       	brne	.+2      	; 0x4306 <Spt_Init+0x36>
    4304:	77 c1       	rjmp	.+750    	; 0x45f4 <Spt_Init+0x324>
    4306:	2c 89       	ldd	r18, Y+20	; 0x14
    4308:	3d 89       	ldd	r19, Y+21	; 0x15
    430a:	22 30       	cpi	r18, 0x02	; 2
    430c:	31 05       	cpc	r19, r1
    430e:	2c f4       	brge	.+10     	; 0x431a <Spt_Init+0x4a>
    4310:	8c 89       	ldd	r24, Y+20	; 0x14
    4312:	9d 89       	ldd	r25, Y+21	; 0x15
    4314:	00 97       	sbiw	r24, 0x00	; 0
    4316:	71 f0       	breq	.+28     	; 0x4334 <Spt_Init+0x64>
    4318:	b7 c5       	rjmp	.+2926   	; 0x4e88 <Spt_Init+0xbb8>
    431a:	2c 89       	ldd	r18, Y+20	; 0x14
    431c:	3d 89       	ldd	r19, Y+21	; 0x15
    431e:	22 30       	cpi	r18, 0x02	; 2
    4320:	31 05       	cpc	r19, r1
    4322:	09 f4       	brne	.+2      	; 0x4326 <Spt_Init+0x56>
    4324:	dc c2       	rjmp	.+1464   	; 0x48de <Spt_Init+0x60e>
    4326:	8c 89       	ldd	r24, Y+20	; 0x14
    4328:	9d 89       	ldd	r25, Y+21	; 0x15
    432a:	83 30       	cpi	r24, 0x03	; 3
    432c:	91 05       	cpc	r25, r1
    432e:	09 f4       	brne	.+2      	; 0x4332 <Spt_Init+0x62>
    4330:	4b c4       	rjmp	.+2198   	; 0x4bc8 <Spt_Init+0x8f8>
    4332:	aa c5       	rjmp	.+2900   	; 0x4e88 <Spt_Init+0xbb8>
    {

    case SPT_CHANNEL_TIMER0:
        /*Waveform Generation Mode*/
        if (config->mode == SPT_MODE_FAST_PWM)
    4334:	ea 81       	ldd	r30, Y+2	; 0x02
    4336:	fb 81       	ldd	r31, Y+3	; 0x03
    4338:	81 81       	ldd	r24, Z+1	; 0x01
    433a:	88 23       	and	r24, r24
    433c:	79 f4       	brne	.+30     	; 0x435c <Spt_Init+0x8c>
        {
            SET_BIT(TCCR0, TCCR0_WGM00);
    433e:	a3 e5       	ldi	r26, 0x53	; 83
    4340:	b0 e0       	ldi	r27, 0x00	; 0
    4342:	e3 e5       	ldi	r30, 0x53	; 83
    4344:	f0 e0       	ldi	r31, 0x00	; 0
    4346:	80 81       	ld	r24, Z
    4348:	80 64       	ori	r24, 0x40	; 64
    434a:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_WGM01);
    434c:	a3 e5       	ldi	r26, 0x53	; 83
    434e:	b0 e0       	ldi	r27, 0x00	; 0
    4350:	e3 e5       	ldi	r30, 0x53	; 83
    4352:	f0 e0       	ldi	r31, 0x00	; 0
    4354:	80 81       	ld	r24, Z
    4356:	88 60       	ori	r24, 0x08	; 8
    4358:	8c 93       	st	X, r24
    435a:	15 c0       	rjmp	.+42     	; 0x4386 <Spt_Init+0xb6>
        }
        else if (config->mode == SPT_MODE_PWM_PHASE_CORRECT)
    435c:	ea 81       	ldd	r30, Y+2	; 0x02
    435e:	fb 81       	ldd	r31, Y+3	; 0x03
    4360:	81 81       	ldd	r24, Z+1	; 0x01
    4362:	81 30       	cpi	r24, 0x01	; 1
    4364:	79 f4       	brne	.+30     	; 0x4384 <Spt_Init+0xb4>
        {
            SET_BIT(TCCR0, TCCR0_WGM00);
    4366:	a3 e5       	ldi	r26, 0x53	; 83
    4368:	b0 e0       	ldi	r27, 0x00	; 0
    436a:	e3 e5       	ldi	r30, 0x53	; 83
    436c:	f0 e0       	ldi	r31, 0x00	; 0
    436e:	80 81       	ld	r24, Z
    4370:	80 64       	ori	r24, 0x40	; 64
    4372:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_WGM01);
    4374:	a3 e5       	ldi	r26, 0x53	; 83
    4376:	b0 e0       	ldi	r27, 0x00	; 0
    4378:	e3 e5       	ldi	r30, 0x53	; 83
    437a:	f0 e0       	ldi	r31, 0x00	; 0
    437c:	80 81       	ld	r24, Z
    437e:	87 7f       	andi	r24, 0xF7	; 247
    4380:	8c 93       	st	X, r24
    4382:	01 c0       	rjmp	.+2      	; 0x4386 <Spt_Init+0xb6>
        }
        else
        {
            returnValue = SPT_ERROR;
    4384:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    4386:	ea 81       	ldd	r30, Y+2	; 0x02
    4388:	fb 81       	ldd	r31, Y+3	; 0x03
    438a:	82 81       	ldd	r24, Z+2	; 0x02
    438c:	28 2f       	mov	r18, r24
    438e:	30 e0       	ldi	r19, 0x00	; 0
    4390:	3b 8b       	std	Y+19, r19	; 0x13
    4392:	2a 8b       	std	Y+18, r18	; 0x12
    4394:	8a 89       	ldd	r24, Y+18	; 0x12
    4396:	9b 89       	ldd	r25, Y+19	; 0x13
    4398:	82 30       	cpi	r24, 0x02	; 2
    439a:	91 05       	cpc	r25, r1
    439c:	c1 f0       	breq	.+48     	; 0x43ce <Spt_Init+0xfe>
    439e:	2a 89       	ldd	r18, Y+18	; 0x12
    43a0:	3b 89       	ldd	r19, Y+19	; 0x13
    43a2:	23 30       	cpi	r18, 0x03	; 3
    43a4:	31 05       	cpc	r19, r1
    43a6:	11 f1       	breq	.+68     	; 0x43ec <Spt_Init+0x11c>
    43a8:	8a 89       	ldd	r24, Y+18	; 0x12
    43aa:	9b 89       	ldd	r25, Y+19	; 0x13
    43ac:	00 97       	sbiw	r24, 0x00	; 0
    43ae:	69 f5       	brne	.+90     	; 0x440a <Spt_Init+0x13a>
        {
        case SPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR0, TCCR0_COM00);
    43b0:	a3 e5       	ldi	r26, 0x53	; 83
    43b2:	b0 e0       	ldi	r27, 0x00	; 0
    43b4:	e3 e5       	ldi	r30, 0x53	; 83
    43b6:	f0 e0       	ldi	r31, 0x00	; 0
    43b8:	80 81       	ld	r24, Z
    43ba:	8f 7e       	andi	r24, 0xEF	; 239
    43bc:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    43be:	a3 e5       	ldi	r26, 0x53	; 83
    43c0:	b0 e0       	ldi	r27, 0x00	; 0
    43c2:	e3 e5       	ldi	r30, 0x53	; 83
    43c4:	f0 e0       	ldi	r31, 0x00	; 0
    43c6:	80 81       	ld	r24, Z
    43c8:	8f 7d       	andi	r24, 0xDF	; 223
    43ca:	8c 93       	st	X, r24
    43cc:	1f c0       	rjmp	.+62     	; 0x440c <Spt_Init+0x13c>
            break;
        case SPT_OUTPUT_SET:
            SET_BIT(TCCR0, TCCR0_COM00);
    43ce:	a3 e5       	ldi	r26, 0x53	; 83
    43d0:	b0 e0       	ldi	r27, 0x00	; 0
    43d2:	e3 e5       	ldi	r30, 0x53	; 83
    43d4:	f0 e0       	ldi	r31, 0x00	; 0
    43d6:	80 81       	ld	r24, Z
    43d8:	80 61       	ori	r24, 0x10	; 16
    43da:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    43dc:	a3 e5       	ldi	r26, 0x53	; 83
    43de:	b0 e0       	ldi	r27, 0x00	; 0
    43e0:	e3 e5       	ldi	r30, 0x53	; 83
    43e2:	f0 e0       	ldi	r31, 0x00	; 0
    43e4:	80 81       	ld	r24, Z
    43e6:	80 62       	ori	r24, 0x20	; 32
    43e8:	8c 93       	st	X, r24
    43ea:	10 c0       	rjmp	.+32     	; 0x440c <Spt_Init+0x13c>
            // TODO
            break;
        case SPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR0, TCCR0_COM00);
    43ec:	a3 e5       	ldi	r26, 0x53	; 83
    43ee:	b0 e0       	ldi	r27, 0x00	; 0
    43f0:	e3 e5       	ldi	r30, 0x53	; 83
    43f2:	f0 e0       	ldi	r31, 0x00	; 0
    43f4:	80 81       	ld	r24, Z
    43f6:	8f 7e       	andi	r24, 0xEF	; 239
    43f8:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    43fa:	a3 e5       	ldi	r26, 0x53	; 83
    43fc:	b0 e0       	ldi	r27, 0x00	; 0
    43fe:	e3 e5       	ldi	r30, 0x53	; 83
    4400:	f0 e0       	ldi	r31, 0x00	; 0
    4402:	80 81       	ld	r24, Z
    4404:	80 62       	ori	r24, 0x20	; 32
    4406:	8c 93       	st	X, r24
    4408:	01 c0       	rjmp	.+2      	; 0x440c <Spt_Init+0x13c>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    440a:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    440c:	ea 81       	ldd	r30, Y+2	; 0x02
    440e:	fb 81       	ldd	r31, Y+3	; 0x03
    4410:	83 81       	ldd	r24, Z+3	; 0x03
    4412:	28 2f       	mov	r18, r24
    4414:	30 e0       	ldi	r19, 0x00	; 0
    4416:	39 8b       	std	Y+17, r19	; 0x11
    4418:	28 8b       	std	Y+16, r18	; 0x10
    441a:	88 89       	ldd	r24, Y+16	; 0x10
    441c:	99 89       	ldd	r25, Y+17	; 0x11
    441e:	84 30       	cpi	r24, 0x04	; 4
    4420:	91 05       	cpc	r25, r1
    4422:	09 f4       	brne	.+2      	; 0x4426 <Spt_Init+0x156>
    4424:	77 c0       	rjmp	.+238    	; 0x4514 <Spt_Init+0x244>
    4426:	28 89       	ldd	r18, Y+16	; 0x10
    4428:	39 89       	ldd	r19, Y+17	; 0x11
    442a:	25 30       	cpi	r18, 0x05	; 5
    442c:	31 05       	cpc	r19, r1
    442e:	8c f4       	brge	.+34     	; 0x4452 <Spt_Init+0x182>
    4430:	88 89       	ldd	r24, Y+16	; 0x10
    4432:	99 89       	ldd	r25, Y+17	; 0x11
    4434:	81 30       	cpi	r24, 0x01	; 1
    4436:	91 05       	cpc	r25, r1
    4438:	09 f4       	brne	.+2      	; 0x443c <Spt_Init+0x16c>
    443a:	40 c0       	rjmp	.+128    	; 0x44bc <Spt_Init+0x1ec>
    443c:	28 89       	ldd	r18, Y+16	; 0x10
    443e:	39 89       	ldd	r19, Y+17	; 0x11
    4440:	22 30       	cpi	r18, 0x02	; 2
    4442:	31 05       	cpc	r19, r1
    4444:	09 f4       	brne	.+2      	; 0x4448 <Spt_Init+0x178>
    4446:	50 c0       	rjmp	.+160    	; 0x44e8 <Spt_Init+0x218>
    4448:	88 89       	ldd	r24, Y+16	; 0x10
    444a:	99 89       	ldd	r25, Y+17	; 0x11
    444c:	00 97       	sbiw	r24, 0x00	; 0
    444e:	01 f1       	breq	.+64     	; 0x4490 <Spt_Init+0x1c0>
    4450:	cf c0       	rjmp	.+414    	; 0x45f0 <Spt_Init+0x320>
    4452:	28 89       	ldd	r18, Y+16	; 0x10
    4454:	39 89       	ldd	r19, Y+17	; 0x11
    4456:	27 30       	cpi	r18, 0x07	; 7
    4458:	31 05       	cpc	r19, r1
    445a:	09 f4       	brne	.+2      	; 0x445e <Spt_Init+0x18e>
    445c:	87 c0       	rjmp	.+270    	; 0x456c <Spt_Init+0x29c>
    445e:	88 89       	ldd	r24, Y+16	; 0x10
    4460:	99 89       	ldd	r25, Y+17	; 0x11
    4462:	88 30       	cpi	r24, 0x08	; 8
    4464:	91 05       	cpc	r25, r1
    4466:	3c f4       	brge	.+14     	; 0x4476 <Spt_Init+0x1a6>
    4468:	28 89       	ldd	r18, Y+16	; 0x10
    446a:	39 89       	ldd	r19, Y+17	; 0x11
    446c:	26 30       	cpi	r18, 0x06	; 6
    446e:	31 05       	cpc	r19, r1
    4470:	09 f4       	brne	.+2      	; 0x4474 <Spt_Init+0x1a4>
    4472:	66 c0       	rjmp	.+204    	; 0x4540 <Spt_Init+0x270>
    4474:	bd c0       	rjmp	.+378    	; 0x45f0 <Spt_Init+0x320>
    4476:	88 89       	ldd	r24, Y+16	; 0x10
    4478:	99 89       	ldd	r25, Y+17	; 0x11
    447a:	88 30       	cpi	r24, 0x08	; 8
    447c:	91 05       	cpc	r25, r1
    447e:	09 f4       	brne	.+2      	; 0x4482 <Spt_Init+0x1b2>
    4480:	8b c0       	rjmp	.+278    	; 0x4598 <Spt_Init+0x2c8>
    4482:	28 89       	ldd	r18, Y+16	; 0x10
    4484:	39 89       	ldd	r19, Y+17	; 0x11
    4486:	29 30       	cpi	r18, 0x09	; 9
    4488:	31 05       	cpc	r19, r1
    448a:	09 f4       	brne	.+2      	; 0x448e <Spt_Init+0x1be>
    448c:	9b c0       	rjmp	.+310    	; 0x45c4 <Spt_Init+0x2f4>
    448e:	b0 c0       	rjmp	.+352    	; 0x45f0 <Spt_Init+0x320>
        {
        case SPT_PRESCALER_0:
            CLR_BIT(TCCR0, TCCR0_CS00);
    4490:	a3 e5       	ldi	r26, 0x53	; 83
    4492:	b0 e0       	ldi	r27, 0x00	; 0
    4494:	e3 e5       	ldi	r30, 0x53	; 83
    4496:	f0 e0       	ldi	r31, 0x00	; 0
    4498:	80 81       	ld	r24, Z
    449a:	8e 7f       	andi	r24, 0xFE	; 254
    449c:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    449e:	a3 e5       	ldi	r26, 0x53	; 83
    44a0:	b0 e0       	ldi	r27, 0x00	; 0
    44a2:	e3 e5       	ldi	r30, 0x53	; 83
    44a4:	f0 e0       	ldi	r31, 0x00	; 0
    44a6:	80 81       	ld	r24, Z
    44a8:	8d 7f       	andi	r24, 0xFD	; 253
    44aa:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    44ac:	a3 e5       	ldi	r26, 0x53	; 83
    44ae:	b0 e0       	ldi	r27, 0x00	; 0
    44b0:	e3 e5       	ldi	r30, 0x53	; 83
    44b2:	f0 e0       	ldi	r31, 0x00	; 0
    44b4:	80 81       	ld	r24, Z
    44b6:	8b 7f       	andi	r24, 0xFB	; 251
    44b8:	8c 93       	st	X, r24
    44ba:	e7 c4       	rjmp	.+2510   	; 0x4e8a <Spt_Init+0xbba>
            break;
        case SPT_PRESCALER_1:
            SET_BIT(TCCR0, TCCR0_CS00);
    44bc:	a3 e5       	ldi	r26, 0x53	; 83
    44be:	b0 e0       	ldi	r27, 0x00	; 0
    44c0:	e3 e5       	ldi	r30, 0x53	; 83
    44c2:	f0 e0       	ldi	r31, 0x00	; 0
    44c4:	80 81       	ld	r24, Z
    44c6:	81 60       	ori	r24, 0x01	; 1
    44c8:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    44ca:	a3 e5       	ldi	r26, 0x53	; 83
    44cc:	b0 e0       	ldi	r27, 0x00	; 0
    44ce:	e3 e5       	ldi	r30, 0x53	; 83
    44d0:	f0 e0       	ldi	r31, 0x00	; 0
    44d2:	80 81       	ld	r24, Z
    44d4:	8d 7f       	andi	r24, 0xFD	; 253
    44d6:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    44d8:	a3 e5       	ldi	r26, 0x53	; 83
    44da:	b0 e0       	ldi	r27, 0x00	; 0
    44dc:	e3 e5       	ldi	r30, 0x53	; 83
    44de:	f0 e0       	ldi	r31, 0x00	; 0
    44e0:	80 81       	ld	r24, Z
    44e2:	8b 7f       	andi	r24, 0xFB	; 251
    44e4:	8c 93       	st	X, r24
    44e6:	d1 c4       	rjmp	.+2466   	; 0x4e8a <Spt_Init+0xbba>
            break;
        case SPT_PRESCALER_8:
            CLR_BIT(TCCR0, TCCR0_CS00);
    44e8:	a3 e5       	ldi	r26, 0x53	; 83
    44ea:	b0 e0       	ldi	r27, 0x00	; 0
    44ec:	e3 e5       	ldi	r30, 0x53	; 83
    44ee:	f0 e0       	ldi	r31, 0x00	; 0
    44f0:	80 81       	ld	r24, Z
    44f2:	8e 7f       	andi	r24, 0xFE	; 254
    44f4:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    44f6:	a3 e5       	ldi	r26, 0x53	; 83
    44f8:	b0 e0       	ldi	r27, 0x00	; 0
    44fa:	e3 e5       	ldi	r30, 0x53	; 83
    44fc:	f0 e0       	ldi	r31, 0x00	; 0
    44fe:	80 81       	ld	r24, Z
    4500:	82 60       	ori	r24, 0x02	; 2
    4502:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    4504:	a3 e5       	ldi	r26, 0x53	; 83
    4506:	b0 e0       	ldi	r27, 0x00	; 0
    4508:	e3 e5       	ldi	r30, 0x53	; 83
    450a:	f0 e0       	ldi	r31, 0x00	; 0
    450c:	80 81       	ld	r24, Z
    450e:	8b 7f       	andi	r24, 0xFB	; 251
    4510:	8c 93       	st	X, r24
    4512:	bb c4       	rjmp	.+2422   	; 0x4e8a <Spt_Init+0xbba>
            break;
        case SPT_PRESCALER_64:
            SET_BIT(TCCR0, TCCR0_CS00);
    4514:	a3 e5       	ldi	r26, 0x53	; 83
    4516:	b0 e0       	ldi	r27, 0x00	; 0
    4518:	e3 e5       	ldi	r30, 0x53	; 83
    451a:	f0 e0       	ldi	r31, 0x00	; 0
    451c:	80 81       	ld	r24, Z
    451e:	81 60       	ori	r24, 0x01	; 1
    4520:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    4522:	a3 e5       	ldi	r26, 0x53	; 83
    4524:	b0 e0       	ldi	r27, 0x00	; 0
    4526:	e3 e5       	ldi	r30, 0x53	; 83
    4528:	f0 e0       	ldi	r31, 0x00	; 0
    452a:	80 81       	ld	r24, Z
    452c:	82 60       	ori	r24, 0x02	; 2
    452e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    4530:	a3 e5       	ldi	r26, 0x53	; 83
    4532:	b0 e0       	ldi	r27, 0x00	; 0
    4534:	e3 e5       	ldi	r30, 0x53	; 83
    4536:	f0 e0       	ldi	r31, 0x00	; 0
    4538:	80 81       	ld	r24, Z
    453a:	8b 7f       	andi	r24, 0xFB	; 251
    453c:	8c 93       	st	X, r24
    453e:	a5 c4       	rjmp	.+2378   	; 0x4e8a <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_256:
            CLR_BIT(TCCR0, TCCR0_CS00);
    4540:	a3 e5       	ldi	r26, 0x53	; 83
    4542:	b0 e0       	ldi	r27, 0x00	; 0
    4544:	e3 e5       	ldi	r30, 0x53	; 83
    4546:	f0 e0       	ldi	r31, 0x00	; 0
    4548:	80 81       	ld	r24, Z
    454a:	8e 7f       	andi	r24, 0xFE	; 254
    454c:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    454e:	a3 e5       	ldi	r26, 0x53	; 83
    4550:	b0 e0       	ldi	r27, 0x00	; 0
    4552:	e3 e5       	ldi	r30, 0x53	; 83
    4554:	f0 e0       	ldi	r31, 0x00	; 0
    4556:	80 81       	ld	r24, Z
    4558:	8d 7f       	andi	r24, 0xFD	; 253
    455a:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    455c:	a3 e5       	ldi	r26, 0x53	; 83
    455e:	b0 e0       	ldi	r27, 0x00	; 0
    4560:	e3 e5       	ldi	r30, 0x53	; 83
    4562:	f0 e0       	ldi	r31, 0x00	; 0
    4564:	80 81       	ld	r24, Z
    4566:	84 60       	ori	r24, 0x04	; 4
    4568:	8c 93       	st	X, r24
    456a:	8f c4       	rjmp	.+2334   	; 0x4e8a <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_1024:
            SET_BIT(TCCR0, TCCR0_CS00);
    456c:	a3 e5       	ldi	r26, 0x53	; 83
    456e:	b0 e0       	ldi	r27, 0x00	; 0
    4570:	e3 e5       	ldi	r30, 0x53	; 83
    4572:	f0 e0       	ldi	r31, 0x00	; 0
    4574:	80 81       	ld	r24, Z
    4576:	81 60       	ori	r24, 0x01	; 1
    4578:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    457a:	a3 e5       	ldi	r26, 0x53	; 83
    457c:	b0 e0       	ldi	r27, 0x00	; 0
    457e:	e3 e5       	ldi	r30, 0x53	; 83
    4580:	f0 e0       	ldi	r31, 0x00	; 0
    4582:	80 81       	ld	r24, Z
    4584:	8d 7f       	andi	r24, 0xFD	; 253
    4586:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    4588:	a3 e5       	ldi	r26, 0x53	; 83
    458a:	b0 e0       	ldi	r27, 0x00	; 0
    458c:	e3 e5       	ldi	r30, 0x53	; 83
    458e:	f0 e0       	ldi	r31, 0x00	; 0
    4590:	80 81       	ld	r24, Z
    4592:	84 60       	ori	r24, 0x04	; 4
    4594:	8c 93       	st	X, r24
    4596:	79 c4       	rjmp	.+2290   	; 0x4e8a <Spt_Init+0xbba>
            break;
        case SPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR0, TCCR0_CS00);
    4598:	a3 e5       	ldi	r26, 0x53	; 83
    459a:	b0 e0       	ldi	r27, 0x00	; 0
    459c:	e3 e5       	ldi	r30, 0x53	; 83
    459e:	f0 e0       	ldi	r31, 0x00	; 0
    45a0:	80 81       	ld	r24, Z
    45a2:	8e 7f       	andi	r24, 0xFE	; 254
    45a4:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    45a6:	a3 e5       	ldi	r26, 0x53	; 83
    45a8:	b0 e0       	ldi	r27, 0x00	; 0
    45aa:	e3 e5       	ldi	r30, 0x53	; 83
    45ac:	f0 e0       	ldi	r31, 0x00	; 0
    45ae:	80 81       	ld	r24, Z
    45b0:	82 60       	ori	r24, 0x02	; 2
    45b2:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    45b4:	a3 e5       	ldi	r26, 0x53	; 83
    45b6:	b0 e0       	ldi	r27, 0x00	; 0
    45b8:	e3 e5       	ldi	r30, 0x53	; 83
    45ba:	f0 e0       	ldi	r31, 0x00	; 0
    45bc:	80 81       	ld	r24, Z
    45be:	84 60       	ori	r24, 0x04	; 4
    45c0:	8c 93       	st	X, r24
    45c2:	63 c4       	rjmp	.+2246   	; 0x4e8a <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR0, TCCR0_CS00);
    45c4:	a3 e5       	ldi	r26, 0x53	; 83
    45c6:	b0 e0       	ldi	r27, 0x00	; 0
    45c8:	e3 e5       	ldi	r30, 0x53	; 83
    45ca:	f0 e0       	ldi	r31, 0x00	; 0
    45cc:	80 81       	ld	r24, Z
    45ce:	81 60       	ori	r24, 0x01	; 1
    45d0:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    45d2:	a3 e5       	ldi	r26, 0x53	; 83
    45d4:	b0 e0       	ldi	r27, 0x00	; 0
    45d6:	e3 e5       	ldi	r30, 0x53	; 83
    45d8:	f0 e0       	ldi	r31, 0x00	; 0
    45da:	80 81       	ld	r24, Z
    45dc:	82 60       	ori	r24, 0x02	; 2
    45de:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    45e0:	a3 e5       	ldi	r26, 0x53	; 83
    45e2:	b0 e0       	ldi	r27, 0x00	; 0
    45e4:	e3 e5       	ldi	r30, 0x53	; 83
    45e6:	f0 e0       	ldi	r31, 0x00	; 0
    45e8:	80 81       	ld	r24, Z
    45ea:	84 60       	ori	r24, 0x04	; 4
    45ec:	8c 93       	st	X, r24
    45ee:	4d c4       	rjmp	.+2202   	; 0x4e8a <Spt_Init+0xbba>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    45f0:	19 82       	std	Y+1, r1	; 0x01
    45f2:	4b c4       	rjmp	.+2198   	; 0x4e8a <Spt_Init+0xbba>
        }
        break;

    case SPT_CHANNEL_TIMER1A:
        /*Waveform Generation Mode*/
        if (config->mode == SPT_MODE_FAST_PWM)
    45f4:	ea 81       	ldd	r30, Y+2	; 0x02
    45f6:	fb 81       	ldd	r31, Y+3	; 0x03
    45f8:	81 81       	ldd	r24, Z+1	; 0x01
    45fa:	88 23       	and	r24, r24
    45fc:	e9 f4       	brne	.+58     	; 0x4638 <Spt_Init+0x368>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    45fe:	af e4       	ldi	r26, 0x4F	; 79
    4600:	b0 e0       	ldi	r27, 0x00	; 0
    4602:	ef e4       	ldi	r30, 0x4F	; 79
    4604:	f0 e0       	ldi	r31, 0x00	; 0
    4606:	80 81       	ld	r24, Z
    4608:	8e 7f       	andi	r24, 0xFE	; 254
    460a:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_WGM11);
    460c:	af e4       	ldi	r26, 0x4F	; 79
    460e:	b0 e0       	ldi	r27, 0x00	; 0
    4610:	ef e4       	ldi	r30, 0x4F	; 79
    4612:	f0 e0       	ldi	r31, 0x00	; 0
    4614:	80 81       	ld	r24, Z
    4616:	82 60       	ori	r24, 0x02	; 2
    4618:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    461a:	ae e4       	ldi	r26, 0x4E	; 78
    461c:	b0 e0       	ldi	r27, 0x00	; 0
    461e:	ee e4       	ldi	r30, 0x4E	; 78
    4620:	f0 e0       	ldi	r31, 0x00	; 0
    4622:	80 81       	ld	r24, Z
    4624:	88 60       	ori	r24, 0x08	; 8
    4626:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM13);
    4628:	ae e4       	ldi	r26, 0x4E	; 78
    462a:	b0 e0       	ldi	r27, 0x00	; 0
    462c:	ee e4       	ldi	r30, 0x4E	; 78
    462e:	f0 e0       	ldi	r31, 0x00	; 0
    4630:	80 81       	ld	r24, Z
    4632:	80 61       	ori	r24, 0x10	; 16
    4634:	8c 93       	st	X, r24
    4636:	01 c0       	rjmp	.+2      	; 0x463a <Spt_Init+0x36a>
        //     // TODO
        //     // TODO
        // }
        else
        {
            returnValue = SPT_ERROR;
    4638:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    463a:	ea 81       	ldd	r30, Y+2	; 0x02
    463c:	fb 81       	ldd	r31, Y+3	; 0x03
    463e:	82 81       	ldd	r24, Z+2	; 0x02
    4640:	28 2f       	mov	r18, r24
    4642:	30 e0       	ldi	r19, 0x00	; 0
    4644:	3f 87       	std	Y+15, r19	; 0x0f
    4646:	2e 87       	std	Y+14, r18	; 0x0e
    4648:	8e 85       	ldd	r24, Y+14	; 0x0e
    464a:	9f 85       	ldd	r25, Y+15	; 0x0f
    464c:	81 30       	cpi	r24, 0x01	; 1
    464e:	91 05       	cpc	r25, r1
    4650:	21 f1       	breq	.+72     	; 0x469a <Spt_Init+0x3ca>
    4652:	2e 85       	ldd	r18, Y+14	; 0x0e
    4654:	3f 85       	ldd	r19, Y+15	; 0x0f
    4656:	22 30       	cpi	r18, 0x02	; 2
    4658:	31 05       	cpc	r19, r1
    465a:	2c f4       	brge	.+10     	; 0x4666 <Spt_Init+0x396>
    465c:	8e 85       	ldd	r24, Y+14	; 0x0e
    465e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4660:	00 97       	sbiw	r24, 0x00	; 0
    4662:	61 f0       	breq	.+24     	; 0x467c <Spt_Init+0x3ac>
    4664:	47 c0       	rjmp	.+142    	; 0x46f4 <Spt_Init+0x424>
    4666:	2e 85       	ldd	r18, Y+14	; 0x0e
    4668:	3f 85       	ldd	r19, Y+15	; 0x0f
    466a:	22 30       	cpi	r18, 0x02	; 2
    466c:	31 05       	cpc	r19, r1
    466e:	21 f1       	breq	.+72     	; 0x46b8 <Spt_Init+0x3e8>
    4670:	8e 85       	ldd	r24, Y+14	; 0x0e
    4672:	9f 85       	ldd	r25, Y+15	; 0x0f
    4674:	83 30       	cpi	r24, 0x03	; 3
    4676:	91 05       	cpc	r25, r1
    4678:	71 f1       	breq	.+92     	; 0x46d6 <Spt_Init+0x406>
    467a:	3c c0       	rjmp	.+120    	; 0x46f4 <Spt_Init+0x424>
        {
        case SPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    467c:	af e4       	ldi	r26, 0x4F	; 79
    467e:	b0 e0       	ldi	r27, 0x00	; 0
    4680:	ef e4       	ldi	r30, 0x4F	; 79
    4682:	f0 e0       	ldi	r31, 0x00	; 0
    4684:	80 81       	ld	r24, Z
    4686:	8f 7b       	andi	r24, 0xBF	; 191
    4688:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    468a:	af e4       	ldi	r26, 0x4F	; 79
    468c:	b0 e0       	ldi	r27, 0x00	; 0
    468e:	ef e4       	ldi	r30, 0x4F	; 79
    4690:	f0 e0       	ldi	r31, 0x00	; 0
    4692:	80 81       	ld	r24, Z
    4694:	8f 77       	andi	r24, 0x7F	; 127
    4696:	8c 93       	st	X, r24
    4698:	2e c0       	rjmp	.+92     	; 0x46f6 <Spt_Init+0x426>
            // TODO
            break;
        case SPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    469a:	af e4       	ldi	r26, 0x4F	; 79
    469c:	b0 e0       	ldi	r27, 0x00	; 0
    469e:	ef e4       	ldi	r30, 0x4F	; 79
    46a0:	f0 e0       	ldi	r31, 0x00	; 0
    46a2:	80 81       	ld	r24, Z
    46a4:	80 64       	ori	r24, 0x40	; 64
    46a6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    46a8:	af e4       	ldi	r26, 0x4F	; 79
    46aa:	b0 e0       	ldi	r27, 0x00	; 0
    46ac:	ef e4       	ldi	r30, 0x4F	; 79
    46ae:	f0 e0       	ldi	r31, 0x00	; 0
    46b0:	80 81       	ld	r24, Z
    46b2:	8f 77       	andi	r24, 0x7F	; 127
    46b4:	8c 93       	st	X, r24
    46b6:	1f c0       	rjmp	.+62     	; 0x46f6 <Spt_Init+0x426>
            // TODO
            break;
        case SPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    46b8:	af e4       	ldi	r26, 0x4F	; 79
    46ba:	b0 e0       	ldi	r27, 0x00	; 0
    46bc:	ef e4       	ldi	r30, 0x4F	; 79
    46be:	f0 e0       	ldi	r31, 0x00	; 0
    46c0:	80 81       	ld	r24, Z
    46c2:	80 64       	ori	r24, 0x40	; 64
    46c4:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    46c6:	af e4       	ldi	r26, 0x4F	; 79
    46c8:	b0 e0       	ldi	r27, 0x00	; 0
    46ca:	ef e4       	ldi	r30, 0x4F	; 79
    46cc:	f0 e0       	ldi	r31, 0x00	; 0
    46ce:	80 81       	ld	r24, Z
    46d0:	80 68       	ori	r24, 0x80	; 128
    46d2:	8c 93       	st	X, r24
    46d4:	10 c0       	rjmp	.+32     	; 0x46f6 <Spt_Init+0x426>
            // TODO
            break;
        case SPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    46d6:	af e4       	ldi	r26, 0x4F	; 79
    46d8:	b0 e0       	ldi	r27, 0x00	; 0
    46da:	ef e4       	ldi	r30, 0x4F	; 79
    46dc:	f0 e0       	ldi	r31, 0x00	; 0
    46de:	80 81       	ld	r24, Z
    46e0:	8f 7b       	andi	r24, 0xBF	; 191
    46e2:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    46e4:	af e4       	ldi	r26, 0x4F	; 79
    46e6:	b0 e0       	ldi	r27, 0x00	; 0
    46e8:	ef e4       	ldi	r30, 0x4F	; 79
    46ea:	f0 e0       	ldi	r31, 0x00	; 0
    46ec:	80 81       	ld	r24, Z
    46ee:	80 68       	ori	r24, 0x80	; 128
    46f0:	8c 93       	st	X, r24
    46f2:	01 c0       	rjmp	.+2      	; 0x46f6 <Spt_Init+0x426>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    46f4:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    46f6:	ea 81       	ldd	r30, Y+2	; 0x02
    46f8:	fb 81       	ldd	r31, Y+3	; 0x03
    46fa:	83 81       	ldd	r24, Z+3	; 0x03
    46fc:	28 2f       	mov	r18, r24
    46fe:	30 e0       	ldi	r19, 0x00	; 0
    4700:	3d 87       	std	Y+13, r19	; 0x0d
    4702:	2c 87       	std	Y+12, r18	; 0x0c
    4704:	8c 85       	ldd	r24, Y+12	; 0x0c
    4706:	9d 85       	ldd	r25, Y+13	; 0x0d
    4708:	84 30       	cpi	r24, 0x04	; 4
    470a:	91 05       	cpc	r25, r1
    470c:	09 f4       	brne	.+2      	; 0x4710 <Spt_Init+0x440>
    470e:	77 c0       	rjmp	.+238    	; 0x47fe <Spt_Init+0x52e>
    4710:	2c 85       	ldd	r18, Y+12	; 0x0c
    4712:	3d 85       	ldd	r19, Y+13	; 0x0d
    4714:	25 30       	cpi	r18, 0x05	; 5
    4716:	31 05       	cpc	r19, r1
    4718:	8c f4       	brge	.+34     	; 0x473c <Spt_Init+0x46c>
    471a:	8c 85       	ldd	r24, Y+12	; 0x0c
    471c:	9d 85       	ldd	r25, Y+13	; 0x0d
    471e:	81 30       	cpi	r24, 0x01	; 1
    4720:	91 05       	cpc	r25, r1
    4722:	09 f4       	brne	.+2      	; 0x4726 <Spt_Init+0x456>
    4724:	40 c0       	rjmp	.+128    	; 0x47a6 <Spt_Init+0x4d6>
    4726:	2c 85       	ldd	r18, Y+12	; 0x0c
    4728:	3d 85       	ldd	r19, Y+13	; 0x0d
    472a:	22 30       	cpi	r18, 0x02	; 2
    472c:	31 05       	cpc	r19, r1
    472e:	09 f4       	brne	.+2      	; 0x4732 <Spt_Init+0x462>
    4730:	50 c0       	rjmp	.+160    	; 0x47d2 <Spt_Init+0x502>
    4732:	8c 85       	ldd	r24, Y+12	; 0x0c
    4734:	9d 85       	ldd	r25, Y+13	; 0x0d
    4736:	00 97       	sbiw	r24, 0x00	; 0
    4738:	01 f1       	breq	.+64     	; 0x477a <Spt_Init+0x4aa>
    473a:	cf c0       	rjmp	.+414    	; 0x48da <Spt_Init+0x60a>
    473c:	2c 85       	ldd	r18, Y+12	; 0x0c
    473e:	3d 85       	ldd	r19, Y+13	; 0x0d
    4740:	27 30       	cpi	r18, 0x07	; 7
    4742:	31 05       	cpc	r19, r1
    4744:	09 f4       	brne	.+2      	; 0x4748 <Spt_Init+0x478>
    4746:	87 c0       	rjmp	.+270    	; 0x4856 <Spt_Init+0x586>
    4748:	8c 85       	ldd	r24, Y+12	; 0x0c
    474a:	9d 85       	ldd	r25, Y+13	; 0x0d
    474c:	88 30       	cpi	r24, 0x08	; 8
    474e:	91 05       	cpc	r25, r1
    4750:	3c f4       	brge	.+14     	; 0x4760 <Spt_Init+0x490>
    4752:	2c 85       	ldd	r18, Y+12	; 0x0c
    4754:	3d 85       	ldd	r19, Y+13	; 0x0d
    4756:	26 30       	cpi	r18, 0x06	; 6
    4758:	31 05       	cpc	r19, r1
    475a:	09 f4       	brne	.+2      	; 0x475e <Spt_Init+0x48e>
    475c:	66 c0       	rjmp	.+204    	; 0x482a <Spt_Init+0x55a>
    475e:	bd c0       	rjmp	.+378    	; 0x48da <Spt_Init+0x60a>
    4760:	8c 85       	ldd	r24, Y+12	; 0x0c
    4762:	9d 85       	ldd	r25, Y+13	; 0x0d
    4764:	88 30       	cpi	r24, 0x08	; 8
    4766:	91 05       	cpc	r25, r1
    4768:	09 f4       	brne	.+2      	; 0x476c <Spt_Init+0x49c>
    476a:	8b c0       	rjmp	.+278    	; 0x4882 <Spt_Init+0x5b2>
    476c:	2c 85       	ldd	r18, Y+12	; 0x0c
    476e:	3d 85       	ldd	r19, Y+13	; 0x0d
    4770:	29 30       	cpi	r18, 0x09	; 9
    4772:	31 05       	cpc	r19, r1
    4774:	09 f4       	brne	.+2      	; 0x4778 <Spt_Init+0x4a8>
    4776:	9b c0       	rjmp	.+310    	; 0x48ae <Spt_Init+0x5de>
    4778:	b0 c0       	rjmp	.+352    	; 0x48da <Spt_Init+0x60a>
        {
        case SPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    477a:	ae e4       	ldi	r26, 0x4E	; 78
    477c:	b0 e0       	ldi	r27, 0x00	; 0
    477e:	ee e4       	ldi	r30, 0x4E	; 78
    4780:	f0 e0       	ldi	r31, 0x00	; 0
    4782:	80 81       	ld	r24, Z
    4784:	8e 7f       	andi	r24, 0xFE	; 254
    4786:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    4788:	ae e4       	ldi	r26, 0x4E	; 78
    478a:	b0 e0       	ldi	r27, 0x00	; 0
    478c:	ee e4       	ldi	r30, 0x4E	; 78
    478e:	f0 e0       	ldi	r31, 0x00	; 0
    4790:	80 81       	ld	r24, Z
    4792:	8d 7f       	andi	r24, 0xFD	; 253
    4794:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4796:	ae e4       	ldi	r26, 0x4E	; 78
    4798:	b0 e0       	ldi	r27, 0x00	; 0
    479a:	ee e4       	ldi	r30, 0x4E	; 78
    479c:	f0 e0       	ldi	r31, 0x00	; 0
    479e:	80 81       	ld	r24, Z
    47a0:	8b 7f       	andi	r24, 0xFB	; 251
    47a2:	8c 93       	st	X, r24
    47a4:	72 c3       	rjmp	.+1764   	; 0x4e8a <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    47a6:	ae e4       	ldi	r26, 0x4E	; 78
    47a8:	b0 e0       	ldi	r27, 0x00	; 0
    47aa:	ee e4       	ldi	r30, 0x4E	; 78
    47ac:	f0 e0       	ldi	r31, 0x00	; 0
    47ae:	80 81       	ld	r24, Z
    47b0:	81 60       	ori	r24, 0x01	; 1
    47b2:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    47b4:	ae e4       	ldi	r26, 0x4E	; 78
    47b6:	b0 e0       	ldi	r27, 0x00	; 0
    47b8:	ee e4       	ldi	r30, 0x4E	; 78
    47ba:	f0 e0       	ldi	r31, 0x00	; 0
    47bc:	80 81       	ld	r24, Z
    47be:	8d 7f       	andi	r24, 0xFD	; 253
    47c0:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    47c2:	ae e4       	ldi	r26, 0x4E	; 78
    47c4:	b0 e0       	ldi	r27, 0x00	; 0
    47c6:	ee e4       	ldi	r30, 0x4E	; 78
    47c8:	f0 e0       	ldi	r31, 0x00	; 0
    47ca:	80 81       	ld	r24, Z
    47cc:	8b 7f       	andi	r24, 0xFB	; 251
    47ce:	8c 93       	st	X, r24
    47d0:	5c c3       	rjmp	.+1720   	; 0x4e8a <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    47d2:	ae e4       	ldi	r26, 0x4E	; 78
    47d4:	b0 e0       	ldi	r27, 0x00	; 0
    47d6:	ee e4       	ldi	r30, 0x4E	; 78
    47d8:	f0 e0       	ldi	r31, 0x00	; 0
    47da:	80 81       	ld	r24, Z
    47dc:	8e 7f       	andi	r24, 0xFE	; 254
    47de:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    47e0:	ae e4       	ldi	r26, 0x4E	; 78
    47e2:	b0 e0       	ldi	r27, 0x00	; 0
    47e4:	ee e4       	ldi	r30, 0x4E	; 78
    47e6:	f0 e0       	ldi	r31, 0x00	; 0
    47e8:	80 81       	ld	r24, Z
    47ea:	82 60       	ori	r24, 0x02	; 2
    47ec:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    47ee:	ae e4       	ldi	r26, 0x4E	; 78
    47f0:	b0 e0       	ldi	r27, 0x00	; 0
    47f2:	ee e4       	ldi	r30, 0x4E	; 78
    47f4:	f0 e0       	ldi	r31, 0x00	; 0
    47f6:	80 81       	ld	r24, Z
    47f8:	8b 7f       	andi	r24, 0xFB	; 251
    47fa:	8c 93       	st	X, r24
    47fc:	46 c3       	rjmp	.+1676   	; 0x4e8a <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    47fe:	ae e4       	ldi	r26, 0x4E	; 78
    4800:	b0 e0       	ldi	r27, 0x00	; 0
    4802:	ee e4       	ldi	r30, 0x4E	; 78
    4804:	f0 e0       	ldi	r31, 0x00	; 0
    4806:	80 81       	ld	r24, Z
    4808:	81 60       	ori	r24, 0x01	; 1
    480a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    480c:	ae e4       	ldi	r26, 0x4E	; 78
    480e:	b0 e0       	ldi	r27, 0x00	; 0
    4810:	ee e4       	ldi	r30, 0x4E	; 78
    4812:	f0 e0       	ldi	r31, 0x00	; 0
    4814:	80 81       	ld	r24, Z
    4816:	82 60       	ori	r24, 0x02	; 2
    4818:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    481a:	ae e4       	ldi	r26, 0x4E	; 78
    481c:	b0 e0       	ldi	r27, 0x00	; 0
    481e:	ee e4       	ldi	r30, 0x4E	; 78
    4820:	f0 e0       	ldi	r31, 0x00	; 0
    4822:	80 81       	ld	r24, Z
    4824:	8b 7f       	andi	r24, 0xFB	; 251
    4826:	8c 93       	st	X, r24
    4828:	30 c3       	rjmp	.+1632   	; 0x4e8a <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    482a:	ae e4       	ldi	r26, 0x4E	; 78
    482c:	b0 e0       	ldi	r27, 0x00	; 0
    482e:	ee e4       	ldi	r30, 0x4E	; 78
    4830:	f0 e0       	ldi	r31, 0x00	; 0
    4832:	80 81       	ld	r24, Z
    4834:	8e 7f       	andi	r24, 0xFE	; 254
    4836:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    4838:	ae e4       	ldi	r26, 0x4E	; 78
    483a:	b0 e0       	ldi	r27, 0x00	; 0
    483c:	ee e4       	ldi	r30, 0x4E	; 78
    483e:	f0 e0       	ldi	r31, 0x00	; 0
    4840:	80 81       	ld	r24, Z
    4842:	8d 7f       	andi	r24, 0xFD	; 253
    4844:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4846:	ae e4       	ldi	r26, 0x4E	; 78
    4848:	b0 e0       	ldi	r27, 0x00	; 0
    484a:	ee e4       	ldi	r30, 0x4E	; 78
    484c:	f0 e0       	ldi	r31, 0x00	; 0
    484e:	80 81       	ld	r24, Z
    4850:	84 60       	ori	r24, 0x04	; 4
    4852:	8c 93       	st	X, r24
    4854:	1a c3       	rjmp	.+1588   	; 0x4e8a <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    4856:	ae e4       	ldi	r26, 0x4E	; 78
    4858:	b0 e0       	ldi	r27, 0x00	; 0
    485a:	ee e4       	ldi	r30, 0x4E	; 78
    485c:	f0 e0       	ldi	r31, 0x00	; 0
    485e:	80 81       	ld	r24, Z
    4860:	81 60       	ori	r24, 0x01	; 1
    4862:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    4864:	ae e4       	ldi	r26, 0x4E	; 78
    4866:	b0 e0       	ldi	r27, 0x00	; 0
    4868:	ee e4       	ldi	r30, 0x4E	; 78
    486a:	f0 e0       	ldi	r31, 0x00	; 0
    486c:	80 81       	ld	r24, Z
    486e:	8d 7f       	andi	r24, 0xFD	; 253
    4870:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4872:	ae e4       	ldi	r26, 0x4E	; 78
    4874:	b0 e0       	ldi	r27, 0x00	; 0
    4876:	ee e4       	ldi	r30, 0x4E	; 78
    4878:	f0 e0       	ldi	r31, 0x00	; 0
    487a:	80 81       	ld	r24, Z
    487c:	84 60       	ori	r24, 0x04	; 4
    487e:	8c 93       	st	X, r24
    4880:	04 c3       	rjmp	.+1544   	; 0x4e8a <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    4882:	ae e4       	ldi	r26, 0x4E	; 78
    4884:	b0 e0       	ldi	r27, 0x00	; 0
    4886:	ee e4       	ldi	r30, 0x4E	; 78
    4888:	f0 e0       	ldi	r31, 0x00	; 0
    488a:	80 81       	ld	r24, Z
    488c:	8e 7f       	andi	r24, 0xFE	; 254
    488e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4890:	ae e4       	ldi	r26, 0x4E	; 78
    4892:	b0 e0       	ldi	r27, 0x00	; 0
    4894:	ee e4       	ldi	r30, 0x4E	; 78
    4896:	f0 e0       	ldi	r31, 0x00	; 0
    4898:	80 81       	ld	r24, Z
    489a:	82 60       	ori	r24, 0x02	; 2
    489c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    489e:	ae e4       	ldi	r26, 0x4E	; 78
    48a0:	b0 e0       	ldi	r27, 0x00	; 0
    48a2:	ee e4       	ldi	r30, 0x4E	; 78
    48a4:	f0 e0       	ldi	r31, 0x00	; 0
    48a6:	80 81       	ld	r24, Z
    48a8:	84 60       	ori	r24, 0x04	; 4
    48aa:	8c 93       	st	X, r24
    48ac:	ee c2       	rjmp	.+1500   	; 0x4e8a <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    48ae:	ae e4       	ldi	r26, 0x4E	; 78
    48b0:	b0 e0       	ldi	r27, 0x00	; 0
    48b2:	ee e4       	ldi	r30, 0x4E	; 78
    48b4:	f0 e0       	ldi	r31, 0x00	; 0
    48b6:	80 81       	ld	r24, Z
    48b8:	81 60       	ori	r24, 0x01	; 1
    48ba:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    48bc:	ae e4       	ldi	r26, 0x4E	; 78
    48be:	b0 e0       	ldi	r27, 0x00	; 0
    48c0:	ee e4       	ldi	r30, 0x4E	; 78
    48c2:	f0 e0       	ldi	r31, 0x00	; 0
    48c4:	80 81       	ld	r24, Z
    48c6:	82 60       	ori	r24, 0x02	; 2
    48c8:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    48ca:	ae e4       	ldi	r26, 0x4E	; 78
    48cc:	b0 e0       	ldi	r27, 0x00	; 0
    48ce:	ee e4       	ldi	r30, 0x4E	; 78
    48d0:	f0 e0       	ldi	r31, 0x00	; 0
    48d2:	80 81       	ld	r24, Z
    48d4:	84 60       	ori	r24, 0x04	; 4
    48d6:	8c 93       	st	X, r24
    48d8:	d8 c2       	rjmp	.+1456   	; 0x4e8a <Spt_Init+0xbba>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    48da:	19 82       	std	Y+1, r1	; 0x01
    48dc:	d6 c2       	rjmp	.+1452   	; 0x4e8a <Spt_Init+0xbba>
        }
        break;

        case SPT_CHANNEL_TIMER1B:
        /*Waveform Generation Mode*/
        if (config->mode == SPT_MODE_FAST_PWM)
    48de:	ea 81       	ldd	r30, Y+2	; 0x02
    48e0:	fb 81       	ldd	r31, Y+3	; 0x03
    48e2:	81 81       	ldd	r24, Z+1	; 0x01
    48e4:	88 23       	and	r24, r24
    48e6:	e9 f4       	brne	.+58     	; 0x4922 <Spt_Init+0x652>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    48e8:	af e4       	ldi	r26, 0x4F	; 79
    48ea:	b0 e0       	ldi	r27, 0x00	; 0
    48ec:	ef e4       	ldi	r30, 0x4F	; 79
    48ee:	f0 e0       	ldi	r31, 0x00	; 0
    48f0:	80 81       	ld	r24, Z
    48f2:	8e 7f       	andi	r24, 0xFE	; 254
    48f4:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_WGM11);
    48f6:	af e4       	ldi	r26, 0x4F	; 79
    48f8:	b0 e0       	ldi	r27, 0x00	; 0
    48fa:	ef e4       	ldi	r30, 0x4F	; 79
    48fc:	f0 e0       	ldi	r31, 0x00	; 0
    48fe:	80 81       	ld	r24, Z
    4900:	82 60       	ori	r24, 0x02	; 2
    4902:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    4904:	ae e4       	ldi	r26, 0x4E	; 78
    4906:	b0 e0       	ldi	r27, 0x00	; 0
    4908:	ee e4       	ldi	r30, 0x4E	; 78
    490a:	f0 e0       	ldi	r31, 0x00	; 0
    490c:	80 81       	ld	r24, Z
    490e:	88 60       	ori	r24, 0x08	; 8
    4910:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM13);
    4912:	ae e4       	ldi	r26, 0x4E	; 78
    4914:	b0 e0       	ldi	r27, 0x00	; 0
    4916:	ee e4       	ldi	r30, 0x4E	; 78
    4918:	f0 e0       	ldi	r31, 0x00	; 0
    491a:	80 81       	ld	r24, Z
    491c:	80 61       	ori	r24, 0x10	; 16
    491e:	8c 93       	st	X, r24
    4920:	01 c0       	rjmp	.+2      	; 0x4924 <Spt_Init+0x654>
        //         // TODO
        //         // TODO
        //     }
        else
        {
            returnValue = SPT_ERROR;
    4922:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    4924:	ea 81       	ldd	r30, Y+2	; 0x02
    4926:	fb 81       	ldd	r31, Y+3	; 0x03
    4928:	82 81       	ldd	r24, Z+2	; 0x02
    492a:	28 2f       	mov	r18, r24
    492c:	30 e0       	ldi	r19, 0x00	; 0
    492e:	3b 87       	std	Y+11, r19	; 0x0b
    4930:	2a 87       	std	Y+10, r18	; 0x0a
    4932:	8a 85       	ldd	r24, Y+10	; 0x0a
    4934:	9b 85       	ldd	r25, Y+11	; 0x0b
    4936:	81 30       	cpi	r24, 0x01	; 1
    4938:	91 05       	cpc	r25, r1
    493a:	21 f1       	breq	.+72     	; 0x4984 <Spt_Init+0x6b4>
    493c:	2a 85       	ldd	r18, Y+10	; 0x0a
    493e:	3b 85       	ldd	r19, Y+11	; 0x0b
    4940:	22 30       	cpi	r18, 0x02	; 2
    4942:	31 05       	cpc	r19, r1
    4944:	2c f4       	brge	.+10     	; 0x4950 <Spt_Init+0x680>
    4946:	8a 85       	ldd	r24, Y+10	; 0x0a
    4948:	9b 85       	ldd	r25, Y+11	; 0x0b
    494a:	00 97       	sbiw	r24, 0x00	; 0
    494c:	61 f0       	breq	.+24     	; 0x4966 <Spt_Init+0x696>
    494e:	47 c0       	rjmp	.+142    	; 0x49de <Spt_Init+0x70e>
    4950:	2a 85       	ldd	r18, Y+10	; 0x0a
    4952:	3b 85       	ldd	r19, Y+11	; 0x0b
    4954:	22 30       	cpi	r18, 0x02	; 2
    4956:	31 05       	cpc	r19, r1
    4958:	21 f1       	breq	.+72     	; 0x49a2 <Spt_Init+0x6d2>
    495a:	8a 85       	ldd	r24, Y+10	; 0x0a
    495c:	9b 85       	ldd	r25, Y+11	; 0x0b
    495e:	83 30       	cpi	r24, 0x03	; 3
    4960:	91 05       	cpc	r25, r1
    4962:	71 f1       	breq	.+92     	; 0x49c0 <Spt_Init+0x6f0>
    4964:	3c c0       	rjmp	.+120    	; 0x49de <Spt_Init+0x70e>
        {
        case SPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    4966:	af e4       	ldi	r26, 0x4F	; 79
    4968:	b0 e0       	ldi	r27, 0x00	; 0
    496a:	ef e4       	ldi	r30, 0x4F	; 79
    496c:	f0 e0       	ldi	r31, 0x00	; 0
    496e:	80 81       	ld	r24, Z
    4970:	8f 7e       	andi	r24, 0xEF	; 239
    4972:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    4974:	af e4       	ldi	r26, 0x4F	; 79
    4976:	b0 e0       	ldi	r27, 0x00	; 0
    4978:	ef e4       	ldi	r30, 0x4F	; 79
    497a:	f0 e0       	ldi	r31, 0x00	; 0
    497c:	80 81       	ld	r24, Z
    497e:	8f 7d       	andi	r24, 0xDF	; 223
    4980:	8c 93       	st	X, r24
    4982:	2e c0       	rjmp	.+92     	; 0x49e0 <Spt_Init+0x710>
            // TODO
            break;
        case SPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    4984:	af e4       	ldi	r26, 0x4F	; 79
    4986:	b0 e0       	ldi	r27, 0x00	; 0
    4988:	ef e4       	ldi	r30, 0x4F	; 79
    498a:	f0 e0       	ldi	r31, 0x00	; 0
    498c:	80 81       	ld	r24, Z
    498e:	80 61       	ori	r24, 0x10	; 16
    4990:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    4992:	af e4       	ldi	r26, 0x4F	; 79
    4994:	b0 e0       	ldi	r27, 0x00	; 0
    4996:	ef e4       	ldi	r30, 0x4F	; 79
    4998:	f0 e0       	ldi	r31, 0x00	; 0
    499a:	80 81       	ld	r24, Z
    499c:	8f 7d       	andi	r24, 0xDF	; 223
    499e:	8c 93       	st	X, r24
    49a0:	1f c0       	rjmp	.+62     	; 0x49e0 <Spt_Init+0x710>
            // TODO
            break;
        case SPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    49a2:	af e4       	ldi	r26, 0x4F	; 79
    49a4:	b0 e0       	ldi	r27, 0x00	; 0
    49a6:	ef e4       	ldi	r30, 0x4F	; 79
    49a8:	f0 e0       	ldi	r31, 0x00	; 0
    49aa:	80 81       	ld	r24, Z
    49ac:	80 61       	ori	r24, 0x10	; 16
    49ae:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    49b0:	af e4       	ldi	r26, 0x4F	; 79
    49b2:	b0 e0       	ldi	r27, 0x00	; 0
    49b4:	ef e4       	ldi	r30, 0x4F	; 79
    49b6:	f0 e0       	ldi	r31, 0x00	; 0
    49b8:	80 81       	ld	r24, Z
    49ba:	80 62       	ori	r24, 0x20	; 32
    49bc:	8c 93       	st	X, r24
    49be:	10 c0       	rjmp	.+32     	; 0x49e0 <Spt_Init+0x710>
            // TODO
            break;
        case SPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    49c0:	af e4       	ldi	r26, 0x4F	; 79
    49c2:	b0 e0       	ldi	r27, 0x00	; 0
    49c4:	ef e4       	ldi	r30, 0x4F	; 79
    49c6:	f0 e0       	ldi	r31, 0x00	; 0
    49c8:	80 81       	ld	r24, Z
    49ca:	8f 7e       	andi	r24, 0xEF	; 239
    49cc:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    49ce:	af e4       	ldi	r26, 0x4F	; 79
    49d0:	b0 e0       	ldi	r27, 0x00	; 0
    49d2:	ef e4       	ldi	r30, 0x4F	; 79
    49d4:	f0 e0       	ldi	r31, 0x00	; 0
    49d6:	80 81       	ld	r24, Z
    49d8:	80 62       	ori	r24, 0x20	; 32
    49da:	8c 93       	st	X, r24
    49dc:	01 c0       	rjmp	.+2      	; 0x49e0 <Spt_Init+0x710>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    49de:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    49e0:	ea 81       	ldd	r30, Y+2	; 0x02
    49e2:	fb 81       	ldd	r31, Y+3	; 0x03
    49e4:	83 81       	ldd	r24, Z+3	; 0x03
    49e6:	28 2f       	mov	r18, r24
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	39 87       	std	Y+9, r19	; 0x09
    49ec:	28 87       	std	Y+8, r18	; 0x08
    49ee:	88 85       	ldd	r24, Y+8	; 0x08
    49f0:	99 85       	ldd	r25, Y+9	; 0x09
    49f2:	84 30       	cpi	r24, 0x04	; 4
    49f4:	91 05       	cpc	r25, r1
    49f6:	09 f4       	brne	.+2      	; 0x49fa <Spt_Init+0x72a>
    49f8:	77 c0       	rjmp	.+238    	; 0x4ae8 <Spt_Init+0x818>
    49fa:	28 85       	ldd	r18, Y+8	; 0x08
    49fc:	39 85       	ldd	r19, Y+9	; 0x09
    49fe:	25 30       	cpi	r18, 0x05	; 5
    4a00:	31 05       	cpc	r19, r1
    4a02:	8c f4       	brge	.+34     	; 0x4a26 <Spt_Init+0x756>
    4a04:	88 85       	ldd	r24, Y+8	; 0x08
    4a06:	99 85       	ldd	r25, Y+9	; 0x09
    4a08:	81 30       	cpi	r24, 0x01	; 1
    4a0a:	91 05       	cpc	r25, r1
    4a0c:	09 f4       	brne	.+2      	; 0x4a10 <Spt_Init+0x740>
    4a0e:	40 c0       	rjmp	.+128    	; 0x4a90 <Spt_Init+0x7c0>
    4a10:	28 85       	ldd	r18, Y+8	; 0x08
    4a12:	39 85       	ldd	r19, Y+9	; 0x09
    4a14:	22 30       	cpi	r18, 0x02	; 2
    4a16:	31 05       	cpc	r19, r1
    4a18:	09 f4       	brne	.+2      	; 0x4a1c <Spt_Init+0x74c>
    4a1a:	50 c0       	rjmp	.+160    	; 0x4abc <Spt_Init+0x7ec>
    4a1c:	88 85       	ldd	r24, Y+8	; 0x08
    4a1e:	99 85       	ldd	r25, Y+9	; 0x09
    4a20:	00 97       	sbiw	r24, 0x00	; 0
    4a22:	01 f1       	breq	.+64     	; 0x4a64 <Spt_Init+0x794>
    4a24:	cf c0       	rjmp	.+414    	; 0x4bc4 <Spt_Init+0x8f4>
    4a26:	28 85       	ldd	r18, Y+8	; 0x08
    4a28:	39 85       	ldd	r19, Y+9	; 0x09
    4a2a:	27 30       	cpi	r18, 0x07	; 7
    4a2c:	31 05       	cpc	r19, r1
    4a2e:	09 f4       	brne	.+2      	; 0x4a32 <Spt_Init+0x762>
    4a30:	87 c0       	rjmp	.+270    	; 0x4b40 <Spt_Init+0x870>
    4a32:	88 85       	ldd	r24, Y+8	; 0x08
    4a34:	99 85       	ldd	r25, Y+9	; 0x09
    4a36:	88 30       	cpi	r24, 0x08	; 8
    4a38:	91 05       	cpc	r25, r1
    4a3a:	3c f4       	brge	.+14     	; 0x4a4a <Spt_Init+0x77a>
    4a3c:	28 85       	ldd	r18, Y+8	; 0x08
    4a3e:	39 85       	ldd	r19, Y+9	; 0x09
    4a40:	26 30       	cpi	r18, 0x06	; 6
    4a42:	31 05       	cpc	r19, r1
    4a44:	09 f4       	brne	.+2      	; 0x4a48 <Spt_Init+0x778>
    4a46:	66 c0       	rjmp	.+204    	; 0x4b14 <Spt_Init+0x844>
    4a48:	bd c0       	rjmp	.+378    	; 0x4bc4 <Spt_Init+0x8f4>
    4a4a:	88 85       	ldd	r24, Y+8	; 0x08
    4a4c:	99 85       	ldd	r25, Y+9	; 0x09
    4a4e:	88 30       	cpi	r24, 0x08	; 8
    4a50:	91 05       	cpc	r25, r1
    4a52:	09 f4       	brne	.+2      	; 0x4a56 <Spt_Init+0x786>
    4a54:	8b c0       	rjmp	.+278    	; 0x4b6c <Spt_Init+0x89c>
    4a56:	28 85       	ldd	r18, Y+8	; 0x08
    4a58:	39 85       	ldd	r19, Y+9	; 0x09
    4a5a:	29 30       	cpi	r18, 0x09	; 9
    4a5c:	31 05       	cpc	r19, r1
    4a5e:	09 f4       	brne	.+2      	; 0x4a62 <Spt_Init+0x792>
    4a60:	9b c0       	rjmp	.+310    	; 0x4b98 <Spt_Init+0x8c8>
    4a62:	b0 c0       	rjmp	.+352    	; 0x4bc4 <Spt_Init+0x8f4>
        {
        case SPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    4a64:	ae e4       	ldi	r26, 0x4E	; 78
    4a66:	b0 e0       	ldi	r27, 0x00	; 0
    4a68:	ee e4       	ldi	r30, 0x4E	; 78
    4a6a:	f0 e0       	ldi	r31, 0x00	; 0
    4a6c:	80 81       	ld	r24, Z
    4a6e:	8e 7f       	andi	r24, 0xFE	; 254
    4a70:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    4a72:	ae e4       	ldi	r26, 0x4E	; 78
    4a74:	b0 e0       	ldi	r27, 0x00	; 0
    4a76:	ee e4       	ldi	r30, 0x4E	; 78
    4a78:	f0 e0       	ldi	r31, 0x00	; 0
    4a7a:	80 81       	ld	r24, Z
    4a7c:	8d 7f       	andi	r24, 0xFD	; 253
    4a7e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4a80:	ae e4       	ldi	r26, 0x4E	; 78
    4a82:	b0 e0       	ldi	r27, 0x00	; 0
    4a84:	ee e4       	ldi	r30, 0x4E	; 78
    4a86:	f0 e0       	ldi	r31, 0x00	; 0
    4a88:	80 81       	ld	r24, Z
    4a8a:	8b 7f       	andi	r24, 0xFB	; 251
    4a8c:	8c 93       	st	X, r24
    4a8e:	fd c1       	rjmp	.+1018   	; 0x4e8a <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    4a90:	ae e4       	ldi	r26, 0x4E	; 78
    4a92:	b0 e0       	ldi	r27, 0x00	; 0
    4a94:	ee e4       	ldi	r30, 0x4E	; 78
    4a96:	f0 e0       	ldi	r31, 0x00	; 0
    4a98:	80 81       	ld	r24, Z
    4a9a:	81 60       	ori	r24, 0x01	; 1
    4a9c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    4a9e:	ae e4       	ldi	r26, 0x4E	; 78
    4aa0:	b0 e0       	ldi	r27, 0x00	; 0
    4aa2:	ee e4       	ldi	r30, 0x4E	; 78
    4aa4:	f0 e0       	ldi	r31, 0x00	; 0
    4aa6:	80 81       	ld	r24, Z
    4aa8:	8d 7f       	andi	r24, 0xFD	; 253
    4aaa:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4aac:	ae e4       	ldi	r26, 0x4E	; 78
    4aae:	b0 e0       	ldi	r27, 0x00	; 0
    4ab0:	ee e4       	ldi	r30, 0x4E	; 78
    4ab2:	f0 e0       	ldi	r31, 0x00	; 0
    4ab4:	80 81       	ld	r24, Z
    4ab6:	8b 7f       	andi	r24, 0xFB	; 251
    4ab8:	8c 93       	st	X, r24
    4aba:	e7 c1       	rjmp	.+974    	; 0x4e8a <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    4abc:	ae e4       	ldi	r26, 0x4E	; 78
    4abe:	b0 e0       	ldi	r27, 0x00	; 0
    4ac0:	ee e4       	ldi	r30, 0x4E	; 78
    4ac2:	f0 e0       	ldi	r31, 0x00	; 0
    4ac4:	80 81       	ld	r24, Z
    4ac6:	8e 7f       	andi	r24, 0xFE	; 254
    4ac8:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4aca:	ae e4       	ldi	r26, 0x4E	; 78
    4acc:	b0 e0       	ldi	r27, 0x00	; 0
    4ace:	ee e4       	ldi	r30, 0x4E	; 78
    4ad0:	f0 e0       	ldi	r31, 0x00	; 0
    4ad2:	80 81       	ld	r24, Z
    4ad4:	82 60       	ori	r24, 0x02	; 2
    4ad6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4ad8:	ae e4       	ldi	r26, 0x4E	; 78
    4ada:	b0 e0       	ldi	r27, 0x00	; 0
    4adc:	ee e4       	ldi	r30, 0x4E	; 78
    4ade:	f0 e0       	ldi	r31, 0x00	; 0
    4ae0:	80 81       	ld	r24, Z
    4ae2:	8b 7f       	andi	r24, 0xFB	; 251
    4ae4:	8c 93       	st	X, r24
    4ae6:	d1 c1       	rjmp	.+930    	; 0x4e8a <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    4ae8:	ae e4       	ldi	r26, 0x4E	; 78
    4aea:	b0 e0       	ldi	r27, 0x00	; 0
    4aec:	ee e4       	ldi	r30, 0x4E	; 78
    4aee:	f0 e0       	ldi	r31, 0x00	; 0
    4af0:	80 81       	ld	r24, Z
    4af2:	81 60       	ori	r24, 0x01	; 1
    4af4:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4af6:	ae e4       	ldi	r26, 0x4E	; 78
    4af8:	b0 e0       	ldi	r27, 0x00	; 0
    4afa:	ee e4       	ldi	r30, 0x4E	; 78
    4afc:	f0 e0       	ldi	r31, 0x00	; 0
    4afe:	80 81       	ld	r24, Z
    4b00:	82 60       	ori	r24, 0x02	; 2
    4b02:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4b04:	ae e4       	ldi	r26, 0x4E	; 78
    4b06:	b0 e0       	ldi	r27, 0x00	; 0
    4b08:	ee e4       	ldi	r30, 0x4E	; 78
    4b0a:	f0 e0       	ldi	r31, 0x00	; 0
    4b0c:	80 81       	ld	r24, Z
    4b0e:	8b 7f       	andi	r24, 0xFB	; 251
    4b10:	8c 93       	st	X, r24
    4b12:	bb c1       	rjmp	.+886    	; 0x4e8a <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    4b14:	ae e4       	ldi	r26, 0x4E	; 78
    4b16:	b0 e0       	ldi	r27, 0x00	; 0
    4b18:	ee e4       	ldi	r30, 0x4E	; 78
    4b1a:	f0 e0       	ldi	r31, 0x00	; 0
    4b1c:	80 81       	ld	r24, Z
    4b1e:	8e 7f       	andi	r24, 0xFE	; 254
    4b20:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    4b22:	ae e4       	ldi	r26, 0x4E	; 78
    4b24:	b0 e0       	ldi	r27, 0x00	; 0
    4b26:	ee e4       	ldi	r30, 0x4E	; 78
    4b28:	f0 e0       	ldi	r31, 0x00	; 0
    4b2a:	80 81       	ld	r24, Z
    4b2c:	8d 7f       	andi	r24, 0xFD	; 253
    4b2e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4b30:	ae e4       	ldi	r26, 0x4E	; 78
    4b32:	b0 e0       	ldi	r27, 0x00	; 0
    4b34:	ee e4       	ldi	r30, 0x4E	; 78
    4b36:	f0 e0       	ldi	r31, 0x00	; 0
    4b38:	80 81       	ld	r24, Z
    4b3a:	84 60       	ori	r24, 0x04	; 4
    4b3c:	8c 93       	st	X, r24
    4b3e:	a5 c1       	rjmp	.+842    	; 0x4e8a <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    4b40:	ae e4       	ldi	r26, 0x4E	; 78
    4b42:	b0 e0       	ldi	r27, 0x00	; 0
    4b44:	ee e4       	ldi	r30, 0x4E	; 78
    4b46:	f0 e0       	ldi	r31, 0x00	; 0
    4b48:	80 81       	ld	r24, Z
    4b4a:	81 60       	ori	r24, 0x01	; 1
    4b4c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    4b4e:	ae e4       	ldi	r26, 0x4E	; 78
    4b50:	b0 e0       	ldi	r27, 0x00	; 0
    4b52:	ee e4       	ldi	r30, 0x4E	; 78
    4b54:	f0 e0       	ldi	r31, 0x00	; 0
    4b56:	80 81       	ld	r24, Z
    4b58:	8d 7f       	andi	r24, 0xFD	; 253
    4b5a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4b5c:	ae e4       	ldi	r26, 0x4E	; 78
    4b5e:	b0 e0       	ldi	r27, 0x00	; 0
    4b60:	ee e4       	ldi	r30, 0x4E	; 78
    4b62:	f0 e0       	ldi	r31, 0x00	; 0
    4b64:	80 81       	ld	r24, Z
    4b66:	84 60       	ori	r24, 0x04	; 4
    4b68:	8c 93       	st	X, r24
    4b6a:	8f c1       	rjmp	.+798    	; 0x4e8a <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    4b6c:	ae e4       	ldi	r26, 0x4E	; 78
    4b6e:	b0 e0       	ldi	r27, 0x00	; 0
    4b70:	ee e4       	ldi	r30, 0x4E	; 78
    4b72:	f0 e0       	ldi	r31, 0x00	; 0
    4b74:	80 81       	ld	r24, Z
    4b76:	8e 7f       	andi	r24, 0xFE	; 254
    4b78:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4b7a:	ae e4       	ldi	r26, 0x4E	; 78
    4b7c:	b0 e0       	ldi	r27, 0x00	; 0
    4b7e:	ee e4       	ldi	r30, 0x4E	; 78
    4b80:	f0 e0       	ldi	r31, 0x00	; 0
    4b82:	80 81       	ld	r24, Z
    4b84:	82 60       	ori	r24, 0x02	; 2
    4b86:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4b88:	ae e4       	ldi	r26, 0x4E	; 78
    4b8a:	b0 e0       	ldi	r27, 0x00	; 0
    4b8c:	ee e4       	ldi	r30, 0x4E	; 78
    4b8e:	f0 e0       	ldi	r31, 0x00	; 0
    4b90:	80 81       	ld	r24, Z
    4b92:	84 60       	ori	r24, 0x04	; 4
    4b94:	8c 93       	st	X, r24
    4b96:	79 c1       	rjmp	.+754    	; 0x4e8a <Spt_Init+0xbba>
            // TODO
            break;
        case SPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    4b98:	ae e4       	ldi	r26, 0x4E	; 78
    4b9a:	b0 e0       	ldi	r27, 0x00	; 0
    4b9c:	ee e4       	ldi	r30, 0x4E	; 78
    4b9e:	f0 e0       	ldi	r31, 0x00	; 0
    4ba0:	80 81       	ld	r24, Z
    4ba2:	81 60       	ori	r24, 0x01	; 1
    4ba4:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4ba6:	ae e4       	ldi	r26, 0x4E	; 78
    4ba8:	b0 e0       	ldi	r27, 0x00	; 0
    4baa:	ee e4       	ldi	r30, 0x4E	; 78
    4bac:	f0 e0       	ldi	r31, 0x00	; 0
    4bae:	80 81       	ld	r24, Z
    4bb0:	82 60       	ori	r24, 0x02	; 2
    4bb2:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4bb4:	ae e4       	ldi	r26, 0x4E	; 78
    4bb6:	b0 e0       	ldi	r27, 0x00	; 0
    4bb8:	ee e4       	ldi	r30, 0x4E	; 78
    4bba:	f0 e0       	ldi	r31, 0x00	; 0
    4bbc:	80 81       	ld	r24, Z
    4bbe:	84 60       	ori	r24, 0x04	; 4
    4bc0:	8c 93       	st	X, r24
    4bc2:	63 c1       	rjmp	.+710    	; 0x4e8a <Spt_Init+0xbba>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    4bc4:	19 82       	std	Y+1, r1	; 0x01
    4bc6:	61 c1       	rjmp	.+706    	; 0x4e8a <Spt_Init+0xbba>
        }
        break;

         case SPT_CHANNEL_TIMER2:
		 /*Waveform Generation Mode*/
		 if (config->mode == SPT_MODE_FAST_PWM)
    4bc8:	ea 81       	ldd	r30, Y+2	; 0x02
    4bca:	fb 81       	ldd	r31, Y+3	; 0x03
    4bcc:	81 81       	ldd	r24, Z+1	; 0x01
    4bce:	88 23       	and	r24, r24
    4bd0:	79 f4       	brne	.+30     	; 0x4bf0 <Spt_Init+0x920>
		 {
			 SET_BIT(TCCR2,TCCR2_WGM20);
    4bd2:	a5 e4       	ldi	r26, 0x45	; 69
    4bd4:	b0 e0       	ldi	r27, 0x00	; 0
    4bd6:	e5 e4       	ldi	r30, 0x45	; 69
    4bd8:	f0 e0       	ldi	r31, 0x00	; 0
    4bda:	80 81       	ld	r24, Z
    4bdc:	80 64       	ori	r24, 0x40	; 64
    4bde:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_WGM21);
    4be0:	a5 e4       	ldi	r26, 0x45	; 69
    4be2:	b0 e0       	ldi	r27, 0x00	; 0
    4be4:	e5 e4       	ldi	r30, 0x45	; 69
    4be6:	f0 e0       	ldi	r31, 0x00	; 0
    4be8:	80 81       	ld	r24, Z
    4bea:	88 60       	ori	r24, 0x08	; 8
    4bec:	8c 93       	st	X, r24
    4bee:	01 c0       	rjmp	.+2      	; 0x4bf2 <Spt_Init+0x922>
//			 // TODO
//			 // TODO
//		 }
		 else
		 {
			 returnValue = SPT_ERROR;
    4bf0:	19 82       	std	Y+1, r1	; 0x01
		 }

		 /*Compare Match Output Mode*/
		 switch (config->output)
    4bf2:	ea 81       	ldd	r30, Y+2	; 0x02
    4bf4:	fb 81       	ldd	r31, Y+3	; 0x03
    4bf6:	82 81       	ldd	r24, Z+2	; 0x02
    4bf8:	28 2f       	mov	r18, r24
    4bfa:	30 e0       	ldi	r19, 0x00	; 0
    4bfc:	3f 83       	std	Y+7, r19	; 0x07
    4bfe:	2e 83       	std	Y+6, r18	; 0x06
    4c00:	8e 81       	ldd	r24, Y+6	; 0x06
    4c02:	9f 81       	ldd	r25, Y+7	; 0x07
    4c04:	81 30       	cpi	r24, 0x01	; 1
    4c06:	91 05       	cpc	r25, r1
    4c08:	21 f1       	breq	.+72     	; 0x4c52 <Spt_Init+0x982>
    4c0a:	2e 81       	ldd	r18, Y+6	; 0x06
    4c0c:	3f 81       	ldd	r19, Y+7	; 0x07
    4c0e:	22 30       	cpi	r18, 0x02	; 2
    4c10:	31 05       	cpc	r19, r1
    4c12:	2c f4       	brge	.+10     	; 0x4c1e <Spt_Init+0x94e>
    4c14:	8e 81       	ldd	r24, Y+6	; 0x06
    4c16:	9f 81       	ldd	r25, Y+7	; 0x07
    4c18:	00 97       	sbiw	r24, 0x00	; 0
    4c1a:	61 f0       	breq	.+24     	; 0x4c34 <Spt_Init+0x964>
    4c1c:	47 c0       	rjmp	.+142    	; 0x4cac <Spt_Init+0x9dc>
    4c1e:	2e 81       	ldd	r18, Y+6	; 0x06
    4c20:	3f 81       	ldd	r19, Y+7	; 0x07
    4c22:	22 30       	cpi	r18, 0x02	; 2
    4c24:	31 05       	cpc	r19, r1
    4c26:	21 f1       	breq	.+72     	; 0x4c70 <Spt_Init+0x9a0>
    4c28:	8e 81       	ldd	r24, Y+6	; 0x06
    4c2a:	9f 81       	ldd	r25, Y+7	; 0x07
    4c2c:	83 30       	cpi	r24, 0x03	; 3
    4c2e:	91 05       	cpc	r25, r1
    4c30:	71 f1       	breq	.+92     	; 0x4c8e <Spt_Init+0x9be>
    4c32:	3c c0       	rjmp	.+120    	; 0x4cac <Spt_Init+0x9dc>
		 {
		 case SPT_OUTPUT_NORMAL:
			 CLR_BIT(TCCR2,TCCR2_COM20);
    4c34:	a5 e4       	ldi	r26, 0x45	; 69
    4c36:	b0 e0       	ldi	r27, 0x00	; 0
    4c38:	e5 e4       	ldi	r30, 0x45	; 69
    4c3a:	f0 e0       	ldi	r31, 0x00	; 0
    4c3c:	80 81       	ld	r24, Z
    4c3e:	8f 7e       	andi	r24, 0xEF	; 239
    4c40:	8c 93       	st	X, r24
			 CLR_BIT(TCCR2,TCCR2_COM21);
    4c42:	a5 e4       	ldi	r26, 0x45	; 69
    4c44:	b0 e0       	ldi	r27, 0x00	; 0
    4c46:	e5 e4       	ldi	r30, 0x45	; 69
    4c48:	f0 e0       	ldi	r31, 0x00	; 0
    4c4a:	80 81       	ld	r24, Z
    4c4c:	8f 7d       	andi	r24, 0xDF	; 223
    4c4e:	8c 93       	st	X, r24
    4c50:	2e c0       	rjmp	.+92     	; 0x4cae <Spt_Init+0x9de>
			 // TODO
			 break;
		 case SPT_OUTPUT_TOGGLE:
			 SET_BIT(TCCR2,TCCR2_COM20);
    4c52:	a5 e4       	ldi	r26, 0x45	; 69
    4c54:	b0 e0       	ldi	r27, 0x00	; 0
    4c56:	e5 e4       	ldi	r30, 0x45	; 69
    4c58:	f0 e0       	ldi	r31, 0x00	; 0
    4c5a:	80 81       	ld	r24, Z
    4c5c:	80 61       	ori	r24, 0x10	; 16
    4c5e:	8c 93       	st	X, r24
			 CLR_BIT(TCCR2,TCCR2_COM21);
    4c60:	a5 e4       	ldi	r26, 0x45	; 69
    4c62:	b0 e0       	ldi	r27, 0x00	; 0
    4c64:	e5 e4       	ldi	r30, 0x45	; 69
    4c66:	f0 e0       	ldi	r31, 0x00	; 0
    4c68:	80 81       	ld	r24, Z
    4c6a:	8f 7d       	andi	r24, 0xDF	; 223
    4c6c:	8c 93       	st	X, r24
    4c6e:	1f c0       	rjmp	.+62     	; 0x4cae <Spt_Init+0x9de>
			 // TODO
			 break;
		 case SPT_OUTPUT_SET:
			 SET_BIT(TCCR2,TCCR2_COM20);
    4c70:	a5 e4       	ldi	r26, 0x45	; 69
    4c72:	b0 e0       	ldi	r27, 0x00	; 0
    4c74:	e5 e4       	ldi	r30, 0x45	; 69
    4c76:	f0 e0       	ldi	r31, 0x00	; 0
    4c78:	80 81       	ld	r24, Z
    4c7a:	80 61       	ori	r24, 0x10	; 16
    4c7c:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_COM21);
    4c7e:	a5 e4       	ldi	r26, 0x45	; 69
    4c80:	b0 e0       	ldi	r27, 0x00	; 0
    4c82:	e5 e4       	ldi	r30, 0x45	; 69
    4c84:	f0 e0       	ldi	r31, 0x00	; 0
    4c86:	80 81       	ld	r24, Z
    4c88:	80 62       	ori	r24, 0x20	; 32
    4c8a:	8c 93       	st	X, r24
    4c8c:	10 c0       	rjmp	.+32     	; 0x4cae <Spt_Init+0x9de>
			 // TODO
			 break;
		 case SPT_OUTPUT_CLEAR:
			 CLR_BIT(TCCR2,TCCR2_COM20);
    4c8e:	a5 e4       	ldi	r26, 0x45	; 69
    4c90:	b0 e0       	ldi	r27, 0x00	; 0
    4c92:	e5 e4       	ldi	r30, 0x45	; 69
    4c94:	f0 e0       	ldi	r31, 0x00	; 0
    4c96:	80 81       	ld	r24, Z
    4c98:	8f 7e       	andi	r24, 0xEF	; 239
    4c9a:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_COM21);
    4c9c:	a5 e4       	ldi	r26, 0x45	; 69
    4c9e:	b0 e0       	ldi	r27, 0x00	; 0
    4ca0:	e5 e4       	ldi	r30, 0x45	; 69
    4ca2:	f0 e0       	ldi	r31, 0x00	; 0
    4ca4:	80 81       	ld	r24, Z
    4ca6:	80 62       	ori	r24, 0x20	; 32
    4ca8:	8c 93       	st	X, r24
    4caa:	01 c0       	rjmp	.+2      	; 0x4cae <Spt_Init+0x9de>
			 // TODO
			 break;
		 default:
			 returnValue = SPT_ERROR;
    4cac:	19 82       	std	Y+1, r1	; 0x01
			 break;
		 }

		 /*Clock Select*/
		 switch (config->prescaler)
    4cae:	ea 81       	ldd	r30, Y+2	; 0x02
    4cb0:	fb 81       	ldd	r31, Y+3	; 0x03
    4cb2:	83 81       	ldd	r24, Z+3	; 0x03
    4cb4:	28 2f       	mov	r18, r24
    4cb6:	30 e0       	ldi	r19, 0x00	; 0
    4cb8:	3d 83       	std	Y+5, r19	; 0x05
    4cba:	2c 83       	std	Y+4, r18	; 0x04
    4cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    4cbe:	9d 81       	ldd	r25, Y+5	; 0x05
    4cc0:	83 30       	cpi	r24, 0x03	; 3
    4cc2:	91 05       	cpc	r25, r1
    4cc4:	09 f4       	brne	.+2      	; 0x4cc8 <Spt_Init+0x9f8>
    4cc6:	70 c0       	rjmp	.+224    	; 0x4da8 <Spt_Init+0xad8>
    4cc8:	2c 81       	ldd	r18, Y+4	; 0x04
    4cca:	3d 81       	ldd	r19, Y+5	; 0x05
    4ccc:	24 30       	cpi	r18, 0x04	; 4
    4cce:	31 05       	cpc	r19, r1
    4cd0:	84 f4       	brge	.+32     	; 0x4cf2 <Spt_Init+0xa22>
    4cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    4cd4:	9d 81       	ldd	r25, Y+5	; 0x05
    4cd6:	81 30       	cpi	r24, 0x01	; 1
    4cd8:	91 05       	cpc	r25, r1
    4cda:	d1 f1       	breq	.+116    	; 0x4d50 <Spt_Init+0xa80>
    4cdc:	2c 81       	ldd	r18, Y+4	; 0x04
    4cde:	3d 81       	ldd	r19, Y+5	; 0x05
    4ce0:	22 30       	cpi	r18, 0x02	; 2
    4ce2:	31 05       	cpc	r19, r1
    4ce4:	0c f0       	brlt	.+2      	; 0x4ce8 <Spt_Init+0xa18>
    4ce6:	4a c0       	rjmp	.+148    	; 0x4d7c <Spt_Init+0xaac>
    4ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    4cea:	9d 81       	ldd	r25, Y+5	; 0x05
    4cec:	00 97       	sbiw	r24, 0x00	; 0
    4cee:	d1 f0       	breq	.+52     	; 0x4d24 <Spt_Init+0xa54>
    4cf0:	c9 c0       	rjmp	.+402    	; 0x4e84 <Spt_Init+0xbb4>
    4cf2:	2c 81       	ldd	r18, Y+4	; 0x04
    4cf4:	3d 81       	ldd	r19, Y+5	; 0x05
    4cf6:	25 30       	cpi	r18, 0x05	; 5
    4cf8:	31 05       	cpc	r19, r1
    4cfa:	09 f4       	brne	.+2      	; 0x4cfe <Spt_Init+0xa2e>
    4cfc:	81 c0       	rjmp	.+258    	; 0x4e00 <Spt_Init+0xb30>
    4cfe:	8c 81       	ldd	r24, Y+4	; 0x04
    4d00:	9d 81       	ldd	r25, Y+5	; 0x05
    4d02:	85 30       	cpi	r24, 0x05	; 5
    4d04:	91 05       	cpc	r25, r1
    4d06:	0c f4       	brge	.+2      	; 0x4d0a <Spt_Init+0xa3a>
    4d08:	65 c0       	rjmp	.+202    	; 0x4dd4 <Spt_Init+0xb04>
    4d0a:	2c 81       	ldd	r18, Y+4	; 0x04
    4d0c:	3d 81       	ldd	r19, Y+5	; 0x05
    4d0e:	26 30       	cpi	r18, 0x06	; 6
    4d10:	31 05       	cpc	r19, r1
    4d12:	09 f4       	brne	.+2      	; 0x4d16 <Spt_Init+0xa46>
    4d14:	8b c0       	rjmp	.+278    	; 0x4e2c <Spt_Init+0xb5c>
    4d16:	8c 81       	ldd	r24, Y+4	; 0x04
    4d18:	9d 81       	ldd	r25, Y+5	; 0x05
    4d1a:	87 30       	cpi	r24, 0x07	; 7
    4d1c:	91 05       	cpc	r25, r1
    4d1e:	09 f4       	brne	.+2      	; 0x4d22 <Spt_Init+0xa52>
    4d20:	9b c0       	rjmp	.+310    	; 0x4e58 <Spt_Init+0xb88>
    4d22:	b0 c0       	rjmp	.+352    	; 0x4e84 <Spt_Init+0xbb4>
		 {
		 case SPT_PRESCALER_0:
			 CLR_BIT(TCCR2,TCCR2_CS20);
    4d24:	a5 e4       	ldi	r26, 0x45	; 69
    4d26:	b0 e0       	ldi	r27, 0x00	; 0
    4d28:	e5 e4       	ldi	r30, 0x45	; 69
    4d2a:	f0 e0       	ldi	r31, 0x00	; 0
    4d2c:	80 81       	ld	r24, Z
    4d2e:	8e 7f       	andi	r24, 0xFE	; 254
    4d30:	8c 93       	st	X, r24
			 CLR_BIT(TCCR2,TCCR2_CS21);
    4d32:	a5 e4       	ldi	r26, 0x45	; 69
    4d34:	b0 e0       	ldi	r27, 0x00	; 0
    4d36:	e5 e4       	ldi	r30, 0x45	; 69
    4d38:	f0 e0       	ldi	r31, 0x00	; 0
    4d3a:	80 81       	ld	r24, Z
    4d3c:	8d 7f       	andi	r24, 0xFD	; 253
    4d3e:	8c 93       	st	X, r24
			 CLR_BIT(TCCR2,TCCR2_CS22);
    4d40:	a5 e4       	ldi	r26, 0x45	; 69
    4d42:	b0 e0       	ldi	r27, 0x00	; 0
    4d44:	e5 e4       	ldi	r30, 0x45	; 69
    4d46:	f0 e0       	ldi	r31, 0x00	; 0
    4d48:	80 81       	ld	r24, Z
    4d4a:	8b 7f       	andi	r24, 0xFB	; 251
    4d4c:	8c 93       	st	X, r24
    4d4e:	9d c0       	rjmp	.+314    	; 0x4e8a <Spt_Init+0xbba>
			 // TODO
			 break;
		 case SPT_PRESCALER_1:
			 SET_BIT(TCCR2,TCCR2_CS20);
    4d50:	a5 e4       	ldi	r26, 0x45	; 69
    4d52:	b0 e0       	ldi	r27, 0x00	; 0
    4d54:	e5 e4       	ldi	r30, 0x45	; 69
    4d56:	f0 e0       	ldi	r31, 0x00	; 0
    4d58:	80 81       	ld	r24, Z
    4d5a:	81 60       	ori	r24, 0x01	; 1
    4d5c:	8c 93       	st	X, r24
			 CLR_BIT(TCCR2,TCCR2_CS21);
    4d5e:	a5 e4       	ldi	r26, 0x45	; 69
    4d60:	b0 e0       	ldi	r27, 0x00	; 0
    4d62:	e5 e4       	ldi	r30, 0x45	; 69
    4d64:	f0 e0       	ldi	r31, 0x00	; 0
    4d66:	80 81       	ld	r24, Z
    4d68:	8d 7f       	andi	r24, 0xFD	; 253
    4d6a:	8c 93       	st	X, r24
			 CLR_BIT(TCCR2,TCCR2_CS22);
    4d6c:	a5 e4       	ldi	r26, 0x45	; 69
    4d6e:	b0 e0       	ldi	r27, 0x00	; 0
    4d70:	e5 e4       	ldi	r30, 0x45	; 69
    4d72:	f0 e0       	ldi	r31, 0x00	; 0
    4d74:	80 81       	ld	r24, Z
    4d76:	8b 7f       	andi	r24, 0xFB	; 251
    4d78:	8c 93       	st	X, r24
    4d7a:	87 c0       	rjmp	.+270    	; 0x4e8a <Spt_Init+0xbba>
			 // TODO
			 break;
		 case SPT_PRESCALER_8:
			 CLR_BIT(TCCR2,TCCR2_CS20);
    4d7c:	a5 e4       	ldi	r26, 0x45	; 69
    4d7e:	b0 e0       	ldi	r27, 0x00	; 0
    4d80:	e5 e4       	ldi	r30, 0x45	; 69
    4d82:	f0 e0       	ldi	r31, 0x00	; 0
    4d84:	80 81       	ld	r24, Z
    4d86:	8e 7f       	andi	r24, 0xFE	; 254
    4d88:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_CS21);
    4d8a:	a5 e4       	ldi	r26, 0x45	; 69
    4d8c:	b0 e0       	ldi	r27, 0x00	; 0
    4d8e:	e5 e4       	ldi	r30, 0x45	; 69
    4d90:	f0 e0       	ldi	r31, 0x00	; 0
    4d92:	80 81       	ld	r24, Z
    4d94:	82 60       	ori	r24, 0x02	; 2
    4d96:	8c 93       	st	X, r24
			 CLR_BIT(TCCR2,TCCR2_CS22);
    4d98:	a5 e4       	ldi	r26, 0x45	; 69
    4d9a:	b0 e0       	ldi	r27, 0x00	; 0
    4d9c:	e5 e4       	ldi	r30, 0x45	; 69
    4d9e:	f0 e0       	ldi	r31, 0x00	; 0
    4da0:	80 81       	ld	r24, Z
    4da2:	8b 7f       	andi	r24, 0xFB	; 251
    4da4:	8c 93       	st	X, r24
    4da6:	71 c0       	rjmp	.+226    	; 0x4e8a <Spt_Init+0xbba>
			 // TODO
			 break;
		 case SPT_PRESCALER_32:
			 SET_BIT(TCCR2,TCCR2_CS20);
    4da8:	a5 e4       	ldi	r26, 0x45	; 69
    4daa:	b0 e0       	ldi	r27, 0x00	; 0
    4dac:	e5 e4       	ldi	r30, 0x45	; 69
    4dae:	f0 e0       	ldi	r31, 0x00	; 0
    4db0:	80 81       	ld	r24, Z
    4db2:	81 60       	ori	r24, 0x01	; 1
    4db4:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_CS21);
    4db6:	a5 e4       	ldi	r26, 0x45	; 69
    4db8:	b0 e0       	ldi	r27, 0x00	; 0
    4dba:	e5 e4       	ldi	r30, 0x45	; 69
    4dbc:	f0 e0       	ldi	r31, 0x00	; 0
    4dbe:	80 81       	ld	r24, Z
    4dc0:	82 60       	ori	r24, 0x02	; 2
    4dc2:	8c 93       	st	X, r24
			 CLR_BIT(TCCR2,TCCR2_CS22);
    4dc4:	a5 e4       	ldi	r26, 0x45	; 69
    4dc6:	b0 e0       	ldi	r27, 0x00	; 0
    4dc8:	e5 e4       	ldi	r30, 0x45	; 69
    4dca:	f0 e0       	ldi	r31, 0x00	; 0
    4dcc:	80 81       	ld	r24, Z
    4dce:	8b 7f       	andi	r24, 0xFB	; 251
    4dd0:	8c 93       	st	X, r24
    4dd2:	5b c0       	rjmp	.+182    	; 0x4e8a <Spt_Init+0xbba>
			 // TODO
			 break;
		 case SPT_PRESCALER_64:
			 CLR_BIT(TCCR2,TCCR2_CS20);
    4dd4:	a5 e4       	ldi	r26, 0x45	; 69
    4dd6:	b0 e0       	ldi	r27, 0x00	; 0
    4dd8:	e5 e4       	ldi	r30, 0x45	; 69
    4dda:	f0 e0       	ldi	r31, 0x00	; 0
    4ddc:	80 81       	ld	r24, Z
    4dde:	8e 7f       	andi	r24, 0xFE	; 254
    4de0:	8c 93       	st	X, r24
			 CLR_BIT(TCCR2,TCCR2_CS21);
    4de2:	a5 e4       	ldi	r26, 0x45	; 69
    4de4:	b0 e0       	ldi	r27, 0x00	; 0
    4de6:	e5 e4       	ldi	r30, 0x45	; 69
    4de8:	f0 e0       	ldi	r31, 0x00	; 0
    4dea:	80 81       	ld	r24, Z
    4dec:	8d 7f       	andi	r24, 0xFD	; 253
    4dee:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_CS22);
    4df0:	a5 e4       	ldi	r26, 0x45	; 69
    4df2:	b0 e0       	ldi	r27, 0x00	; 0
    4df4:	e5 e4       	ldi	r30, 0x45	; 69
    4df6:	f0 e0       	ldi	r31, 0x00	; 0
    4df8:	80 81       	ld	r24, Z
    4dfa:	84 60       	ori	r24, 0x04	; 4
    4dfc:	8c 93       	st	X, r24
    4dfe:	45 c0       	rjmp	.+138    	; 0x4e8a <Spt_Init+0xbba>
			 // TODO
			 break;
		 case SPT_PRESCALER_128:
			 SET_BIT(TCCR2,TCCR2_CS20);
    4e00:	a5 e4       	ldi	r26, 0x45	; 69
    4e02:	b0 e0       	ldi	r27, 0x00	; 0
    4e04:	e5 e4       	ldi	r30, 0x45	; 69
    4e06:	f0 e0       	ldi	r31, 0x00	; 0
    4e08:	80 81       	ld	r24, Z
    4e0a:	81 60       	ori	r24, 0x01	; 1
    4e0c:	8c 93       	st	X, r24
			 CLR_BIT(TCCR2,TCCR2_CS21);
    4e0e:	a5 e4       	ldi	r26, 0x45	; 69
    4e10:	b0 e0       	ldi	r27, 0x00	; 0
    4e12:	e5 e4       	ldi	r30, 0x45	; 69
    4e14:	f0 e0       	ldi	r31, 0x00	; 0
    4e16:	80 81       	ld	r24, Z
    4e18:	8d 7f       	andi	r24, 0xFD	; 253
    4e1a:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_CS22);
    4e1c:	a5 e4       	ldi	r26, 0x45	; 69
    4e1e:	b0 e0       	ldi	r27, 0x00	; 0
    4e20:	e5 e4       	ldi	r30, 0x45	; 69
    4e22:	f0 e0       	ldi	r31, 0x00	; 0
    4e24:	80 81       	ld	r24, Z
    4e26:	84 60       	ori	r24, 0x04	; 4
    4e28:	8c 93       	st	X, r24
    4e2a:	2f c0       	rjmp	.+94     	; 0x4e8a <Spt_Init+0xbba>
			 // TODO
			 break;
		 case SPT_PRESCALER_256:
			 CLR_BIT(TCCR2,TCCR2_CS20);
    4e2c:	a5 e4       	ldi	r26, 0x45	; 69
    4e2e:	b0 e0       	ldi	r27, 0x00	; 0
    4e30:	e5 e4       	ldi	r30, 0x45	; 69
    4e32:	f0 e0       	ldi	r31, 0x00	; 0
    4e34:	80 81       	ld	r24, Z
    4e36:	8e 7f       	andi	r24, 0xFE	; 254
    4e38:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_CS21);
    4e3a:	a5 e4       	ldi	r26, 0x45	; 69
    4e3c:	b0 e0       	ldi	r27, 0x00	; 0
    4e3e:	e5 e4       	ldi	r30, 0x45	; 69
    4e40:	f0 e0       	ldi	r31, 0x00	; 0
    4e42:	80 81       	ld	r24, Z
    4e44:	82 60       	ori	r24, 0x02	; 2
    4e46:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_CS22);
    4e48:	a5 e4       	ldi	r26, 0x45	; 69
    4e4a:	b0 e0       	ldi	r27, 0x00	; 0
    4e4c:	e5 e4       	ldi	r30, 0x45	; 69
    4e4e:	f0 e0       	ldi	r31, 0x00	; 0
    4e50:	80 81       	ld	r24, Z
    4e52:	84 60       	ori	r24, 0x04	; 4
    4e54:	8c 93       	st	X, r24
    4e56:	19 c0       	rjmp	.+50     	; 0x4e8a <Spt_Init+0xbba>
			 // TODO
			 break;
		 case SPT_PRESCALER_1024:
			 SET_BIT(TCCR2,TCCR2_CS20);
    4e58:	a5 e4       	ldi	r26, 0x45	; 69
    4e5a:	b0 e0       	ldi	r27, 0x00	; 0
    4e5c:	e5 e4       	ldi	r30, 0x45	; 69
    4e5e:	f0 e0       	ldi	r31, 0x00	; 0
    4e60:	80 81       	ld	r24, Z
    4e62:	81 60       	ori	r24, 0x01	; 1
    4e64:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_CS21);
    4e66:	a5 e4       	ldi	r26, 0x45	; 69
    4e68:	b0 e0       	ldi	r27, 0x00	; 0
    4e6a:	e5 e4       	ldi	r30, 0x45	; 69
    4e6c:	f0 e0       	ldi	r31, 0x00	; 0
    4e6e:	80 81       	ld	r24, Z
    4e70:	82 60       	ori	r24, 0x02	; 2
    4e72:	8c 93       	st	X, r24
			 SET_BIT(TCCR2,TCCR2_CS22);
    4e74:	a5 e4       	ldi	r26, 0x45	; 69
    4e76:	b0 e0       	ldi	r27, 0x00	; 0
    4e78:	e5 e4       	ldi	r30, 0x45	; 69
    4e7a:	f0 e0       	ldi	r31, 0x00	; 0
    4e7c:	80 81       	ld	r24, Z
    4e7e:	84 60       	ori	r24, 0x04	; 4
    4e80:	8c 93       	st	X, r24
    4e82:	03 c0       	rjmp	.+6      	; 0x4e8a <Spt_Init+0xbba>
			 // TODO
			 break;
		 default:
			 returnValue = SPT_ERROR;
    4e84:	19 82       	std	Y+1, r1	; 0x01
    4e86:	01 c0       	rjmp	.+2      	; 0x4e8a <Spt_Init+0xbba>
			 break;
		 }
		 break;

        default:
            returnValue = SPT_ERROR;
    4e88:	19 82       	std	Y+1, r1	; 0x01
        }
        return returnValue;
    4e8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e8c:	65 96       	adiw	r28, 0x15	; 21
    4e8e:	0f b6       	in	r0, 0x3f	; 63
    4e90:	f8 94       	cli
    4e92:	de bf       	out	0x3e, r29	; 62
    4e94:	0f be       	out	0x3f, r0	; 63
    4e96:	cd bf       	out	0x3d, r28	; 61
    4e98:	cf 91       	pop	r28
    4e9a:	df 91       	pop	r29
    4e9c:	08 95       	ret

00004e9e <Spt_Set_ICR1>:

void Spt_Set_ICR1(u16 value) {
    4e9e:	df 93       	push	r29
    4ea0:	cf 93       	push	r28
    4ea2:	00 d0       	rcall	.+0      	; 0x4ea4 <Spt_Set_ICR1+0x6>
    4ea4:	cd b7       	in	r28, 0x3d	; 61
    4ea6:	de b7       	in	r29, 0x3e	; 62
    4ea8:	9a 83       	std	Y+2, r25	; 0x02
    4eaa:	89 83       	std	Y+1, r24	; 0x01
    ICR1 = value;
    4eac:	e6 e4       	ldi	r30, 0x46	; 70
    4eae:	f0 e0       	ldi	r31, 0x00	; 0
    4eb0:	89 81       	ldd	r24, Y+1	; 0x01
    4eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    4eb4:	91 83       	std	Z+1, r25	; 0x01
    4eb6:	80 83       	st	Z, r24
}
    4eb8:	0f 90       	pop	r0
    4eba:	0f 90       	pop	r0
    4ebc:	cf 91       	pop	r28
    4ebe:	df 91       	pop	r29
    4ec0:	08 95       	ret

00004ec2 <Get_OCR_Value>:

u16 Get_OCR_Value (u8 angle) {
    4ec2:	df 93       	push	r29
    4ec4:	cf 93       	push	r28
    4ec6:	0f 92       	push	r0
    4ec8:	cd b7       	in	r28, 0x3d	; 61
    4eca:	de b7       	in	r29, 0x3e	; 62
    4ecc:	89 83       	std	Y+1, r24	; 0x01
    return ((angle*1000)/180)+1000;
    4ece:	89 81       	ldd	r24, Y+1	; 0x01
    4ed0:	28 2f       	mov	r18, r24
    4ed2:	30 e0       	ldi	r19, 0x00	; 0
    4ed4:	88 ee       	ldi	r24, 0xE8	; 232
    4ed6:	93 e0       	ldi	r25, 0x03	; 3
    4ed8:	ac 01       	movw	r20, r24
    4eda:	24 9f       	mul	r18, r20
    4edc:	c0 01       	movw	r24, r0
    4ede:	25 9f       	mul	r18, r21
    4ee0:	90 0d       	add	r25, r0
    4ee2:	34 9f       	mul	r19, r20
    4ee4:	90 0d       	add	r25, r0
    4ee6:	11 24       	eor	r1, r1
    4ee8:	24 eb       	ldi	r18, 0xB4	; 180
    4eea:	30 e0       	ldi	r19, 0x00	; 0
    4eec:	b9 01       	movw	r22, r18
    4eee:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <__divmodhi4>
    4ef2:	cb 01       	movw	r24, r22
    4ef4:	88 51       	subi	r24, 0x18	; 24
    4ef6:	9c 4f       	sbci	r25, 0xFC	; 252
}
    4ef8:	0f 90       	pop	r0
    4efa:	cf 91       	pop	r28
    4efc:	df 91       	pop	r29
    4efe:	08 95       	ret

00004f00 <Spt_StartTimer>:

Spt_ReturnType Spt_StartTimer(Spt_ChannelType channel, u16 value)
{
    4f00:	df 93       	push	r29
    4f02:	cf 93       	push	r28
    4f04:	00 d0       	rcall	.+0      	; 0x4f06 <Spt_StartTimer+0x6>
    4f06:	00 d0       	rcall	.+0      	; 0x4f08 <Spt_StartTimer+0x8>
    4f08:	00 d0       	rcall	.+0      	; 0x4f0a <Spt_StartTimer+0xa>
    4f0a:	cd b7       	in	r28, 0x3d	; 61
    4f0c:	de b7       	in	r29, 0x3e	; 62
    4f0e:	8a 83       	std	Y+2, r24	; 0x02
    4f10:	7c 83       	std	Y+4, r23	; 0x04
    4f12:	6b 83       	std	Y+3, r22	; 0x03
    Spt_ReturnType returnValue = SPT_OK;
    4f14:	81 e0       	ldi	r24, 0x01	; 1
    4f16:	89 83       	std	Y+1, r24	; 0x01
    switch (channel)
    4f18:	8a 81       	ldd	r24, Y+2	; 0x02
    4f1a:	28 2f       	mov	r18, r24
    4f1c:	30 e0       	ldi	r19, 0x00	; 0
    4f1e:	3e 83       	std	Y+6, r19	; 0x06
    4f20:	2d 83       	std	Y+5, r18	; 0x05
    4f22:	8d 81       	ldd	r24, Y+5	; 0x05
    4f24:	9e 81       	ldd	r25, Y+6	; 0x06
    4f26:	81 30       	cpi	r24, 0x01	; 1
    4f28:	91 05       	cpc	r25, r1
    4f2a:	11 f1       	breq	.+68     	; 0x4f70 <Spt_StartTimer+0x70>
    4f2c:	2d 81       	ldd	r18, Y+5	; 0x05
    4f2e:	3e 81       	ldd	r19, Y+6	; 0x06
    4f30:	22 30       	cpi	r18, 0x02	; 2
    4f32:	31 05       	cpc	r19, r1
    4f34:	2c f4       	brge	.+10     	; 0x4f40 <Spt_StartTimer+0x40>
    4f36:	8d 81       	ldd	r24, Y+5	; 0x05
    4f38:	9e 81       	ldd	r25, Y+6	; 0x06
    4f3a:	00 97       	sbiw	r24, 0x00	; 0
    4f3c:	61 f0       	breq	.+24     	; 0x4f56 <Spt_StartTimer+0x56>
    4f3e:	32 c0       	rjmp	.+100    	; 0x4fa4 <Spt_StartTimer+0xa4>
    4f40:	2d 81       	ldd	r18, Y+5	; 0x05
    4f42:	3e 81       	ldd	r19, Y+6	; 0x06
    4f44:	22 30       	cpi	r18, 0x02	; 2
    4f46:	31 05       	cpc	r19, r1
    4f48:	d1 f0       	breq	.+52     	; 0x4f7e <Spt_StartTimer+0x7e>
    4f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    4f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    4f4e:	83 30       	cpi	r24, 0x03	; 3
    4f50:	91 05       	cpc	r25, r1
    4f52:	e1 f0       	breq	.+56     	; 0x4f8c <Spt_StartTimer+0x8c>
    4f54:	27 c0       	rjmp	.+78     	; 0x4fa4 <Spt_StartTimer+0xa4>
    {
    case SPT_CHANNEL_TIMER0:
        if (value < 256)
    4f56:	8b 81       	ldd	r24, Y+3	; 0x03
    4f58:	9c 81       	ldd	r25, Y+4	; 0x04
    4f5a:	8f 3f       	cpi	r24, 0xFF	; 255
    4f5c:	91 05       	cpc	r25, r1
    4f5e:	09 f0       	breq	.+2      	; 0x4f62 <Spt_StartTimer+0x62>
    4f60:	28 f4       	brcc	.+10     	; 0x4f6c <Spt_StartTimer+0x6c>
        {
            OCR0 = value;
    4f62:	ec e5       	ldi	r30, 0x5C	; 92
    4f64:	f0 e0       	ldi	r31, 0x00	; 0
    4f66:	8b 81       	ldd	r24, Y+3	; 0x03
    4f68:	80 83       	st	Z, r24
    4f6a:	1c c0       	rjmp	.+56     	; 0x4fa4 <Spt_StartTimer+0xa4>
        }
        else
        {
            returnValue = SPT_ERROR;
    4f6c:	19 82       	std	Y+1, r1	; 0x01
    4f6e:	1a c0       	rjmp	.+52     	; 0x4fa4 <Spt_StartTimer+0xa4>
        }
        break;
    case SPT_CHANNEL_TIMER1A:
        if (value < 65536)
        {
            OCR1A = value;
    4f70:	ea e4       	ldi	r30, 0x4A	; 74
    4f72:	f0 e0       	ldi	r31, 0x00	; 0
    4f74:	8b 81       	ldd	r24, Y+3	; 0x03
    4f76:	9c 81       	ldd	r25, Y+4	; 0x04
    4f78:	91 83       	std	Z+1, r25	; 0x01
    4f7a:	80 83       	st	Z, r24
    4f7c:	13 c0       	rjmp	.+38     	; 0x4fa4 <Spt_StartTimer+0xa4>
        // TODO
        break;
    case SPT_CHANNEL_TIMER1B:
        if (value < 65536)
        {
            OCR1B = value;
    4f7e:	e8 e4       	ldi	r30, 0x48	; 72
    4f80:	f0 e0       	ldi	r31, 0x00	; 0
    4f82:	8b 81       	ldd	r24, Y+3	; 0x03
    4f84:	9c 81       	ldd	r25, Y+4	; 0x04
    4f86:	91 83       	std	Z+1, r25	; 0x01
    4f88:	80 83       	st	Z, r24
    4f8a:	0c c0       	rjmp	.+24     	; 0x4fa4 <Spt_StartTimer+0xa4>
            returnValue = SPT_ERROR;
        }
        // TODO
        break;
    case SPT_CHANNEL_TIMER2:
		if (value < 256)
    4f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f90:	8f 3f       	cpi	r24, 0xFF	; 255
    4f92:	91 05       	cpc	r25, r1
    4f94:	09 f0       	breq	.+2      	; 0x4f98 <Spt_StartTimer+0x98>
    4f96:	28 f4       	brcc	.+10     	; 0x4fa2 <Spt_StartTimer+0xa2>
		{
			OCR2 = value;
    4f98:	e3 e4       	ldi	r30, 0x43	; 67
    4f9a:	f0 e0       	ldi	r31, 0x00	; 0
    4f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f9e:	80 83       	st	Z, r24
    4fa0:	01 c0       	rjmp	.+2      	; 0x4fa4 <Spt_StartTimer+0xa4>
		}
		else
		{
			returnValue = SPT_ERROR;
    4fa2:	19 82       	std	Y+1, r1	; 0x01
		break;

    default:
        break;
    }
    return returnValue;
    4fa4:	89 81       	ldd	r24, Y+1	; 0x01
}
    4fa6:	26 96       	adiw	r28, 0x06	; 6
    4fa8:	0f b6       	in	r0, 0x3f	; 63
    4faa:	f8 94       	cli
    4fac:	de bf       	out	0x3e, r29	; 62
    4fae:	0f be       	out	0x3f, r0	; 63
    4fb0:	cd bf       	out	0x3d, r28	; 61
    4fb2:	cf 91       	pop	r28
    4fb4:	df 91       	pop	r29
    4fb6:	08 95       	ret

00004fb8 <UART_Init>:
#define UCSRB_RXEN 4

#define UCSRA_TXC 6
#define UCSRA_RXC 7

void UART_Init (UART_ConfigType* config) {
    4fb8:	df 93       	push	r29
    4fba:	cf 93       	push	r28
    4fbc:	cd b7       	in	r28, 0x3d	; 61
    4fbe:	de b7       	in	r29, 0x3e	; 62
    4fc0:	28 97       	sbiw	r28, 0x08	; 8
    4fc2:	0f b6       	in	r0, 0x3f	; 63
    4fc4:	f8 94       	cli
    4fc6:	de bf       	out	0x3e, r29	; 62
    4fc8:	0f be       	out	0x3f, r0	; 63
    4fca:	cd bf       	out	0x3d, r28	; 61
    4fcc:	9a 83       	std	Y+2, r25	; 0x02
    4fce:	89 83       	std	Y+1, r24	; 0x01

    SET_BIT(UCSRC,UCSRC_URSEL);
    4fd0:	a0 e4       	ldi	r26, 0x40	; 64
    4fd2:	b0 e0       	ldi	r27, 0x00	; 0
    4fd4:	e0 e4       	ldi	r30, 0x40	; 64
    4fd6:	f0 e0       	ldi	r31, 0x00	; 0
    4fd8:	80 81       	ld	r24, Z
    4fda:	80 68       	ori	r24, 0x80	; 128
    4fdc:	8c 93       	st	X, r24
    CLR_BIT(UCSRC,UCSRC_UMSEL);
    4fde:	a0 e4       	ldi	r26, 0x40	; 64
    4fe0:	b0 e0       	ldi	r27, 0x00	; 0
    4fe2:	e0 e4       	ldi	r30, 0x40	; 64
    4fe4:	f0 e0       	ldi	r31, 0x00	; 0
    4fe6:	80 81       	ld	r24, Z
    4fe8:	8f 7b       	andi	r24, 0xBF	; 191
    4fea:	8c 93       	st	X, r24

    switch (config->parity)
    4fec:	e9 81       	ldd	r30, Y+1	; 0x01
    4fee:	fa 81       	ldd	r31, Y+2	; 0x02
    4ff0:	80 81       	ld	r24, Z
    4ff2:	28 2f       	mov	r18, r24
    4ff4:	30 e0       	ldi	r19, 0x00	; 0
    4ff6:	38 87       	std	Y+8, r19	; 0x08
    4ff8:	2f 83       	std	Y+7, r18	; 0x07
    4ffa:	8f 81       	ldd	r24, Y+7	; 0x07
    4ffc:	98 85       	ldd	r25, Y+8	; 0x08
    4ffe:	81 30       	cpi	r24, 0x01	; 1
    5000:	91 05       	cpc	r25, r1
    5002:	c1 f0       	breq	.+48     	; 0x5034 <UART_Init+0x7c>
    5004:	2f 81       	ldd	r18, Y+7	; 0x07
    5006:	38 85       	ldd	r19, Y+8	; 0x08
    5008:	22 30       	cpi	r18, 0x02	; 2
    500a:	31 05       	cpc	r19, r1
    500c:	11 f1       	breq	.+68     	; 0x5052 <UART_Init+0x9a>
    500e:	8f 81       	ldd	r24, Y+7	; 0x07
    5010:	98 85       	ldd	r25, Y+8	; 0x08
    5012:	00 97       	sbiw	r24, 0x00	; 0
    5014:	61 f5       	brne	.+88     	; 0x506e <UART_Init+0xb6>
    {
        case DISABLE_PRITY:
            CLR_BIT(UCSRC,UCSRC_UPM0);
    5016:	a0 e4       	ldi	r26, 0x40	; 64
    5018:	b0 e0       	ldi	r27, 0x00	; 0
    501a:	e0 e4       	ldi	r30, 0x40	; 64
    501c:	f0 e0       	ldi	r31, 0x00	; 0
    501e:	80 81       	ld	r24, Z
    5020:	8f 7e       	andi	r24, 0xEF	; 239
    5022:	8c 93       	st	X, r24
            CLR_BIT(UCSRC,UCSRC_UPM1);
    5024:	a0 e4       	ldi	r26, 0x40	; 64
    5026:	b0 e0       	ldi	r27, 0x00	; 0
    5028:	e0 e4       	ldi	r30, 0x40	; 64
    502a:	f0 e0       	ldi	r31, 0x00	; 0
    502c:	80 81       	ld	r24, Z
    502e:	8f 7d       	andi	r24, 0xDF	; 223
    5030:	8c 93       	st	X, r24
    5032:	1d c0       	rjmp	.+58     	; 0x506e <UART_Init+0xb6>
            break;
        case ENABLE_EVEN_PARITY:
            CLR_BIT(UCSRC,UCSRC_UPM0);
    5034:	a0 e4       	ldi	r26, 0x40	; 64
    5036:	b0 e0       	ldi	r27, 0x00	; 0
    5038:	e0 e4       	ldi	r30, 0x40	; 64
    503a:	f0 e0       	ldi	r31, 0x00	; 0
    503c:	80 81       	ld	r24, Z
    503e:	8f 7e       	andi	r24, 0xEF	; 239
    5040:	8c 93       	st	X, r24
            SET_BIT(UCSRC,UCSRC_UPM1);
    5042:	a0 e4       	ldi	r26, 0x40	; 64
    5044:	b0 e0       	ldi	r27, 0x00	; 0
    5046:	e0 e4       	ldi	r30, 0x40	; 64
    5048:	f0 e0       	ldi	r31, 0x00	; 0
    504a:	80 81       	ld	r24, Z
    504c:	80 62       	ori	r24, 0x20	; 32
    504e:	8c 93       	st	X, r24
    5050:	0e c0       	rjmp	.+28     	; 0x506e <UART_Init+0xb6>
            break;
        case ENABLE_ODD_PARITY:
            SET_BIT(UCSRC,UCSRC_UPM0);
    5052:	a0 e4       	ldi	r26, 0x40	; 64
    5054:	b0 e0       	ldi	r27, 0x00	; 0
    5056:	e0 e4       	ldi	r30, 0x40	; 64
    5058:	f0 e0       	ldi	r31, 0x00	; 0
    505a:	80 81       	ld	r24, Z
    505c:	80 61       	ori	r24, 0x10	; 16
    505e:	8c 93       	st	X, r24
            SET_BIT(UCSRC,UCSRC_UPM1);
    5060:	a0 e4       	ldi	r26, 0x40	; 64
    5062:	b0 e0       	ldi	r27, 0x00	; 0
    5064:	e0 e4       	ldi	r30, 0x40	; 64
    5066:	f0 e0       	ldi	r31, 0x00	; 0
    5068:	80 81       	ld	r24, Z
    506a:	80 62       	ori	r24, 0x20	; 32
    506c:	8c 93       	st	X, r24
            break;
        default:
            break;
    }

    switch (config->stop_bit)
    506e:	e9 81       	ldd	r30, Y+1	; 0x01
    5070:	fa 81       	ldd	r31, Y+2	; 0x02
    5072:	81 81       	ldd	r24, Z+1	; 0x01
    5074:	28 2f       	mov	r18, r24
    5076:	30 e0       	ldi	r19, 0x00	; 0
    5078:	3e 83       	std	Y+6, r19	; 0x06
    507a:	2d 83       	std	Y+5, r18	; 0x05
    507c:	8d 81       	ldd	r24, Y+5	; 0x05
    507e:	9e 81       	ldd	r25, Y+6	; 0x06
    5080:	00 97       	sbiw	r24, 0x00	; 0
    5082:	31 f0       	breq	.+12     	; 0x5090 <UART_Init+0xd8>
    5084:	2d 81       	ldd	r18, Y+5	; 0x05
    5086:	3e 81       	ldd	r19, Y+6	; 0x06
    5088:	21 30       	cpi	r18, 0x01	; 1
    508a:	31 05       	cpc	r19, r1
    508c:	49 f0       	breq	.+18     	; 0x50a0 <UART_Init+0xe8>
    508e:	0f c0       	rjmp	.+30     	; 0x50ae <UART_Init+0xf6>
    {
        case ONE_STOP_BIT:
            CLR_BIT(UCSRC,UCSRC_USBS);
    5090:	a0 e4       	ldi	r26, 0x40	; 64
    5092:	b0 e0       	ldi	r27, 0x00	; 0
    5094:	e0 e4       	ldi	r30, 0x40	; 64
    5096:	f0 e0       	ldi	r31, 0x00	; 0
    5098:	80 81       	ld	r24, Z
    509a:	87 7f       	andi	r24, 0xF7	; 247
    509c:	8c 93       	st	X, r24
    509e:	07 c0       	rjmp	.+14     	; 0x50ae <UART_Init+0xf6>
            break;
        case TWO_STOP_BIT:
            SET_BIT(UCSRC,UCSRC_USBS);
    50a0:	a0 e4       	ldi	r26, 0x40	; 64
    50a2:	b0 e0       	ldi	r27, 0x00	; 0
    50a4:	e0 e4       	ldi	r30, 0x40	; 64
    50a6:	f0 e0       	ldi	r31, 0x00	; 0
    50a8:	80 81       	ld	r24, Z
    50aa:	88 60       	ori	r24, 0x08	; 8
    50ac:	8c 93       	st	X, r24
            break;
        default:
            break;
    }

    switch (config->char_size)
    50ae:	e9 81       	ldd	r30, Y+1	; 0x01
    50b0:	fa 81       	ldd	r31, Y+2	; 0x02
    50b2:	82 81       	ldd	r24, Z+2	; 0x02
    50b4:	28 2f       	mov	r18, r24
    50b6:	30 e0       	ldi	r19, 0x00	; 0
    50b8:	3c 83       	std	Y+4, r19	; 0x04
    50ba:	2b 83       	std	Y+3, r18	; 0x03
    50bc:	8b 81       	ldd	r24, Y+3	; 0x03
    50be:	9c 81       	ldd	r25, Y+4	; 0x04
    50c0:	82 30       	cpi	r24, 0x02	; 2
    50c2:	91 05       	cpc	r25, r1
    50c4:	09 f4       	brne	.+2      	; 0x50c8 <UART_Init+0x110>
    50c6:	48 c0       	rjmp	.+144    	; 0x5158 <UART_Init+0x1a0>
    50c8:	2b 81       	ldd	r18, Y+3	; 0x03
    50ca:	3c 81       	ldd	r19, Y+4	; 0x04
    50cc:	23 30       	cpi	r18, 0x03	; 3
    50ce:	31 05       	cpc	r19, r1
    50d0:	54 f4       	brge	.+20     	; 0x50e6 <UART_Init+0x12e>
    50d2:	8b 81       	ldd	r24, Y+3	; 0x03
    50d4:	9c 81       	ldd	r25, Y+4	; 0x04
    50d6:	00 97       	sbiw	r24, 0x00	; 0
    50d8:	99 f0       	breq	.+38     	; 0x5100 <UART_Init+0x148>
    50da:	2b 81       	ldd	r18, Y+3	; 0x03
    50dc:	3c 81       	ldd	r19, Y+4	; 0x04
    50de:	21 30       	cpi	r18, 0x01	; 1
    50e0:	31 05       	cpc	r19, r1
    50e2:	21 f1       	breq	.+72     	; 0x512c <UART_Init+0x174>
    50e4:	7a c0       	rjmp	.+244    	; 0x51da <UART_Init+0x222>
    50e6:	8b 81       	ldd	r24, Y+3	; 0x03
    50e8:	9c 81       	ldd	r25, Y+4	; 0x04
    50ea:	83 30       	cpi	r24, 0x03	; 3
    50ec:	91 05       	cpc	r25, r1
    50ee:	09 f4       	brne	.+2      	; 0x50f2 <UART_Init+0x13a>
    50f0:	49 c0       	rjmp	.+146    	; 0x5184 <UART_Init+0x1cc>
    50f2:	2b 81       	ldd	r18, Y+3	; 0x03
    50f4:	3c 81       	ldd	r19, Y+4	; 0x04
    50f6:	24 30       	cpi	r18, 0x04	; 4
    50f8:	31 05       	cpc	r19, r1
    50fa:	09 f4       	brne	.+2      	; 0x50fe <UART_Init+0x146>
    50fc:	59 c0       	rjmp	.+178    	; 0x51b0 <UART_Init+0x1f8>
    50fe:	6d c0       	rjmp	.+218    	; 0x51da <UART_Init+0x222>
    {
        case CHARACTER_SIZE_5_BIT:
            CLR_BIT(UCSRC,UCSRC_UCSZ0);
    5100:	a0 e4       	ldi	r26, 0x40	; 64
    5102:	b0 e0       	ldi	r27, 0x00	; 0
    5104:	e0 e4       	ldi	r30, 0x40	; 64
    5106:	f0 e0       	ldi	r31, 0x00	; 0
    5108:	80 81       	ld	r24, Z
    510a:	8d 7f       	andi	r24, 0xFD	; 253
    510c:	8c 93       	st	X, r24
            CLR_BIT(UCSRC,UCSRC_UCSZ1);
    510e:	a0 e4       	ldi	r26, 0x40	; 64
    5110:	b0 e0       	ldi	r27, 0x00	; 0
    5112:	e0 e4       	ldi	r30, 0x40	; 64
    5114:	f0 e0       	ldi	r31, 0x00	; 0
    5116:	80 81       	ld	r24, Z
    5118:	8b 7f       	andi	r24, 0xFB	; 251
    511a:	8c 93       	st	X, r24
            CLR_BIT(UCSRB,UCSRB_UCSZ2);
    511c:	aa e2       	ldi	r26, 0x2A	; 42
    511e:	b0 e0       	ldi	r27, 0x00	; 0
    5120:	ea e2       	ldi	r30, 0x2A	; 42
    5122:	f0 e0       	ldi	r31, 0x00	; 0
    5124:	80 81       	ld	r24, Z
    5126:	8b 7f       	andi	r24, 0xFB	; 251
    5128:	8c 93       	st	X, r24
    512a:	57 c0       	rjmp	.+174    	; 0x51da <UART_Init+0x222>
            break;
        case CHARACTER_SIZE_6_BIT:
            SET_BIT(UCSRC,UCSRC_UCSZ0);
    512c:	a0 e4       	ldi	r26, 0x40	; 64
    512e:	b0 e0       	ldi	r27, 0x00	; 0
    5130:	e0 e4       	ldi	r30, 0x40	; 64
    5132:	f0 e0       	ldi	r31, 0x00	; 0
    5134:	80 81       	ld	r24, Z
    5136:	82 60       	ori	r24, 0x02	; 2
    5138:	8c 93       	st	X, r24
            CLR_BIT(UCSRC,UCSRC_UCSZ1);
    513a:	a0 e4       	ldi	r26, 0x40	; 64
    513c:	b0 e0       	ldi	r27, 0x00	; 0
    513e:	e0 e4       	ldi	r30, 0x40	; 64
    5140:	f0 e0       	ldi	r31, 0x00	; 0
    5142:	80 81       	ld	r24, Z
    5144:	8b 7f       	andi	r24, 0xFB	; 251
    5146:	8c 93       	st	X, r24
            CLR_BIT(UCSRB,UCSRB_UCSZ2);
    5148:	aa e2       	ldi	r26, 0x2A	; 42
    514a:	b0 e0       	ldi	r27, 0x00	; 0
    514c:	ea e2       	ldi	r30, 0x2A	; 42
    514e:	f0 e0       	ldi	r31, 0x00	; 0
    5150:	80 81       	ld	r24, Z
    5152:	8b 7f       	andi	r24, 0xFB	; 251
    5154:	8c 93       	st	X, r24
    5156:	41 c0       	rjmp	.+130    	; 0x51da <UART_Init+0x222>
            break;
        case CHARACTER_SIZE_7_BIT:
            CLR_BIT(UCSRC,UCSRC_UCSZ0);
    5158:	a0 e4       	ldi	r26, 0x40	; 64
    515a:	b0 e0       	ldi	r27, 0x00	; 0
    515c:	e0 e4       	ldi	r30, 0x40	; 64
    515e:	f0 e0       	ldi	r31, 0x00	; 0
    5160:	80 81       	ld	r24, Z
    5162:	8d 7f       	andi	r24, 0xFD	; 253
    5164:	8c 93       	st	X, r24
            SET_BIT(UCSRC,UCSRC_UCSZ1);
    5166:	a0 e4       	ldi	r26, 0x40	; 64
    5168:	b0 e0       	ldi	r27, 0x00	; 0
    516a:	e0 e4       	ldi	r30, 0x40	; 64
    516c:	f0 e0       	ldi	r31, 0x00	; 0
    516e:	80 81       	ld	r24, Z
    5170:	84 60       	ori	r24, 0x04	; 4
    5172:	8c 93       	st	X, r24
            CLR_BIT(UCSRB,UCSRB_UCSZ2);
    5174:	aa e2       	ldi	r26, 0x2A	; 42
    5176:	b0 e0       	ldi	r27, 0x00	; 0
    5178:	ea e2       	ldi	r30, 0x2A	; 42
    517a:	f0 e0       	ldi	r31, 0x00	; 0
    517c:	80 81       	ld	r24, Z
    517e:	8b 7f       	andi	r24, 0xFB	; 251
    5180:	8c 93       	st	X, r24
    5182:	2b c0       	rjmp	.+86     	; 0x51da <UART_Init+0x222>
            break;
        case CHARACTER_SIZE_8_BIT:
            SET_BIT(UCSRC,UCSRC_UCSZ0);
    5184:	a0 e4       	ldi	r26, 0x40	; 64
    5186:	b0 e0       	ldi	r27, 0x00	; 0
    5188:	e0 e4       	ldi	r30, 0x40	; 64
    518a:	f0 e0       	ldi	r31, 0x00	; 0
    518c:	80 81       	ld	r24, Z
    518e:	82 60       	ori	r24, 0x02	; 2
    5190:	8c 93       	st	X, r24
            SET_BIT(UCSRC,UCSRC_UCSZ1);
    5192:	a0 e4       	ldi	r26, 0x40	; 64
    5194:	b0 e0       	ldi	r27, 0x00	; 0
    5196:	e0 e4       	ldi	r30, 0x40	; 64
    5198:	f0 e0       	ldi	r31, 0x00	; 0
    519a:	80 81       	ld	r24, Z
    519c:	84 60       	ori	r24, 0x04	; 4
    519e:	8c 93       	st	X, r24
            CLR_BIT(UCSRB,UCSRB_UCSZ2);
    51a0:	aa e2       	ldi	r26, 0x2A	; 42
    51a2:	b0 e0       	ldi	r27, 0x00	; 0
    51a4:	ea e2       	ldi	r30, 0x2A	; 42
    51a6:	f0 e0       	ldi	r31, 0x00	; 0
    51a8:	80 81       	ld	r24, Z
    51aa:	8b 7f       	andi	r24, 0xFB	; 251
    51ac:	8c 93       	st	X, r24
    51ae:	15 c0       	rjmp	.+42     	; 0x51da <UART_Init+0x222>
            break;
        case CHARACTER_SIZE_9_BIT:
            SET_BIT(UCSRC,UCSRC_UCSZ0);
    51b0:	a0 e4       	ldi	r26, 0x40	; 64
    51b2:	b0 e0       	ldi	r27, 0x00	; 0
    51b4:	e0 e4       	ldi	r30, 0x40	; 64
    51b6:	f0 e0       	ldi	r31, 0x00	; 0
    51b8:	80 81       	ld	r24, Z
    51ba:	82 60       	ori	r24, 0x02	; 2
    51bc:	8c 93       	st	X, r24
            SET_BIT(UCSRC,UCSRC_UCSZ1);
    51be:	a0 e4       	ldi	r26, 0x40	; 64
    51c0:	b0 e0       	ldi	r27, 0x00	; 0
    51c2:	e0 e4       	ldi	r30, 0x40	; 64
    51c4:	f0 e0       	ldi	r31, 0x00	; 0
    51c6:	80 81       	ld	r24, Z
    51c8:	84 60       	ori	r24, 0x04	; 4
    51ca:	8c 93       	st	X, r24
            SET_BIT(UCSRB,UCSRB_UCSZ2);
    51cc:	aa e2       	ldi	r26, 0x2A	; 42
    51ce:	b0 e0       	ldi	r27, 0x00	; 0
    51d0:	ea e2       	ldi	r30, 0x2A	; 42
    51d2:	f0 e0       	ldi	r31, 0x00	; 0
    51d4:	80 81       	ld	r24, Z
    51d6:	84 60       	ori	r24, 0x04	; 4
    51d8:	8c 93       	st	X, r24
            break;
        default:
            break;
    }

    UBRRL=103;
    51da:	e9 e2       	ldi	r30, 0x29	; 41
    51dc:	f0 e0       	ldi	r31, 0x00	; 0
    51de:	87 e6       	ldi	r24, 0x67	; 103
    51e0:	80 83       	st	Z, r24
    SET_BIT(UCSRB,UCSRB_RXEN);
    51e2:	aa e2       	ldi	r26, 0x2A	; 42
    51e4:	b0 e0       	ldi	r27, 0x00	; 0
    51e6:	ea e2       	ldi	r30, 0x2A	; 42
    51e8:	f0 e0       	ldi	r31, 0x00	; 0
    51ea:	80 81       	ld	r24, Z
    51ec:	80 61       	ori	r24, 0x10	; 16
    51ee:	8c 93       	st	X, r24
    SET_BIT(UCSRB,UCSRB_TXEN);
    51f0:	aa e2       	ldi	r26, 0x2A	; 42
    51f2:	b0 e0       	ldi	r27, 0x00	; 0
    51f4:	ea e2       	ldi	r30, 0x2A	; 42
    51f6:	f0 e0       	ldi	r31, 0x00	; 0
    51f8:	80 81       	ld	r24, Z
    51fa:	88 60       	ori	r24, 0x08	; 8
    51fc:	8c 93       	st	X, r24
}
    51fe:	28 96       	adiw	r28, 0x08	; 8
    5200:	0f b6       	in	r0, 0x3f	; 63
    5202:	f8 94       	cli
    5204:	de bf       	out	0x3e, r29	; 62
    5206:	0f be       	out	0x3f, r0	; 63
    5208:	cd bf       	out	0x3d, r28	; 61
    520a:	cf 91       	pop	r28
    520c:	df 91       	pop	r29
    520e:	08 95       	ret

00005210 <UART_Send_Data>:

void UART_Send_Data (u8 data) {
    5210:	df 93       	push	r29
    5212:	cf 93       	push	r28
    5214:	0f 92       	push	r0
    5216:	cd b7       	in	r28, 0x3d	; 61
    5218:	de b7       	in	r29, 0x3e	; 62
    521a:	89 83       	std	Y+1, r24	; 0x01
    UDR=data;
    521c:	ec e2       	ldi	r30, 0x2C	; 44
    521e:	f0 e0       	ldi	r31, 0x00	; 0
    5220:	89 81       	ldd	r24, Y+1	; 0x01
    5222:	80 83       	st	Z, r24
    while (GET_BIT(UCSRA,UCSRA_TXC) == 0);
    5224:	eb e2       	ldi	r30, 0x2B	; 43
    5226:	f0 e0       	ldi	r31, 0x00	; 0
    5228:	80 81       	ld	r24, Z
    522a:	82 95       	swap	r24
    522c:	86 95       	lsr	r24
    522e:	86 95       	lsr	r24
    5230:	83 70       	andi	r24, 0x03	; 3
    5232:	88 2f       	mov	r24, r24
    5234:	90 e0       	ldi	r25, 0x00	; 0
    5236:	81 70       	andi	r24, 0x01	; 1
    5238:	90 70       	andi	r25, 0x00	; 0
    523a:	00 97       	sbiw	r24, 0x00	; 0
    523c:	99 f3       	breq	.-26     	; 0x5224 <UART_Send_Data+0x14>
}
    523e:	0f 90       	pop	r0
    5240:	cf 91       	pop	r28
    5242:	df 91       	pop	r29
    5244:	08 95       	ret

00005246 <UART_Recieve_Data>:

u8 UART_Recieve_Data (void) {
    5246:	df 93       	push	r29
    5248:	cf 93       	push	r28
    524a:	cd b7       	in	r28, 0x3d	; 61
    524c:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(UCSRA,UCSRA_RXC) == 0);
    524e:	eb e2       	ldi	r30, 0x2B	; 43
    5250:	f0 e0       	ldi	r31, 0x00	; 0
    5252:	80 81       	ld	r24, Z
    5254:	88 23       	and	r24, r24
    5256:	dc f7       	brge	.-10     	; 0x524e <UART_Recieve_Data+0x8>
    return UDR;
    5258:	ec e2       	ldi	r30, 0x2C	; 44
    525a:	f0 e0       	ldi	r31, 0x00	; 0
    525c:	80 81       	ld	r24, Z
}
    525e:	cf 91       	pop	r28
    5260:	df 91       	pop	r29
    5262:	08 95       	ret

00005264 <WDT_Enable>:
#include "std_types.h"
#include "macros.h"
#include "Registers.h"
#include "WDT.h"

void WDT_Enable (void) {
    5264:	df 93       	push	r29
    5266:	cf 93       	push	r28
    5268:	cd b7       	in	r28, 0x3d	; 61
    526a:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(WDTCR,3);
    526c:	a1 e4       	ldi	r26, 0x41	; 65
    526e:	b0 e0       	ldi	r27, 0x00	; 0
    5270:	e1 e4       	ldi	r30, 0x41	; 65
    5272:	f0 e0       	ldi	r31, 0x00	; 0
    5274:	80 81       	ld	r24, Z
    5276:	88 60       	ori	r24, 0x08	; 8
    5278:	8c 93       	st	X, r24
}
    527a:	cf 91       	pop	r28
    527c:	df 91       	pop	r29
    527e:	08 95       	ret

00005280 <WDT_Disable>:
void WDT_Disable (void) {
    5280:	df 93       	push	r29
    5282:	cf 93       	push	r28
    5284:	cd b7       	in	r28, 0x3d	; 61
    5286:	de b7       	in	r29, 0x3e	; 62
    WDTCR=0b00011000;
    5288:	e1 e4       	ldi	r30, 0x41	; 65
    528a:	f0 e0       	ldi	r31, 0x00	; 0
    528c:	88 e1       	ldi	r24, 0x18	; 24
    528e:	80 83       	st	Z, r24
    //WDTCR=0;
}
    5290:	cf 91       	pop	r28
    5292:	df 91       	pop	r29
    5294:	08 95       	ret

00005296 <WDT_SleepTime>:
void WDT_SleepTime (void) {
    5296:	df 93       	push	r29
    5298:	cf 93       	push	r28
    529a:	cd b7       	in	r28, 0x3d	; 61
    529c:	de b7       	in	r29, 0x3e	; 62
    #elif (TIME_OUT == 1000)
    CLR_BIT(WDTCR,0);
    SET_BIT(WDTCR,1);
    SET_BIT(WDTCR,2);
    #elif (TIME_OUT == 2100)
    SET_BIT(WDTCR,0);
    529e:	a1 e4       	ldi	r26, 0x41	; 65
    52a0:	b0 e0       	ldi	r27, 0x00	; 0
    52a2:	e1 e4       	ldi	r30, 0x41	; 65
    52a4:	f0 e0       	ldi	r31, 0x00	; 0
    52a6:	80 81       	ld	r24, Z
    52a8:	81 60       	ori	r24, 0x01	; 1
    52aa:	8c 93       	st	X, r24
    SET_BIT(WDTCR,1);
    52ac:	a1 e4       	ldi	r26, 0x41	; 65
    52ae:	b0 e0       	ldi	r27, 0x00	; 0
    52b0:	e1 e4       	ldi	r30, 0x41	; 65
    52b2:	f0 e0       	ldi	r31, 0x00	; 0
    52b4:	80 81       	ld	r24, Z
    52b6:	82 60       	ori	r24, 0x02	; 2
    52b8:	8c 93       	st	X, r24
    SET_BIT(WDTCR,2);
    52ba:	a1 e4       	ldi	r26, 0x41	; 65
    52bc:	b0 e0       	ldi	r27, 0x00	; 0
    52be:	e1 e4       	ldi	r30, 0x41	; 65
    52c0:	f0 e0       	ldi	r31, 0x00	; 0
    52c2:	80 81       	ld	r24, Z
    52c4:	84 60       	ori	r24, 0x04	; 4
    52c6:	8c 93       	st	X, r24
    #endif
}
    52c8:	cf 91       	pop	r28
    52ca:	df 91       	pop	r29
    52cc:	08 95       	ret

000052ce <TimerHandler>:
u8 i=0,k=0,m=0,n=0,p=0,q=0;

void Timer_Clock ();
void Recieve_UART_data();

void TimerHandler(void) {
    52ce:	df 93       	push	r29
    52d0:	cf 93       	push	r28
    52d2:	cd b7       	in	r28, 0x3d	; 61
    52d4:	de b7       	in	r29, 0x3e	; 62
counter++;
    52d6:	80 91 6c 01 	lds	r24, 0x016C
    52da:	90 91 6d 01 	lds	r25, 0x016D
    52de:	01 96       	adiw	r24, 0x01	; 1
    52e0:	90 93 6d 01 	sts	0x016D, r25
    52e4:	80 93 6c 01 	sts	0x016C, r24
}
    52e8:	cf 91       	pop	r28
    52ea:	df 91       	pop	r29
    52ec:	08 95       	ret

000052ee <Adc_Handler>:

u16 result = 0;
void Adc_Handler (u16 res) {
    52ee:	df 93       	push	r29
    52f0:	cf 93       	push	r28
    52f2:	00 d0       	rcall	.+0      	; 0x52f4 <Adc_Handler+0x6>
    52f4:	cd b7       	in	r28, 0x3d	; 61
    52f6:	de b7       	in	r29, 0x3e	; 62
    52f8:	9a 83       	std	Y+2, r25	; 0x02
    52fa:	89 83       	std	Y+1, r24	; 0x01
	result = res;
    52fc:	89 81       	ldd	r24, Y+1	; 0x01
    52fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5300:	90 93 75 01 	sts	0x0175, r25
    5304:	80 93 74 01 	sts	0x0174, r24
}
    5308:	0f 90       	pop	r0
    530a:	0f 90       	pop	r0
    530c:	cf 91       	pop	r28
    530e:	df 91       	pop	r29
    5310:	08 95       	ret

00005312 <INT0_Handler>:
int* arr;
void INT0_Handler (void) {
    5312:	df 93       	push	r29
    5314:	cf 93       	push	r28
    5316:	cd b7       	in	r28, 0x3d	; 61
    5318:	de b7       	in	r29, 0x3e	; 62
	Recieve_UART_data();
    531a:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <Recieve_UART_data>
}
    531e:	cf 91       	pop	r28
    5320:	df 91       	pop	r29
    5322:	08 95       	ret

00005324 <main>:


int main (void) {
    5324:	df 93       	push	r29
    5326:	cf 93       	push	r28
    5328:	cd b7       	in	r28, 0x3d	; 61
    532a:	de b7       	in	r29, 0x3e	; 62
    532c:	64 97       	sbiw	r28, 0x14	; 20
    532e:	0f b6       	in	r0, 0x3f	; 63
    5330:	f8 94       	cli
    5332:	de bf       	out	0x3e, r29	; 62
    5334:	0f be       	out	0x3f, r0	; 63
    5336:	cd bf       	out	0x3d, r28	; 61
    DIO_SetPinMode(DIO_PORTA,DIO_PIN1,DIO_OUTPUT);
    5338:	80 e0       	ldi	r24, 0x00	; 0
    533a:	61 e0       	ldi	r22, 0x01	; 1
    533c:	42 e0       	ldi	r20, 0x02	; 2
    533e:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTA,DIO_PIN2,DIO_OUTPUT);
    5342:	80 e0       	ldi	r24, 0x00	; 0
    5344:	62 e0       	ldi	r22, 0x02	; 2
    5346:	42 e0       	ldi	r20, 0x02	; 2
    5348:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTA,DIO_PIN3,DIO_OUTPUT);
    534c:	80 e0       	ldi	r24, 0x00	; 0
    534e:	63 e0       	ldi	r22, 0x03	; 3
    5350:	42 e0       	ldi	r20, 0x02	; 2
    5352:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTA,DIO_PIN4,DIO_OUTPUT);
    5356:	80 e0       	ldi	r24, 0x00	; 0
    5358:	64 e0       	ldi	r22, 0x04	; 4
    535a:	42 e0       	ldi	r20, 0x02	; 2
    535c:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTA,DIO_PIN5,DIO_OUTPUT);
    5360:	80 e0       	ldi	r24, 0x00	; 0
    5362:	65 e0       	ldi	r22, 0x05	; 5
    5364:	42 e0       	ldi	r20, 0x02	; 2
    5366:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTA,DIO_PIN6,DIO_OUTPUT);
    536a:	80 e0       	ldi	r24, 0x00	; 0
    536c:	66 e0       	ldi	r22, 0x06	; 6
    536e:	42 e0       	ldi	r20, 0x02	; 2
    5370:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTA, DIO_PIN0,DIO_INPUT_FLOATING);
    5374:	80 e0       	ldi	r24, 0x00	; 0
    5376:	60 e0       	ldi	r22, 0x00	; 0
    5378:	40 e0       	ldi	r20, 0x00	; 0
    537a:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTD,DIO_PIN7,DIO_OUTPUT);
    537e:	83 e0       	ldi	r24, 0x03	; 3
    5380:	67 e0       	ldi	r22, 0x07	; 7
    5382:	42 e0       	ldi	r20, 0x02	; 2
    5384:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTD,DIO_PIN0,DIO_INPUT_FLOATING);
    5388:	83 e0       	ldi	r24, 0x03	; 3
    538a:	60 e0       	ldi	r22, 0x00	; 0
    538c:	40 e0       	ldi	r20, 0x00	; 0
    538e:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTD,DIO_PIN1,DIO_OUTPUT);
    5392:	83 e0       	ldi	r24, 0x03	; 3
    5394:	61 e0       	ldi	r22, 0x01	; 1
    5396:	42 e0       	ldi	r20, 0x02	; 2
    5398:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_SetPinMode>
    Adc_Init();
    539c:	0e 94 4a 07 	call	0xe94	; 0xe94 <Adc_Init>
    SSD_Init();
    53a0:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <SSD_Init>
    UART_ConfigType config1 = {ENABLE_EVEN_PARITY,ONE_STOP_BIT,CHARACTER_SIZE_8_BIT};
    53a4:	ce 01       	movw	r24, r28
    53a6:	05 96       	adiw	r24, 0x05	; 5
    53a8:	99 8b       	std	Y+17, r25	; 0x11
    53aa:	88 8b       	std	Y+16, r24	; 0x10
    53ac:	e8 e6       	ldi	r30, 0x68	; 104
    53ae:	f1 e0       	ldi	r31, 0x01	; 1
    53b0:	fb 8b       	std	Y+19, r31	; 0x13
    53b2:	ea 8b       	std	Y+18, r30	; 0x12
    53b4:	f3 e0       	ldi	r31, 0x03	; 3
    53b6:	fc 8b       	std	Y+20, r31	; 0x14
    53b8:	ea 89       	ldd	r30, Y+18	; 0x12
    53ba:	fb 89       	ldd	r31, Y+19	; 0x13
    53bc:	00 80       	ld	r0, Z
    53be:	8a 89       	ldd	r24, Y+18	; 0x12
    53c0:	9b 89       	ldd	r25, Y+19	; 0x13
    53c2:	01 96       	adiw	r24, 0x01	; 1
    53c4:	9b 8b       	std	Y+19, r25	; 0x13
    53c6:	8a 8b       	std	Y+18, r24	; 0x12
    53c8:	e8 89       	ldd	r30, Y+16	; 0x10
    53ca:	f9 89       	ldd	r31, Y+17	; 0x11
    53cc:	00 82       	st	Z, r0
    53ce:	88 89       	ldd	r24, Y+16	; 0x10
    53d0:	99 89       	ldd	r25, Y+17	; 0x11
    53d2:	01 96       	adiw	r24, 0x01	; 1
    53d4:	99 8b       	std	Y+17, r25	; 0x11
    53d6:	88 8b       	std	Y+16, r24	; 0x10
    53d8:	9c 89       	ldd	r25, Y+20	; 0x14
    53da:	91 50       	subi	r25, 0x01	; 1
    53dc:	9c 8b       	std	Y+20, r25	; 0x14
    53de:	ec 89       	ldd	r30, Y+20	; 0x14
    53e0:	ee 23       	and	r30, r30
    53e2:	51 f7       	brne	.-44     	; 0x53b8 <main+0x94>
	UART_Init(&config1);
    53e4:	ce 01       	movw	r24, r28
    53e6:	05 96       	adiw	r24, 0x05	; 5
    53e8:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <UART_Init>
    Gpt_ConfigType config = {GPT_CHANNEL_TIMER0, GPT_MODE_CTC, GPT_OUTPUT_NORMAL, GPT_PRESCALER_1024};
    53ec:	18 86       	std	Y+8, r1	; 0x08
    53ee:	81 e0       	ldi	r24, 0x01	; 1
    53f0:	89 87       	std	Y+9, r24	; 0x09
    53f2:	1a 86       	std	Y+10, r1	; 0x0a
    53f4:	87 e0       	ldi	r24, 0x07	; 7
    53f6:	8b 87       	std	Y+11, r24	; 0x0b
    Gpt_Init(&config);
    53f8:	ce 01       	movw	r24, r28
    53fa:	08 96       	adiw	r24, 0x08	; 8
    53fc:	0e 94 15 10 	call	0x202a	; 0x202a <Gpt_Init>
    Gpt_StartTimer(GPT_CHANNEL_TIMER0,250);
    5400:	80 e0       	ldi	r24, 0x00	; 0
    5402:	6a ef       	ldi	r22, 0xFA	; 250
    5404:	70 e0       	ldi	r23, 0x00	; 0
    5406:	0e 94 6f 16 	call	0x2cde	; 0x2cde <Gpt_StartTimer>
//    ExtInterrupt_Init();
//    ExtInterrupt_SetINT0Callback(INT0_Handler);
    Spt_ConfigType config2 = {SPT_CHANNEL_TIMER2, SPT_MODE_FAST_PWM, SPT_OUTPUT_CLEAR, SPT_PRESCALER_1024};
    540a:	83 e0       	ldi	r24, 0x03	; 3
    540c:	8c 87       	std	Y+12, r24	; 0x0c
    540e:	1d 86       	std	Y+13, r1	; 0x0d
    5410:	83 e0       	ldi	r24, 0x03	; 3
    5412:	8e 87       	std	Y+14, r24	; 0x0e
    5414:	87 e0       	ldi	r24, 0x07	; 7
    5416:	8f 87       	std	Y+15, r24	; 0x0f
    Spt_Init(&config2);
    5418:	ce 01       	movw	r24, r28
    541a:	0c 96       	adiw	r24, 0x0c	; 12
    541c:	0e 94 68 21 	call	0x42d0	; 0x42d0 <Spt_Init>
    u16 fast=0;
    5420:	1c 82       	std	Y+4, r1	; 0x04
    5422:	1b 82       	std	Y+3, r1	; 0x03
    GlobalInterrupt_Enable();
    5424:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <GlobalInterrupt_Enable>
    Gpt_EnableNotification(GPT_CHANNEL_TIMER0,GPT_MODE_CTC,TimerHandler);
    5428:	27 e6       	ldi	r18, 0x67	; 103
    542a:	39 e2       	ldi	r19, 0x29	; 41
    542c:	80 e0       	ldi	r24, 0x00	; 0
    542e:	61 e0       	ldi	r22, 0x01	; 1
    5430:	a9 01       	movw	r20, r18
    5432:	0e 94 d6 17 	call	0x2fac	; 0x2fac <Gpt_EnableNotification>
    Adc_SetCallback(Adc_Handler);
    5436:	87 e7       	ldi	r24, 0x77	; 119
    5438:	99 e2       	ldi	r25, 0x29	; 41
    543a:	0e 94 09 08 	call	0x1012	; 0x1012 <Adc_SetCallback>

    while (1) {
    if (counter == 31) {
    543e:	80 91 6c 01 	lds	r24, 0x016C
    5442:	90 91 6d 01 	lds	r25, 0x016D
    5446:	8f 31       	cpi	r24, 0x1F	; 31
    5448:	91 05       	cpc	r25, r1
    544a:	49 f4       	brne	.+18     	; 0x545e <main+0x13a>
    counter = 0;
    544c:	10 92 6d 01 	sts	0x016D, r1
    5450:	10 92 6c 01 	sts	0x016C, r1
    i++;
    5454:	80 91 6e 01 	lds	r24, 0x016E
    5458:	8f 5f       	subi	r24, 0xFF	; 255
    545a:	80 93 6e 01 	sts	0x016E, r24
    }
    Timer_Clock();
    545e:	0e 94 8e 2a 	call	0x551c	; 0x551c <Timer_Clock>
    Spt_StartTimer(SPT_CHANNEL_TIMER2,fast);
    5462:	2b 81       	ldd	r18, Y+3	; 0x03
    5464:	3c 81       	ldd	r19, Y+4	; 0x04
    5466:	83 e0       	ldi	r24, 0x03	; 3
    5468:	b9 01       	movw	r22, r18
    546a:	0e 94 80 27 	call	0x4f00	; 0x4f00 <Spt_StartTimer>
    u16 temperature = (result * (5000.0/1024))/10;
    546e:	80 91 74 01 	lds	r24, 0x0174
    5472:	90 91 75 01 	lds	r25, 0x0175
    5476:	cc 01       	movw	r24, r24
    5478:	a0 e0       	ldi	r26, 0x00	; 0
    547a:	b0 e0       	ldi	r27, 0x00	; 0
    547c:	bc 01       	movw	r22, r24
    547e:	cd 01       	movw	r24, r26
    5480:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    5484:	dc 01       	movw	r26, r24
    5486:	cb 01       	movw	r24, r22
    5488:	bc 01       	movw	r22, r24
    548a:	cd 01       	movw	r24, r26
    548c:	20 e0       	ldi	r18, 0x00	; 0
    548e:	30 e4       	ldi	r19, 0x40	; 64
    5490:	4c e9       	ldi	r20, 0x9C	; 156
    5492:	50 e4       	ldi	r21, 0x40	; 64
    5494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5498:	dc 01       	movw	r26, r24
    549a:	cb 01       	movw	r24, r22
    549c:	bc 01       	movw	r22, r24
    549e:	cd 01       	movw	r24, r26
    54a0:	20 e0       	ldi	r18, 0x00	; 0
    54a2:	30 e0       	ldi	r19, 0x00	; 0
    54a4:	40 e2       	ldi	r20, 0x20	; 32
    54a6:	51 e4       	ldi	r21, 0x41	; 65
    54a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    54ac:	dc 01       	movw	r26, r24
    54ae:	cb 01       	movw	r24, r22
    54b0:	bc 01       	movw	r22, r24
    54b2:	cd 01       	movw	r24, r26
    54b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54b8:	dc 01       	movw	r26, r24
    54ba:	cb 01       	movw	r24, r22
    54bc:	9a 83       	std	Y+2, r25	; 0x02
    54be:	89 83       	std	Y+1, r24	; 0x01
    if (temperature >= 40) {
    54c0:	89 81       	ldd	r24, Y+1	; 0x01
    54c2:	9a 81       	ldd	r25, Y+2	; 0x02
    54c4:	88 32       	cpi	r24, 0x28	; 40
    54c6:	91 05       	cpc	r25, r1
    54c8:	28 f0       	brcs	.+10     	; 0x54d4 <main+0x1b0>
        fast=250;
    54ca:	8a ef       	ldi	r24, 0xFA	; 250
    54cc:	90 e0       	ldi	r25, 0x00	; 0
    54ce:	9c 83       	std	Y+4, r25	; 0x04
    54d0:	8b 83       	std	Y+3, r24	; 0x03
    54d2:	20 c0       	rjmp	.+64     	; 0x5514 <main+0x1f0>
    }
    else if ((temperature >= 30) && (temperature < 40)) {
    54d4:	89 81       	ldd	r24, Y+1	; 0x01
    54d6:	9a 81       	ldd	r25, Y+2	; 0x02
    54d8:	8e 31       	cpi	r24, 0x1E	; 30
    54da:	91 05       	cpc	r25, r1
    54dc:	50 f0       	brcs	.+20     	; 0x54f2 <main+0x1ce>
    54de:	89 81       	ldd	r24, Y+1	; 0x01
    54e0:	9a 81       	ldd	r25, Y+2	; 0x02
    54e2:	88 32       	cpi	r24, 0x28	; 40
    54e4:	91 05       	cpc	r25, r1
    54e6:	28 f4       	brcc	.+10     	; 0x54f2 <main+0x1ce>
       fast =160;
    54e8:	80 ea       	ldi	r24, 0xA0	; 160
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	9c 83       	std	Y+4, r25	; 0x04
    54ee:	8b 83       	std	Y+3, r24	; 0x03
    54f0:	11 c0       	rjmp	.+34     	; 0x5514 <main+0x1f0>
    }
    else if ((temperature >= 20) && (temperature < 30)) {
    54f2:	89 81       	ldd	r24, Y+1	; 0x01
    54f4:	9a 81       	ldd	r25, Y+2	; 0x02
    54f6:	84 31       	cpi	r24, 0x14	; 20
    54f8:	91 05       	cpc	r25, r1
    54fa:	50 f0       	brcs	.+20     	; 0x5510 <main+0x1ec>
    54fc:	89 81       	ldd	r24, Y+1	; 0x01
    54fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5500:	8e 31       	cpi	r24, 0x1E	; 30
    5502:	91 05       	cpc	r25, r1
    5504:	28 f4       	brcc	.+10     	; 0x5510 <main+0x1ec>
        fast =90;
    5506:	8a e5       	ldi	r24, 0x5A	; 90
    5508:	90 e0       	ldi	r25, 0x00	; 0
    550a:	9c 83       	std	Y+4, r25	; 0x04
    550c:	8b 83       	std	Y+3, r24	; 0x03
    550e:	02 c0       	rjmp	.+4      	; 0x5514 <main+0x1f0>
    }
    else {
        fast =0;
    5510:	1c 82       	std	Y+4, r1	; 0x04
    5512:	1b 82       	std	Y+3, r1	; 0x03
    }

    Adc_StartConversion(ADC_SINGLE_ADC0);
    5514:	80 e0       	ldi	r24, 0x00	; 0
    5516:	0e 94 89 07 	call	0xf12	; 0xf12 <Adc_StartConversion>
    551a:	91 cf       	rjmp	.-222    	; 0x543e <main+0x11a>

0000551c <Timer_Clock>:
    }
}

 void Timer_Clock () {
    551c:	0f 93       	push	r16
    551e:	1f 93       	push	r17
    5520:	df 93       	push	r29
    5522:	cf 93       	push	r28
    5524:	cd b7       	in	r28, 0x3d	; 61
    5526:	de b7       	in	r29, 0x3e	; 62
    5528:	c4 55       	subi	r28, 0x54	; 84
    552a:	d0 40       	sbci	r29, 0x00	; 0
    552c:	0f b6       	in	r0, 0x3f	; 63
    552e:	f8 94       	cli
    5530:	de bf       	out	0x3e, r29	; 62
    5532:	0f be       	out	0x3f, r0	; 63
    5534:	cd bf       	out	0x3d, r28	; 61
    if (i == 10) {
    5536:	80 91 6e 01 	lds	r24, 0x016E
    553a:	8a 30       	cpi	r24, 0x0A	; 10
    553c:	39 f4       	brne	.+14     	; 0x554c <Timer_Clock+0x30>
        k++;
    553e:	80 91 6f 01 	lds	r24, 0x016F
    5542:	8f 5f       	subi	r24, 0xFF	; 255
    5544:	80 93 6f 01 	sts	0x016F, r24
        i=0;
    5548:	10 92 6e 01 	sts	0x016E, r1
    }
    if ((k == 6)) {
    554c:	80 91 6f 01 	lds	r24, 0x016F
    5550:	86 30       	cpi	r24, 0x06	; 6
    5552:	39 f4       	brne	.+14     	; 0x5562 <Timer_Clock+0x46>
        m++;
    5554:	80 91 70 01 	lds	r24, 0x0170
    5558:	8f 5f       	subi	r24, 0xFF	; 255
    555a:	80 93 70 01 	sts	0x0170, r24
        k=0;
    555e:	10 92 6f 01 	sts	0x016F, r1
    }
    if ((m == 10)) {
    5562:	80 91 70 01 	lds	r24, 0x0170
    5566:	8a 30       	cpi	r24, 0x0A	; 10
    5568:	39 f4       	brne	.+14     	; 0x5578 <Timer_Clock+0x5c>
        n++;
    556a:	80 91 71 01 	lds	r24, 0x0171
    556e:	8f 5f       	subi	r24, 0xFF	; 255
    5570:	80 93 71 01 	sts	0x0171, r24
        m=0;
    5574:	10 92 70 01 	sts	0x0170, r1
    }
    if ((n == 6)) {
    5578:	80 91 71 01 	lds	r24, 0x0171
    557c:	86 30       	cpi	r24, 0x06	; 6
    557e:	39 f4       	brne	.+14     	; 0x558e <Timer_Clock+0x72>
        p++;
    5580:	80 91 72 01 	lds	r24, 0x0172
    5584:	8f 5f       	subi	r24, 0xFF	; 255
    5586:	80 93 72 01 	sts	0x0172, r24
        n=0;
    558a:	10 92 71 01 	sts	0x0171, r1
    }
    if ((p == 10)) {
    558e:	80 91 72 01 	lds	r24, 0x0172
    5592:	8a 30       	cpi	r24, 0x0A	; 10
    5594:	39 f4       	brne	.+14     	; 0x55a4 <Timer_Clock+0x88>
        q++;
    5596:	80 91 73 01 	lds	r24, 0x0173
    559a:	8f 5f       	subi	r24, 0xFF	; 255
    559c:	80 93 73 01 	sts	0x0173, r24
        p=0;
    55a0:	10 92 72 01 	sts	0x0172, r1
    }
    if ((q == 2) && (p == 4)) {
    55a4:	80 91 73 01 	lds	r24, 0x0173
    55a8:	82 30       	cpi	r24, 0x02	; 2
    55aa:	81 f4       	brne	.+32     	; 0x55cc <Timer_Clock+0xb0>
    55ac:	80 91 72 01 	lds	r24, 0x0172
    55b0:	84 30       	cpi	r24, 0x04	; 4
    55b2:	61 f4       	brne	.+24     	; 0x55cc <Timer_Clock+0xb0>
        i=0;
    55b4:	10 92 6e 01 	sts	0x016E, r1
        k=0;
    55b8:	10 92 6f 01 	sts	0x016F, r1
        m=0;
    55bc:	10 92 70 01 	sts	0x0170, r1
        n=0;
    55c0:	10 92 71 01 	sts	0x0171, r1
        p=0;
    55c4:	10 92 72 01 	sts	0x0172, r1
        q=0;
    55c8:	10 92 73 01 	sts	0x0173, r1
    }
    DIO_SetPinLevel(DIO_PORTA,DIO_PIN6,DIO_HIGH);
    55cc:	80 e0       	ldi	r24, 0x00	; 0
    55ce:	66 e0       	ldi	r22, 0x06	; 6
    55d0:	41 e0       	ldi	r20, 0x01	; 1
    55d2:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    SSD_Write(i);
    55d6:	80 91 6e 01 	lds	r24, 0x016E
    55da:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <SSD_Write>
    55de:	fe 01       	movw	r30, r28
    55e0:	ef 5a       	subi	r30, 0xAF	; 175
    55e2:	ff 4f       	sbci	r31, 0xFF	; 255
    55e4:	80 e0       	ldi	r24, 0x00	; 0
    55e6:	90 e0       	ldi	r25, 0x00	; 0
    55e8:	a0 e8       	ldi	r26, 0x80	; 128
    55ea:	bf e3       	ldi	r27, 0x3F	; 63
    55ec:	80 83       	st	Z, r24
    55ee:	91 83       	std	Z+1, r25	; 0x01
    55f0:	a2 83       	std	Z+2, r26	; 0x02
    55f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55f4:	8e 01       	movw	r16, r28
    55f6:	03 5b       	subi	r16, 0xB3	; 179
    55f8:	1f 4f       	sbci	r17, 0xFF	; 255
    55fa:	fe 01       	movw	r30, r28
    55fc:	ef 5a       	subi	r30, 0xAF	; 175
    55fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5600:	60 81       	ld	r22, Z
    5602:	71 81       	ldd	r23, Z+1	; 0x01
    5604:	82 81       	ldd	r24, Z+2	; 0x02
    5606:	93 81       	ldd	r25, Z+3	; 0x03
    5608:	20 e0       	ldi	r18, 0x00	; 0
    560a:	30 e0       	ldi	r19, 0x00	; 0
    560c:	4a ef       	ldi	r20, 0xFA	; 250
    560e:	54 e4       	ldi	r21, 0x44	; 68
    5610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5614:	dc 01       	movw	r26, r24
    5616:	cb 01       	movw	r24, r22
    5618:	f8 01       	movw	r30, r16
    561a:	80 83       	st	Z, r24
    561c:	91 83       	std	Z+1, r25	; 0x01
    561e:	a2 83       	std	Z+2, r26	; 0x02
    5620:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5622:	fe 01       	movw	r30, r28
    5624:	e3 5b       	subi	r30, 0xB3	; 179
    5626:	ff 4f       	sbci	r31, 0xFF	; 255
    5628:	60 81       	ld	r22, Z
    562a:	71 81       	ldd	r23, Z+1	; 0x01
    562c:	82 81       	ldd	r24, Z+2	; 0x02
    562e:	93 81       	ldd	r25, Z+3	; 0x03
    5630:	20 e0       	ldi	r18, 0x00	; 0
    5632:	30 e0       	ldi	r19, 0x00	; 0
    5634:	40 e8       	ldi	r20, 0x80	; 128
    5636:	5f e3       	ldi	r21, 0x3F	; 63
    5638:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    563c:	88 23       	and	r24, r24
    563e:	44 f4       	brge	.+16     	; 0x5650 <Timer_Clock+0x134>
		__ticks = 1;
    5640:	fe 01       	movw	r30, r28
    5642:	e5 5b       	subi	r30, 0xB5	; 181
    5644:	ff 4f       	sbci	r31, 0xFF	; 255
    5646:	81 e0       	ldi	r24, 0x01	; 1
    5648:	90 e0       	ldi	r25, 0x00	; 0
    564a:	91 83       	std	Z+1, r25	; 0x01
    564c:	80 83       	st	Z, r24
    564e:	64 c0       	rjmp	.+200    	; 0x5718 <Timer_Clock+0x1fc>
	else if (__tmp > 65535)
    5650:	fe 01       	movw	r30, r28
    5652:	e3 5b       	subi	r30, 0xB3	; 179
    5654:	ff 4f       	sbci	r31, 0xFF	; 255
    5656:	60 81       	ld	r22, Z
    5658:	71 81       	ldd	r23, Z+1	; 0x01
    565a:	82 81       	ldd	r24, Z+2	; 0x02
    565c:	93 81       	ldd	r25, Z+3	; 0x03
    565e:	20 e0       	ldi	r18, 0x00	; 0
    5660:	3f ef       	ldi	r19, 0xFF	; 255
    5662:	4f e7       	ldi	r20, 0x7F	; 127
    5664:	57 e4       	ldi	r21, 0x47	; 71
    5666:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    566a:	18 16       	cp	r1, r24
    566c:	0c f0       	brlt	.+2      	; 0x5670 <Timer_Clock+0x154>
    566e:	43 c0       	rjmp	.+134    	; 0x56f6 <Timer_Clock+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5670:	fe 01       	movw	r30, r28
    5672:	ef 5a       	subi	r30, 0xAF	; 175
    5674:	ff 4f       	sbci	r31, 0xFF	; 255
    5676:	60 81       	ld	r22, Z
    5678:	71 81       	ldd	r23, Z+1	; 0x01
    567a:	82 81       	ldd	r24, Z+2	; 0x02
    567c:	93 81       	ldd	r25, Z+3	; 0x03
    567e:	20 e0       	ldi	r18, 0x00	; 0
    5680:	30 e0       	ldi	r19, 0x00	; 0
    5682:	40 e2       	ldi	r20, 0x20	; 32
    5684:	51 e4       	ldi	r21, 0x41	; 65
    5686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    568a:	dc 01       	movw	r26, r24
    568c:	cb 01       	movw	r24, r22
    568e:	8e 01       	movw	r16, r28
    5690:	05 5b       	subi	r16, 0xB5	; 181
    5692:	1f 4f       	sbci	r17, 0xFF	; 255
    5694:	bc 01       	movw	r22, r24
    5696:	cd 01       	movw	r24, r26
    5698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    569c:	dc 01       	movw	r26, r24
    569e:	cb 01       	movw	r24, r22
    56a0:	f8 01       	movw	r30, r16
    56a2:	91 83       	std	Z+1, r25	; 0x01
    56a4:	80 83       	st	Z, r24
    56a6:	1f c0       	rjmp	.+62     	; 0x56e6 <Timer_Clock+0x1ca>
    56a8:	fe 01       	movw	r30, r28
    56aa:	e7 5b       	subi	r30, 0xB7	; 183
    56ac:	ff 4f       	sbci	r31, 0xFF	; 255
    56ae:	88 ec       	ldi	r24, 0xC8	; 200
    56b0:	90 e0       	ldi	r25, 0x00	; 0
    56b2:	91 83       	std	Z+1, r25	; 0x01
    56b4:	80 83       	st	Z, r24
    56b6:	fe 01       	movw	r30, r28
    56b8:	e7 5b       	subi	r30, 0xB7	; 183
    56ba:	ff 4f       	sbci	r31, 0xFF	; 255
    56bc:	80 81       	ld	r24, Z
    56be:	91 81       	ldd	r25, Z+1	; 0x01
    56c0:	01 97       	sbiw	r24, 0x01	; 1
    56c2:	f1 f7       	brne	.-4      	; 0x56c0 <Timer_Clock+0x1a4>
    56c4:	fe 01       	movw	r30, r28
    56c6:	e7 5b       	subi	r30, 0xB7	; 183
    56c8:	ff 4f       	sbci	r31, 0xFF	; 255
    56ca:	91 83       	std	Z+1, r25	; 0x01
    56cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56ce:	de 01       	movw	r26, r28
    56d0:	a5 5b       	subi	r26, 0xB5	; 181
    56d2:	bf 4f       	sbci	r27, 0xFF	; 255
    56d4:	fe 01       	movw	r30, r28
    56d6:	e5 5b       	subi	r30, 0xB5	; 181
    56d8:	ff 4f       	sbci	r31, 0xFF	; 255
    56da:	80 81       	ld	r24, Z
    56dc:	91 81       	ldd	r25, Z+1	; 0x01
    56de:	01 97       	sbiw	r24, 0x01	; 1
    56e0:	11 96       	adiw	r26, 0x01	; 1
    56e2:	9c 93       	st	X, r25
    56e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56e6:	fe 01       	movw	r30, r28
    56e8:	e5 5b       	subi	r30, 0xB5	; 181
    56ea:	ff 4f       	sbci	r31, 0xFF	; 255
    56ec:	80 81       	ld	r24, Z
    56ee:	91 81       	ldd	r25, Z+1	; 0x01
    56f0:	00 97       	sbiw	r24, 0x00	; 0
    56f2:	d1 f6       	brne	.-76     	; 0x56a8 <Timer_Clock+0x18c>
    56f4:	27 c0       	rjmp	.+78     	; 0x5744 <Timer_Clock+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56f6:	8e 01       	movw	r16, r28
    56f8:	05 5b       	subi	r16, 0xB5	; 181
    56fa:	1f 4f       	sbci	r17, 0xFF	; 255
    56fc:	fe 01       	movw	r30, r28
    56fe:	e3 5b       	subi	r30, 0xB3	; 179
    5700:	ff 4f       	sbci	r31, 0xFF	; 255
    5702:	60 81       	ld	r22, Z
    5704:	71 81       	ldd	r23, Z+1	; 0x01
    5706:	82 81       	ldd	r24, Z+2	; 0x02
    5708:	93 81       	ldd	r25, Z+3	; 0x03
    570a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    570e:	dc 01       	movw	r26, r24
    5710:	cb 01       	movw	r24, r22
    5712:	f8 01       	movw	r30, r16
    5714:	91 83       	std	Z+1, r25	; 0x01
    5716:	80 83       	st	Z, r24
    5718:	de 01       	movw	r26, r28
    571a:	a9 5b       	subi	r26, 0xB9	; 185
    571c:	bf 4f       	sbci	r27, 0xFF	; 255
    571e:	fe 01       	movw	r30, r28
    5720:	e5 5b       	subi	r30, 0xB5	; 181
    5722:	ff 4f       	sbci	r31, 0xFF	; 255
    5724:	80 81       	ld	r24, Z
    5726:	91 81       	ldd	r25, Z+1	; 0x01
    5728:	8d 93       	st	X+, r24
    572a:	9c 93       	st	X, r25
    572c:	fe 01       	movw	r30, r28
    572e:	e9 5b       	subi	r30, 0xB9	; 185
    5730:	ff 4f       	sbci	r31, 0xFF	; 255
    5732:	80 81       	ld	r24, Z
    5734:	91 81       	ldd	r25, Z+1	; 0x01
    5736:	01 97       	sbiw	r24, 0x01	; 1
    5738:	f1 f7       	brne	.-4      	; 0x5736 <Timer_Clock+0x21a>
    573a:	fe 01       	movw	r30, r28
    573c:	e9 5b       	subi	r30, 0xB9	; 185
    573e:	ff 4f       	sbci	r31, 0xFF	; 255
    5740:	91 83       	std	Z+1, r25	; 0x01
    5742:	80 83       	st	Z, r24
    _delay_ms(1);
    DIO_SetPinLevel(DIO_PORTA,DIO_PIN6,DIO_LOW);
    5744:	80 e0       	ldi	r24, 0x00	; 0
    5746:	66 e0       	ldi	r22, 0x06	; 6
    5748:	40 e0       	ldi	r20, 0x00	; 0
    574a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(DIO_PORTA,DIO_PIN5,DIO_HIGH);
    574e:	80 e0       	ldi	r24, 0x00	; 0
    5750:	65 e0       	ldi	r22, 0x05	; 5
    5752:	41 e0       	ldi	r20, 0x01	; 1
    5754:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    SSD_Write(k);
    5758:	80 91 6f 01 	lds	r24, 0x016F
    575c:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <SSD_Write>
    5760:	fe 01       	movw	r30, r28
    5762:	ed 5b       	subi	r30, 0xBD	; 189
    5764:	ff 4f       	sbci	r31, 0xFF	; 255
    5766:	80 e0       	ldi	r24, 0x00	; 0
    5768:	90 e0       	ldi	r25, 0x00	; 0
    576a:	a0 e8       	ldi	r26, 0x80	; 128
    576c:	bf e3       	ldi	r27, 0x3F	; 63
    576e:	80 83       	st	Z, r24
    5770:	91 83       	std	Z+1, r25	; 0x01
    5772:	a2 83       	std	Z+2, r26	; 0x02
    5774:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5776:	8e 01       	movw	r16, r28
    5778:	01 5c       	subi	r16, 0xC1	; 193
    577a:	1f 4f       	sbci	r17, 0xFF	; 255
    577c:	fe 01       	movw	r30, r28
    577e:	ed 5b       	subi	r30, 0xBD	; 189
    5780:	ff 4f       	sbci	r31, 0xFF	; 255
    5782:	60 81       	ld	r22, Z
    5784:	71 81       	ldd	r23, Z+1	; 0x01
    5786:	82 81       	ldd	r24, Z+2	; 0x02
    5788:	93 81       	ldd	r25, Z+3	; 0x03
    578a:	20 e0       	ldi	r18, 0x00	; 0
    578c:	30 e0       	ldi	r19, 0x00	; 0
    578e:	4a ef       	ldi	r20, 0xFA	; 250
    5790:	54 e4       	ldi	r21, 0x44	; 68
    5792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5796:	dc 01       	movw	r26, r24
    5798:	cb 01       	movw	r24, r22
    579a:	f8 01       	movw	r30, r16
    579c:	80 83       	st	Z, r24
    579e:	91 83       	std	Z+1, r25	; 0x01
    57a0:	a2 83       	std	Z+2, r26	; 0x02
    57a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    57a4:	fe 01       	movw	r30, r28
    57a6:	ff 96       	adiw	r30, 0x3f	; 63
    57a8:	60 81       	ld	r22, Z
    57aa:	71 81       	ldd	r23, Z+1	; 0x01
    57ac:	82 81       	ldd	r24, Z+2	; 0x02
    57ae:	93 81       	ldd	r25, Z+3	; 0x03
    57b0:	20 e0       	ldi	r18, 0x00	; 0
    57b2:	30 e0       	ldi	r19, 0x00	; 0
    57b4:	40 e8       	ldi	r20, 0x80	; 128
    57b6:	5f e3       	ldi	r21, 0x3F	; 63
    57b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57bc:	88 23       	and	r24, r24
    57be:	2c f4       	brge	.+10     	; 0x57ca <Timer_Clock+0x2ae>
		__ticks = 1;
    57c0:	81 e0       	ldi	r24, 0x01	; 1
    57c2:	90 e0       	ldi	r25, 0x00	; 0
    57c4:	9e af       	std	Y+62, r25	; 0x3e
    57c6:	8d af       	std	Y+61, r24	; 0x3d
    57c8:	46 c0       	rjmp	.+140    	; 0x5856 <Timer_Clock+0x33a>
	else if (__tmp > 65535)
    57ca:	fe 01       	movw	r30, r28
    57cc:	ff 96       	adiw	r30, 0x3f	; 63
    57ce:	60 81       	ld	r22, Z
    57d0:	71 81       	ldd	r23, Z+1	; 0x01
    57d2:	82 81       	ldd	r24, Z+2	; 0x02
    57d4:	93 81       	ldd	r25, Z+3	; 0x03
    57d6:	20 e0       	ldi	r18, 0x00	; 0
    57d8:	3f ef       	ldi	r19, 0xFF	; 255
    57da:	4f e7       	ldi	r20, 0x7F	; 127
    57dc:	57 e4       	ldi	r21, 0x47	; 71
    57de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    57e2:	18 16       	cp	r1, r24
    57e4:	64 f5       	brge	.+88     	; 0x583e <Timer_Clock+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57e6:	fe 01       	movw	r30, r28
    57e8:	ed 5b       	subi	r30, 0xBD	; 189
    57ea:	ff 4f       	sbci	r31, 0xFF	; 255
    57ec:	60 81       	ld	r22, Z
    57ee:	71 81       	ldd	r23, Z+1	; 0x01
    57f0:	82 81       	ldd	r24, Z+2	; 0x02
    57f2:	93 81       	ldd	r25, Z+3	; 0x03
    57f4:	20 e0       	ldi	r18, 0x00	; 0
    57f6:	30 e0       	ldi	r19, 0x00	; 0
    57f8:	40 e2       	ldi	r20, 0x20	; 32
    57fa:	51 e4       	ldi	r21, 0x41	; 65
    57fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5800:	dc 01       	movw	r26, r24
    5802:	cb 01       	movw	r24, r22
    5804:	bc 01       	movw	r22, r24
    5806:	cd 01       	movw	r24, r26
    5808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    580c:	dc 01       	movw	r26, r24
    580e:	cb 01       	movw	r24, r22
    5810:	9e af       	std	Y+62, r25	; 0x3e
    5812:	8d af       	std	Y+61, r24	; 0x3d
    5814:	0f c0       	rjmp	.+30     	; 0x5834 <Timer_Clock+0x318>
    5816:	88 ec       	ldi	r24, 0xC8	; 200
    5818:	90 e0       	ldi	r25, 0x00	; 0
    581a:	9c af       	std	Y+60, r25	; 0x3c
    581c:	8b af       	std	Y+59, r24	; 0x3b
    581e:	8b ad       	ldd	r24, Y+59	; 0x3b
    5820:	9c ad       	ldd	r25, Y+60	; 0x3c
    5822:	01 97       	sbiw	r24, 0x01	; 1
    5824:	f1 f7       	brne	.-4      	; 0x5822 <Timer_Clock+0x306>
    5826:	9c af       	std	Y+60, r25	; 0x3c
    5828:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    582a:	8d ad       	ldd	r24, Y+61	; 0x3d
    582c:	9e ad       	ldd	r25, Y+62	; 0x3e
    582e:	01 97       	sbiw	r24, 0x01	; 1
    5830:	9e af       	std	Y+62, r25	; 0x3e
    5832:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5834:	8d ad       	ldd	r24, Y+61	; 0x3d
    5836:	9e ad       	ldd	r25, Y+62	; 0x3e
    5838:	00 97       	sbiw	r24, 0x00	; 0
    583a:	69 f7       	brne	.-38     	; 0x5816 <Timer_Clock+0x2fa>
    583c:	16 c0       	rjmp	.+44     	; 0x586a <Timer_Clock+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    583e:	fe 01       	movw	r30, r28
    5840:	ff 96       	adiw	r30, 0x3f	; 63
    5842:	60 81       	ld	r22, Z
    5844:	71 81       	ldd	r23, Z+1	; 0x01
    5846:	82 81       	ldd	r24, Z+2	; 0x02
    5848:	93 81       	ldd	r25, Z+3	; 0x03
    584a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    584e:	dc 01       	movw	r26, r24
    5850:	cb 01       	movw	r24, r22
    5852:	9e af       	std	Y+62, r25	; 0x3e
    5854:	8d af       	std	Y+61, r24	; 0x3d
    5856:	8d ad       	ldd	r24, Y+61	; 0x3d
    5858:	9e ad       	ldd	r25, Y+62	; 0x3e
    585a:	9a af       	std	Y+58, r25	; 0x3a
    585c:	89 af       	std	Y+57, r24	; 0x39
    585e:	89 ad       	ldd	r24, Y+57	; 0x39
    5860:	9a ad       	ldd	r25, Y+58	; 0x3a
    5862:	01 97       	sbiw	r24, 0x01	; 1
    5864:	f1 f7       	brne	.-4      	; 0x5862 <Timer_Clock+0x346>
    5866:	9a af       	std	Y+58, r25	; 0x3a
    5868:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(1);
    DIO_SetPinLevel(DIO_PORTA,DIO_PIN5,DIO_LOW);
    586a:	80 e0       	ldi	r24, 0x00	; 0
    586c:	65 e0       	ldi	r22, 0x05	; 5
    586e:	40 e0       	ldi	r20, 0x00	; 0
    5870:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(DIO_PORTA,DIO_PIN4,DIO_HIGH);
    5874:	80 e0       	ldi	r24, 0x00	; 0
    5876:	64 e0       	ldi	r22, 0x04	; 4
    5878:	41 e0       	ldi	r20, 0x01	; 1
    587a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    SSD_Write(m);
    587e:	80 91 70 01 	lds	r24, 0x0170
    5882:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <SSD_Write>
    5886:	80 e0       	ldi	r24, 0x00	; 0
    5888:	90 e0       	ldi	r25, 0x00	; 0
    588a:	a0 e8       	ldi	r26, 0x80	; 128
    588c:	bf e3       	ldi	r27, 0x3F	; 63
    588e:	8d ab       	std	Y+53, r24	; 0x35
    5890:	9e ab       	std	Y+54, r25	; 0x36
    5892:	af ab       	std	Y+55, r26	; 0x37
    5894:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5896:	6d a9       	ldd	r22, Y+53	; 0x35
    5898:	7e a9       	ldd	r23, Y+54	; 0x36
    589a:	8f a9       	ldd	r24, Y+55	; 0x37
    589c:	98 ad       	ldd	r25, Y+56	; 0x38
    589e:	20 e0       	ldi	r18, 0x00	; 0
    58a0:	30 e0       	ldi	r19, 0x00	; 0
    58a2:	4a ef       	ldi	r20, 0xFA	; 250
    58a4:	54 e4       	ldi	r21, 0x44	; 68
    58a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58aa:	dc 01       	movw	r26, r24
    58ac:	cb 01       	movw	r24, r22
    58ae:	89 ab       	std	Y+49, r24	; 0x31
    58b0:	9a ab       	std	Y+50, r25	; 0x32
    58b2:	ab ab       	std	Y+51, r26	; 0x33
    58b4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    58b6:	69 a9       	ldd	r22, Y+49	; 0x31
    58b8:	7a a9       	ldd	r23, Y+50	; 0x32
    58ba:	8b a9       	ldd	r24, Y+51	; 0x33
    58bc:	9c a9       	ldd	r25, Y+52	; 0x34
    58be:	20 e0       	ldi	r18, 0x00	; 0
    58c0:	30 e0       	ldi	r19, 0x00	; 0
    58c2:	40 e8       	ldi	r20, 0x80	; 128
    58c4:	5f e3       	ldi	r21, 0x3F	; 63
    58c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58ca:	88 23       	and	r24, r24
    58cc:	2c f4       	brge	.+10     	; 0x58d8 <Timer_Clock+0x3bc>
		__ticks = 1;
    58ce:	81 e0       	ldi	r24, 0x01	; 1
    58d0:	90 e0       	ldi	r25, 0x00	; 0
    58d2:	98 ab       	std	Y+48, r25	; 0x30
    58d4:	8f a7       	std	Y+47, r24	; 0x2f
    58d6:	3f c0       	rjmp	.+126    	; 0x5956 <Timer_Clock+0x43a>
	else if (__tmp > 65535)
    58d8:	69 a9       	ldd	r22, Y+49	; 0x31
    58da:	7a a9       	ldd	r23, Y+50	; 0x32
    58dc:	8b a9       	ldd	r24, Y+51	; 0x33
    58de:	9c a9       	ldd	r25, Y+52	; 0x34
    58e0:	20 e0       	ldi	r18, 0x00	; 0
    58e2:	3f ef       	ldi	r19, 0xFF	; 255
    58e4:	4f e7       	ldi	r20, 0x7F	; 127
    58e6:	57 e4       	ldi	r21, 0x47	; 71
    58e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58ec:	18 16       	cp	r1, r24
    58ee:	4c f5       	brge	.+82     	; 0x5942 <Timer_Clock+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58f0:	6d a9       	ldd	r22, Y+53	; 0x35
    58f2:	7e a9       	ldd	r23, Y+54	; 0x36
    58f4:	8f a9       	ldd	r24, Y+55	; 0x37
    58f6:	98 ad       	ldd	r25, Y+56	; 0x38
    58f8:	20 e0       	ldi	r18, 0x00	; 0
    58fa:	30 e0       	ldi	r19, 0x00	; 0
    58fc:	40 e2       	ldi	r20, 0x20	; 32
    58fe:	51 e4       	ldi	r21, 0x41	; 65
    5900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5904:	dc 01       	movw	r26, r24
    5906:	cb 01       	movw	r24, r22
    5908:	bc 01       	movw	r22, r24
    590a:	cd 01       	movw	r24, r26
    590c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5910:	dc 01       	movw	r26, r24
    5912:	cb 01       	movw	r24, r22
    5914:	98 ab       	std	Y+48, r25	; 0x30
    5916:	8f a7       	std	Y+47, r24	; 0x2f
    5918:	0f c0       	rjmp	.+30     	; 0x5938 <Timer_Clock+0x41c>
    591a:	88 ec       	ldi	r24, 0xC8	; 200
    591c:	90 e0       	ldi	r25, 0x00	; 0
    591e:	9e a7       	std	Y+46, r25	; 0x2e
    5920:	8d a7       	std	Y+45, r24	; 0x2d
    5922:	8d a5       	ldd	r24, Y+45	; 0x2d
    5924:	9e a5       	ldd	r25, Y+46	; 0x2e
    5926:	01 97       	sbiw	r24, 0x01	; 1
    5928:	f1 f7       	brne	.-4      	; 0x5926 <Timer_Clock+0x40a>
    592a:	9e a7       	std	Y+46, r25	; 0x2e
    592c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    592e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5930:	98 a9       	ldd	r25, Y+48	; 0x30
    5932:	01 97       	sbiw	r24, 0x01	; 1
    5934:	98 ab       	std	Y+48, r25	; 0x30
    5936:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5938:	8f a5       	ldd	r24, Y+47	; 0x2f
    593a:	98 a9       	ldd	r25, Y+48	; 0x30
    593c:	00 97       	sbiw	r24, 0x00	; 0
    593e:	69 f7       	brne	.-38     	; 0x591a <Timer_Clock+0x3fe>
    5940:	14 c0       	rjmp	.+40     	; 0x596a <Timer_Clock+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5942:	69 a9       	ldd	r22, Y+49	; 0x31
    5944:	7a a9       	ldd	r23, Y+50	; 0x32
    5946:	8b a9       	ldd	r24, Y+51	; 0x33
    5948:	9c a9       	ldd	r25, Y+52	; 0x34
    594a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    594e:	dc 01       	movw	r26, r24
    5950:	cb 01       	movw	r24, r22
    5952:	98 ab       	std	Y+48, r25	; 0x30
    5954:	8f a7       	std	Y+47, r24	; 0x2f
    5956:	8f a5       	ldd	r24, Y+47	; 0x2f
    5958:	98 a9       	ldd	r25, Y+48	; 0x30
    595a:	9c a7       	std	Y+44, r25	; 0x2c
    595c:	8b a7       	std	Y+43, r24	; 0x2b
    595e:	8b a5       	ldd	r24, Y+43	; 0x2b
    5960:	9c a5       	ldd	r25, Y+44	; 0x2c
    5962:	01 97       	sbiw	r24, 0x01	; 1
    5964:	f1 f7       	brne	.-4      	; 0x5962 <Timer_Clock+0x446>
    5966:	9c a7       	std	Y+44, r25	; 0x2c
    5968:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);
    DIO_SetPinLevel(DIO_PORTA,DIO_PIN4,DIO_LOW);
    596a:	80 e0       	ldi	r24, 0x00	; 0
    596c:	64 e0       	ldi	r22, 0x04	; 4
    596e:	40 e0       	ldi	r20, 0x00	; 0
    5970:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(DIO_PORTA,DIO_PIN3,DIO_HIGH);
    5974:	80 e0       	ldi	r24, 0x00	; 0
    5976:	63 e0       	ldi	r22, 0x03	; 3
    5978:	41 e0       	ldi	r20, 0x01	; 1
    597a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    SSD_Write(n);
    597e:	80 91 71 01 	lds	r24, 0x0171
    5982:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <SSD_Write>
    5986:	80 e0       	ldi	r24, 0x00	; 0
    5988:	90 e0       	ldi	r25, 0x00	; 0
    598a:	a0 e8       	ldi	r26, 0x80	; 128
    598c:	bf e3       	ldi	r27, 0x3F	; 63
    598e:	8f a3       	std	Y+39, r24	; 0x27
    5990:	98 a7       	std	Y+40, r25	; 0x28
    5992:	a9 a7       	std	Y+41, r26	; 0x29
    5994:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5996:	6f a1       	ldd	r22, Y+39	; 0x27
    5998:	78 a5       	ldd	r23, Y+40	; 0x28
    599a:	89 a5       	ldd	r24, Y+41	; 0x29
    599c:	9a a5       	ldd	r25, Y+42	; 0x2a
    599e:	20 e0       	ldi	r18, 0x00	; 0
    59a0:	30 e0       	ldi	r19, 0x00	; 0
    59a2:	4a ef       	ldi	r20, 0xFA	; 250
    59a4:	54 e4       	ldi	r21, 0x44	; 68
    59a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59aa:	dc 01       	movw	r26, r24
    59ac:	cb 01       	movw	r24, r22
    59ae:	8b a3       	std	Y+35, r24	; 0x23
    59b0:	9c a3       	std	Y+36, r25	; 0x24
    59b2:	ad a3       	std	Y+37, r26	; 0x25
    59b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    59b6:	6b a1       	ldd	r22, Y+35	; 0x23
    59b8:	7c a1       	ldd	r23, Y+36	; 0x24
    59ba:	8d a1       	ldd	r24, Y+37	; 0x25
    59bc:	9e a1       	ldd	r25, Y+38	; 0x26
    59be:	20 e0       	ldi	r18, 0x00	; 0
    59c0:	30 e0       	ldi	r19, 0x00	; 0
    59c2:	40 e8       	ldi	r20, 0x80	; 128
    59c4:	5f e3       	ldi	r21, 0x3F	; 63
    59c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    59ca:	88 23       	and	r24, r24
    59cc:	2c f4       	brge	.+10     	; 0x59d8 <Timer_Clock+0x4bc>
		__ticks = 1;
    59ce:	81 e0       	ldi	r24, 0x01	; 1
    59d0:	90 e0       	ldi	r25, 0x00	; 0
    59d2:	9a a3       	std	Y+34, r25	; 0x22
    59d4:	89 a3       	std	Y+33, r24	; 0x21
    59d6:	3f c0       	rjmp	.+126    	; 0x5a56 <Timer_Clock+0x53a>
	else if (__tmp > 65535)
    59d8:	6b a1       	ldd	r22, Y+35	; 0x23
    59da:	7c a1       	ldd	r23, Y+36	; 0x24
    59dc:	8d a1       	ldd	r24, Y+37	; 0x25
    59de:	9e a1       	ldd	r25, Y+38	; 0x26
    59e0:	20 e0       	ldi	r18, 0x00	; 0
    59e2:	3f ef       	ldi	r19, 0xFF	; 255
    59e4:	4f e7       	ldi	r20, 0x7F	; 127
    59e6:	57 e4       	ldi	r21, 0x47	; 71
    59e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    59ec:	18 16       	cp	r1, r24
    59ee:	4c f5       	brge	.+82     	; 0x5a42 <Timer_Clock+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59f0:	6f a1       	ldd	r22, Y+39	; 0x27
    59f2:	78 a5       	ldd	r23, Y+40	; 0x28
    59f4:	89 a5       	ldd	r24, Y+41	; 0x29
    59f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    59f8:	20 e0       	ldi	r18, 0x00	; 0
    59fa:	30 e0       	ldi	r19, 0x00	; 0
    59fc:	40 e2       	ldi	r20, 0x20	; 32
    59fe:	51 e4       	ldi	r21, 0x41	; 65
    5a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a04:	dc 01       	movw	r26, r24
    5a06:	cb 01       	movw	r24, r22
    5a08:	bc 01       	movw	r22, r24
    5a0a:	cd 01       	movw	r24, r26
    5a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a10:	dc 01       	movw	r26, r24
    5a12:	cb 01       	movw	r24, r22
    5a14:	9a a3       	std	Y+34, r25	; 0x22
    5a16:	89 a3       	std	Y+33, r24	; 0x21
    5a18:	0f c0       	rjmp	.+30     	; 0x5a38 <Timer_Clock+0x51c>
    5a1a:	88 ec       	ldi	r24, 0xC8	; 200
    5a1c:	90 e0       	ldi	r25, 0x00	; 0
    5a1e:	98 a3       	std	Y+32, r25	; 0x20
    5a20:	8f 8f       	std	Y+31, r24	; 0x1f
    5a22:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5a24:	98 a1       	ldd	r25, Y+32	; 0x20
    5a26:	01 97       	sbiw	r24, 0x01	; 1
    5a28:	f1 f7       	brne	.-4      	; 0x5a26 <Timer_Clock+0x50a>
    5a2a:	98 a3       	std	Y+32, r25	; 0x20
    5a2c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a2e:	89 a1       	ldd	r24, Y+33	; 0x21
    5a30:	9a a1       	ldd	r25, Y+34	; 0x22
    5a32:	01 97       	sbiw	r24, 0x01	; 1
    5a34:	9a a3       	std	Y+34, r25	; 0x22
    5a36:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a38:	89 a1       	ldd	r24, Y+33	; 0x21
    5a3a:	9a a1       	ldd	r25, Y+34	; 0x22
    5a3c:	00 97       	sbiw	r24, 0x00	; 0
    5a3e:	69 f7       	brne	.-38     	; 0x5a1a <Timer_Clock+0x4fe>
    5a40:	14 c0       	rjmp	.+40     	; 0x5a6a <Timer_Clock+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a42:	6b a1       	ldd	r22, Y+35	; 0x23
    5a44:	7c a1       	ldd	r23, Y+36	; 0x24
    5a46:	8d a1       	ldd	r24, Y+37	; 0x25
    5a48:	9e a1       	ldd	r25, Y+38	; 0x26
    5a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a4e:	dc 01       	movw	r26, r24
    5a50:	cb 01       	movw	r24, r22
    5a52:	9a a3       	std	Y+34, r25	; 0x22
    5a54:	89 a3       	std	Y+33, r24	; 0x21
    5a56:	89 a1       	ldd	r24, Y+33	; 0x21
    5a58:	9a a1       	ldd	r25, Y+34	; 0x22
    5a5a:	9e 8f       	std	Y+30, r25	; 0x1e
    5a5c:	8d 8f       	std	Y+29, r24	; 0x1d
    5a5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a60:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5a62:	01 97       	sbiw	r24, 0x01	; 1
    5a64:	f1 f7       	brne	.-4      	; 0x5a62 <Timer_Clock+0x546>
    5a66:	9e 8f       	std	Y+30, r25	; 0x1e
    5a68:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    DIO_SetPinLevel(DIO_PORTA,DIO_PIN3,DIO_LOW);
    5a6a:	80 e0       	ldi	r24, 0x00	; 0
    5a6c:	63 e0       	ldi	r22, 0x03	; 3
    5a6e:	40 e0       	ldi	r20, 0x00	; 0
    5a70:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(DIO_PORTA,DIO_PIN2,DIO_HIGH);
    5a74:	80 e0       	ldi	r24, 0x00	; 0
    5a76:	62 e0       	ldi	r22, 0x02	; 2
    5a78:	41 e0       	ldi	r20, 0x01	; 1
    5a7a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    SSD_Write(p);
    5a7e:	80 91 72 01 	lds	r24, 0x0172
    5a82:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <SSD_Write>
    5a86:	80 e0       	ldi	r24, 0x00	; 0
    5a88:	90 e0       	ldi	r25, 0x00	; 0
    5a8a:	a0 e8       	ldi	r26, 0x80	; 128
    5a8c:	bf e3       	ldi	r27, 0x3F	; 63
    5a8e:	89 8f       	std	Y+25, r24	; 0x19
    5a90:	9a 8f       	std	Y+26, r25	; 0x1a
    5a92:	ab 8f       	std	Y+27, r26	; 0x1b
    5a94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a96:	69 8d       	ldd	r22, Y+25	; 0x19
    5a98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a9e:	20 e0       	ldi	r18, 0x00	; 0
    5aa0:	30 e0       	ldi	r19, 0x00	; 0
    5aa2:	4a ef       	ldi	r20, 0xFA	; 250
    5aa4:	54 e4       	ldi	r21, 0x44	; 68
    5aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5aaa:	dc 01       	movw	r26, r24
    5aac:	cb 01       	movw	r24, r22
    5aae:	8d 8b       	std	Y+21, r24	; 0x15
    5ab0:	9e 8b       	std	Y+22, r25	; 0x16
    5ab2:	af 8b       	std	Y+23, r26	; 0x17
    5ab4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5ab6:	6d 89       	ldd	r22, Y+21	; 0x15
    5ab8:	7e 89       	ldd	r23, Y+22	; 0x16
    5aba:	8f 89       	ldd	r24, Y+23	; 0x17
    5abc:	98 8d       	ldd	r25, Y+24	; 0x18
    5abe:	20 e0       	ldi	r18, 0x00	; 0
    5ac0:	30 e0       	ldi	r19, 0x00	; 0
    5ac2:	40 e8       	ldi	r20, 0x80	; 128
    5ac4:	5f e3       	ldi	r21, 0x3F	; 63
    5ac6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5aca:	88 23       	and	r24, r24
    5acc:	2c f4       	brge	.+10     	; 0x5ad8 <Timer_Clock+0x5bc>
		__ticks = 1;
    5ace:	81 e0       	ldi	r24, 0x01	; 1
    5ad0:	90 e0       	ldi	r25, 0x00	; 0
    5ad2:	9c 8b       	std	Y+20, r25	; 0x14
    5ad4:	8b 8b       	std	Y+19, r24	; 0x13
    5ad6:	3f c0       	rjmp	.+126    	; 0x5b56 <Timer_Clock+0x63a>
	else if (__tmp > 65535)
    5ad8:	6d 89       	ldd	r22, Y+21	; 0x15
    5ada:	7e 89       	ldd	r23, Y+22	; 0x16
    5adc:	8f 89       	ldd	r24, Y+23	; 0x17
    5ade:	98 8d       	ldd	r25, Y+24	; 0x18
    5ae0:	20 e0       	ldi	r18, 0x00	; 0
    5ae2:	3f ef       	ldi	r19, 0xFF	; 255
    5ae4:	4f e7       	ldi	r20, 0x7F	; 127
    5ae6:	57 e4       	ldi	r21, 0x47	; 71
    5ae8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5aec:	18 16       	cp	r1, r24
    5aee:	4c f5       	brge	.+82     	; 0x5b42 <Timer_Clock+0x626>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5af0:	69 8d       	ldd	r22, Y+25	; 0x19
    5af2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5af4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5af6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5af8:	20 e0       	ldi	r18, 0x00	; 0
    5afa:	30 e0       	ldi	r19, 0x00	; 0
    5afc:	40 e2       	ldi	r20, 0x20	; 32
    5afe:	51 e4       	ldi	r21, 0x41	; 65
    5b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b04:	dc 01       	movw	r26, r24
    5b06:	cb 01       	movw	r24, r22
    5b08:	bc 01       	movw	r22, r24
    5b0a:	cd 01       	movw	r24, r26
    5b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b10:	dc 01       	movw	r26, r24
    5b12:	cb 01       	movw	r24, r22
    5b14:	9c 8b       	std	Y+20, r25	; 0x14
    5b16:	8b 8b       	std	Y+19, r24	; 0x13
    5b18:	0f c0       	rjmp	.+30     	; 0x5b38 <Timer_Clock+0x61c>
    5b1a:	88 ec       	ldi	r24, 0xC8	; 200
    5b1c:	90 e0       	ldi	r25, 0x00	; 0
    5b1e:	9a 8b       	std	Y+18, r25	; 0x12
    5b20:	89 8b       	std	Y+17, r24	; 0x11
    5b22:	89 89       	ldd	r24, Y+17	; 0x11
    5b24:	9a 89       	ldd	r25, Y+18	; 0x12
    5b26:	01 97       	sbiw	r24, 0x01	; 1
    5b28:	f1 f7       	brne	.-4      	; 0x5b26 <Timer_Clock+0x60a>
    5b2a:	9a 8b       	std	Y+18, r25	; 0x12
    5b2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b2e:	8b 89       	ldd	r24, Y+19	; 0x13
    5b30:	9c 89       	ldd	r25, Y+20	; 0x14
    5b32:	01 97       	sbiw	r24, 0x01	; 1
    5b34:	9c 8b       	std	Y+20, r25	; 0x14
    5b36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b38:	8b 89       	ldd	r24, Y+19	; 0x13
    5b3a:	9c 89       	ldd	r25, Y+20	; 0x14
    5b3c:	00 97       	sbiw	r24, 0x00	; 0
    5b3e:	69 f7       	brne	.-38     	; 0x5b1a <Timer_Clock+0x5fe>
    5b40:	14 c0       	rjmp	.+40     	; 0x5b6a <Timer_Clock+0x64e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b42:	6d 89       	ldd	r22, Y+21	; 0x15
    5b44:	7e 89       	ldd	r23, Y+22	; 0x16
    5b46:	8f 89       	ldd	r24, Y+23	; 0x17
    5b48:	98 8d       	ldd	r25, Y+24	; 0x18
    5b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b4e:	dc 01       	movw	r26, r24
    5b50:	cb 01       	movw	r24, r22
    5b52:	9c 8b       	std	Y+20, r25	; 0x14
    5b54:	8b 8b       	std	Y+19, r24	; 0x13
    5b56:	8b 89       	ldd	r24, Y+19	; 0x13
    5b58:	9c 89       	ldd	r25, Y+20	; 0x14
    5b5a:	98 8b       	std	Y+16, r25	; 0x10
    5b5c:	8f 87       	std	Y+15, r24	; 0x0f
    5b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b60:	98 89       	ldd	r25, Y+16	; 0x10
    5b62:	01 97       	sbiw	r24, 0x01	; 1
    5b64:	f1 f7       	brne	.-4      	; 0x5b62 <Timer_Clock+0x646>
    5b66:	98 8b       	std	Y+16, r25	; 0x10
    5b68:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    DIO_SetPinLevel(DIO_PORTA,DIO_PIN2,DIO_LOW);
    5b6a:	80 e0       	ldi	r24, 0x00	; 0
    5b6c:	62 e0       	ldi	r22, 0x02	; 2
    5b6e:	40 e0       	ldi	r20, 0x00	; 0
    5b70:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    DIO_SetPinLevel(DIO_PORTA,DIO_PIN1,DIO_HIGH);
    5b74:	80 e0       	ldi	r24, 0x00	; 0
    5b76:	61 e0       	ldi	r22, 0x01	; 1
    5b78:	41 e0       	ldi	r20, 0x01	; 1
    5b7a:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
    SSD_Write(q);
    5b7e:	80 91 73 01 	lds	r24, 0x0173
    5b82:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <SSD_Write>
    5b86:	80 e0       	ldi	r24, 0x00	; 0
    5b88:	90 e0       	ldi	r25, 0x00	; 0
    5b8a:	a0 e8       	ldi	r26, 0x80	; 128
    5b8c:	bf e3       	ldi	r27, 0x3F	; 63
    5b8e:	8b 87       	std	Y+11, r24	; 0x0b
    5b90:	9c 87       	std	Y+12, r25	; 0x0c
    5b92:	ad 87       	std	Y+13, r26	; 0x0d
    5b94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b96:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b98:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b9e:	20 e0       	ldi	r18, 0x00	; 0
    5ba0:	30 e0       	ldi	r19, 0x00	; 0
    5ba2:	4a ef       	ldi	r20, 0xFA	; 250
    5ba4:	54 e4       	ldi	r21, 0x44	; 68
    5ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5baa:	dc 01       	movw	r26, r24
    5bac:	cb 01       	movw	r24, r22
    5bae:	8f 83       	std	Y+7, r24	; 0x07
    5bb0:	98 87       	std	Y+8, r25	; 0x08
    5bb2:	a9 87       	std	Y+9, r26	; 0x09
    5bb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5bb6:	6f 81       	ldd	r22, Y+7	; 0x07
    5bb8:	78 85       	ldd	r23, Y+8	; 0x08
    5bba:	89 85       	ldd	r24, Y+9	; 0x09
    5bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bbe:	20 e0       	ldi	r18, 0x00	; 0
    5bc0:	30 e0       	ldi	r19, 0x00	; 0
    5bc2:	40 e8       	ldi	r20, 0x80	; 128
    5bc4:	5f e3       	ldi	r21, 0x3F	; 63
    5bc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5bca:	88 23       	and	r24, r24
    5bcc:	2c f4       	brge	.+10     	; 0x5bd8 <Timer_Clock+0x6bc>
		__ticks = 1;
    5bce:	81 e0       	ldi	r24, 0x01	; 1
    5bd0:	90 e0       	ldi	r25, 0x00	; 0
    5bd2:	9e 83       	std	Y+6, r25	; 0x06
    5bd4:	8d 83       	std	Y+5, r24	; 0x05
    5bd6:	3f c0       	rjmp	.+126    	; 0x5c56 <Timer_Clock+0x73a>
	else if (__tmp > 65535)
    5bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    5bda:	78 85       	ldd	r23, Y+8	; 0x08
    5bdc:	89 85       	ldd	r24, Y+9	; 0x09
    5bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    5be0:	20 e0       	ldi	r18, 0x00	; 0
    5be2:	3f ef       	ldi	r19, 0xFF	; 255
    5be4:	4f e7       	ldi	r20, 0x7F	; 127
    5be6:	57 e4       	ldi	r21, 0x47	; 71
    5be8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5bec:	18 16       	cp	r1, r24
    5bee:	4c f5       	brge	.+82     	; 0x5c42 <Timer_Clock+0x726>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    5bf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    5bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    5bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    5bf8:	20 e0       	ldi	r18, 0x00	; 0
    5bfa:	30 e0       	ldi	r19, 0x00	; 0
    5bfc:	40 e2       	ldi	r20, 0x20	; 32
    5bfe:	51 e4       	ldi	r21, 0x41	; 65
    5c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c04:	dc 01       	movw	r26, r24
    5c06:	cb 01       	movw	r24, r22
    5c08:	bc 01       	movw	r22, r24
    5c0a:	cd 01       	movw	r24, r26
    5c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c10:	dc 01       	movw	r26, r24
    5c12:	cb 01       	movw	r24, r22
    5c14:	9e 83       	std	Y+6, r25	; 0x06
    5c16:	8d 83       	std	Y+5, r24	; 0x05
    5c18:	0f c0       	rjmp	.+30     	; 0x5c38 <Timer_Clock+0x71c>
    5c1a:	88 ec       	ldi	r24, 0xC8	; 200
    5c1c:	90 e0       	ldi	r25, 0x00	; 0
    5c1e:	9c 83       	std	Y+4, r25	; 0x04
    5c20:	8b 83       	std	Y+3, r24	; 0x03
    5c22:	8b 81       	ldd	r24, Y+3	; 0x03
    5c24:	9c 81       	ldd	r25, Y+4	; 0x04
    5c26:	01 97       	sbiw	r24, 0x01	; 1
    5c28:	f1 f7       	brne	.-4      	; 0x5c26 <Timer_Clock+0x70a>
    5c2a:	9c 83       	std	Y+4, r25	; 0x04
    5c2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    5c30:	9e 81       	ldd	r25, Y+6	; 0x06
    5c32:	01 97       	sbiw	r24, 0x01	; 1
    5c34:	9e 83       	std	Y+6, r25	; 0x06
    5c36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c38:	8d 81       	ldd	r24, Y+5	; 0x05
    5c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    5c3c:	00 97       	sbiw	r24, 0x00	; 0
    5c3e:	69 f7       	brne	.-38     	; 0x5c1a <Timer_Clock+0x6fe>
    5c40:	14 c0       	rjmp	.+40     	; 0x5c6a <Timer_Clock+0x74e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c42:	6f 81       	ldd	r22, Y+7	; 0x07
    5c44:	78 85       	ldd	r23, Y+8	; 0x08
    5c46:	89 85       	ldd	r24, Y+9	; 0x09
    5c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c4e:	dc 01       	movw	r26, r24
    5c50:	cb 01       	movw	r24, r22
    5c52:	9e 83       	std	Y+6, r25	; 0x06
    5c54:	8d 83       	std	Y+5, r24	; 0x05
    5c56:	8d 81       	ldd	r24, Y+5	; 0x05
    5c58:	9e 81       	ldd	r25, Y+6	; 0x06
    5c5a:	9a 83       	std	Y+2, r25	; 0x02
    5c5c:	89 83       	std	Y+1, r24	; 0x01
    5c5e:	89 81       	ldd	r24, Y+1	; 0x01
    5c60:	9a 81       	ldd	r25, Y+2	; 0x02
    5c62:	01 97       	sbiw	r24, 0x01	; 1
    5c64:	f1 f7       	brne	.-4      	; 0x5c62 <Timer_Clock+0x746>
    5c66:	9a 83       	std	Y+2, r25	; 0x02
    5c68:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
    DIO_SetPinLevel(DIO_PORTA,DIO_PIN1,DIO_LOW);
    5c6a:	80 e0       	ldi	r24, 0x00	; 0
    5c6c:	61 e0       	ldi	r22, 0x01	; 1
    5c6e:	40 e0       	ldi	r20, 0x00	; 0
    5c70:	0e 94 a6 0b 	call	0x174c	; 0x174c <DIO_SetPinLevel>
}
    5c74:	cc 5a       	subi	r28, 0xAC	; 172
    5c76:	df 4f       	sbci	r29, 0xFF	; 255
    5c78:	0f b6       	in	r0, 0x3f	; 63
    5c7a:	f8 94       	cli
    5c7c:	de bf       	out	0x3e, r29	; 62
    5c7e:	0f be       	out	0x3f, r0	; 63
    5c80:	cd bf       	out	0x3d, r28	; 61
    5c82:	cf 91       	pop	r28
    5c84:	df 91       	pop	r29
    5c86:	1f 91       	pop	r17
    5c88:	0f 91       	pop	r16
    5c8a:	08 95       	ret

00005c8c <Recieve_UART_data>:


void Recieve_UART_data(){
    5c8c:	0f 93       	push	r16
    5c8e:	1f 93       	push	r17
    5c90:	df 93       	push	r29
    5c92:	cf 93       	push	r28
    5c94:	00 d0       	rcall	.+0      	; 0x5c96 <Recieve_UART_data+0xa>
    5c96:	0f 92       	push	r0
    5c98:	cd b7       	in	r28, 0x3d	; 61
    5c9a:	de b7       	in	r29, 0x3e	; 62
	u8 c=UART_Recieve_Data();
    5c9c:	0e 94 23 29 	call	0x5246	; 0x5246 <UART_Recieve_Data>
    5ca0:	8b 83       	std	Y+3, r24	; 0x03
	if(c=='p')
    5ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    5ca4:	80 37       	cpi	r24, 0x70	; 112
    5ca6:	e1 f4       	brne	.+56     	; 0x5ce0 <Recieve_UART_data+0x54>
	{
		u8 i;
		for ( i = 0; i < 10; i++)
    5ca8:	1a 82       	std	Y+2, r1	; 0x02
    5caa:	16 c0       	rjmp	.+44     	; 0x5cd8 <Recieve_UART_data+0x4c>
		{
			arr[i]=UART_Recieve_Data();
    5cac:	20 91 8c 01 	lds	r18, 0x018C
    5cb0:	30 91 8d 01 	lds	r19, 0x018D
    5cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    5cb6:	88 2f       	mov	r24, r24
    5cb8:	90 e0       	ldi	r25, 0x00	; 0
    5cba:	88 0f       	add	r24, r24
    5cbc:	99 1f       	adc	r25, r25
    5cbe:	89 01       	movw	r16, r18
    5cc0:	08 0f       	add	r16, r24
    5cc2:	19 1f       	adc	r17, r25
    5cc4:	0e 94 23 29 	call	0x5246	; 0x5246 <UART_Recieve_Data>
    5cc8:	88 2f       	mov	r24, r24
    5cca:	90 e0       	ldi	r25, 0x00	; 0
    5ccc:	f8 01       	movw	r30, r16
    5cce:	91 83       	std	Z+1, r25	; 0x01
    5cd0:	80 83       	st	Z, r24
void Recieve_UART_data(){
	u8 c=UART_Recieve_Data();
	if(c=='p')
	{
		u8 i;
		for ( i = 0; i < 10; i++)
    5cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    5cd4:	8f 5f       	subi	r24, 0xFF	; 255
    5cd6:	8a 83       	std	Y+2, r24	; 0x02
    5cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    5cda:	8a 30       	cpi	r24, 0x0A	; 10
    5cdc:	38 f3       	brcs	.-50     	; 0x5cac <Recieve_UART_data+0x20>
    5cde:	27 c0       	rjmp	.+78     	; 0x5d2e <Recieve_UART_data+0xa2>
		{
			arr[i]=UART_Recieve_Data();
		}
		
	}else if(c =='c')
    5ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    5ce2:	83 36       	cpi	r24, 0x63	; 99
    5ce4:	21 f5       	brne	.+72     	; 0x5d2e <Recieve_UART_data+0xa2>
	{
		u8 x=UART_Recieve_Data();
    5ce6:	0e 94 23 29 	call	0x5246	; 0x5246 <UART_Recieve_Data>
    5cea:	89 83       	std	Y+1, r24	; 0x01
        q=x/10;
    5cec:	89 81       	ldd	r24, Y+1	; 0x01
    5cee:	9a e0       	ldi	r25, 0x0A	; 10
    5cf0:	69 2f       	mov	r22, r25
    5cf2:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <__udivmodqi4>
    5cf6:	80 93 73 01 	sts	0x0173, r24
        p=x%10;
    5cfa:	89 81       	ldd	r24, Y+1	; 0x01
    5cfc:	9a e0       	ldi	r25, 0x0A	; 10
    5cfe:	69 2f       	mov	r22, r25
    5d00:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <__udivmodqi4>
    5d04:	89 2f       	mov	r24, r25
    5d06:	80 93 72 01 	sts	0x0172, r24
        x=UART_Recieve_Data();
    5d0a:	0e 94 23 29 	call	0x5246	; 0x5246 <UART_Recieve_Data>
    5d0e:	89 83       	std	Y+1, r24	; 0x01
        n=x/10;
    5d10:	89 81       	ldd	r24, Y+1	; 0x01
    5d12:	9a e0       	ldi	r25, 0x0A	; 10
    5d14:	69 2f       	mov	r22, r25
    5d16:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <__udivmodqi4>
    5d1a:	80 93 71 01 	sts	0x0171, r24
        m=x%10;
    5d1e:	89 81       	ldd	r24, Y+1	; 0x01
    5d20:	9a e0       	ldi	r25, 0x0A	; 10
    5d22:	69 2f       	mov	r22, r25
    5d24:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <__udivmodqi4>
    5d28:	89 2f       	mov	r24, r25
    5d2a:	80 93 70 01 	sts	0x0170, r24
	}
}
    5d2e:	0f 90       	pop	r0
    5d30:	0f 90       	pop	r0
    5d32:	0f 90       	pop	r0
    5d34:	cf 91       	pop	r28
    5d36:	df 91       	pop	r29
    5d38:	1f 91       	pop	r17
    5d3a:	0f 91       	pop	r16
    5d3c:	08 95       	ret

00005d3e <__udivmodqi4>:
    5d3e:	99 1b       	sub	r25, r25
    5d40:	79 e0       	ldi	r23, 0x09	; 9
    5d42:	04 c0       	rjmp	.+8      	; 0x5d4c <__udivmodqi4_ep>

00005d44 <__udivmodqi4_loop>:
    5d44:	99 1f       	adc	r25, r25
    5d46:	96 17       	cp	r25, r22
    5d48:	08 f0       	brcs	.+2      	; 0x5d4c <__udivmodqi4_ep>
    5d4a:	96 1b       	sub	r25, r22

00005d4c <__udivmodqi4_ep>:
    5d4c:	88 1f       	adc	r24, r24
    5d4e:	7a 95       	dec	r23
    5d50:	c9 f7       	brne	.-14     	; 0x5d44 <__udivmodqi4_loop>
    5d52:	80 95       	com	r24
    5d54:	08 95       	ret

00005d56 <__udivmodhi4>:
    5d56:	aa 1b       	sub	r26, r26
    5d58:	bb 1b       	sub	r27, r27
    5d5a:	51 e1       	ldi	r21, 0x11	; 17
    5d5c:	07 c0       	rjmp	.+14     	; 0x5d6c <__udivmodhi4_ep>

00005d5e <__udivmodhi4_loop>:
    5d5e:	aa 1f       	adc	r26, r26
    5d60:	bb 1f       	adc	r27, r27
    5d62:	a6 17       	cp	r26, r22
    5d64:	b7 07       	cpc	r27, r23
    5d66:	10 f0       	brcs	.+4      	; 0x5d6c <__udivmodhi4_ep>
    5d68:	a6 1b       	sub	r26, r22
    5d6a:	b7 0b       	sbc	r27, r23

00005d6c <__udivmodhi4_ep>:
    5d6c:	88 1f       	adc	r24, r24
    5d6e:	99 1f       	adc	r25, r25
    5d70:	5a 95       	dec	r21
    5d72:	a9 f7       	brne	.-22     	; 0x5d5e <__udivmodhi4_loop>
    5d74:	80 95       	com	r24
    5d76:	90 95       	com	r25
    5d78:	bc 01       	movw	r22, r24
    5d7a:	cd 01       	movw	r24, r26
    5d7c:	08 95       	ret

00005d7e <__divmodhi4>:
    5d7e:	97 fb       	bst	r25, 7
    5d80:	09 2e       	mov	r0, r25
    5d82:	07 26       	eor	r0, r23
    5d84:	0a d0       	rcall	.+20     	; 0x5d9a <__divmodhi4_neg1>
    5d86:	77 fd       	sbrc	r23, 7
    5d88:	04 d0       	rcall	.+8      	; 0x5d92 <__divmodhi4_neg2>
    5d8a:	e5 df       	rcall	.-54     	; 0x5d56 <__udivmodhi4>
    5d8c:	06 d0       	rcall	.+12     	; 0x5d9a <__divmodhi4_neg1>
    5d8e:	00 20       	and	r0, r0
    5d90:	1a f4       	brpl	.+6      	; 0x5d98 <__divmodhi4_exit>

00005d92 <__divmodhi4_neg2>:
    5d92:	70 95       	com	r23
    5d94:	61 95       	neg	r22
    5d96:	7f 4f       	sbci	r23, 0xFF	; 255

00005d98 <__divmodhi4_exit>:
    5d98:	08 95       	ret

00005d9a <__divmodhi4_neg1>:
    5d9a:	f6 f7       	brtc	.-4      	; 0x5d98 <__divmodhi4_exit>
    5d9c:	90 95       	com	r25
    5d9e:	81 95       	neg	r24
    5da0:	9f 4f       	sbci	r25, 0xFF	; 255
    5da2:	08 95       	ret

00005da4 <__prologue_saves__>:
    5da4:	2f 92       	push	r2
    5da6:	3f 92       	push	r3
    5da8:	4f 92       	push	r4
    5daa:	5f 92       	push	r5
    5dac:	6f 92       	push	r6
    5dae:	7f 92       	push	r7
    5db0:	8f 92       	push	r8
    5db2:	9f 92       	push	r9
    5db4:	af 92       	push	r10
    5db6:	bf 92       	push	r11
    5db8:	cf 92       	push	r12
    5dba:	df 92       	push	r13
    5dbc:	ef 92       	push	r14
    5dbe:	ff 92       	push	r15
    5dc0:	0f 93       	push	r16
    5dc2:	1f 93       	push	r17
    5dc4:	cf 93       	push	r28
    5dc6:	df 93       	push	r29
    5dc8:	cd b7       	in	r28, 0x3d	; 61
    5dca:	de b7       	in	r29, 0x3e	; 62
    5dcc:	ca 1b       	sub	r28, r26
    5dce:	db 0b       	sbc	r29, r27
    5dd0:	0f b6       	in	r0, 0x3f	; 63
    5dd2:	f8 94       	cli
    5dd4:	de bf       	out	0x3e, r29	; 62
    5dd6:	0f be       	out	0x3f, r0	; 63
    5dd8:	cd bf       	out	0x3d, r28	; 61
    5dda:	09 94       	ijmp

00005ddc <__epilogue_restores__>:
    5ddc:	2a 88       	ldd	r2, Y+18	; 0x12
    5dde:	39 88       	ldd	r3, Y+17	; 0x11
    5de0:	48 88       	ldd	r4, Y+16	; 0x10
    5de2:	5f 84       	ldd	r5, Y+15	; 0x0f
    5de4:	6e 84       	ldd	r6, Y+14	; 0x0e
    5de6:	7d 84       	ldd	r7, Y+13	; 0x0d
    5de8:	8c 84       	ldd	r8, Y+12	; 0x0c
    5dea:	9b 84       	ldd	r9, Y+11	; 0x0b
    5dec:	aa 84       	ldd	r10, Y+10	; 0x0a
    5dee:	b9 84       	ldd	r11, Y+9	; 0x09
    5df0:	c8 84       	ldd	r12, Y+8	; 0x08
    5df2:	df 80       	ldd	r13, Y+7	; 0x07
    5df4:	ee 80       	ldd	r14, Y+6	; 0x06
    5df6:	fd 80       	ldd	r15, Y+5	; 0x05
    5df8:	0c 81       	ldd	r16, Y+4	; 0x04
    5dfa:	1b 81       	ldd	r17, Y+3	; 0x03
    5dfc:	aa 81       	ldd	r26, Y+2	; 0x02
    5dfe:	b9 81       	ldd	r27, Y+1	; 0x01
    5e00:	ce 0f       	add	r28, r30
    5e02:	d1 1d       	adc	r29, r1
    5e04:	0f b6       	in	r0, 0x3f	; 63
    5e06:	f8 94       	cli
    5e08:	de bf       	out	0x3e, r29	; 62
    5e0a:	0f be       	out	0x3f, r0	; 63
    5e0c:	cd bf       	out	0x3d, r28	; 61
    5e0e:	ed 01       	movw	r28, r26
    5e10:	08 95       	ret

00005e12 <_exit>:
    5e12:	f8 94       	cli

00005e14 <__stop_program>:
    5e14:	ff cf       	rjmp	.-2      	; 0x5e14 <__stop_program>
