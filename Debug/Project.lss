
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000058c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  000058c2  00005956  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008000fe  008000fe  000059f4  2**0
                  ALLOC
  3 .stab         00005f34  00000000  00000000  000059f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000027dc  00000000  00000000  0000b928  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000e104  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000e244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000e3b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000fffd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00010ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00011c98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00011df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00012085  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012853  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__vector_4>
      14:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <__vector_7>
      20:	0c 94 cc 0e 	jmp	0x1d98	; 0x1d98 <__vector_8>
      24:	0c 94 72 0e 	jmp	0x1ce4	; 0x1ce4 <__vector_9>
      28:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__vector_10>
      2c:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f8 e5       	ldi	r31, 0x58	; 88
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 31       	cpi	r26, 0x14	; 20
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d6 27 	call	0x4fac	; 0x4fac <main>
      8a:	0c 94 5f 2c 	jmp	0x58be	; 0x58be <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 28 2c 	jmp	0x5850	; 0x5850 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ef       	ldi	r26, 0xF5	; 245
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 44 2c 	jmp	0x5888	; 0x5888 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 34 2c 	jmp	0x5868	; 0x5868 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 50 2c 	jmp	0x58a0	; 0x58a0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 34 2c 	jmp	0x5868	; 0x5868 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 50 2c 	jmp	0x58a0	; 0x58a0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 28 2c 	jmp	0x5850	; 0x5850 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ef       	ldi	r24, 0xF5	; 245
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 44 2c 	jmp	0x5888	; 0x5888 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 34 2c 	jmp	0x5868	; 0x5868 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 50 2c 	jmp	0x58a0	; 0x58a0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 34 2c 	jmp	0x5868	; 0x5868 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 50 2c 	jmp	0x58a0	; 0x58a0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 34 2c 	jmp	0x5868	; 0x5868 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 50 2c 	jmp	0x58a0	; 0x58a0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 38 2c 	jmp	0x5870	; 0x5870 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 54 2c 	jmp	0x58a8	; 0x58a8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_16>:
#include "Adc_cfg.h"
#include "GlobalInterrupt.h"

void (*Adc_Callback) (u16 res);

ISR(VECTOR_ADC) {
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
    Adc_Callback((ADC_DATA_REGISTER & 0b0000001111111111));
     b70:	20 91 fe 00 	lds	r18, 0x00FE
     b74:	30 91 ff 00 	lds	r19, 0x00FF
     b78:	e4 e2       	ldi	r30, 0x24	; 36
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	91 81       	ldd	r25, Z+1	; 0x01
     b80:	93 70       	andi	r25, 0x03	; 3
     b82:	f9 01       	movw	r30, r18
     b84:	09 95       	icall
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <Adc_Init>:

void Adc_Init(void) {
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
    /*Reference Selection Bits*/
#if (ADC_REF_SELECTION == ADC_REF_AREF)
    CLR_BIT(ADMUX, ADMUX_REFS1);
     bb4:	a7 e2       	ldi	r26, 0x27	; 39
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e7 e2       	ldi	r30, 0x27	; 39
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	8f 77       	andi	r24, 0x7F	; 127
     bc0:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, ADMUX_REFS0);
     bc2:	a7 e2       	ldi	r26, 0x27	; 39
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e7 e2       	ldi	r30, 0x27	; 39
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	8f 7b       	andi	r24, 0xBF	; 191
     bce:	8c 93       	st	X, r24
#else
    #error "Error Ref Selection Choise"
#endif

    /* No Left Adjust */
    CLR_BIT(ADMUX, ADMUX_ADLAR);
     bd0:	a7 e2       	ldi	r26, 0x27	; 39
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e7 e2       	ldi	r30, 0x27	; 39
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	8f 7d       	andi	r24, 0xDF	; 223
     bdc:	8c 93       	st	X, r24

    /* ADC Enable */
    SET_BIT(ADCSRA, ADCSRA_ADEN);
     bde:	a6 e2       	ldi	r26, 0x26	; 38
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e6 e2       	ldi	r30, 0x26	; 38
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	80 68       	ori	r24, 0x80	; 128
     bea:	8c 93       	st	X, r24

    /* ADC Interrupt Enable */
#if (ADC_INT_STATE == ADC_INT_DISABLE)
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
#elif (ADC_INT_STATE == ADC_INT_ENABLE)
    SET_BIT(ADCSRA, ADCSRA_ADIE);
     bec:	a6 e2       	ldi	r26, 0x26	; 38
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e6 e2       	ldi	r30, 0x26	; 38
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	88 60       	ori	r24, 0x08	; 8
     bf8:	8c 93       	st	X, r24
    GlobalInterrupt_Enable();
     bfa:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <GlobalInterrupt_Enable>
#endif

    /* ADC Prescaler Select */

#if (ADC_PRESCALER == 128)
    SET_BIT(ADCSRA, ADCSRA_ADPS0);
     bfe:	a6 e2       	ldi	r26, 0x26	; 38
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e6 e2       	ldi	r30, 0x26	; 38
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	81 60       	ori	r24, 0x01	; 1
     c0a:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS1);
     c0c:	a6 e2       	ldi	r26, 0x26	; 38
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e6 e2       	ldi	r30, 0x26	; 38
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	82 60       	ori	r24, 0x02	; 2
     c18:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS2);
     c1a:	a6 e2       	ldi	r26, 0x26	; 38
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e6 e2       	ldi	r30, 0x26	; 38
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	84 60       	ori	r24, 0x04	; 4
     c26:	8c 93       	st	X, r24
    CLR_BIT(ADCSRA, ADCSRA_ADPS2);
    // TODO
#else
    #error "Error Prescaler Choise"
#endif
}
     c28:	cf 91       	pop	r28
     c2a:	df 91       	pop	r29
     c2c:	08 95       	ret

00000c2e <Adc_StartConversion>:

void Adc_StartConversion(Adc_ChannelType channel) {
     c2e:	df 93       	push	r29
     c30:	cf 93       	push	r28
     c32:	0f 92       	push	r0
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	89 83       	std	Y+1, r24	; 0x01
    ADMUX &= 0b11100000;
     c3a:	a7 e2       	ldi	r26, 0x27	; 39
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e7 e2       	ldi	r30, 0x27	; 39
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	80 7e       	andi	r24, 0xE0	; 224
     c46:	8c 93       	st	X, r24
    ADMUX |= channel;
     c48:	a7 e2       	ldi	r26, 0x27	; 39
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e7 e2       	ldi	r30, 0x27	; 39
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	90 81       	ld	r25, Z
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	89 2b       	or	r24, r25
     c56:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADSC);
     c58:	a6 e2       	ldi	r26, 0x26	; 38
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e6 e2       	ldi	r30, 0x26	; 38
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	80 64       	ori	r24, 0x40	; 64
     c64:	8c 93       	st	X, r24
}
     c66:	0f 90       	pop	r0
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	08 95       	ret

00000c6e <Adc_Enable>:

void Adc_Enable(void) {
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADCSRA, ADCSRA_ADEN);
     c76:	a6 e2       	ldi	r26, 0x26	; 38
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e6 e2       	ldi	r30, 0x26	; 38
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	80 68       	ori	r24, 0x80	; 128
     c82:	8c 93       	st	X, r24
    // TODO
}
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <Adc_Disable>:

void Adc_Disable(void) {
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADCSRA, ADCSRA_ADEN);
     c92:	a6 e2       	ldi	r26, 0x26	; 38
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e6 e2       	ldi	r30, 0x26	; 38
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	8f 77       	andi	r24, 0x7F	; 127
     c9e:	8c 93       	st	X, r24
    // TODO
}
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	08 95       	ret

00000ca6 <Adc_GetResult>:


Adc_ConversionStateType Adc_GetResult(u16* result) {
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	00 d0       	rcall	.+0      	; 0xcac <Adc_GetResult+0x6>
     cac:	0f 92       	push	r0
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	9b 83       	std	Y+3, r25	; 0x03
     cb4:	8a 83       	std	Y+2, r24	; 0x02
    Adc_ConversionStateType flag = ADC_CONVERSION_NOT_COMPLETE;
     cb6:	19 82       	std	Y+1, r1	; 0x01
    if (GET_BIT(ADCSRA, ADCSRA_ADIF) == 1) {
     cb8:	e6 e2       	ldi	r30, 0x26	; 38
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	82 95       	swap	r24
     cc0:	8f 70       	andi	r24, 0x0F	; 15
     cc2:	88 2f       	mov	r24, r24
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	81 70       	andi	r24, 0x01	; 1
     cc8:	90 70       	andi	r25, 0x00	; 0
     cca:	88 23       	and	r24, r24
     ccc:	91 f0       	breq	.+36     	; 0xcf2 <Adc_GetResult+0x4c>
        SET_BIT(ADCSRA, ADCSRA_ADIF);
     cce:	a6 e2       	ldi	r26, 0x26	; 38
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e6 e2       	ldi	r30, 0x26	; 38
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	80 61       	ori	r24, 0x10	; 16
     cda:	8c 93       	st	X, r24
        *result = ADC_DATA_REGISTER & 0b0000001111111111;
     cdc:	e4 e2       	ldi	r30, 0x24	; 36
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	91 81       	ldd	r25, Z+1	; 0x01
     ce4:	93 70       	andi	r25, 0x03	; 3
     ce6:	ea 81       	ldd	r30, Y+2	; 0x02
     ce8:	fb 81       	ldd	r31, Y+3	; 0x03
     cea:	91 83       	std	Z+1, r25	; 0x01
     cec:	80 83       	st	Z, r24
        flag = ADC_CONVERSION_COMPLETE;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	89 83       	std	Y+1, r24	; 0x01
    }
    return flag;
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
}
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <Adc_GetResultPolling>:

u16 Adc_GetResultPolling(void) {
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(ADCSRA, ADCSRA_ADIF) == 0);
     d08:	e6 e2       	ldi	r30, 0x26	; 38
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	82 95       	swap	r24
     d10:	8f 70       	andi	r24, 0x0F	; 15
     d12:	88 2f       	mov	r24, r24
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	81 70       	andi	r24, 0x01	; 1
     d18:	90 70       	andi	r25, 0x00	; 0
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	a9 f3       	breq	.-22     	; 0xd08 <Adc_GetResultPolling+0x8>
    return (ADC_DATA_REGISTER & 0b0000001111111111);
     d1e:	e4 e2       	ldi	r30, 0x24	; 36
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	91 81       	ldd	r25, Z+1	; 0x01
     d26:	93 70       	andi	r25, 0x03	; 3
}
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <Adc_SetCallback>:


void Adc_SetCallback (void (*callback) (u16 res)) {
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	00 d0       	rcall	.+0      	; 0xd34 <Adc_SetCallback+0x6>
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	9a 83       	std	Y+2, r25	; 0x02
     d3a:	89 83       	std	Y+1, r24	; 0x01
    Adc_Callback = callback;
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	9a 81       	ldd	r25, Y+2	; 0x02
     d40:	90 93 ff 00 	sts	0x00FF, r25
     d44:	80 93 fe 00 	sts	0x00FE, r24
	}
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <Calculator_Run>:
#include "LCD.h"
#include "Calculator.h"

//u8 Calculator_GetRealNumber (Keypad_ButtonType button);

void Calculator_Run(void) {
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	2d 97       	sbiw	r28, 0x0d	; 13
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	de bf       	out	0x3e, r29	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	cd bf       	out	0x3d, r28	; 61
    s8 num1=0, num2=0, operation=0, result=0;
     d66:	19 86       	std	Y+9, r1	; 0x09
     d68:	18 86       	std	Y+8, r1	; 0x08
     d6a:	1f 82       	std	Y+7, r1	; 0x07
     d6c:	1e 82       	std	Y+6, r1	; 0x06
    u8 num1_flag=0, num2_flag=0, operation_flag=0, result_flag=0;
     d6e:	1d 82       	std	Y+5, r1	; 0x05
     d70:	1c 82       	std	Y+4, r1	; 0x04
     d72:	1b 82       	std	Y+3, r1	; 0x03
     d74:	1a 82       	std	Y+2, r1	; 0x02
    Keypad_ButtonType pressed_button;
    while (1)
    {
        /* Wait for user input */
        do {
            pressed_button = Keypad_GetPressedButton();
     d76:	0e 94 56 1a 	call	0x34ac	; 0x34ac <Keypad_GetPressedButton>
     d7a:	89 83       	std	Y+1, r24	; 0x01
        }
        while (pressed_button == KEYPAD_BUTTON_INVALID);
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	80 31       	cpi	r24, 0x10	; 16
     d80:	d1 f3       	breq	.-12     	; 0xd76 <Calculator_Run+0x24>

        if (pressed_button == CALCULATOR_BUTTON_CLR) {
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	88 23       	and	r24, r24
     d86:	39 f4       	brne	.+14     	; 0xd96 <Calculator_Run+0x44>
            num1_flag = 0;
     d88:	1d 82       	std	Y+5, r1	; 0x05
            num2_flag = 0;
     d8a:	1c 82       	std	Y+4, r1	; 0x04
            operation_flag = 0;
     d8c:	1b 82       	std	Y+3, r1	; 0x03
            result_flag = 0;
     d8e:	1a 82       	std	Y+2, r1	; 0x02
            LCD_Clear();
     d90:	0e 94 1b 1b 	call	0x3636	; 0x3636 <LCD_Clear>
     d94:	f0 cf       	rjmp	.-32     	; 0xd76 <Calculator_Run+0x24>
            continue;
        }
        if (num1_flag == 0) {
     d96:	8d 81       	ldd	r24, Y+5	; 0x05
     d98:	88 23       	and	r24, r24
     d9a:	61 f4       	brne	.+24     	; 0xdb4 <Calculator_Run+0x62>
            num1_flag = 1;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	8d 83       	std	Y+5, r24	; 0x05
            num1 = Calculator_GetRealNumber(pressed_button);
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	0e 94 6f 07 	call	0xede	; 0xede <Calculator_GetRealNumber>
     da6:	89 87       	std	Y+9, r24	; 0x09
            LCD_DisplayNumber(num1);
     da8:	89 85       	ldd	r24, Y+9	; 0x09
     daa:	88 2f       	mov	r24, r24
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <LCD_DisplayNumber>
     db2:	e1 cf       	rjmp	.-62     	; 0xd76 <Calculator_Run+0x24>
        }
        else if (operation_flag == 0) {
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	88 23       	and	r24, r24
     db8:	89 f5       	brne	.+98     	; 0xe1c <Calculator_Run+0xca>
            operation_flag = 1;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	8b 83       	std	Y+3, r24	; 0x03
            switch (pressed_button)
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	3d 87       	std	Y+13, r19	; 0x0d
     dc6:	2c 87       	std	Y+12, r18	; 0x0c
     dc8:	8c 85       	ldd	r24, Y+12	; 0x0c
     dca:	9d 85       	ldd	r25, Y+13	; 0x0d
     dcc:	87 30       	cpi	r24, 0x07	; 7
     dce:	91 05       	cpc	r25, r1
     dd0:	c9 f0       	breq	.+50     	; 0xe04 <Calculator_Run+0xb2>
     dd2:	2c 85       	ldd	r18, Y+12	; 0x0c
     dd4:	3d 85       	ldd	r19, Y+13	; 0x0d
     dd6:	28 30       	cpi	r18, 0x08	; 8
     dd8:	31 05       	cpc	r19, r1
     dda:	34 f4       	brge	.+12     	; 0xde8 <Calculator_Run+0x96>
     ddc:	8c 85       	ldd	r24, Y+12	; 0x0c
     dde:	9d 85       	ldd	r25, Y+13	; 0x0d
     de0:	83 30       	cpi	r24, 0x03	; 3
     de2:	91 05       	cpc	r25, r1
     de4:	61 f0       	breq	.+24     	; 0xdfe <Calculator_Run+0xac>
     de6:	16 c0       	rjmp	.+44     	; 0xe14 <Calculator_Run+0xc2>
     de8:	2c 85       	ldd	r18, Y+12	; 0x0c
     dea:	3d 85       	ldd	r19, Y+13	; 0x0d
     dec:	2b 30       	cpi	r18, 0x0B	; 11
     dee:	31 05       	cpc	r19, r1
     df0:	61 f0       	breq	.+24     	; 0xe0a <Calculator_Run+0xb8>
     df2:	8c 85       	ldd	r24, Y+12	; 0x0c
     df4:	9d 85       	ldd	r25, Y+13	; 0x0d
     df6:	8f 30       	cpi	r24, 0x0F	; 15
     df8:	91 05       	cpc	r25, r1
     dfa:	51 f0       	breq	.+20     	; 0xe10 <Calculator_Run+0xbe>
     dfc:	0b c0       	rjmp	.+22     	; 0xe14 <Calculator_Run+0xc2>
            {
            case CALCULATOR_BUTTON_PLUS:
                operation = '+';
     dfe:	8b e2       	ldi	r24, 0x2B	; 43
     e00:	8f 83       	std	Y+7, r24	; 0x07
     e02:	08 c0       	rjmp	.+16     	; 0xe14 <Calculator_Run+0xc2>
                break;
            case CALCULATOR_BUTTON_MINUS:
                operation = '-';
     e04:	8d e2       	ldi	r24, 0x2D	; 45
     e06:	8f 83       	std	Y+7, r24	; 0x07
     e08:	05 c0       	rjmp	.+10     	; 0xe14 <Calculator_Run+0xc2>
                break;
            case CALCULATOR_BUTTON_MUL:
                operation = '*';
     e0a:	8a e2       	ldi	r24, 0x2A	; 42
     e0c:	8f 83       	std	Y+7, r24	; 0x07
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <Calculator_Run+0xc2>
                break;
            case CALCULATOR_BUTTON_DIV:
                operation = '/';
     e10:	8f e2       	ldi	r24, 0x2F	; 47
     e12:	8f 83       	std	Y+7, r24	; 0x07
                break;
            default:
                break;
            }
            LCD_DisplayCharacter(operation);
     e14:	8f 81       	ldd	r24, Y+7	; 0x07
     e16:	0e 94 25 1b 	call	0x364a	; 0x364a <LCD_DisplayCharacter>
     e1a:	ad cf       	rjmp	.-166    	; 0xd76 <Calculator_Run+0x24>
        }
        else if (num2_flag == 0) {
     e1c:	8c 81       	ldd	r24, Y+4	; 0x04
     e1e:	88 23       	and	r24, r24
     e20:	61 f4       	brne	.+24     	; 0xe3a <Calculator_Run+0xe8>
            num2_flag = 1;
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	8c 83       	std	Y+4, r24	; 0x04
            num2 = Calculator_GetRealNumber(pressed_button);
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	0e 94 6f 07 	call	0xede	; 0xede <Calculator_GetRealNumber>
     e2c:	88 87       	std	Y+8, r24	; 0x08
            LCD_DisplayNumber(num2);
     e2e:	88 85       	ldd	r24, Y+8	; 0x08
     e30:	88 2f       	mov	r24, r24
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <LCD_DisplayNumber>
     e38:	9e cf       	rjmp	.-196    	; 0xd76 <Calculator_Run+0x24>
        }
        else if (result_flag == 0) {
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	88 23       	and	r24, r24
     e3e:	09 f0       	breq	.+2      	; 0xe42 <Calculator_Run+0xf0>
     e40:	9a cf       	rjmp	.-204    	; 0xd76 <Calculator_Run+0x24>
            if (pressed_button == CALCULATOR_BUTTON_EQUAL) {
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	82 30       	cpi	r24, 0x02	; 2
     e46:	09 f0       	breq	.+2      	; 0xe4a <Calculator_Run+0xf8>
     e48:	96 cf       	rjmp	.-212    	; 0xd76 <Calculator_Run+0x24>
                result_flag = 1;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	8a 83       	std	Y+2, r24	; 0x02
                switch (operation)
     e4e:	8f 81       	ldd	r24, Y+7	; 0x07
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3b 87       	std	Y+11, r19	; 0x0b
     e56:	2a 87       	std	Y+10, r18	; 0x0a
     e58:	8a 85       	ldd	r24, Y+10	; 0x0a
     e5a:	9b 85       	ldd	r25, Y+11	; 0x0b
     e5c:	8b 32       	cpi	r24, 0x2B	; 43
     e5e:	91 05       	cpc	r25, r1
     e60:	b1 f0       	breq	.+44     	; 0xe8e <Calculator_Run+0x13c>
     e62:	2a 85       	ldd	r18, Y+10	; 0x0a
     e64:	3b 85       	ldd	r19, Y+11	; 0x0b
     e66:	2c 32       	cpi	r18, 0x2C	; 44
     e68:	31 05       	cpc	r19, r1
     e6a:	34 f4       	brge	.+12     	; 0xe78 <Calculator_Run+0x126>
     e6c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e6e:	9b 85       	ldd	r25, Y+11	; 0x0b
     e70:	8a 32       	cpi	r24, 0x2A	; 42
     e72:	91 05       	cpc	r25, r1
     e74:	b1 f0       	breq	.+44     	; 0xea2 <Calculator_Run+0x150>
     e76:	22 c0       	rjmp	.+68     	; 0xebc <Calculator_Run+0x16a>
     e78:	2a 85       	ldd	r18, Y+10	; 0x0a
     e7a:	3b 85       	ldd	r19, Y+11	; 0x0b
     e7c:	2d 32       	cpi	r18, 0x2D	; 45
     e7e:	31 05       	cpc	r19, r1
     e80:	59 f0       	breq	.+22     	; 0xe98 <Calculator_Run+0x146>
     e82:	8a 85       	ldd	r24, Y+10	; 0x0a
     e84:	9b 85       	ldd	r25, Y+11	; 0x0b
     e86:	8f 32       	cpi	r24, 0x2F	; 47
     e88:	91 05       	cpc	r25, r1
     e8a:	91 f0       	breq	.+36     	; 0xeb0 <Calculator_Run+0x15e>
     e8c:	17 c0       	rjmp	.+46     	; 0xebc <Calculator_Run+0x16a>
                {
                case '+':
                    result = num1 + num2;
     e8e:	89 85       	ldd	r24, Y+9	; 0x09
     e90:	98 85       	ldd	r25, Y+8	; 0x08
     e92:	89 0f       	add	r24, r25
     e94:	8e 83       	std	Y+6, r24	; 0x06
     e96:	12 c0       	rjmp	.+36     	; 0xebc <Calculator_Run+0x16a>
                    break;
                case '-':
                    result = num1 - num2;
     e98:	89 85       	ldd	r24, Y+9	; 0x09
     e9a:	98 85       	ldd	r25, Y+8	; 0x08
     e9c:	89 1b       	sub	r24, r25
     e9e:	8e 83       	std	Y+6, r24	; 0x06
     ea0:	0d c0       	rjmp	.+26     	; 0xebc <Calculator_Run+0x16a>
                    break;
                case '*':
                    result = num1 * num2;
     ea2:	89 85       	ldd	r24, Y+9	; 0x09
     ea4:	98 85       	ldd	r25, Y+8	; 0x08
     ea6:	89 9f       	mul	r24, r25
     ea8:	80 2d       	mov	r24, r0
     eaa:	11 24       	eor	r1, r1
     eac:	8e 83       	std	Y+6, r24	; 0x06
     eae:	06 c0       	rjmp	.+12     	; 0xebc <Calculator_Run+0x16a>
                    break;
                case '/':
                    result = num1 / num2;
     eb0:	89 85       	ldd	r24, Y+9	; 0x09
     eb2:	98 85       	ldd	r25, Y+8	; 0x08
     eb4:	69 2f       	mov	r22, r25
     eb6:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <__udivmodqi4>
     eba:	8e 83       	std	Y+6, r24	; 0x06
                    break;
                default:
                    break;
                }
                LCD_DisplayCharacter('=');
     ebc:	8d e3       	ldi	r24, 0x3D	; 61
     ebe:	0e 94 25 1b 	call	0x364a	; 0x364a <LCD_DisplayCharacter>
                LCD_SetCursorPosition(1,0);
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <LCD_SetCursorPosition>
                LCD_DisplayString((u8*)"Result = ");
     eca:	80 e6       	ldi	r24, 0x60	; 96
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 32 1b 	call	0x3664	; 0x3664 <LCD_DisplayString>
                LCD_DisplayNumber(result);
     ed2:	8e 81       	ldd	r24, Y+6	; 0x06
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <LCD_DisplayNumber>
     edc:	4c cf       	rjmp	.-360    	; 0xd76 <Calculator_Run+0x24>

00000ede <Calculator_GetRealNumber>:
            }
        }
    }
}

 u8 Calculator_GetRealNumber (Keypad_ButtonType button) {
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <Calculator_GetRealNumber+0x6>
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <Calculator_GetRealNumber+0x8>
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	8a 83       	std	Y+2, r24	; 0x02
    u8 num = 0;
     eec:	19 82       	std	Y+1, r1	; 0x01
    switch (button)
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	3c 83       	std	Y+4, r19	; 0x04
     ef6:	2b 83       	std	Y+3, r18	; 0x03
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	9c 81       	ldd	r25, Y+4	; 0x04
     efc:	88 30       	cpi	r24, 0x08	; 8
     efe:	91 05       	cpc	r25, r1
     f00:	09 f4       	brne	.+2      	; 0xf04 <Calculator_GetRealNumber+0x26>
     f02:	4b c0       	rjmp	.+150    	; 0xf9a <Calculator_GetRealNumber+0xbc>
     f04:	2b 81       	ldd	r18, Y+3	; 0x03
     f06:	3c 81       	ldd	r19, Y+4	; 0x04
     f08:	29 30       	cpi	r18, 0x09	; 9
     f0a:	31 05       	cpc	r19, r1
     f0c:	dc f4       	brge	.+54     	; 0xf44 <Calculator_GetRealNumber+0x66>
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	9c 81       	ldd	r25, Y+4	; 0x04
     f12:	84 30       	cpi	r24, 0x04	; 4
     f14:	91 05       	cpc	r25, r1
     f16:	c1 f1       	breq	.+112    	; 0xf88 <Calculator_GetRealNumber+0xaa>
     f18:	2b 81       	ldd	r18, Y+3	; 0x03
     f1a:	3c 81       	ldd	r19, Y+4	; 0x04
     f1c:	25 30       	cpi	r18, 0x05	; 5
     f1e:	31 05       	cpc	r19, r1
     f20:	34 f4       	brge	.+12     	; 0xf2e <Calculator_GetRealNumber+0x50>
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	9c 81       	ldd	r25, Y+4	; 0x04
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	91 05       	cpc	r25, r1
     f2a:	61 f1       	breq	.+88     	; 0xf84 <Calculator_GetRealNumber+0xa6>
     f2c:	47 c0       	rjmp	.+142    	; 0xfbc <Calculator_GetRealNumber+0xde>
     f2e:	2b 81       	ldd	r18, Y+3	; 0x03
     f30:	3c 81       	ldd	r19, Y+4	; 0x04
     f32:	25 30       	cpi	r18, 0x05	; 5
     f34:	31 05       	cpc	r19, r1
     f36:	59 f1       	breq	.+86     	; 0xf8e <Calculator_GetRealNumber+0xb0>
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	9c 81       	ldd	r25, Y+4	; 0x04
     f3c:	86 30       	cpi	r24, 0x06	; 6
     f3e:	91 05       	cpc	r25, r1
     f40:	49 f1       	breq	.+82     	; 0xf94 <Calculator_GetRealNumber+0xb6>
     f42:	3c c0       	rjmp	.+120    	; 0xfbc <Calculator_GetRealNumber+0xde>
     f44:	2b 81       	ldd	r18, Y+3	; 0x03
     f46:	3c 81       	ldd	r19, Y+4	; 0x04
     f48:	2c 30       	cpi	r18, 0x0C	; 12
     f4a:	31 05       	cpc	r19, r1
     f4c:	79 f1       	breq	.+94     	; 0xfac <Calculator_GetRealNumber+0xce>
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	9c 81       	ldd	r25, Y+4	; 0x04
     f52:	8d 30       	cpi	r24, 0x0D	; 13
     f54:	91 05       	cpc	r25, r1
     f56:	5c f4       	brge	.+22     	; 0xf6e <Calculator_GetRealNumber+0x90>
     f58:	2b 81       	ldd	r18, Y+3	; 0x03
     f5a:	3c 81       	ldd	r19, Y+4	; 0x04
     f5c:	29 30       	cpi	r18, 0x09	; 9
     f5e:	31 05       	cpc	r19, r1
     f60:	f9 f0       	breq	.+62     	; 0xfa0 <Calculator_GetRealNumber+0xc2>
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	9c 81       	ldd	r25, Y+4	; 0x04
     f66:	8a 30       	cpi	r24, 0x0A	; 10
     f68:	91 05       	cpc	r25, r1
     f6a:	e9 f0       	breq	.+58     	; 0xfa6 <Calculator_GetRealNumber+0xc8>
     f6c:	27 c0       	rjmp	.+78     	; 0xfbc <Calculator_GetRealNumber+0xde>
     f6e:	2b 81       	ldd	r18, Y+3	; 0x03
     f70:	3c 81       	ldd	r19, Y+4	; 0x04
     f72:	2d 30       	cpi	r18, 0x0D	; 13
     f74:	31 05       	cpc	r19, r1
     f76:	e9 f0       	breq	.+58     	; 0xfb2 <Calculator_GetRealNumber+0xd4>
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	9c 81       	ldd	r25, Y+4	; 0x04
     f7c:	8e 30       	cpi	r24, 0x0E	; 14
     f7e:	91 05       	cpc	r25, r1
     f80:	d9 f0       	breq	.+54     	; 0xfb8 <Calculator_GetRealNumber+0xda>
     f82:	1c c0       	rjmp	.+56     	; 0xfbc <Calculator_GetRealNumber+0xde>
    {
    case CALCULATOR_BUTTON_NUM0:
        num = 0;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	1a c0       	rjmp	.+52     	; 0xfbc <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM1:
        num = 1;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	89 83       	std	Y+1, r24	; 0x01
     f8c:	17 c0       	rjmp	.+46     	; 0xfbc <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM2:
        num = 2;
     f8e:	82 e0       	ldi	r24, 0x02	; 2
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	14 c0       	rjmp	.+40     	; 0xfbc <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM3:
        num = 3;
     f94:	83 e0       	ldi	r24, 0x03	; 3
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	11 c0       	rjmp	.+34     	; 0xfbc <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM4:
        num = 4;
     f9a:	84 e0       	ldi	r24, 0x04	; 4
     f9c:	89 83       	std	Y+1, r24	; 0x01
     f9e:	0e c0       	rjmp	.+28     	; 0xfbc <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM5:
        num = 5;
     fa0:	85 e0       	ldi	r24, 0x05	; 5
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	0b c0       	rjmp	.+22     	; 0xfbc <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM6:
        num = 6;
     fa6:	86 e0       	ldi	r24, 0x06	; 6
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	08 c0       	rjmp	.+16     	; 0xfbc <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM7:
        num = 7;
     fac:	87 e0       	ldi	r24, 0x07	; 7
     fae:	89 83       	std	Y+1, r24	; 0x01
     fb0:	05 c0       	rjmp	.+10     	; 0xfbc <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM8:
        num = 8;
     fb2:	88 e0       	ldi	r24, 0x08	; 8
     fb4:	89 83       	std	Y+1, r24	; 0x01
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM9:
        num = 9;
     fb8:	89 e0       	ldi	r24, 0x09	; 9
     fba:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return num;
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
}
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	08 95       	ret

00000fcc <DIO_SetPinMode>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"

void DIO_SetPinMode(DIO_PortType port, DIO_PinType pin, DIO_ModeType mode) {
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	29 97       	sbiw	r28, 0x09	; 9
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	6a 83       	std	Y+2, r22	; 0x02
     fe4:	4b 83       	std	Y+3, r20	; 0x03
    if (mode == DIO_INPUT_FLOATING) 
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	88 23       	and	r24, r24
     fea:	09 f0       	breq	.+2      	; 0xfee <DIO_SetPinMode+0x22>
     fec:	c2 c0       	rjmp	.+388    	; 0x1172 <DIO_SetPinMode+0x1a6>
    {
        switch (port)
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	39 87       	std	Y+9, r19	; 0x09
     ff6:	28 87       	std	Y+8, r18	; 0x08
     ff8:	88 85       	ldd	r24, Y+8	; 0x08
     ffa:	99 85       	ldd	r25, Y+9	; 0x09
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	91 05       	cpc	r25, r1
    1000:	09 f4       	brne	.+2      	; 0x1004 <DIO_SetPinMode+0x38>
    1002:	3f c0       	rjmp	.+126    	; 0x1082 <DIO_SetPinMode+0xb6>
    1004:	28 85       	ldd	r18, Y+8	; 0x08
    1006:	39 85       	ldd	r19, Y+9	; 0x09
    1008:	22 30       	cpi	r18, 0x02	; 2
    100a:	31 05       	cpc	r19, r1
    100c:	2c f4       	brge	.+10     	; 0x1018 <DIO_SetPinMode+0x4c>
    100e:	88 85       	ldd	r24, Y+8	; 0x08
    1010:	99 85       	ldd	r25, Y+9	; 0x09
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	71 f0       	breq	.+28     	; 0x1032 <DIO_SetPinMode+0x66>
    1016:	e1 c1       	rjmp	.+962    	; 0x13da <DIO_SetPinMode+0x40e>
    1018:	28 85       	ldd	r18, Y+8	; 0x08
    101a:	39 85       	ldd	r19, Y+9	; 0x09
    101c:	22 30       	cpi	r18, 0x02	; 2
    101e:	31 05       	cpc	r19, r1
    1020:	09 f4       	brne	.+2      	; 0x1024 <DIO_SetPinMode+0x58>
    1022:	57 c0       	rjmp	.+174    	; 0x10d2 <DIO_SetPinMode+0x106>
    1024:	88 85       	ldd	r24, Y+8	; 0x08
    1026:	99 85       	ldd	r25, Y+9	; 0x09
    1028:	83 30       	cpi	r24, 0x03	; 3
    102a:	91 05       	cpc	r25, r1
    102c:	09 f4       	brne	.+2      	; 0x1030 <DIO_SetPinMode+0x64>
    102e:	79 c0       	rjmp	.+242    	; 0x1122 <DIO_SetPinMode+0x156>
    1030:	d4 c1       	rjmp	.+936    	; 0x13da <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
    1032:	aa e3       	ldi	r26, 0x3A	; 58
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	ea e3       	ldi	r30, 0x3A	; 58
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 c0       	rjmp	.+4      	; 0x104e <DIO_SetPinMode+0x82>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	2a 95       	dec	r18
    1050:	e2 f7       	brpl	.-8      	; 0x104a <DIO_SetPinMode+0x7e>
    1052:	80 95       	com	r24
    1054:	84 23       	and	r24, r20
    1056:	8c 93       	st	X, r24
            CLR_BIT(PORTA, pin);
    1058:	ab e3       	ldi	r26, 0x3B	; 59
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	eb e3       	ldi	r30, 0x3B	; 59
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_SetPinMode+0xaa>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_SetPinMode+0xa6>
    107a:	80 95       	com	r24
    107c:	84 23       	and	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	ac c1       	rjmp	.+856    	; 0x13da <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
    1082:	a7 e3       	ldi	r26, 0x37	; 55
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 c0       	rjmp	.+4      	; 0x109e <DIO_SetPinMode+0xd2>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	2a 95       	dec	r18
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <DIO_SetPinMode+0xce>
    10a2:	80 95       	com	r24
    10a4:	84 23       	and	r24, r20
    10a6:	8c 93       	st	X, r24
            CLR_BIT(PORTB, pin);
    10a8:	a8 e3       	ldi	r26, 0x38	; 56
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e8 e3       	ldi	r30, 0x38	; 56
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <DIO_SetPinMode+0xfa>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <DIO_SetPinMode+0xf6>
    10ca:	80 95       	com	r24
    10cc:	84 23       	and	r24, r20
    10ce:	8c 93       	st	X, r24
    10d0:	84 c1       	rjmp	.+776    	; 0x13da <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    10d2:	a4 e3       	ldi	r26, 0x34	; 52
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e4 e3       	ldi	r30, 0x34	; 52
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <DIO_SetPinMode+0x122>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	2a 95       	dec	r18
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <DIO_SetPinMode+0x11e>
    10f2:	80 95       	com	r24
    10f4:	84 23       	and	r24, r20
    10f6:	8c 93       	st	X, r24
            CLR_BIT(PORTC, pin);
    10f8:	a5 e3       	ldi	r26, 0x35	; 53
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e5 e3       	ldi	r30, 0x35	; 53
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	48 2f       	mov	r20, r24
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 2e       	mov	r0, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <DIO_SetPinMode+0x14a>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	0a 94       	dec	r0
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <DIO_SetPinMode+0x146>
    111a:	80 95       	com	r24
    111c:	84 23       	and	r24, r20
    111e:	8c 93       	st	X, r24
    1120:	5c c1       	rjmp	.+696    	; 0x13da <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    1122:	a1 e3       	ldi	r26, 0x31	; 49
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e1 e3       	ldi	r30, 0x31	; 49
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_SetPinMode+0x172>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	2a 95       	dec	r18
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_SetPinMode+0x16e>
    1142:	80 95       	com	r24
    1144:	84 23       	and	r24, r20
    1146:	8c 93       	st	X, r24
            CLR_BIT(PORTD, pin);
    1148:	a2 e3       	ldi	r26, 0x32	; 50
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e2 e3       	ldi	r30, 0x32	; 50
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_SetPinMode+0x19a>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_SetPinMode+0x196>
    116a:	80 95       	com	r24
    116c:	84 23       	and	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	34 c1       	rjmp	.+616    	; 0x13da <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP) 
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	09 f0       	breq	.+2      	; 0x117a <DIO_SetPinMode+0x1ae>
    1178:	be c0       	rjmp	.+380    	; 0x12f6 <DIO_SetPinMode+0x32a>
    {
        switch (port)
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	3f 83       	std	Y+7, r19	; 0x07
    1182:	2e 83       	std	Y+6, r18	; 0x06
    1184:	8e 81       	ldd	r24, Y+6	; 0x06
    1186:	9f 81       	ldd	r25, Y+7	; 0x07
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	91 05       	cpc	r25, r1
    118c:	09 f4       	brne	.+2      	; 0x1190 <DIO_SetPinMode+0x1c4>
    118e:	3e c0       	rjmp	.+124    	; 0x120c <DIO_SetPinMode+0x240>
    1190:	2e 81       	ldd	r18, Y+6	; 0x06
    1192:	3f 81       	ldd	r19, Y+7	; 0x07
    1194:	22 30       	cpi	r18, 0x02	; 2
    1196:	31 05       	cpc	r19, r1
    1198:	2c f4       	brge	.+10     	; 0x11a4 <DIO_SetPinMode+0x1d8>
    119a:	8e 81       	ldd	r24, Y+6	; 0x06
    119c:	9f 81       	ldd	r25, Y+7	; 0x07
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	71 f0       	breq	.+28     	; 0x11be <DIO_SetPinMode+0x1f2>
    11a2:	1b c1       	rjmp	.+566    	; 0x13da <DIO_SetPinMode+0x40e>
    11a4:	2e 81       	ldd	r18, Y+6	; 0x06
    11a6:	3f 81       	ldd	r19, Y+7	; 0x07
    11a8:	22 30       	cpi	r18, 0x02	; 2
    11aa:	31 05       	cpc	r19, r1
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <DIO_SetPinMode+0x1e4>
    11ae:	55 c0       	rjmp	.+170    	; 0x125a <DIO_SetPinMode+0x28e>
    11b0:	8e 81       	ldd	r24, Y+6	; 0x06
    11b2:	9f 81       	ldd	r25, Y+7	; 0x07
    11b4:	83 30       	cpi	r24, 0x03	; 3
    11b6:	91 05       	cpc	r25, r1
    11b8:	09 f4       	brne	.+2      	; 0x11bc <DIO_SetPinMode+0x1f0>
    11ba:	76 c0       	rjmp	.+236    	; 0x12a8 <DIO_SetPinMode+0x2dc>
    11bc:	0e c1       	rjmp	.+540    	; 0x13da <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
    11be:	aa e3       	ldi	r26, 0x3A	; 58
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	ea e3       	ldi	r30, 0x3A	; 58
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <DIO_SetPinMode+0x20e>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	2a 95       	dec	r18
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <DIO_SetPinMode+0x20a>
    11de:	80 95       	com	r24
    11e0:	84 23       	and	r24, r20
    11e2:	8c 93       	st	X, r24
            SET_BIT(PORTA, pin);
    11e4:	ab e3       	ldi	r26, 0x3B	; 59
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	eb e3       	ldi	r30, 0x3B	; 59
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <DIO_SetPinMode+0x236>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <DIO_SetPinMode+0x232>
    1206:	84 2b       	or	r24, r20
    1208:	8c 93       	st	X, r24
    120a:	e7 c0       	rjmp	.+462    	; 0x13da <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
    120c:	a7 e3       	ldi	r26, 0x37	; 55
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e7 e3       	ldi	r30, 0x37	; 55
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_SetPinMode+0x25c>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	2a 95       	dec	r18
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_SetPinMode+0x258>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
            SET_BIT(PORTB, pin);
    1232:	a8 e3       	ldi	r26, 0x38	; 56
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e8 e3       	ldi	r30, 0x38	; 56
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_SetPinMode+0x284>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <DIO_SetPinMode+0x280>
    1254:	84 2b       	or	r24, r20
    1256:	8c 93       	st	X, r24
    1258:	c0 c0       	rjmp	.+384    	; 0x13da <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    125a:	a4 e3       	ldi	r26, 0x34	; 52
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e4 e3       	ldi	r30, 0x34	; 52
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <DIO_SetPinMode+0x2aa>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	2a 95       	dec	r18
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <DIO_SetPinMode+0x2a6>
    127a:	80 95       	com	r24
    127c:	84 23       	and	r24, r20
    127e:	8c 93       	st	X, r24
            SET_BIT(PORTC, pin);
    1280:	a5 e3       	ldi	r26, 0x35	; 53
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e5 e3       	ldi	r30, 0x35	; 53
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <DIO_SetPinMode+0x2d2>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <DIO_SetPinMode+0x2ce>
    12a2:	84 2b       	or	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	99 c0       	rjmp	.+306    	; 0x13da <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    12a8:	a1 e3       	ldi	r26, 0x31	; 49
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e1 e3       	ldi	r30, 0x31	; 49
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	48 2f       	mov	r20, r24
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <DIO_SetPinMode+0x2f8>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	2a 95       	dec	r18
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <DIO_SetPinMode+0x2f4>
    12c8:	80 95       	com	r24
    12ca:	84 23       	and	r24, r20
    12cc:	8c 93       	st	X, r24
            SET_BIT(PORTD, pin);
    12ce:	a2 e3       	ldi	r26, 0x32	; 50
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e2 e3       	ldi	r30, 0x32	; 50
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	48 2f       	mov	r20, r24
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <DIO_SetPinMode+0x320>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <DIO_SetPinMode+0x31c>
    12f0:	84 2b       	or	r24, r20
    12f2:	8c 93       	st	X, r24
    12f4:	72 c0       	rjmp	.+228    	; 0x13da <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT) 
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	82 30       	cpi	r24, 0x02	; 2
    12fa:	09 f0       	breq	.+2      	; 0x12fe <DIO_SetPinMode+0x332>
    12fc:	6e c0       	rjmp	.+220    	; 0x13da <DIO_SetPinMode+0x40e>
    {
        switch (port)
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	3d 83       	std	Y+5, r19	; 0x05
    1306:	2c 83       	std	Y+4, r18	; 0x04
    1308:	8c 81       	ldd	r24, Y+4	; 0x04
    130a:	9d 81       	ldd	r25, Y+5	; 0x05
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	91 05       	cpc	r25, r1
    1310:	49 f1       	breq	.+82     	; 0x1364 <DIO_SetPinMode+0x398>
    1312:	2c 81       	ldd	r18, Y+4	; 0x04
    1314:	3d 81       	ldd	r19, Y+5	; 0x05
    1316:	22 30       	cpi	r18, 0x02	; 2
    1318:	31 05       	cpc	r19, r1
    131a:	2c f4       	brge	.+10     	; 0x1326 <DIO_SetPinMode+0x35a>
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	9d 81       	ldd	r25, Y+5	; 0x05
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	61 f0       	breq	.+24     	; 0x133c <DIO_SetPinMode+0x370>
    1324:	5a c0       	rjmp	.+180    	; 0x13da <DIO_SetPinMode+0x40e>
    1326:	2c 81       	ldd	r18, Y+4	; 0x04
    1328:	3d 81       	ldd	r19, Y+5	; 0x05
    132a:	22 30       	cpi	r18, 0x02	; 2
    132c:	31 05       	cpc	r19, r1
    132e:	71 f1       	breq	.+92     	; 0x138c <DIO_SetPinMode+0x3c0>
    1330:	8c 81       	ldd	r24, Y+4	; 0x04
    1332:	9d 81       	ldd	r25, Y+5	; 0x05
    1334:	83 30       	cpi	r24, 0x03	; 3
    1336:	91 05       	cpc	r25, r1
    1338:	e9 f1       	breq	.+122    	; 0x13b4 <DIO_SetPinMode+0x3e8>
    133a:	4f c0       	rjmp	.+158    	; 0x13da <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            SET_BIT(DDRA, pin);
    133c:	aa e3       	ldi	r26, 0x3A	; 58
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	ea e3       	ldi	r30, 0x3A	; 58
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	48 2f       	mov	r20, r24
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	02 2e       	mov	r0, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <DIO_SetPinMode+0x38e>
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	0a 94       	dec	r0
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <DIO_SetPinMode+0x38a>
    135e:	84 2b       	or	r24, r20
    1360:	8c 93       	st	X, r24
    1362:	3b c0       	rjmp	.+118    	; 0x13da <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            SET_BIT(DDRB, pin);
    1364:	a7 e3       	ldi	r26, 0x37	; 55
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e7 e3       	ldi	r30, 0x37	; 55
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 2e       	mov	r0, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <DIO_SetPinMode+0x3b6>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <DIO_SetPinMode+0x3b2>
    1386:	84 2b       	or	r24, r20
    1388:	8c 93       	st	X, r24
    138a:	27 c0       	rjmp	.+78     	; 0x13da <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            SET_BIT(DDRC, pin);
    138c:	a4 e3       	ldi	r26, 0x34	; 52
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e4 e3       	ldi	r30, 0x34	; 52
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	48 2f       	mov	r20, r24
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 2e       	mov	r0, r18
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <DIO_SetPinMode+0x3de>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	0a 94       	dec	r0
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <DIO_SetPinMode+0x3da>
    13ae:	84 2b       	or	r24, r20
    13b0:	8c 93       	st	X, r24
    13b2:	13 c0       	rjmp	.+38     	; 0x13da <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            SET_BIT(DDRD, pin);
    13b4:	a1 e3       	ldi	r26, 0x31	; 49
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e1 e3       	ldi	r30, 0x31	; 49
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	48 2f       	mov	r20, r24
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 2e       	mov	r0, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <DIO_SetPinMode+0x406>
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	0a 94       	dec	r0
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <DIO_SetPinMode+0x402>
    13d6:	84 2b       	or	r24, r20
    13d8:	8c 93       	st	X, r24
        default:
            break;
        }

    }
}
    13da:	29 96       	adiw	r28, 0x09	; 9
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <DIO_SetPortMode>:

void DIO_SetPortMode(DIO_PortType port, DIO_ModeType mode) {
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	2a 97       	sbiw	r28, 0x0a	; 10
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	89 83       	std	Y+1, r24	; 0x01
    1402:	6a 83       	std	Y+2, r22	; 0x02
    if (mode == DIO_INPUT_FLOATING) 
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	88 23       	and	r24, r24
    1408:	d9 f5       	brne	.+118    	; 0x1480 <DIO_SetPortMode+0x94>
    {
        switch (port)
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	3a 87       	std	Y+10, r19	; 0x0a
    1412:	29 87       	std	Y+9, r18	; 0x09
    1414:	89 85       	ldd	r24, Y+9	; 0x09
    1416:	9a 85       	ldd	r25, Y+10	; 0x0a
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	91 05       	cpc	r25, r1
    141c:	e1 f0       	breq	.+56     	; 0x1456 <DIO_SetPortMode+0x6a>
    141e:	29 85       	ldd	r18, Y+9	; 0x09
    1420:	3a 85       	ldd	r19, Y+10	; 0x0a
    1422:	22 30       	cpi	r18, 0x02	; 2
    1424:	31 05       	cpc	r19, r1
    1426:	2c f4       	brge	.+10     	; 0x1432 <DIO_SetPortMode+0x46>
    1428:	89 85       	ldd	r24, Y+9	; 0x09
    142a:	9a 85       	ldd	r25, Y+10	; 0x0a
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	61 f0       	breq	.+24     	; 0x1448 <DIO_SetPortMode+0x5c>
    1430:	d2 c0       	rjmp	.+420    	; 0x15d6 <DIO_SetPortMode+0x1ea>
    1432:	29 85       	ldd	r18, Y+9	; 0x09
    1434:	3a 85       	ldd	r19, Y+10	; 0x0a
    1436:	22 30       	cpi	r18, 0x02	; 2
    1438:	31 05       	cpc	r19, r1
    143a:	a1 f0       	breq	.+40     	; 0x1464 <DIO_SetPortMode+0x78>
    143c:	89 85       	ldd	r24, Y+9	; 0x09
    143e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1440:	83 30       	cpi	r24, 0x03	; 3
    1442:	91 05       	cpc	r25, r1
    1444:	b1 f0       	breq	.+44     	; 0x1472 <DIO_SetPortMode+0x86>
    1446:	c7 c0       	rjmp	.+398    	; 0x15d6 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    1448:	ea e3       	ldi	r30, 0x3A	; 58
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	10 82       	st	Z, r1
            PORTA = 0x00;
    144e:	eb e3       	ldi	r30, 0x3B	; 59
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	10 82       	st	Z, r1
    1454:	c0 c0       	rjmp	.+384    	; 0x15d6 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    1456:	e7 e3       	ldi	r30, 0x37	; 55
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	10 82       	st	Z, r1
            PORTB = 0x00;
    145c:	e8 e3       	ldi	r30, 0x38	; 56
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	10 82       	st	Z, r1
    1462:	b9 c0       	rjmp	.+370    	; 0x15d6 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    1464:	e4 e3       	ldi	r30, 0x34	; 52
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	10 82       	st	Z, r1
            PORTC = 0x00;
    146a:	e5 e3       	ldi	r30, 0x35	; 53
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	10 82       	st	Z, r1
    1470:	b2 c0       	rjmp	.+356    	; 0x15d6 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    1472:	e1 e3       	ldi	r30, 0x31	; 49
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	10 82       	st	Z, r1
            PORTD = 0x00;
    1478:	e2 e3       	ldi	r30, 0x32	; 50
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	10 82       	st	Z, r1
    147e:	ab c0       	rjmp	.+342    	; 0x15d6 <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP) 
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	09 f0       	breq	.+2      	; 0x1488 <DIO_SetPortMode+0x9c>
    1486:	3f c0       	rjmp	.+126    	; 0x1506 <DIO_SetPortMode+0x11a>
    {
        switch (port)
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	38 87       	std	Y+8, r19	; 0x08
    1490:	2f 83       	std	Y+7, r18	; 0x07
    1492:	8f 81       	ldd	r24, Y+7	; 0x07
    1494:	98 85       	ldd	r25, Y+8	; 0x08
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	91 05       	cpc	r25, r1
    149a:	e9 f0       	breq	.+58     	; 0x14d6 <DIO_SetPortMode+0xea>
    149c:	2f 81       	ldd	r18, Y+7	; 0x07
    149e:	38 85       	ldd	r19, Y+8	; 0x08
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	2c f4       	brge	.+10     	; 0x14b0 <DIO_SetPortMode+0xc4>
    14a6:	8f 81       	ldd	r24, Y+7	; 0x07
    14a8:	98 85       	ldd	r25, Y+8	; 0x08
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	61 f0       	breq	.+24     	; 0x14c6 <DIO_SetPortMode+0xda>
    14ae:	93 c0       	rjmp	.+294    	; 0x15d6 <DIO_SetPortMode+0x1ea>
    14b0:	2f 81       	ldd	r18, Y+7	; 0x07
    14b2:	38 85       	ldd	r19, Y+8	; 0x08
    14b4:	22 30       	cpi	r18, 0x02	; 2
    14b6:	31 05       	cpc	r19, r1
    14b8:	b1 f0       	breq	.+44     	; 0x14e6 <DIO_SetPortMode+0xfa>
    14ba:	8f 81       	ldd	r24, Y+7	; 0x07
    14bc:	98 85       	ldd	r25, Y+8	; 0x08
    14be:	83 30       	cpi	r24, 0x03	; 3
    14c0:	91 05       	cpc	r25, r1
    14c2:	c9 f0       	breq	.+50     	; 0x14f6 <DIO_SetPortMode+0x10a>
    14c4:	88 c0       	rjmp	.+272    	; 0x15d6 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    14c6:	ea e3       	ldi	r30, 0x3A	; 58
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	10 82       	st	Z, r1
            PORTA = 0xFF;
    14cc:	eb e3       	ldi	r30, 0x3B	; 59
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	8f ef       	ldi	r24, 0xFF	; 255
    14d2:	80 83       	st	Z, r24
    14d4:	80 c0       	rjmp	.+256    	; 0x15d6 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    14d6:	e7 e3       	ldi	r30, 0x37	; 55
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	10 82       	st	Z, r1
            PORTB = 0xFF;
    14dc:	e8 e3       	ldi	r30, 0x38	; 56
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	8f ef       	ldi	r24, 0xFF	; 255
    14e2:	80 83       	st	Z, r24
    14e4:	78 c0       	rjmp	.+240    	; 0x15d6 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    14e6:	e4 e3       	ldi	r30, 0x34	; 52
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	10 82       	st	Z, r1
            PORTC = 0xFF;
    14ec:	e5 e3       	ldi	r30, 0x35	; 53
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	8f ef       	ldi	r24, 0xFF	; 255
    14f2:	80 83       	st	Z, r24
    14f4:	70 c0       	rjmp	.+224    	; 0x15d6 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    14f6:	e1 e3       	ldi	r30, 0x31	; 49
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	10 82       	st	Z, r1
            PORTD = 0xFF;
    14fc:	e2 e3       	ldi	r30, 0x32	; 50
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	8f ef       	ldi	r24, 0xFF	; 255
    1502:	80 83       	st	Z, r24
    1504:	68 c0       	rjmp	.+208    	; 0x15d6 <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT) 
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	82 30       	cpi	r24, 0x02	; 2
    150a:	99 f5       	brne	.+102    	; 0x1572 <DIO_SetPortMode+0x186>
    {
        switch (port)
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	3e 83       	std	Y+6, r19	; 0x06
    1514:	2d 83       	std	Y+5, r18	; 0x05
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	9e 81       	ldd	r25, Y+6	; 0x06
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	91 05       	cpc	r25, r1
    151e:	d1 f0       	breq	.+52     	; 0x1554 <DIO_SetPortMode+0x168>
    1520:	2d 81       	ldd	r18, Y+5	; 0x05
    1522:	3e 81       	ldd	r19, Y+6	; 0x06
    1524:	22 30       	cpi	r18, 0x02	; 2
    1526:	31 05       	cpc	r19, r1
    1528:	2c f4       	brge	.+10     	; 0x1534 <DIO_SetPortMode+0x148>
    152a:	8d 81       	ldd	r24, Y+5	; 0x05
    152c:	9e 81       	ldd	r25, Y+6	; 0x06
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	61 f0       	breq	.+24     	; 0x154a <DIO_SetPortMode+0x15e>
    1532:	51 c0       	rjmp	.+162    	; 0x15d6 <DIO_SetPortMode+0x1ea>
    1534:	2d 81       	ldd	r18, Y+5	; 0x05
    1536:	3e 81       	ldd	r19, Y+6	; 0x06
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	31 05       	cpc	r19, r1
    153c:	81 f0       	breq	.+32     	; 0x155e <DIO_SetPortMode+0x172>
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	9e 81       	ldd	r25, Y+6	; 0x06
    1542:	83 30       	cpi	r24, 0x03	; 3
    1544:	91 05       	cpc	r25, r1
    1546:	81 f0       	breq	.+32     	; 0x1568 <DIO_SetPortMode+0x17c>
    1548:	46 c0       	rjmp	.+140    	; 0x15d6 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0xFF;
    154a:	ea e3       	ldi	r30, 0x3A	; 58
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	8f ef       	ldi	r24, 0xFF	; 255
    1550:	80 83       	st	Z, r24
    1552:	41 c0       	rjmp	.+130    	; 0x15d6 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0xFF;
    1554:	e7 e3       	ldi	r30, 0x37	; 55
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	8f ef       	ldi	r24, 0xFF	; 255
    155a:	80 83       	st	Z, r24
    155c:	3c c0       	rjmp	.+120    	; 0x15d6 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0xFF;
    155e:	e4 e3       	ldi	r30, 0x34	; 52
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	8f ef       	ldi	r24, 0xFF	; 255
    1564:	80 83       	st	Z, r24
    1566:	37 c0       	rjmp	.+110    	; 0x15d6 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0xFF;
    1568:	e1 e3       	ldi	r30, 0x31	; 49
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	8f ef       	ldi	r24, 0xFF	; 255
    156e:	80 83       	st	Z, r24
    1570:	32 c0       	rjmp	.+100    	; 0x15d6 <DIO_SetPortMode+0x1ea>
        }

    }
    else
    {
        switch (port)
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	3c 83       	std	Y+4, r19	; 0x04
    157a:	2b 83       	std	Y+3, r18	; 0x03
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	9c 81       	ldd	r25, Y+4	; 0x04
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	91 05       	cpc	r25, r1
    1584:	d1 f0       	breq	.+52     	; 0x15ba <DIO_SetPortMode+0x1ce>
    1586:	2b 81       	ldd	r18, Y+3	; 0x03
    1588:	3c 81       	ldd	r19, Y+4	; 0x04
    158a:	22 30       	cpi	r18, 0x02	; 2
    158c:	31 05       	cpc	r19, r1
    158e:	2c f4       	brge	.+10     	; 0x159a <DIO_SetPortMode+0x1ae>
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	61 f0       	breq	.+24     	; 0x15b0 <DIO_SetPortMode+0x1c4>
    1598:	1e c0       	rjmp	.+60     	; 0x15d6 <DIO_SetPortMode+0x1ea>
    159a:	2b 81       	ldd	r18, Y+3	; 0x03
    159c:	3c 81       	ldd	r19, Y+4	; 0x04
    159e:	22 30       	cpi	r18, 0x02	; 2
    15a0:	31 05       	cpc	r19, r1
    15a2:	81 f0       	breq	.+32     	; 0x15c4 <DIO_SetPortMode+0x1d8>
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	83 30       	cpi	r24, 0x03	; 3
    15aa:	91 05       	cpc	r25, r1
    15ac:	81 f0       	breq	.+32     	; 0x15ce <DIO_SetPortMode+0x1e2>
    15ae:	13 c0       	rjmp	.+38     	; 0x15d6 <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = mode;
    15b0:	ea e3       	ldi	r30, 0x3A	; 58
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	80 83       	st	Z, r24
    15b8:	0e c0       	rjmp	.+28     	; 0x15d6 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = mode;
    15ba:	e7 e3       	ldi	r30, 0x37	; 55
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	80 83       	st	Z, r24
    15c2:	09 c0       	rjmp	.+18     	; 0x15d6 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = mode;
    15c4:	e4 e3       	ldi	r30, 0x34	; 52
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	80 83       	st	Z, r24
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = mode;
    15ce:	e1 e3       	ldi	r30, 0x31	; 49
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    15d6:	2a 96       	adiw	r28, 0x0a	; 10
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <DIO_SetPinLevel>:


void DIO_SetPinLevel(DIO_PortType port, DIO_PinType pin, DIO_LevelType level) {
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	27 97       	sbiw	r28, 0x07	; 7
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	6a 83       	std	Y+2, r22	; 0x02
    1600:	4b 83       	std	Y+3, r20	; 0x03
    if (level == DIO_HIGH) 
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	09 f0       	breq	.+2      	; 0x160a <DIO_SetPinLevel+0x22>
    1608:	6f c0       	rjmp	.+222    	; 0x16e8 <DIO_SetPinLevel+0x100>
    {
        switch (port)
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	3f 83       	std	Y+7, r19	; 0x07
    1612:	2e 83       	std	Y+6, r18	; 0x06
    1614:	8e 81       	ldd	r24, Y+6	; 0x06
    1616:	9f 81       	ldd	r25, Y+7	; 0x07
    1618:	81 30       	cpi	r24, 0x01	; 1
    161a:	91 05       	cpc	r25, r1
    161c:	49 f1       	breq	.+82     	; 0x1670 <DIO_SetPinLevel+0x88>
    161e:	2e 81       	ldd	r18, Y+6	; 0x06
    1620:	3f 81       	ldd	r19, Y+7	; 0x07
    1622:	22 30       	cpi	r18, 0x02	; 2
    1624:	31 05       	cpc	r19, r1
    1626:	2c f4       	brge	.+10     	; 0x1632 <DIO_SetPinLevel+0x4a>
    1628:	8e 81       	ldd	r24, Y+6	; 0x06
    162a:	9f 81       	ldd	r25, Y+7	; 0x07
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	61 f0       	breq	.+24     	; 0x1648 <DIO_SetPinLevel+0x60>
    1630:	d2 c0       	rjmp	.+420    	; 0x17d6 <DIO_SetPinLevel+0x1ee>
    1632:	2e 81       	ldd	r18, Y+6	; 0x06
    1634:	3f 81       	ldd	r19, Y+7	; 0x07
    1636:	22 30       	cpi	r18, 0x02	; 2
    1638:	31 05       	cpc	r19, r1
    163a:	71 f1       	breq	.+92     	; 0x1698 <DIO_SetPinLevel+0xb0>
    163c:	8e 81       	ldd	r24, Y+6	; 0x06
    163e:	9f 81       	ldd	r25, Y+7	; 0x07
    1640:	83 30       	cpi	r24, 0x03	; 3
    1642:	91 05       	cpc	r25, r1
    1644:	e9 f1       	breq	.+122    	; 0x16c0 <DIO_SetPinLevel+0xd8>
    1646:	c7 c0       	rjmp	.+398    	; 0x17d6 <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            SET_BIT(PORTA, pin);
    1648:	ab e3       	ldi	r26, 0x3B	; 59
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	eb e3       	ldi	r30, 0x3B	; 59
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	48 2f       	mov	r20, r24
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 2e       	mov	r0, r18
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <DIO_SetPinLevel+0x7e>
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	0a 94       	dec	r0
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <DIO_SetPinLevel+0x7a>
    166a:	84 2b       	or	r24, r20
    166c:	8c 93       	st	X, r24
    166e:	b3 c0       	rjmp	.+358    	; 0x17d6 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            SET_BIT(PORTB, pin);
    1670:	a8 e3       	ldi	r26, 0x38	; 56
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e8 e3       	ldi	r30, 0x38	; 56
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	48 2f       	mov	r20, r24
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	02 2e       	mov	r0, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <DIO_SetPinLevel+0xa6>
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	0a 94       	dec	r0
    1690:	e2 f7       	brpl	.-8      	; 0x168a <DIO_SetPinLevel+0xa2>
    1692:	84 2b       	or	r24, r20
    1694:	8c 93       	st	X, r24
    1696:	9f c0       	rjmp	.+318    	; 0x17d6 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            SET_BIT(PORTC, pin);
    1698:	a5 e3       	ldi	r26, 0x35	; 53
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e5 e3       	ldi	r30, 0x35	; 53
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	48 2f       	mov	r20, r24
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 2e       	mov	r0, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <DIO_SetPinLevel+0xce>
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	0a 94       	dec	r0
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <DIO_SetPinLevel+0xca>
    16ba:	84 2b       	or	r24, r20
    16bc:	8c 93       	st	X, r24
    16be:	8b c0       	rjmp	.+278    	; 0x17d6 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            SET_BIT(PORTD, pin);
    16c0:	a2 e3       	ldi	r26, 0x32	; 50
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e2 e3       	ldi	r30, 0x32	; 50
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	48 2f       	mov	r20, r24
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	02 2e       	mov	r0, r18
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <DIO_SetPinLevel+0xf6>
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	0a 94       	dec	r0
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <DIO_SetPinLevel+0xf2>
    16e2:	84 2b       	or	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	77 c0       	rjmp	.+238    	; 0x17d6 <DIO_SetPinLevel+0x1ee>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW) 
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	88 23       	and	r24, r24
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <DIO_SetPinLevel+0x108>
    16ee:	73 c0       	rjmp	.+230    	; 0x17d6 <DIO_SetPinLevel+0x1ee>
    {
        switch (port)
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	3d 83       	std	Y+5, r19	; 0x05
    16f8:	2c 83       	std	Y+4, r18	; 0x04
    16fa:	8c 81       	ldd	r24, Y+4	; 0x04
    16fc:	9d 81       	ldd	r25, Y+5	; 0x05
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	91 05       	cpc	r25, r1
    1702:	59 f1       	breq	.+86     	; 0x175a <DIO_SetPinLevel+0x172>
    1704:	2c 81       	ldd	r18, Y+4	; 0x04
    1706:	3d 81       	ldd	r19, Y+5	; 0x05
    1708:	22 30       	cpi	r18, 0x02	; 2
    170a:	31 05       	cpc	r19, r1
    170c:	2c f4       	brge	.+10     	; 0x1718 <DIO_SetPinLevel+0x130>
    170e:	8c 81       	ldd	r24, Y+4	; 0x04
    1710:	9d 81       	ldd	r25, Y+5	; 0x05
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	69 f0       	breq	.+26     	; 0x1730 <DIO_SetPinLevel+0x148>
    1716:	5f c0       	rjmp	.+190    	; 0x17d6 <DIO_SetPinLevel+0x1ee>
    1718:	2c 81       	ldd	r18, Y+4	; 0x04
    171a:	3d 81       	ldd	r19, Y+5	; 0x05
    171c:	22 30       	cpi	r18, 0x02	; 2
    171e:	31 05       	cpc	r19, r1
    1720:	89 f1       	breq	.+98     	; 0x1784 <DIO_SetPinLevel+0x19c>
    1722:	8c 81       	ldd	r24, Y+4	; 0x04
    1724:	9d 81       	ldd	r25, Y+5	; 0x05
    1726:	83 30       	cpi	r24, 0x03	; 3
    1728:	91 05       	cpc	r25, r1
    172a:	09 f4       	brne	.+2      	; 0x172e <DIO_SetPinLevel+0x146>
    172c:	40 c0       	rjmp	.+128    	; 0x17ae <DIO_SetPinLevel+0x1c6>
    172e:	53 c0       	rjmp	.+166    	; 0x17d6 <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            CLR_BIT(PORTA, pin);
    1730:	ab e3       	ldi	r26, 0x3B	; 59
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	eb e3       	ldi	r30, 0x3B	; 59
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	48 2f       	mov	r20, r24
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	02 2e       	mov	r0, r18
    1748:	02 c0       	rjmp	.+4      	; 0x174e <DIO_SetPinLevel+0x166>
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	0a 94       	dec	r0
    1750:	e2 f7       	brpl	.-8      	; 0x174a <DIO_SetPinLevel+0x162>
    1752:	80 95       	com	r24
    1754:	84 23       	and	r24, r20
    1756:	8c 93       	st	X, r24
    1758:	3e c0       	rjmp	.+124    	; 0x17d6 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            CLR_BIT(PORTB, pin);
    175a:	a8 e3       	ldi	r26, 0x38	; 56
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e8 e3       	ldi	r30, 0x38	; 56
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	48 2f       	mov	r20, r24
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 2e       	mov	r0, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <DIO_SetPinLevel+0x190>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	0a 94       	dec	r0
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <DIO_SetPinLevel+0x18c>
    177c:	80 95       	com	r24
    177e:	84 23       	and	r24, r20
    1780:	8c 93       	st	X, r24
    1782:	29 c0       	rjmp	.+82     	; 0x17d6 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            CLR_BIT(PORTC, pin);
    1784:	a5 e3       	ldi	r26, 0x35	; 53
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e5 e3       	ldi	r30, 0x35	; 53
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	48 2f       	mov	r20, r24
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	02 2e       	mov	r0, r18
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <DIO_SetPinLevel+0x1ba>
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	0a 94       	dec	r0
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <DIO_SetPinLevel+0x1b6>
    17a6:	80 95       	com	r24
    17a8:	84 23       	and	r24, r20
    17aa:	8c 93       	st	X, r24
    17ac:	14 c0       	rjmp	.+40     	; 0x17d6 <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            CLR_BIT(PORTD, pin);
    17ae:	a2 e3       	ldi	r26, 0x32	; 50
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e2 e3       	ldi	r30, 0x32	; 50
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 2e       	mov	r0, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <DIO_SetPinLevel+0x1e4>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <DIO_SetPinLevel+0x1e0>
    17d0:	80 95       	com	r24
    17d2:	84 23       	and	r24, r20
    17d4:	8c 93       	st	X, r24
            break;
        default:
            break;
        }
    }
}
    17d6:	27 96       	adiw	r28, 0x07	; 7
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <DIO_SetPortLevel>:

void DIO_SetPortLevel (DIO_PortType port, DIO_LevelType level) {
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	28 97       	sbiw	r28, 0x08	; 8
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	6a 83       	std	Y+2, r22	; 0x02
    if (level == DIO_HIGH) {
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	99 f5       	brne	.+102    	; 0x186c <DIO_SetPortLevel+0x84>
        switch (port)
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	38 87       	std	Y+8, r19	; 0x08
    180e:	2f 83       	std	Y+7, r18	; 0x07
    1810:	8f 81       	ldd	r24, Y+7	; 0x07
    1812:	98 85       	ldd	r25, Y+8	; 0x08
    1814:	81 30       	cpi	r24, 0x01	; 1
    1816:	91 05       	cpc	r25, r1
    1818:	d1 f0       	breq	.+52     	; 0x184e <DIO_SetPortLevel+0x66>
    181a:	2f 81       	ldd	r18, Y+7	; 0x07
    181c:	38 85       	ldd	r19, Y+8	; 0x08
    181e:	22 30       	cpi	r18, 0x02	; 2
    1820:	31 05       	cpc	r19, r1
    1822:	2c f4       	brge	.+10     	; 0x182e <DIO_SetPortLevel+0x46>
    1824:	8f 81       	ldd	r24, Y+7	; 0x07
    1826:	98 85       	ldd	r25, Y+8	; 0x08
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	61 f0       	breq	.+24     	; 0x1844 <DIO_SetPortLevel+0x5c>
    182c:	83 c0       	rjmp	.+262    	; 0x1934 <DIO_SetPortLevel+0x14c>
    182e:	2f 81       	ldd	r18, Y+7	; 0x07
    1830:	38 85       	ldd	r19, Y+8	; 0x08
    1832:	22 30       	cpi	r18, 0x02	; 2
    1834:	31 05       	cpc	r19, r1
    1836:	81 f0       	breq	.+32     	; 0x1858 <DIO_SetPortLevel+0x70>
    1838:	8f 81       	ldd	r24, Y+7	; 0x07
    183a:	98 85       	ldd	r25, Y+8	; 0x08
    183c:	83 30       	cpi	r24, 0x03	; 3
    183e:	91 05       	cpc	r25, r1
    1840:	81 f0       	breq	.+32     	; 0x1862 <DIO_SetPortLevel+0x7a>
    1842:	78 c0       	rjmp	.+240    	; 0x1934 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0xFF;
    1844:	eb e3       	ldi	r30, 0x3B	; 59
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	8f ef       	ldi	r24, 0xFF	; 255
    184a:	80 83       	st	Z, r24
    184c:	73 c0       	rjmp	.+230    	; 0x1934 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0xFF;
    184e:	e8 e3       	ldi	r30, 0x38	; 56
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	8f ef       	ldi	r24, 0xFF	; 255
    1854:	80 83       	st	Z, r24
    1856:	6e c0       	rjmp	.+220    	; 0x1934 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0xFF;
    1858:	e5 e3       	ldi	r30, 0x35	; 53
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	8f ef       	ldi	r24, 0xFF	; 255
    185e:	80 83       	st	Z, r24
    1860:	69 c0       	rjmp	.+210    	; 0x1934 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0xFF;
    1862:	e2 e3       	ldi	r30, 0x32	; 50
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	8f ef       	ldi	r24, 0xFF	; 255
    1868:	80 83       	st	Z, r24
    186a:	64 c0       	rjmp	.+200    	; 0x1934 <DIO_SetPortLevel+0x14c>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW) {
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	88 23       	and	r24, r24
    1870:	79 f5       	brne	.+94     	; 0x18d0 <DIO_SetPortLevel+0xe8>
        switch (port)
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	3e 83       	std	Y+6, r19	; 0x06
    187a:	2d 83       	std	Y+5, r18	; 0x05
    187c:	8d 81       	ldd	r24, Y+5	; 0x05
    187e:	9e 81       	ldd	r25, Y+6	; 0x06
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	91 05       	cpc	r25, r1
    1884:	c9 f0       	breq	.+50     	; 0x18b8 <DIO_SetPortLevel+0xd0>
    1886:	2d 81       	ldd	r18, Y+5	; 0x05
    1888:	3e 81       	ldd	r19, Y+6	; 0x06
    188a:	22 30       	cpi	r18, 0x02	; 2
    188c:	31 05       	cpc	r19, r1
    188e:	2c f4       	brge	.+10     	; 0x189a <DIO_SetPortLevel+0xb2>
    1890:	8d 81       	ldd	r24, Y+5	; 0x05
    1892:	9e 81       	ldd	r25, Y+6	; 0x06
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	61 f0       	breq	.+24     	; 0x18b0 <DIO_SetPortLevel+0xc8>
    1898:	4d c0       	rjmp	.+154    	; 0x1934 <DIO_SetPortLevel+0x14c>
    189a:	2d 81       	ldd	r18, Y+5	; 0x05
    189c:	3e 81       	ldd	r19, Y+6	; 0x06
    189e:	22 30       	cpi	r18, 0x02	; 2
    18a0:	31 05       	cpc	r19, r1
    18a2:	71 f0       	breq	.+28     	; 0x18c0 <DIO_SetPortLevel+0xd8>
    18a4:	8d 81       	ldd	r24, Y+5	; 0x05
    18a6:	9e 81       	ldd	r25, Y+6	; 0x06
    18a8:	83 30       	cpi	r24, 0x03	; 3
    18aa:	91 05       	cpc	r25, r1
    18ac:	69 f0       	breq	.+26     	; 0x18c8 <DIO_SetPortLevel+0xe0>
    18ae:	42 c0       	rjmp	.+132    	; 0x1934 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0x00;
    18b0:	eb e3       	ldi	r30, 0x3B	; 59
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	10 82       	st	Z, r1
    18b6:	3e c0       	rjmp	.+124    	; 0x1934 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0x00;
    18b8:	e8 e3       	ldi	r30, 0x38	; 56
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	10 82       	st	Z, r1
    18be:	3a c0       	rjmp	.+116    	; 0x1934 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0x00;
    18c0:	e5 e3       	ldi	r30, 0x35	; 53
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	10 82       	st	Z, r1
    18c6:	36 c0       	rjmp	.+108    	; 0x1934 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0x00;
    18c8:	e2 e3       	ldi	r30, 0x32	; 50
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	10 82       	st	Z, r1
    18ce:	32 c0       	rjmp	.+100    	; 0x1934 <DIO_SetPortLevel+0x14c>
        default:
            break;
        }
    }
    else {
        switch (port)
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	3c 83       	std	Y+4, r19	; 0x04
    18d8:	2b 83       	std	Y+3, r18	; 0x03
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	9c 81       	ldd	r25, Y+4	; 0x04
    18de:	81 30       	cpi	r24, 0x01	; 1
    18e0:	91 05       	cpc	r25, r1
    18e2:	d1 f0       	breq	.+52     	; 0x1918 <DIO_SetPortLevel+0x130>
    18e4:	2b 81       	ldd	r18, Y+3	; 0x03
    18e6:	3c 81       	ldd	r19, Y+4	; 0x04
    18e8:	22 30       	cpi	r18, 0x02	; 2
    18ea:	31 05       	cpc	r19, r1
    18ec:	2c f4       	brge	.+10     	; 0x18f8 <DIO_SetPortLevel+0x110>
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	9c 81       	ldd	r25, Y+4	; 0x04
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	61 f0       	breq	.+24     	; 0x190e <DIO_SetPortLevel+0x126>
    18f6:	1e c0       	rjmp	.+60     	; 0x1934 <DIO_SetPortLevel+0x14c>
    18f8:	2b 81       	ldd	r18, Y+3	; 0x03
    18fa:	3c 81       	ldd	r19, Y+4	; 0x04
    18fc:	22 30       	cpi	r18, 0x02	; 2
    18fe:	31 05       	cpc	r19, r1
    1900:	81 f0       	breq	.+32     	; 0x1922 <DIO_SetPortLevel+0x13a>
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	9c 81       	ldd	r25, Y+4	; 0x04
    1906:	83 30       	cpi	r24, 0x03	; 3
    1908:	91 05       	cpc	r25, r1
    190a:	81 f0       	breq	.+32     	; 0x192c <DIO_SetPortLevel+0x144>
    190c:	13 c0       	rjmp	.+38     	; 0x1934 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = level;
    190e:	eb e3       	ldi	r30, 0x3B	; 59
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	80 83       	st	Z, r24
    1916:	0e c0       	rjmp	.+28     	; 0x1934 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = level;
    1918:	e8 e3       	ldi	r30, 0x38	; 56
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	80 83       	st	Z, r24
    1920:	09 c0       	rjmp	.+18     	; 0x1934 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = level;
    1922:	e5 e3       	ldi	r30, 0x35	; 53
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	80 83       	st	Z, r24
    192a:	04 c0       	rjmp	.+8      	; 0x1934 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = level;
    192c:	e2 e3       	ldi	r30, 0x32	; 50
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    1934:	28 96       	adiw	r28, 0x08	; 8
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <DIO_ReadPinLevel>:



DIO_LevelType DIO_ReadPinLevel(DIO_PortType port, DIO_PinType pin) {
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	00 d0       	rcall	.+0      	; 0x194c <DIO_ReadPinLevel+0x6>
    194c:	00 d0       	rcall	.+0      	; 0x194e <DIO_ReadPinLevel+0x8>
    194e:	0f 92       	push	r0
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	8a 83       	std	Y+2, r24	; 0x02
    1956:	6b 83       	std	Y+3, r22	; 0x03
    DIO_LevelType result = DIO_LOW;
    1958:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	3d 83       	std	Y+5, r19	; 0x05
    1962:	2c 83       	std	Y+4, r18	; 0x04
    1964:	4c 81       	ldd	r20, Y+4	; 0x04
    1966:	5d 81       	ldd	r21, Y+5	; 0x05
    1968:	41 30       	cpi	r20, 0x01	; 1
    196a:	51 05       	cpc	r21, r1
    196c:	41 f1       	breq	.+80     	; 0x19be <DIO_ReadPinLevel+0x78>
    196e:	8c 81       	ldd	r24, Y+4	; 0x04
    1970:	9d 81       	ldd	r25, Y+5	; 0x05
    1972:	82 30       	cpi	r24, 0x02	; 2
    1974:	91 05       	cpc	r25, r1
    1976:	34 f4       	brge	.+12     	; 0x1984 <DIO_ReadPinLevel+0x3e>
    1978:	2c 81       	ldd	r18, Y+4	; 0x04
    197a:	3d 81       	ldd	r19, Y+5	; 0x05
    197c:	21 15       	cp	r18, r1
    197e:	31 05       	cpc	r19, r1
    1980:	61 f0       	breq	.+24     	; 0x199a <DIO_ReadPinLevel+0x54>
    1982:	52 c0       	rjmp	.+164    	; 0x1a28 <DIO_ReadPinLevel+0xe2>
    1984:	4c 81       	ldd	r20, Y+4	; 0x04
    1986:	5d 81       	ldd	r21, Y+5	; 0x05
    1988:	42 30       	cpi	r20, 0x02	; 2
    198a:	51 05       	cpc	r21, r1
    198c:	51 f1       	breq	.+84     	; 0x19e2 <DIO_ReadPinLevel+0x9c>
    198e:	8c 81       	ldd	r24, Y+4	; 0x04
    1990:	9d 81       	ldd	r25, Y+5	; 0x05
    1992:	83 30       	cpi	r24, 0x03	; 3
    1994:	91 05       	cpc	r25, r1
    1996:	b9 f1       	breq	.+110    	; 0x1a06 <DIO_ReadPinLevel+0xc0>
    1998:	47 c0       	rjmp	.+142    	; 0x1a28 <DIO_ReadPinLevel+0xe2>
    {
    case DIO_PORTA:
        result = GET_BIT(PINA, pin);
    199a:	e9 e3       	ldi	r30, 0x39	; 57
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	88 2f       	mov	r24, r24
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	a9 01       	movw	r20, r18
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <DIO_ReadPinLevel+0x6c>
    19ae:	55 95       	asr	r21
    19b0:	47 95       	ror	r20
    19b2:	8a 95       	dec	r24
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <DIO_ReadPinLevel+0x68>
    19b6:	ca 01       	movw	r24, r20
    19b8:	81 70       	andi	r24, 0x01	; 1
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	35 c0       	rjmp	.+106    	; 0x1a28 <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTB:
        result = GET_BIT(PINB, pin);
    19be:	e6 e3       	ldi	r30, 0x36	; 54
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	88 2f       	mov	r24, r24
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	a9 01       	movw	r20, r18
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <DIO_ReadPinLevel+0x90>
    19d2:	55 95       	asr	r21
    19d4:	47 95       	ror	r20
    19d6:	8a 95       	dec	r24
    19d8:	e2 f7       	brpl	.-8      	; 0x19d2 <DIO_ReadPinLevel+0x8c>
    19da:	ca 01       	movw	r24, r20
    19dc:	81 70       	andi	r24, 0x01	; 1
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	23 c0       	rjmp	.+70     	; 0x1a28 <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTC:
        result = GET_BIT(PINC, pin);
    19e2:	e3 e3       	ldi	r30, 0x33	; 51
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	88 2f       	mov	r24, r24
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	a9 01       	movw	r20, r18
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <DIO_ReadPinLevel+0xb4>
    19f6:	55 95       	asr	r21
    19f8:	47 95       	ror	r20
    19fa:	8a 95       	dec	r24
    19fc:	e2 f7       	brpl	.-8      	; 0x19f6 <DIO_ReadPinLevel+0xb0>
    19fe:	ca 01       	movw	r24, r20
    1a00:	81 70       	andi	r24, 0x01	; 1
    1a02:	89 83       	std	Y+1, r24	; 0x01
    1a04:	11 c0       	rjmp	.+34     	; 0x1a28 <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTD:
        result = GET_BIT(PIND, pin);
    1a06:	e0 e3       	ldi	r30, 0x30	; 48
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	88 2f       	mov	r24, r24
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	a9 01       	movw	r20, r18
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <DIO_ReadPinLevel+0xd8>
    1a1a:	55 95       	asr	r21
    1a1c:	47 95       	ror	r20
    1a1e:	8a 95       	dec	r24
    1a20:	e2 f7       	brpl	.-8      	; 0x1a1a <DIO_ReadPinLevel+0xd4>
    1a22:	ca 01       	movw	r24, r20
    1a24:	81 70       	andi	r24, 0x01	; 1
    1a26:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return result;
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <DIO_ReadPortLevel>:

DIO_LevelType DIO_ReadPortLevel (DIO_PortType port) {
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <DIO_ReadPortLevel+0x6>
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <DIO_ReadPortLevel+0x8>
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	8a 83       	std	Y+2, r24	; 0x02
    u8 result = 0x00;
    1a48:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	3c 83       	std	Y+4, r19	; 0x04
    1a52:	2b 83       	std	Y+3, r18	; 0x03
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	9c 81       	ldd	r25, Y+4	; 0x04
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	49 f1       	breq	.+82     	; 0x1ab0 <DIO_ReadPortLevel+0x76>
    1a5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a60:	3c 81       	ldd	r19, Y+4	; 0x04
    1a62:	22 30       	cpi	r18, 0x02	; 2
    1a64:	31 05       	cpc	r19, r1
    1a66:	2c f4       	brge	.+10     	; 0x1a72 <DIO_ReadPortLevel+0x38>
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	61 f0       	breq	.+24     	; 0x1a88 <DIO_ReadPortLevel+0x4e>
    1a70:	5a c0       	rjmp	.+180    	; 0x1b26 <DIO_ReadPortLevel+0xec>
    1a72:	2b 81       	ldd	r18, Y+3	; 0x03
    1a74:	3c 81       	ldd	r19, Y+4	; 0x04
    1a76:	22 30       	cpi	r18, 0x02	; 2
    1a78:	31 05       	cpc	r19, r1
    1a7a:	71 f1       	breq	.+92     	; 0x1ad8 <DIO_ReadPortLevel+0x9e>
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a80:	83 30       	cpi	r24, 0x03	; 3
    1a82:	91 05       	cpc	r25, r1
    1a84:	e9 f1       	breq	.+122    	; 0x1b00 <DIO_ReadPortLevel+0xc6>
    1a86:	4f c0       	rjmp	.+158    	; 0x1b26 <DIO_ReadPortLevel+0xec>
    {
    case DIO_PORTA:
        if (PINA == 0xFF) {
    1a88:	e9 e3       	ldi	r30, 0x39	; 57
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a90:	19 f4       	brne	.+6      	; 0x1a98 <DIO_ReadPortLevel+0x5e>
            result = DIO_HIGH;
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	47 c0       	rjmp	.+142    	; 0x1b26 <DIO_ReadPortLevel+0xec>
        }
        else if (PINA == 0x00) {
    1a98:	e9 e3       	ldi	r30, 0x39	; 57
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	88 23       	and	r24, r24
    1aa0:	11 f4       	brne	.+4      	; 0x1aa6 <DIO_ReadPortLevel+0x6c>
            result = DIO_LOW;
    1aa2:	19 82       	std	Y+1, r1	; 0x01
    1aa4:	40 c0       	rjmp	.+128    	; 0x1b26 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINA;
    1aa6:	e9 e3       	ldi	r30, 0x39	; 57
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	89 83       	std	Y+1, r24	; 0x01
    1aae:	3b c0       	rjmp	.+118    	; 0x1b26 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTB:
        if (PINB == 0xFF) {
    1ab0:	e6 e3       	ldi	r30, 0x36	; 54
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ab8:	19 f4       	brne	.+6      	; 0x1ac0 <DIO_ReadPortLevel+0x86>
            result = DIO_HIGH;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	33 c0       	rjmp	.+102    	; 0x1b26 <DIO_ReadPortLevel+0xec>
        }
        else if (PINB == 0x00) {
    1ac0:	e6 e3       	ldi	r30, 0x36	; 54
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	88 23       	and	r24, r24
    1ac8:	11 f4       	brne	.+4      	; 0x1ace <DIO_ReadPortLevel+0x94>
            result = DIO_LOW;
    1aca:	19 82       	std	Y+1, r1	; 0x01
    1acc:	2c c0       	rjmp	.+88     	; 0x1b26 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINB;
    1ace:	e6 e3       	ldi	r30, 0x36	; 54
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	27 c0       	rjmp	.+78     	; 0x1b26 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTC:
        if (PINC == 0xFF) {
    1ad8:	e3 e3       	ldi	r30, 0x33	; 51
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	8f 3f       	cpi	r24, 0xFF	; 255
    1ae0:	19 f4       	brne	.+6      	; 0x1ae8 <DIO_ReadPortLevel+0xae>
            result = DIO_HIGH;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	89 83       	std	Y+1, r24	; 0x01
    1ae6:	1f c0       	rjmp	.+62     	; 0x1b26 <DIO_ReadPortLevel+0xec>
        }
        else if (PINC == 0x00) {
    1ae8:	e3 e3       	ldi	r30, 0x33	; 51
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	88 23       	and	r24, r24
    1af0:	11 f4       	brne	.+4      	; 0x1af6 <DIO_ReadPortLevel+0xbc>
            result = DIO_LOW;
    1af2:	19 82       	std	Y+1, r1	; 0x01
    1af4:	18 c0       	rjmp	.+48     	; 0x1b26 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINC;
    1af6:	e3 e3       	ldi	r30, 0x33	; 51
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	89 83       	std	Y+1, r24	; 0x01
    1afe:	13 c0       	rjmp	.+38     	; 0x1b26 <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTD:
        if (PIND == 0xFF) {
    1b00:	e0 e3       	ldi	r30, 0x30	; 48
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	8f 3f       	cpi	r24, 0xFF	; 255
    1b08:	19 f4       	brne	.+6      	; 0x1b10 <DIO_ReadPortLevel+0xd6>
            result = DIO_HIGH;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	0b c0       	rjmp	.+22     	; 0x1b26 <DIO_ReadPortLevel+0xec>
        }
        else if (PIND == 0x00) {
    1b10:	e0 e3       	ldi	r30, 0x30	; 48
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	88 23       	and	r24, r24
    1b18:	11 f4       	brne	.+4      	; 0x1b1e <DIO_ReadPortLevel+0xe4>
            result = DIO_LOW;
    1b1a:	19 82       	std	Y+1, r1	; 0x01
    1b1c:	04 c0       	rjmp	.+8      	; 0x1b26 <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PIND;
    1b1e:	e0 e3       	ldi	r30, 0x30	; 48
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	89 83       	std	Y+1, r24	; 0x01
        }
        break;
    default:
        break;
    }
    return result;
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <EEPROM_Init>:
#include "I2C.h"
#include "EEPROM.h"
#include "EEPROM_cfg.h"

void EEPROM_Init(void)
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
	I2C_InitMaster();
    1b3e:	0e 94 59 18 	call	0x30b2	; 0x30b2 <I2C_InitMaster>
}
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <EEPROM_Write_Byte>:

/*Send byte to EEPROM*/
void EEPROM_Write_Byte(u8 AddressSlave ,u8 AddressLocation,u8 Data)
{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <EEPROM_Write_Byte+0x6>
    1b4e:	0f 92       	push	r0
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	6a 83       	std	Y+2, r22	; 0x02
    1b58:	4b 83       	std	Y+3, r20	; 0x03
	I2C_SendStartCondition();
    1b5a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <I2C_SendStartCondition>
	//write the device address and so we need to get A2 A1 A0 address bits and R/W=0 (write)
	I2C_MasterWriteDataByte(AddressSlave);
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	0e 94 86 18 	call	0x310c	; 0x310c <I2C_MasterWriteDataByte>

	//send the required location address
	I2C_MasterWriteDataByte(AddressLocation);
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	0e 94 86 18 	call	0x310c	; 0x310c <I2C_MasterWriteDataByte>

	//write byte to eeprom
	I2C_MasterWriteDataByte(Data);
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	0e 94 86 18 	call	0x310c	; 0x310c <I2C_MasterWriteDataByte>

	I2C_SendStopCondition();
    1b70:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <I2C_SendStopCondition>
}
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <EEPROM_Read_Byte>:

u8 EEPROM_Read_Byte(u8 AddressSlave ,u8 AddressLocation)
{
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <EEPROM_Read_Byte+0x6>
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	89 83       	std	Y+1, r24	; 0x01
    1b8c:	6a 83       	std	Y+2, r22	; 0x02

	I2C_SendStartCondition();
    1b8e:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <I2C_SendStartCondition>

	//write the device address and so we need to get A2 A1 A0 address bits and R/W=0 (write)
	I2C_MasterWriteDataByte(AddressSlave);
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	0e 94 86 18 	call	0x310c	; 0x310c <I2C_MasterWriteDataByte>

	//send the required location address
	I2C_MasterWriteDataByte(AddressLocation);
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	0e 94 86 18 	call	0x310c	; 0x310c <I2C_MasterWriteDataByte>

	//send a repeated start
	I2C_SendStartCondition();
    1b9e:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <I2C_SendStartCondition>

	//write the device address and so we need to get A2 A1 A0 address bits and R/W=1 (Read)
	SET_BIT(AddressSlave,0);
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	81 60       	ori	r24, 0x01	; 1
    1ba6:	89 83       	std	Y+1, r24	; 0x01
	I2C_MasterWriteDataByte(AddressSlave);
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	0e 94 86 18 	call	0x310c	; 0x310c <I2C_MasterWriteDataByte>

	return I2C_MasterReadDataByteWith_NACK();
    1bae:	0e 94 b0 18 	call	0x3160	; 0x3160 <I2C_MasterReadDataByteWith_NACK>

	I2C_SendStopCondition();
}
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <ExtInterrupt_Init>:
//void __vector_1 (void) __attribute__ ((signal));
//void __vector_1 (void) {
//	// TODO
//}

void ExtInterrupt_Init(void) {
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62

    /*************************** Interrupt 0 Init ***************************/
#ifdef EXT_INTERRUPT_INT0
    /* Interrupt Enable */
#if EXT_INTERRUPT_INT0_INT_ENABLE == EXT_INTERRUPT_ENABLE
    SET_BIT(GICR, GICR_INT0); // External Interrupt Request 0 Enable
    1bc4:	ab e5       	ldi	r26, 0x5B	; 91
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	eb e5       	ldi	r30, 0x5B	; 91
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	80 64       	ori	r24, 0x40	; 64
    1bd0:	8c 93       	st	X, r24
    GlobalInterrupt_Enable(); // Global Interrupt Enable
    1bd2:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <GlobalInterrupt_Enable>
    SET_BIT(MCUCR, MCUCR_ISC01);
#elif EXT_INTERRUPT_INT0_SENSE == EXT_INTERRUPT_RISING_EDGE
    // TODO
#elif EXT_INTERRUPT_INT0_SENSE == EXT_INTERRUPT_ON_CHANGE
    /* Any logical change on INT0 generates an interrupt request. */
    SET_BIT(MCUCR, MCUCR_ISC00);
    1bd6:	a5 e5       	ldi	r26, 0x55	; 85
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e5 e5       	ldi	r30, 0x55	; 85
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	81 60       	ori	r24, 0x01	; 1
    1be2:	8c 93       	st	X, r24
    CLR_BIT(MCUCR, MCUCR_ISC01);
    1be4:	a5 e5       	ldi	r26, 0x55	; 85
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e5 e5       	ldi	r30, 0x55	; 85
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	8d 7f       	andi	r24, 0xFD	; 253
    1bf0:	8c 93       	st	X, r24
#endif
#endif



}
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <GlobalInterrupt_Enable>:
#include "std_types.h"
#include "macros.h"
#include "Registers.h"
#include "GlobalInterrupt.h"

void GlobalInterrupt_Enable(void) {
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
    1c00:	af e5       	ldi	r26, 0x5F	; 95
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	ef e5       	ldi	r30, 0x5F	; 95
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	80 68       	ori	r24, 0x80	; 128
    1c0c:	8c 93       	st	X, r24
}
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	08 95       	ret

00001c14 <GlobalInterrupt_Disable>:

void GlobalInterrupt_Disable(void) {
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
    1c1c:	af e5       	ldi	r26, 0x5F	; 95
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	ef e5       	ldi	r30, 0x5F	; 95
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	8f 77       	andi	r24, 0x7F	; 127
    1c28:	8c 93       	st	X, r24
}
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	08 95       	ret

00001c30 <__vector_10>:
void (*Gpt_Timer2_Callback_Ctc)(void);
void (*Gpt_Timer2_Callback_Normal)(void);

/************ ISR ************/
ISR(VECTOR_TIMER0_CTC)
{
    1c30:	1f 92       	push	r1
    1c32:	0f 92       	push	r0
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	0f 92       	push	r0
    1c38:	11 24       	eor	r1, r1
    1c3a:	2f 93       	push	r18
    1c3c:	3f 93       	push	r19
    1c3e:	4f 93       	push	r20
    1c40:	5f 93       	push	r21
    1c42:	6f 93       	push	r22
    1c44:	7f 93       	push	r23
    1c46:	8f 93       	push	r24
    1c48:	9f 93       	push	r25
    1c4a:	af 93       	push	r26
    1c4c:	bf 93       	push	r27
    1c4e:	ef 93       	push	r30
    1c50:	ff 93       	push	r31
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer0_Callback_Ctc();
    1c5a:	e0 91 06 01 	lds	r30, 0x0106
    1c5e:	f0 91 07 01 	lds	r31, 0x0107
    1c62:	09 95       	icall
}
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	ff 91       	pop	r31
    1c6a:	ef 91       	pop	r30
    1c6c:	bf 91       	pop	r27
    1c6e:	af 91       	pop	r26
    1c70:	9f 91       	pop	r25
    1c72:	8f 91       	pop	r24
    1c74:	7f 91       	pop	r23
    1c76:	6f 91       	pop	r22
    1c78:	5f 91       	pop	r21
    1c7a:	4f 91       	pop	r20
    1c7c:	3f 91       	pop	r19
    1c7e:	2f 91       	pop	r18
    1c80:	0f 90       	pop	r0
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	0f 90       	pop	r0
    1c86:	1f 90       	pop	r1
    1c88:	18 95       	reti

00001c8a <__vector_11>:
ISR(VECTOR_TIMER0_NORM)
{
    1c8a:	1f 92       	push	r1
    1c8c:	0f 92       	push	r0
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	0f 92       	push	r0
    1c92:	11 24       	eor	r1, r1
    1c94:	2f 93       	push	r18
    1c96:	3f 93       	push	r19
    1c98:	4f 93       	push	r20
    1c9a:	5f 93       	push	r21
    1c9c:	6f 93       	push	r22
    1c9e:	7f 93       	push	r23
    1ca0:	8f 93       	push	r24
    1ca2:	9f 93       	push	r25
    1ca4:	af 93       	push	r26
    1ca6:	bf 93       	push	r27
    1ca8:	ef 93       	push	r30
    1caa:	ff 93       	push	r31
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer0_Callback_Normal();
    1cb4:	e0 91 10 01 	lds	r30, 0x0110
    1cb8:	f0 91 11 01 	lds	r31, 0x0111
    1cbc:	09 95       	icall
}
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	ff 91       	pop	r31
    1cc4:	ef 91       	pop	r30
    1cc6:	bf 91       	pop	r27
    1cc8:	af 91       	pop	r26
    1cca:	9f 91       	pop	r25
    1ccc:	8f 91       	pop	r24
    1cce:	7f 91       	pop	r23
    1cd0:	6f 91       	pop	r22
    1cd2:	5f 91       	pop	r21
    1cd4:	4f 91       	pop	r20
    1cd6:	3f 91       	pop	r19
    1cd8:	2f 91       	pop	r18
    1cda:	0f 90       	pop	r0
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	0f 90       	pop	r0
    1ce0:	1f 90       	pop	r1
    1ce2:	18 95       	reti

00001ce4 <__vector_9>:
ISR(VECTOR_TIMER1_NORM)
{
    1ce4:	1f 92       	push	r1
    1ce6:	0f 92       	push	r0
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	0f 92       	push	r0
    1cec:	11 24       	eor	r1, r1
    1cee:	2f 93       	push	r18
    1cf0:	3f 93       	push	r19
    1cf2:	4f 93       	push	r20
    1cf4:	5f 93       	push	r21
    1cf6:	6f 93       	push	r22
    1cf8:	7f 93       	push	r23
    1cfa:	8f 93       	push	r24
    1cfc:	9f 93       	push	r25
    1cfe:	af 93       	push	r26
    1d00:	bf 93       	push	r27
    1d02:	ef 93       	push	r30
    1d04:	ff 93       	push	r31
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1_Callback_Normal();
    1d0e:	e0 91 12 01 	lds	r30, 0x0112
    1d12:	f0 91 13 01 	lds	r31, 0x0113
    1d16:	09 95       	icall
}
    1d18:	cf 91       	pop	r28
    1d1a:	df 91       	pop	r29
    1d1c:	ff 91       	pop	r31
    1d1e:	ef 91       	pop	r30
    1d20:	bf 91       	pop	r27
    1d22:	af 91       	pop	r26
    1d24:	9f 91       	pop	r25
    1d26:	8f 91       	pop	r24
    1d28:	7f 91       	pop	r23
    1d2a:	6f 91       	pop	r22
    1d2c:	5f 91       	pop	r21
    1d2e:	4f 91       	pop	r20
    1d30:	3f 91       	pop	r19
    1d32:	2f 91       	pop	r18
    1d34:	0f 90       	pop	r0
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	0f 90       	pop	r0
    1d3a:	1f 90       	pop	r1
    1d3c:	18 95       	reti

00001d3e <__vector_7>:
ISR(VECTOR_TIMER1A_CTC)
{
    1d3e:	1f 92       	push	r1
    1d40:	0f 92       	push	r0
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	0f 92       	push	r0
    1d46:	11 24       	eor	r1, r1
    1d48:	2f 93       	push	r18
    1d4a:	3f 93       	push	r19
    1d4c:	4f 93       	push	r20
    1d4e:	5f 93       	push	r21
    1d50:	6f 93       	push	r22
    1d52:	7f 93       	push	r23
    1d54:	8f 93       	push	r24
    1d56:	9f 93       	push	r25
    1d58:	af 93       	push	r26
    1d5a:	bf 93       	push	r27
    1d5c:	ef 93       	push	r30
    1d5e:	ff 93       	push	r31
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1A_Callback_Ctc();
    1d68:	e0 91 0e 01 	lds	r30, 0x010E
    1d6c:	f0 91 0f 01 	lds	r31, 0x010F
    1d70:	09 95       	icall
}
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	ff 91       	pop	r31
    1d78:	ef 91       	pop	r30
    1d7a:	bf 91       	pop	r27
    1d7c:	af 91       	pop	r26
    1d7e:	9f 91       	pop	r25
    1d80:	8f 91       	pop	r24
    1d82:	7f 91       	pop	r23
    1d84:	6f 91       	pop	r22
    1d86:	5f 91       	pop	r21
    1d88:	4f 91       	pop	r20
    1d8a:	3f 91       	pop	r19
    1d8c:	2f 91       	pop	r18
    1d8e:	0f 90       	pop	r0
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	0f 90       	pop	r0
    1d94:	1f 90       	pop	r1
    1d96:	18 95       	reti

00001d98 <__vector_8>:
ISR(VECTOR_TIMER1B_CTC)
{
    1d98:	1f 92       	push	r1
    1d9a:	0f 92       	push	r0
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	0f 92       	push	r0
    1da0:	11 24       	eor	r1, r1
    1da2:	2f 93       	push	r18
    1da4:	3f 93       	push	r19
    1da6:	4f 93       	push	r20
    1da8:	5f 93       	push	r21
    1daa:	6f 93       	push	r22
    1dac:	7f 93       	push	r23
    1dae:	8f 93       	push	r24
    1db0:	9f 93       	push	r25
    1db2:	af 93       	push	r26
    1db4:	bf 93       	push	r27
    1db6:	ef 93       	push	r30
    1db8:	ff 93       	push	r31
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer1B_Callback_Ctc();
    1dc2:	e0 91 0a 01 	lds	r30, 0x010A
    1dc6:	f0 91 0b 01 	lds	r31, 0x010B
    1dca:	09 95       	icall
}
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	ff 91       	pop	r31
    1dd2:	ef 91       	pop	r30
    1dd4:	bf 91       	pop	r27
    1dd6:	af 91       	pop	r26
    1dd8:	9f 91       	pop	r25
    1dda:	8f 91       	pop	r24
    1ddc:	7f 91       	pop	r23
    1dde:	6f 91       	pop	r22
    1de0:	5f 91       	pop	r21
    1de2:	4f 91       	pop	r20
    1de4:	3f 91       	pop	r19
    1de6:	2f 91       	pop	r18
    1de8:	0f 90       	pop	r0
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	0f 90       	pop	r0
    1dee:	1f 90       	pop	r1
    1df0:	18 95       	reti

00001df2 <__vector_5>:
ISR(VECTOR_TIMER2_NORM)
{
    1df2:	1f 92       	push	r1
    1df4:	0f 92       	push	r0
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	0f 92       	push	r0
    1dfa:	11 24       	eor	r1, r1
    1dfc:	2f 93       	push	r18
    1dfe:	3f 93       	push	r19
    1e00:	4f 93       	push	r20
    1e02:	5f 93       	push	r21
    1e04:	6f 93       	push	r22
    1e06:	7f 93       	push	r23
    1e08:	8f 93       	push	r24
    1e0a:	9f 93       	push	r25
    1e0c:	af 93       	push	r26
    1e0e:	bf 93       	push	r27
    1e10:	ef 93       	push	r30
    1e12:	ff 93       	push	r31
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer2_Callback_Normal();
    1e1c:	e0 91 0c 01 	lds	r30, 0x010C
    1e20:	f0 91 0d 01 	lds	r31, 0x010D
    1e24:	09 95       	icall
}
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	ff 91       	pop	r31
    1e2c:	ef 91       	pop	r30
    1e2e:	bf 91       	pop	r27
    1e30:	af 91       	pop	r26
    1e32:	9f 91       	pop	r25
    1e34:	8f 91       	pop	r24
    1e36:	7f 91       	pop	r23
    1e38:	6f 91       	pop	r22
    1e3a:	5f 91       	pop	r21
    1e3c:	4f 91       	pop	r20
    1e3e:	3f 91       	pop	r19
    1e40:	2f 91       	pop	r18
    1e42:	0f 90       	pop	r0
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	0f 90       	pop	r0
    1e48:	1f 90       	pop	r1
    1e4a:	18 95       	reti

00001e4c <__vector_4>:
ISR(VECTOR_TIMER2_CTC)
{
    1e4c:	1f 92       	push	r1
    1e4e:	0f 92       	push	r0
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	0f 92       	push	r0
    1e54:	11 24       	eor	r1, r1
    1e56:	2f 93       	push	r18
    1e58:	3f 93       	push	r19
    1e5a:	4f 93       	push	r20
    1e5c:	5f 93       	push	r21
    1e5e:	6f 93       	push	r22
    1e60:	7f 93       	push	r23
    1e62:	8f 93       	push	r24
    1e64:	9f 93       	push	r25
    1e66:	af 93       	push	r26
    1e68:	bf 93       	push	r27
    1e6a:	ef 93       	push	r30
    1e6c:	ff 93       	push	r31
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    Gpt_Timer2_Callback_Ctc();
    1e76:	e0 91 08 01 	lds	r30, 0x0108
    1e7a:	f0 91 09 01 	lds	r31, 0x0109
    1e7e:	09 95       	icall
}
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	ff 91       	pop	r31
    1e86:	ef 91       	pop	r30
    1e88:	bf 91       	pop	r27
    1e8a:	af 91       	pop	r26
    1e8c:	9f 91       	pop	r25
    1e8e:	8f 91       	pop	r24
    1e90:	7f 91       	pop	r23
    1e92:	6f 91       	pop	r22
    1e94:	5f 91       	pop	r21
    1e96:	4f 91       	pop	r20
    1e98:	3f 91       	pop	r19
    1e9a:	2f 91       	pop	r18
    1e9c:	0f 90       	pop	r0
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	0f 90       	pop	r0
    1ea2:	1f 90       	pop	r1
    1ea4:	18 95       	reti

00001ea6 <Gpt_Init>:

Gpt_ReturnType Gpt_Init(Gpt_ConfigType *config)
{
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	65 97       	sbiw	r28, 0x15	; 21
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	9b 83       	std	Y+3, r25	; 0x03
    1ebc:	8a 83       	std	Y+2, r24	; 0x02
    Gpt_ReturnType returnValue = GPT_OK;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	89 83       	std	Y+1, r24	; 0x01

    switch (config->channel)
    1ec2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ec4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ec6:	80 81       	ld	r24, Z
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	3d 8b       	std	Y+21, r19	; 0x15
    1ece:	2c 8b       	std	Y+20, r18	; 0x14
    1ed0:	8c 89       	ldd	r24, Y+20	; 0x14
    1ed2:	9d 89       	ldd	r25, Y+21	; 0x15
    1ed4:	81 30       	cpi	r24, 0x01	; 1
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <Gpt_Init+0x36>
    1eda:	92 c1       	rjmp	.+804    	; 0x2200 <Gpt_Init+0x35a>
    1edc:	2c 89       	ldd	r18, Y+20	; 0x14
    1ede:	3d 89       	ldd	r19, Y+21	; 0x15
    1ee0:	22 30       	cpi	r18, 0x02	; 2
    1ee2:	31 05       	cpc	r19, r1
    1ee4:	2c f4       	brge	.+10     	; 0x1ef0 <Gpt_Init+0x4a>
    1ee6:	8c 89       	ldd	r24, Y+20	; 0x14
    1ee8:	9d 89       	ldd	r25, Y+21	; 0x15
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	71 f0       	breq	.+28     	; 0x1f0a <Gpt_Init+0x64>
    1eee:	2a c6       	rjmp	.+3156   	; 0x2b44 <Gpt_Init+0xc9e>
    1ef0:	2c 89       	ldd	r18, Y+20	; 0x14
    1ef2:	3d 89       	ldd	r19, Y+21	; 0x15
    1ef4:	22 30       	cpi	r18, 0x02	; 2
    1ef6:	31 05       	cpc	r19, r1
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <Gpt_Init+0x56>
    1efa:	19 c3       	rjmp	.+1586   	; 0x252e <Gpt_Init+0x688>
    1efc:	8c 89       	ldd	r24, Y+20	; 0x14
    1efe:	9d 89       	ldd	r25, Y+21	; 0x15
    1f00:	83 30       	cpi	r24, 0x03	; 3
    1f02:	91 05       	cpc	r25, r1
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <Gpt_Init+0x62>
    1f06:	aa c4       	rjmp	.+2388   	; 0x285c <Gpt_Init+0x9b6>
    1f08:	1d c6       	rjmp	.+3130   	; 0x2b44 <Gpt_Init+0xc9e>
    {

    case GPT_CHANNEL_TIMER0:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    1f0a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f0c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f0e:	81 81       	ldd	r24, Z+1	; 0x01
    1f10:	88 23       	and	r24, r24
    1f12:	79 f4       	brne	.+30     	; 0x1f32 <Gpt_Init+0x8c>
        {
            CLR_BIT(TCCR0, TCCR0_WGM00);
    1f14:	a3 e5       	ldi	r26, 0x53	; 83
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e3 e5       	ldi	r30, 0x53	; 83
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	8f 7b       	andi	r24, 0xBF	; 191
    1f20:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_WGM01);
    1f22:	a3 e5       	ldi	r26, 0x53	; 83
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e3 e5       	ldi	r30, 0x53	; 83
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	87 7f       	andi	r24, 0xF7	; 247
    1f2e:	8c 93       	st	X, r24
    1f30:	15 c0       	rjmp	.+42     	; 0x1f5c <Gpt_Init+0xb6>
        }
        else if (config->mode == GPT_MODE_CTC)
    1f32:	ea 81       	ldd	r30, Y+2	; 0x02
    1f34:	fb 81       	ldd	r31, Y+3	; 0x03
    1f36:	81 81       	ldd	r24, Z+1	; 0x01
    1f38:	81 30       	cpi	r24, 0x01	; 1
    1f3a:	79 f4       	brne	.+30     	; 0x1f5a <Gpt_Init+0xb4>
        {
            CLR_BIT(TCCR0, TCCR0_WGM00);
    1f3c:	a3 e5       	ldi	r26, 0x53	; 83
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e3 e5       	ldi	r30, 0x53	; 83
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	8f 7b       	andi	r24, 0xBF	; 191
    1f48:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_WGM01);
    1f4a:	a3 e5       	ldi	r26, 0x53	; 83
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e3 e5       	ldi	r30, 0x53	; 83
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	88 60       	ori	r24, 0x08	; 8
    1f56:	8c 93       	st	X, r24
    1f58:	01 c0       	rjmp	.+2      	; 0x1f5c <Gpt_Init+0xb6>
        }
        else
        {
            returnValue = GPT_ERROR;
    1f5a:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    1f5c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f5e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f60:	82 81       	ldd	r24, Z+2	; 0x02
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	3b 8b       	std	Y+19, r19	; 0x13
    1f68:	2a 8b       	std	Y+18, r18	; 0x12
    1f6a:	8a 89       	ldd	r24, Y+18	; 0x12
    1f6c:	9b 89       	ldd	r25, Y+19	; 0x13
    1f6e:	81 30       	cpi	r24, 0x01	; 1
    1f70:	91 05       	cpc	r25, r1
    1f72:	21 f1       	breq	.+72     	; 0x1fbc <Gpt_Init+0x116>
    1f74:	2a 89       	ldd	r18, Y+18	; 0x12
    1f76:	3b 89       	ldd	r19, Y+19	; 0x13
    1f78:	22 30       	cpi	r18, 0x02	; 2
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	2c f4       	brge	.+10     	; 0x1f88 <Gpt_Init+0xe2>
    1f7e:	8a 89       	ldd	r24, Y+18	; 0x12
    1f80:	9b 89       	ldd	r25, Y+19	; 0x13
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	61 f0       	breq	.+24     	; 0x1f9e <Gpt_Init+0xf8>
    1f86:	47 c0       	rjmp	.+142    	; 0x2016 <Gpt_Init+0x170>
    1f88:	2a 89       	ldd	r18, Y+18	; 0x12
    1f8a:	3b 89       	ldd	r19, Y+19	; 0x13
    1f8c:	22 30       	cpi	r18, 0x02	; 2
    1f8e:	31 05       	cpc	r19, r1
    1f90:	21 f1       	breq	.+72     	; 0x1fda <Gpt_Init+0x134>
    1f92:	8a 89       	ldd	r24, Y+18	; 0x12
    1f94:	9b 89       	ldd	r25, Y+19	; 0x13
    1f96:	83 30       	cpi	r24, 0x03	; 3
    1f98:	91 05       	cpc	r25, r1
    1f9a:	71 f1       	breq	.+92     	; 0x1ff8 <Gpt_Init+0x152>
    1f9c:	3c c0       	rjmp	.+120    	; 0x2016 <Gpt_Init+0x170>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR0, TCCR0_COM00);
    1f9e:	a3 e5       	ldi	r26, 0x53	; 83
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	e3 e5       	ldi	r30, 0x53	; 83
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	8f 7e       	andi	r24, 0xEF	; 239
    1faa:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    1fac:	a3 e5       	ldi	r26, 0x53	; 83
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e3 e5       	ldi	r30, 0x53	; 83
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	8f 7d       	andi	r24, 0xDF	; 223
    1fb8:	8c 93       	st	X, r24
    1fba:	2e c0       	rjmp	.+92     	; 0x2018 <Gpt_Init+0x172>
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR0, TCCR0_COM00);
    1fbc:	a3 e5       	ldi	r26, 0x53	; 83
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	e3 e5       	ldi	r30, 0x53	; 83
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	80 61       	ori	r24, 0x10	; 16
    1fc8:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    1fca:	a3 e5       	ldi	r26, 0x53	; 83
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	e3 e5       	ldi	r30, 0x53	; 83
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	8f 7d       	andi	r24, 0xDF	; 223
    1fd6:	8c 93       	st	X, r24
    1fd8:	1f c0       	rjmp	.+62     	; 0x2018 <Gpt_Init+0x172>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR0, TCCR0_COM00);
    1fda:	a3 e5       	ldi	r26, 0x53	; 83
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e3 e5       	ldi	r30, 0x53	; 83
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	80 61       	ori	r24, 0x10	; 16
    1fe6:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    1fe8:	a3 e5       	ldi	r26, 0x53	; 83
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e3 e5       	ldi	r30, 0x53	; 83
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	80 62       	ori	r24, 0x20	; 32
    1ff4:	8c 93       	st	X, r24
    1ff6:	10 c0       	rjmp	.+32     	; 0x2018 <Gpt_Init+0x172>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR0, TCCR0_COM00);
    1ff8:	a3 e5       	ldi	r26, 0x53	; 83
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e3 e5       	ldi	r30, 0x53	; 83
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	8f 7e       	andi	r24, 0xEF	; 239
    2004:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    2006:	a3 e5       	ldi	r26, 0x53	; 83
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	e3 e5       	ldi	r30, 0x53	; 83
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	80 62       	ori	r24, 0x20	; 32
    2012:	8c 93       	st	X, r24
    2014:	01 c0       	rjmp	.+2      	; 0x2018 <Gpt_Init+0x172>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2016:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    2018:	ea 81       	ldd	r30, Y+2	; 0x02
    201a:	fb 81       	ldd	r31, Y+3	; 0x03
    201c:	83 81       	ldd	r24, Z+3	; 0x03
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	39 8b       	std	Y+17, r19	; 0x11
    2024:	28 8b       	std	Y+16, r18	; 0x10
    2026:	88 89       	ldd	r24, Y+16	; 0x10
    2028:	99 89       	ldd	r25, Y+17	; 0x11
    202a:	84 30       	cpi	r24, 0x04	; 4
    202c:	91 05       	cpc	r25, r1
    202e:	09 f4       	brne	.+2      	; 0x2032 <Gpt_Init+0x18c>
    2030:	77 c0       	rjmp	.+238    	; 0x2120 <Gpt_Init+0x27a>
    2032:	28 89       	ldd	r18, Y+16	; 0x10
    2034:	39 89       	ldd	r19, Y+17	; 0x11
    2036:	25 30       	cpi	r18, 0x05	; 5
    2038:	31 05       	cpc	r19, r1
    203a:	8c f4       	brge	.+34     	; 0x205e <Gpt_Init+0x1b8>
    203c:	88 89       	ldd	r24, Y+16	; 0x10
    203e:	99 89       	ldd	r25, Y+17	; 0x11
    2040:	81 30       	cpi	r24, 0x01	; 1
    2042:	91 05       	cpc	r25, r1
    2044:	09 f4       	brne	.+2      	; 0x2048 <Gpt_Init+0x1a2>
    2046:	40 c0       	rjmp	.+128    	; 0x20c8 <Gpt_Init+0x222>
    2048:	28 89       	ldd	r18, Y+16	; 0x10
    204a:	39 89       	ldd	r19, Y+17	; 0x11
    204c:	22 30       	cpi	r18, 0x02	; 2
    204e:	31 05       	cpc	r19, r1
    2050:	09 f4       	brne	.+2      	; 0x2054 <Gpt_Init+0x1ae>
    2052:	50 c0       	rjmp	.+160    	; 0x20f4 <Gpt_Init+0x24e>
    2054:	88 89       	ldd	r24, Y+16	; 0x10
    2056:	99 89       	ldd	r25, Y+17	; 0x11
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	01 f1       	breq	.+64     	; 0x209c <Gpt_Init+0x1f6>
    205c:	cf c0       	rjmp	.+414    	; 0x21fc <Gpt_Init+0x356>
    205e:	28 89       	ldd	r18, Y+16	; 0x10
    2060:	39 89       	ldd	r19, Y+17	; 0x11
    2062:	27 30       	cpi	r18, 0x07	; 7
    2064:	31 05       	cpc	r19, r1
    2066:	09 f4       	brne	.+2      	; 0x206a <Gpt_Init+0x1c4>
    2068:	87 c0       	rjmp	.+270    	; 0x2178 <Gpt_Init+0x2d2>
    206a:	88 89       	ldd	r24, Y+16	; 0x10
    206c:	99 89       	ldd	r25, Y+17	; 0x11
    206e:	88 30       	cpi	r24, 0x08	; 8
    2070:	91 05       	cpc	r25, r1
    2072:	3c f4       	brge	.+14     	; 0x2082 <Gpt_Init+0x1dc>
    2074:	28 89       	ldd	r18, Y+16	; 0x10
    2076:	39 89       	ldd	r19, Y+17	; 0x11
    2078:	26 30       	cpi	r18, 0x06	; 6
    207a:	31 05       	cpc	r19, r1
    207c:	09 f4       	brne	.+2      	; 0x2080 <Gpt_Init+0x1da>
    207e:	66 c0       	rjmp	.+204    	; 0x214c <Gpt_Init+0x2a6>
    2080:	bd c0       	rjmp	.+378    	; 0x21fc <Gpt_Init+0x356>
    2082:	88 89       	ldd	r24, Y+16	; 0x10
    2084:	99 89       	ldd	r25, Y+17	; 0x11
    2086:	88 30       	cpi	r24, 0x08	; 8
    2088:	91 05       	cpc	r25, r1
    208a:	09 f4       	brne	.+2      	; 0x208e <Gpt_Init+0x1e8>
    208c:	8b c0       	rjmp	.+278    	; 0x21a4 <Gpt_Init+0x2fe>
    208e:	28 89       	ldd	r18, Y+16	; 0x10
    2090:	39 89       	ldd	r19, Y+17	; 0x11
    2092:	29 30       	cpi	r18, 0x09	; 9
    2094:	31 05       	cpc	r19, r1
    2096:	09 f4       	brne	.+2      	; 0x209a <Gpt_Init+0x1f4>
    2098:	9b c0       	rjmp	.+310    	; 0x21d0 <Gpt_Init+0x32a>
    209a:	b0 c0       	rjmp	.+352    	; 0x21fc <Gpt_Init+0x356>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR0, TCCR0_CS00);
    209c:	a3 e5       	ldi	r26, 0x53	; 83
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e3 e5       	ldi	r30, 0x53	; 83
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	8e 7f       	andi	r24, 0xFE	; 254
    20a8:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    20aa:	a3 e5       	ldi	r26, 0x53	; 83
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	e3 e5       	ldi	r30, 0x53	; 83
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	8d 7f       	andi	r24, 0xFD	; 253
    20b6:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    20b8:	a3 e5       	ldi	r26, 0x53	; 83
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e3 e5       	ldi	r30, 0x53	; 83
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	8b 7f       	andi	r24, 0xFB	; 251
    20c4:	8c 93       	st	X, r24
    20c6:	3f c5       	rjmp	.+2686   	; 0x2b46 <Gpt_Init+0xca0>
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR0, TCCR0_CS00);
    20c8:	a3 e5       	ldi	r26, 0x53	; 83
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e3 e5       	ldi	r30, 0x53	; 83
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	81 60       	ori	r24, 0x01	; 1
    20d4:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    20d6:	a3 e5       	ldi	r26, 0x53	; 83
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e3 e5       	ldi	r30, 0x53	; 83
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	8d 7f       	andi	r24, 0xFD	; 253
    20e2:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    20e4:	a3 e5       	ldi	r26, 0x53	; 83
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e3 e5       	ldi	r30, 0x53	; 83
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	8b 7f       	andi	r24, 0xFB	; 251
    20f0:	8c 93       	st	X, r24
    20f2:	29 c5       	rjmp	.+2642   	; 0x2b46 <Gpt_Init+0xca0>
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR0, TCCR0_CS00);
    20f4:	a3 e5       	ldi	r26, 0x53	; 83
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e3 e5       	ldi	r30, 0x53	; 83
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	8e 7f       	andi	r24, 0xFE	; 254
    2100:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    2102:	a3 e5       	ldi	r26, 0x53	; 83
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	e3 e5       	ldi	r30, 0x53	; 83
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	82 60       	ori	r24, 0x02	; 2
    210e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    2110:	a3 e5       	ldi	r26, 0x53	; 83
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e3 e5       	ldi	r30, 0x53	; 83
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	8b 7f       	andi	r24, 0xFB	; 251
    211c:	8c 93       	st	X, r24
    211e:	13 c5       	rjmp	.+2598   	; 0x2b46 <Gpt_Init+0xca0>
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR0, TCCR0_CS00);
    2120:	a3 e5       	ldi	r26, 0x53	; 83
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e3 e5       	ldi	r30, 0x53	; 83
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	81 60       	ori	r24, 0x01	; 1
    212c:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    212e:	a3 e5       	ldi	r26, 0x53	; 83
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e3 e5       	ldi	r30, 0x53	; 83
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	82 60       	ori	r24, 0x02	; 2
    213a:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    213c:	a3 e5       	ldi	r26, 0x53	; 83
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	e3 e5       	ldi	r30, 0x53	; 83
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	8b 7f       	andi	r24, 0xFB	; 251
    2148:	8c 93       	st	X, r24
    214a:	fd c4       	rjmp	.+2554   	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR0, TCCR0_CS00);
    214c:	a3 e5       	ldi	r26, 0x53	; 83
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	e3 e5       	ldi	r30, 0x53	; 83
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	8e 7f       	andi	r24, 0xFE	; 254
    2158:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    215a:	a3 e5       	ldi	r26, 0x53	; 83
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e3 e5       	ldi	r30, 0x53	; 83
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	8d 7f       	andi	r24, 0xFD	; 253
    2166:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2168:	a3 e5       	ldi	r26, 0x53	; 83
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e3 e5       	ldi	r30, 0x53	; 83
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	84 60       	ori	r24, 0x04	; 4
    2174:	8c 93       	st	X, r24
    2176:	e7 c4       	rjmp	.+2510   	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR0, TCCR0_CS00);
    2178:	a3 e5       	ldi	r26, 0x53	; 83
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	e3 e5       	ldi	r30, 0x53	; 83
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	81 60       	ori	r24, 0x01	; 1
    2184:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    2186:	a3 e5       	ldi	r26, 0x53	; 83
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	e3 e5       	ldi	r30, 0x53	; 83
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	8d 7f       	andi	r24, 0xFD	; 253
    2192:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    2194:	a3 e5       	ldi	r26, 0x53	; 83
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e3 e5       	ldi	r30, 0x53	; 83
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	84 60       	ori	r24, 0x04	; 4
    21a0:	8c 93       	st	X, r24
    21a2:	d1 c4       	rjmp	.+2466   	; 0x2b46 <Gpt_Init+0xca0>
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR0, TCCR0_CS00);
    21a4:	a3 e5       	ldi	r26, 0x53	; 83
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e3 e5       	ldi	r30, 0x53	; 83
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	8e 7f       	andi	r24, 0xFE	; 254
    21b0:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    21b2:	a3 e5       	ldi	r26, 0x53	; 83
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e3 e5       	ldi	r30, 0x53	; 83
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	82 60       	ori	r24, 0x02	; 2
    21be:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    21c0:	a3 e5       	ldi	r26, 0x53	; 83
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e3 e5       	ldi	r30, 0x53	; 83
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	84 60       	ori	r24, 0x04	; 4
    21cc:	8c 93       	st	X, r24
    21ce:	bb c4       	rjmp	.+2422   	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR0, TCCR0_CS00);
    21d0:	a3 e5       	ldi	r26, 0x53	; 83
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e3 e5       	ldi	r30, 0x53	; 83
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	81 60       	ori	r24, 0x01	; 1
    21dc:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    21de:	a3 e5       	ldi	r26, 0x53	; 83
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e3 e5       	ldi	r30, 0x53	; 83
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	82 60       	ori	r24, 0x02	; 2
    21ea:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    21ec:	a3 e5       	ldi	r26, 0x53	; 83
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	e3 e5       	ldi	r30, 0x53	; 83
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	84 60       	ori	r24, 0x04	; 4
    21f8:	8c 93       	st	X, r24
    21fa:	a5 c4       	rjmp	.+2378   	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    21fc:	19 82       	std	Y+1, r1	; 0x01
    21fe:	a3 c4       	rjmp	.+2374   	; 0x2b46 <Gpt_Init+0xca0>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    2200:	ea 81       	ldd	r30, Y+2	; 0x02
    2202:	fb 81       	ldd	r31, Y+3	; 0x03
    2204:	81 81       	ldd	r24, Z+1	; 0x01
    2206:	88 23       	and	r24, r24
    2208:	e9 f4       	brne	.+58     	; 0x2244 <Gpt_Init+0x39e>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    220a:	af e4       	ldi	r26, 0x4F	; 79
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	ef e4       	ldi	r30, 0x4F	; 79
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	8e 7f       	andi	r24, 0xFE	; 254
    2216:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2218:	af e4       	ldi	r26, 0x4F	; 79
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	ef e4       	ldi	r30, 0x4F	; 79
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	8d 7f       	andi	r24, 0xFD	; 253
    2224:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2226:	ae e4       	ldi	r26, 0x4E	; 78
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	ee e4       	ldi	r30, 0x4E	; 78
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	87 7f       	andi	r24, 0xF7	; 247
    2232:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2234:	ae e4       	ldi	r26, 0x4E	; 78
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	ee e4       	ldi	r30, 0x4E	; 78
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	8f 7e       	andi	r24, 0xEF	; 239
    2240:	8c 93       	st	X, r24
    2242:	23 c0       	rjmp	.+70     	; 0x228a <Gpt_Init+0x3e4>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    2244:	ea 81       	ldd	r30, Y+2	; 0x02
    2246:	fb 81       	ldd	r31, Y+3	; 0x03
    2248:	81 81       	ldd	r24, Z+1	; 0x01
    224a:	81 30       	cpi	r24, 0x01	; 1
    224c:	e9 f4       	brne	.+58     	; 0x2288 <Gpt_Init+0x3e2>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    224e:	af e4       	ldi	r26, 0x4F	; 79
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	ef e4       	ldi	r30, 0x4F	; 79
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	8e 7f       	andi	r24, 0xFE	; 254
    225a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    225c:	af e4       	ldi	r26, 0x4F	; 79
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	ef e4       	ldi	r30, 0x4F	; 79
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8d 7f       	andi	r24, 0xFD	; 253
    2268:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    226a:	ae e4       	ldi	r26, 0x4E	; 78
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	ee e4       	ldi	r30, 0x4E	; 78
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	88 60       	ori	r24, 0x08	; 8
    2276:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2278:	ae e4       	ldi	r26, 0x4E	; 78
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	ee e4       	ldi	r30, 0x4E	; 78
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	8f 7e       	andi	r24, 0xEF	; 239
    2284:	8c 93       	st	X, r24
    2286:	01 c0       	rjmp	.+2      	; 0x228a <Gpt_Init+0x3e4>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    2288:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    228a:	ea 81       	ldd	r30, Y+2	; 0x02
    228c:	fb 81       	ldd	r31, Y+3	; 0x03
    228e:	82 81       	ldd	r24, Z+2	; 0x02
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	3f 87       	std	Y+15, r19	; 0x0f
    2296:	2e 87       	std	Y+14, r18	; 0x0e
    2298:	8e 85       	ldd	r24, Y+14	; 0x0e
    229a:	9f 85       	ldd	r25, Y+15	; 0x0f
    229c:	81 30       	cpi	r24, 0x01	; 1
    229e:	91 05       	cpc	r25, r1
    22a0:	21 f1       	breq	.+72     	; 0x22ea <Gpt_Init+0x444>
    22a2:	2e 85       	ldd	r18, Y+14	; 0x0e
    22a4:	3f 85       	ldd	r19, Y+15	; 0x0f
    22a6:	22 30       	cpi	r18, 0x02	; 2
    22a8:	31 05       	cpc	r19, r1
    22aa:	2c f4       	brge	.+10     	; 0x22b6 <Gpt_Init+0x410>
    22ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    22ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	61 f0       	breq	.+24     	; 0x22cc <Gpt_Init+0x426>
    22b4:	47 c0       	rjmp	.+142    	; 0x2344 <Gpt_Init+0x49e>
    22b6:	2e 85       	ldd	r18, Y+14	; 0x0e
    22b8:	3f 85       	ldd	r19, Y+15	; 0x0f
    22ba:	22 30       	cpi	r18, 0x02	; 2
    22bc:	31 05       	cpc	r19, r1
    22be:	21 f1       	breq	.+72     	; 0x2308 <Gpt_Init+0x462>
    22c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    22c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    22c4:	83 30       	cpi	r24, 0x03	; 3
    22c6:	91 05       	cpc	r25, r1
    22c8:	71 f1       	breq	.+92     	; 0x2326 <Gpt_Init+0x480>
    22ca:	3c c0       	rjmp	.+120    	; 0x2344 <Gpt_Init+0x49e>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    22cc:	af e4       	ldi	r26, 0x4F	; 79
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	ef e4       	ldi	r30, 0x4F	; 79
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	8f 7b       	andi	r24, 0xBF	; 191
    22d8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    22da:	af e4       	ldi	r26, 0x4F	; 79
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	ef e4       	ldi	r30, 0x4F	; 79
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	8f 77       	andi	r24, 0x7F	; 127
    22e6:	8c 93       	st	X, r24
    22e8:	2e c0       	rjmp	.+92     	; 0x2346 <Gpt_Init+0x4a0>
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    22ea:	af e4       	ldi	r26, 0x4F	; 79
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	ef e4       	ldi	r30, 0x4F	; 79
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	80 64       	ori	r24, 0x40	; 64
    22f6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    22f8:	af e4       	ldi	r26, 0x4F	; 79
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	ef e4       	ldi	r30, 0x4F	; 79
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	8f 77       	andi	r24, 0x7F	; 127
    2304:	8c 93       	st	X, r24
    2306:	1f c0       	rjmp	.+62     	; 0x2346 <Gpt_Init+0x4a0>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2308:	af e4       	ldi	r26, 0x4F	; 79
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	ef e4       	ldi	r30, 0x4F	; 79
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	80 64       	ori	r24, 0x40	; 64
    2314:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2316:	af e4       	ldi	r26, 0x4F	; 79
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	ef e4       	ldi	r30, 0x4F	; 79
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	80 68       	ori	r24, 0x80	; 128
    2322:	8c 93       	st	X, r24
    2324:	10 c0       	rjmp	.+32     	; 0x2346 <Gpt_Init+0x4a0>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    2326:	af e4       	ldi	r26, 0x4F	; 79
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	ef e4       	ldi	r30, 0x4F	; 79
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
    2330:	8f 7b       	andi	r24, 0xBF	; 191
    2332:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2334:	af e4       	ldi	r26, 0x4F	; 79
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	ef e4       	ldi	r30, 0x4F	; 79
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	80 68       	ori	r24, 0x80	; 128
    2340:	8c 93       	st	X, r24
    2342:	01 c0       	rjmp	.+2      	; 0x2346 <Gpt_Init+0x4a0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2344:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    2346:	ea 81       	ldd	r30, Y+2	; 0x02
    2348:	fb 81       	ldd	r31, Y+3	; 0x03
    234a:	83 81       	ldd	r24, Z+3	; 0x03
    234c:	28 2f       	mov	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	3d 87       	std	Y+13, r19	; 0x0d
    2352:	2c 87       	std	Y+12, r18	; 0x0c
    2354:	8c 85       	ldd	r24, Y+12	; 0x0c
    2356:	9d 85       	ldd	r25, Y+13	; 0x0d
    2358:	84 30       	cpi	r24, 0x04	; 4
    235a:	91 05       	cpc	r25, r1
    235c:	09 f4       	brne	.+2      	; 0x2360 <Gpt_Init+0x4ba>
    235e:	77 c0       	rjmp	.+238    	; 0x244e <Gpt_Init+0x5a8>
    2360:	2c 85       	ldd	r18, Y+12	; 0x0c
    2362:	3d 85       	ldd	r19, Y+13	; 0x0d
    2364:	25 30       	cpi	r18, 0x05	; 5
    2366:	31 05       	cpc	r19, r1
    2368:	8c f4       	brge	.+34     	; 0x238c <Gpt_Init+0x4e6>
    236a:	8c 85       	ldd	r24, Y+12	; 0x0c
    236c:	9d 85       	ldd	r25, Y+13	; 0x0d
    236e:	81 30       	cpi	r24, 0x01	; 1
    2370:	91 05       	cpc	r25, r1
    2372:	09 f4       	brne	.+2      	; 0x2376 <Gpt_Init+0x4d0>
    2374:	40 c0       	rjmp	.+128    	; 0x23f6 <Gpt_Init+0x550>
    2376:	2c 85       	ldd	r18, Y+12	; 0x0c
    2378:	3d 85       	ldd	r19, Y+13	; 0x0d
    237a:	22 30       	cpi	r18, 0x02	; 2
    237c:	31 05       	cpc	r19, r1
    237e:	09 f4       	brne	.+2      	; 0x2382 <Gpt_Init+0x4dc>
    2380:	50 c0       	rjmp	.+160    	; 0x2422 <Gpt_Init+0x57c>
    2382:	8c 85       	ldd	r24, Y+12	; 0x0c
    2384:	9d 85       	ldd	r25, Y+13	; 0x0d
    2386:	00 97       	sbiw	r24, 0x00	; 0
    2388:	01 f1       	breq	.+64     	; 0x23ca <Gpt_Init+0x524>
    238a:	cf c0       	rjmp	.+414    	; 0x252a <Gpt_Init+0x684>
    238c:	2c 85       	ldd	r18, Y+12	; 0x0c
    238e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2390:	27 30       	cpi	r18, 0x07	; 7
    2392:	31 05       	cpc	r19, r1
    2394:	09 f4       	brne	.+2      	; 0x2398 <Gpt_Init+0x4f2>
    2396:	87 c0       	rjmp	.+270    	; 0x24a6 <Gpt_Init+0x600>
    2398:	8c 85       	ldd	r24, Y+12	; 0x0c
    239a:	9d 85       	ldd	r25, Y+13	; 0x0d
    239c:	88 30       	cpi	r24, 0x08	; 8
    239e:	91 05       	cpc	r25, r1
    23a0:	3c f4       	brge	.+14     	; 0x23b0 <Gpt_Init+0x50a>
    23a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    23a4:	3d 85       	ldd	r19, Y+13	; 0x0d
    23a6:	26 30       	cpi	r18, 0x06	; 6
    23a8:	31 05       	cpc	r19, r1
    23aa:	09 f4       	brne	.+2      	; 0x23ae <Gpt_Init+0x508>
    23ac:	66 c0       	rjmp	.+204    	; 0x247a <Gpt_Init+0x5d4>
    23ae:	bd c0       	rjmp	.+378    	; 0x252a <Gpt_Init+0x684>
    23b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    23b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    23b4:	88 30       	cpi	r24, 0x08	; 8
    23b6:	91 05       	cpc	r25, r1
    23b8:	09 f4       	brne	.+2      	; 0x23bc <Gpt_Init+0x516>
    23ba:	8b c0       	rjmp	.+278    	; 0x24d2 <Gpt_Init+0x62c>
    23bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    23be:	3d 85       	ldd	r19, Y+13	; 0x0d
    23c0:	29 30       	cpi	r18, 0x09	; 9
    23c2:	31 05       	cpc	r19, r1
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <Gpt_Init+0x522>
    23c6:	9b c0       	rjmp	.+310    	; 0x24fe <Gpt_Init+0x658>
    23c8:	b0 c0       	rjmp	.+352    	; 0x252a <Gpt_Init+0x684>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    23ca:	ae e4       	ldi	r26, 0x4E	; 78
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	ee e4       	ldi	r30, 0x4E	; 78
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	8e 7f       	andi	r24, 0xFE	; 254
    23d6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    23d8:	ae e4       	ldi	r26, 0x4E	; 78
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	ee e4       	ldi	r30, 0x4E	; 78
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	8d 7f       	andi	r24, 0xFD	; 253
    23e4:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    23e6:	ae e4       	ldi	r26, 0x4E	; 78
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	ee e4       	ldi	r30, 0x4E	; 78
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	8b 7f       	andi	r24, 0xFB	; 251
    23f2:	8c 93       	st	X, r24
    23f4:	a8 c3       	rjmp	.+1872   	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    23f6:	ae e4       	ldi	r26, 0x4E	; 78
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	ee e4       	ldi	r30, 0x4E	; 78
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	81 60       	ori	r24, 0x01	; 1
    2402:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    2404:	ae e4       	ldi	r26, 0x4E	; 78
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	ee e4       	ldi	r30, 0x4E	; 78
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	8d 7f       	andi	r24, 0xFD	; 253
    2410:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2412:	ae e4       	ldi	r26, 0x4E	; 78
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	ee e4       	ldi	r30, 0x4E	; 78
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	8b 7f       	andi	r24, 0xFB	; 251
    241e:	8c 93       	st	X, r24
    2420:	92 c3       	rjmp	.+1828   	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2422:	ae e4       	ldi	r26, 0x4E	; 78
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	ee e4       	ldi	r30, 0x4E	; 78
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	8e 7f       	andi	r24, 0xFE	; 254
    242e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    2430:	ae e4       	ldi	r26, 0x4E	; 78
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	ee e4       	ldi	r30, 0x4E	; 78
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	82 60       	ori	r24, 0x02	; 2
    243c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    243e:	ae e4       	ldi	r26, 0x4E	; 78
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	ee e4       	ldi	r30, 0x4E	; 78
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	8b 7f       	andi	r24, 0xFB	; 251
    244a:	8c 93       	st	X, r24
    244c:	7c c3       	rjmp	.+1784   	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    244e:	ae e4       	ldi	r26, 0x4E	; 78
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	ee e4       	ldi	r30, 0x4E	; 78
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	81 60       	ori	r24, 0x01	; 1
    245a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    245c:	ae e4       	ldi	r26, 0x4E	; 78
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	ee e4       	ldi	r30, 0x4E	; 78
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	82 60       	ori	r24, 0x02	; 2
    2468:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    246a:	ae e4       	ldi	r26, 0x4E	; 78
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	ee e4       	ldi	r30, 0x4E	; 78
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	8b 7f       	andi	r24, 0xFB	; 251
    2476:	8c 93       	st	X, r24
    2478:	66 c3       	rjmp	.+1740   	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    247a:	ae e4       	ldi	r26, 0x4E	; 78
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	ee e4       	ldi	r30, 0x4E	; 78
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	8e 7f       	andi	r24, 0xFE	; 254
    2486:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    2488:	ae e4       	ldi	r26, 0x4E	; 78
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	ee e4       	ldi	r30, 0x4E	; 78
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	8d 7f       	andi	r24, 0xFD	; 253
    2494:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2496:	ae e4       	ldi	r26, 0x4E	; 78
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	ee e4       	ldi	r30, 0x4E	; 78
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	84 60       	ori	r24, 0x04	; 4
    24a2:	8c 93       	st	X, r24
    24a4:	50 c3       	rjmp	.+1696   	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    24a6:	ae e4       	ldi	r26, 0x4E	; 78
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	ee e4       	ldi	r30, 0x4E	; 78
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	81 60       	ori	r24, 0x01	; 1
    24b2:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    24b4:	ae e4       	ldi	r26, 0x4E	; 78
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	ee e4       	ldi	r30, 0x4E	; 78
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	80 81       	ld	r24, Z
    24be:	8d 7f       	andi	r24, 0xFD	; 253
    24c0:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    24c2:	ae e4       	ldi	r26, 0x4E	; 78
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	ee e4       	ldi	r30, 0x4E	; 78
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	84 60       	ori	r24, 0x04	; 4
    24ce:	8c 93       	st	X, r24
    24d0:	3a c3       	rjmp	.+1652   	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    24d2:	ae e4       	ldi	r26, 0x4E	; 78
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	ee e4       	ldi	r30, 0x4E	; 78
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	8e 7f       	andi	r24, 0xFE	; 254
    24de:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    24e0:	ae e4       	ldi	r26, 0x4E	; 78
    24e2:	b0 e0       	ldi	r27, 0x00	; 0
    24e4:	ee e4       	ldi	r30, 0x4E	; 78
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	80 81       	ld	r24, Z
    24ea:	82 60       	ori	r24, 0x02	; 2
    24ec:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    24ee:	ae e4       	ldi	r26, 0x4E	; 78
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	ee e4       	ldi	r30, 0x4E	; 78
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	84 60       	ori	r24, 0x04	; 4
    24fa:	8c 93       	st	X, r24
    24fc:	24 c3       	rjmp	.+1608   	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    24fe:	ae e4       	ldi	r26, 0x4E	; 78
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	ee e4       	ldi	r30, 0x4E	; 78
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	81 60       	ori	r24, 0x01	; 1
    250a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    250c:	ae e4       	ldi	r26, 0x4E	; 78
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	ee e4       	ldi	r30, 0x4E	; 78
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	82 60       	ori	r24, 0x02	; 2
    2518:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    251a:	ae e4       	ldi	r26, 0x4E	; 78
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	ee e4       	ldi	r30, 0x4E	; 78
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	84 60       	ori	r24, 0x04	; 4
    2526:	8c 93       	st	X, r24
    2528:	0e c3       	rjmp	.+1564   	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    252a:	19 82       	std	Y+1, r1	; 0x01
    252c:	0c c3       	rjmp	.+1560   	; 0x2b46 <Gpt_Init+0xca0>
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    252e:	ea 81       	ldd	r30, Y+2	; 0x02
    2530:	fb 81       	ldd	r31, Y+3	; 0x03
    2532:	81 81       	ldd	r24, Z+1	; 0x01
    2534:	88 23       	and	r24, r24
    2536:	e9 f4       	brne	.+58     	; 0x2572 <Gpt_Init+0x6cc>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2538:	af e4       	ldi	r26, 0x4F	; 79
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	ef e4       	ldi	r30, 0x4F	; 79
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	8e 7f       	andi	r24, 0xFE	; 254
    2544:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2546:	af e4       	ldi	r26, 0x4F	; 79
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	ef e4       	ldi	r30, 0x4F	; 79
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
    2550:	8d 7f       	andi	r24, 0xFD	; 253
    2552:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2554:	ae e4       	ldi	r26, 0x4E	; 78
    2556:	b0 e0       	ldi	r27, 0x00	; 0
    2558:	ee e4       	ldi	r30, 0x4E	; 78
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	80 81       	ld	r24, Z
    255e:	87 7f       	andi	r24, 0xF7	; 247
    2560:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2562:	ae e4       	ldi	r26, 0x4E	; 78
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	ee e4       	ldi	r30, 0x4E	; 78
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	8f 7e       	andi	r24, 0xEF	; 239
    256e:	8c 93       	st	X, r24
    2570:	23 c0       	rjmp	.+70     	; 0x25b8 <Gpt_Init+0x712>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    2572:	ea 81       	ldd	r30, Y+2	; 0x02
    2574:	fb 81       	ldd	r31, Y+3	; 0x03
    2576:	81 81       	ldd	r24, Z+1	; 0x01
    2578:	81 30       	cpi	r24, 0x01	; 1
    257a:	e9 f4       	brne	.+58     	; 0x25b6 <Gpt_Init+0x710>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    257c:	af e4       	ldi	r26, 0x4F	; 79
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	ef e4       	ldi	r30, 0x4F	; 79
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	8e 7f       	andi	r24, 0xFE	; 254
    2588:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_WGM11);
    258a:	af e4       	ldi	r26, 0x4F	; 79
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	ef e4       	ldi	r30, 0x4F	; 79
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	8d 7f       	andi	r24, 0xFD	; 253
    2596:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    2598:	ae e4       	ldi	r26, 0x4E	; 78
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	ee e4       	ldi	r30, 0x4E	; 78
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	88 60       	ori	r24, 0x08	; 8
    25a4:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_WGM13);
    25a6:	ae e4       	ldi	r26, 0x4E	; 78
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	ee e4       	ldi	r30, 0x4E	; 78
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	8f 7e       	andi	r24, 0xEF	; 239
    25b2:	8c 93       	st	X, r24
    25b4:	01 c0       	rjmp	.+2      	; 0x25b8 <Gpt_Init+0x712>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    25b6:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    25b8:	ea 81       	ldd	r30, Y+2	; 0x02
    25ba:	fb 81       	ldd	r31, Y+3	; 0x03
    25bc:	82 81       	ldd	r24, Z+2	; 0x02
    25be:	28 2f       	mov	r18, r24
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	3b 87       	std	Y+11, r19	; 0x0b
    25c4:	2a 87       	std	Y+10, r18	; 0x0a
    25c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    25c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    25ca:	81 30       	cpi	r24, 0x01	; 1
    25cc:	91 05       	cpc	r25, r1
    25ce:	21 f1       	breq	.+72     	; 0x2618 <Gpt_Init+0x772>
    25d0:	2a 85       	ldd	r18, Y+10	; 0x0a
    25d2:	3b 85       	ldd	r19, Y+11	; 0x0b
    25d4:	22 30       	cpi	r18, 0x02	; 2
    25d6:	31 05       	cpc	r19, r1
    25d8:	2c f4       	brge	.+10     	; 0x25e4 <Gpt_Init+0x73e>
    25da:	8a 85       	ldd	r24, Y+10	; 0x0a
    25dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	61 f0       	breq	.+24     	; 0x25fa <Gpt_Init+0x754>
    25e2:	47 c0       	rjmp	.+142    	; 0x2672 <Gpt_Init+0x7cc>
    25e4:	2a 85       	ldd	r18, Y+10	; 0x0a
    25e6:	3b 85       	ldd	r19, Y+11	; 0x0b
    25e8:	22 30       	cpi	r18, 0x02	; 2
    25ea:	31 05       	cpc	r19, r1
    25ec:	21 f1       	breq	.+72     	; 0x2636 <Gpt_Init+0x790>
    25ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    25f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    25f2:	83 30       	cpi	r24, 0x03	; 3
    25f4:	91 05       	cpc	r25, r1
    25f6:	71 f1       	breq	.+92     	; 0x2654 <Gpt_Init+0x7ae>
    25f8:	3c c0       	rjmp	.+120    	; 0x2672 <Gpt_Init+0x7cc>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    25fa:	af e4       	ldi	r26, 0x4F	; 79
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	ef e4       	ldi	r30, 0x4F	; 79
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	8f 7e       	andi	r24, 0xEF	; 239
    2606:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    2608:	af e4       	ldi	r26, 0x4F	; 79
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	ef e4       	ldi	r30, 0x4F	; 79
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	8f 7d       	andi	r24, 0xDF	; 223
    2614:	8c 93       	st	X, r24
    2616:	2e c0       	rjmp	.+92     	; 0x2674 <Gpt_Init+0x7ce>
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    2618:	af e4       	ldi	r26, 0x4F	; 79
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	ef e4       	ldi	r30, 0x4F	; 79
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	80 61       	ori	r24, 0x10	; 16
    2624:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    2626:	af e4       	ldi	r26, 0x4F	; 79
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	ef e4       	ldi	r30, 0x4F	; 79
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	8f 7d       	andi	r24, 0xDF	; 223
    2632:	8c 93       	st	X, r24
    2634:	1f c0       	rjmp	.+62     	; 0x2674 <Gpt_Init+0x7ce>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    2636:	af e4       	ldi	r26, 0x4F	; 79
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	ef e4       	ldi	r30, 0x4F	; 79
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	80 61       	ori	r24, 0x10	; 16
    2642:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2644:	af e4       	ldi	r26, 0x4F	; 79
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	ef e4       	ldi	r30, 0x4F	; 79
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	80 62       	ori	r24, 0x20	; 32
    2650:	8c 93       	st	X, r24
    2652:	10 c0       	rjmp	.+32     	; 0x2674 <Gpt_Init+0x7ce>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    2654:	af e4       	ldi	r26, 0x4F	; 79
    2656:	b0 e0       	ldi	r27, 0x00	; 0
    2658:	ef e4       	ldi	r30, 0x4F	; 79
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	8f 7e       	andi	r24, 0xEF	; 239
    2660:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2662:	af e4       	ldi	r26, 0x4F	; 79
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	ef e4       	ldi	r30, 0x4F	; 79
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
    266c:	80 62       	ori	r24, 0x20	; 32
    266e:	8c 93       	st	X, r24
    2670:	01 c0       	rjmp	.+2      	; 0x2674 <Gpt_Init+0x7ce>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2672:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    2674:	ea 81       	ldd	r30, Y+2	; 0x02
    2676:	fb 81       	ldd	r31, Y+3	; 0x03
    2678:	83 81       	ldd	r24, Z+3	; 0x03
    267a:	28 2f       	mov	r18, r24
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	39 87       	std	Y+9, r19	; 0x09
    2680:	28 87       	std	Y+8, r18	; 0x08
    2682:	88 85       	ldd	r24, Y+8	; 0x08
    2684:	99 85       	ldd	r25, Y+9	; 0x09
    2686:	84 30       	cpi	r24, 0x04	; 4
    2688:	91 05       	cpc	r25, r1
    268a:	09 f4       	brne	.+2      	; 0x268e <Gpt_Init+0x7e8>
    268c:	77 c0       	rjmp	.+238    	; 0x277c <Gpt_Init+0x8d6>
    268e:	28 85       	ldd	r18, Y+8	; 0x08
    2690:	39 85       	ldd	r19, Y+9	; 0x09
    2692:	25 30       	cpi	r18, 0x05	; 5
    2694:	31 05       	cpc	r19, r1
    2696:	8c f4       	brge	.+34     	; 0x26ba <Gpt_Init+0x814>
    2698:	88 85       	ldd	r24, Y+8	; 0x08
    269a:	99 85       	ldd	r25, Y+9	; 0x09
    269c:	81 30       	cpi	r24, 0x01	; 1
    269e:	91 05       	cpc	r25, r1
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <Gpt_Init+0x7fe>
    26a2:	40 c0       	rjmp	.+128    	; 0x2724 <Gpt_Init+0x87e>
    26a4:	28 85       	ldd	r18, Y+8	; 0x08
    26a6:	39 85       	ldd	r19, Y+9	; 0x09
    26a8:	22 30       	cpi	r18, 0x02	; 2
    26aa:	31 05       	cpc	r19, r1
    26ac:	09 f4       	brne	.+2      	; 0x26b0 <Gpt_Init+0x80a>
    26ae:	50 c0       	rjmp	.+160    	; 0x2750 <Gpt_Init+0x8aa>
    26b0:	88 85       	ldd	r24, Y+8	; 0x08
    26b2:	99 85       	ldd	r25, Y+9	; 0x09
    26b4:	00 97       	sbiw	r24, 0x00	; 0
    26b6:	01 f1       	breq	.+64     	; 0x26f8 <Gpt_Init+0x852>
    26b8:	cf c0       	rjmp	.+414    	; 0x2858 <Gpt_Init+0x9b2>
    26ba:	28 85       	ldd	r18, Y+8	; 0x08
    26bc:	39 85       	ldd	r19, Y+9	; 0x09
    26be:	27 30       	cpi	r18, 0x07	; 7
    26c0:	31 05       	cpc	r19, r1
    26c2:	09 f4       	brne	.+2      	; 0x26c6 <Gpt_Init+0x820>
    26c4:	87 c0       	rjmp	.+270    	; 0x27d4 <Gpt_Init+0x92e>
    26c6:	88 85       	ldd	r24, Y+8	; 0x08
    26c8:	99 85       	ldd	r25, Y+9	; 0x09
    26ca:	88 30       	cpi	r24, 0x08	; 8
    26cc:	91 05       	cpc	r25, r1
    26ce:	3c f4       	brge	.+14     	; 0x26de <Gpt_Init+0x838>
    26d0:	28 85       	ldd	r18, Y+8	; 0x08
    26d2:	39 85       	ldd	r19, Y+9	; 0x09
    26d4:	26 30       	cpi	r18, 0x06	; 6
    26d6:	31 05       	cpc	r19, r1
    26d8:	09 f4       	brne	.+2      	; 0x26dc <Gpt_Init+0x836>
    26da:	66 c0       	rjmp	.+204    	; 0x27a8 <Gpt_Init+0x902>
    26dc:	bd c0       	rjmp	.+378    	; 0x2858 <Gpt_Init+0x9b2>
    26de:	88 85       	ldd	r24, Y+8	; 0x08
    26e0:	99 85       	ldd	r25, Y+9	; 0x09
    26e2:	88 30       	cpi	r24, 0x08	; 8
    26e4:	91 05       	cpc	r25, r1
    26e6:	09 f4       	brne	.+2      	; 0x26ea <Gpt_Init+0x844>
    26e8:	8b c0       	rjmp	.+278    	; 0x2800 <Gpt_Init+0x95a>
    26ea:	28 85       	ldd	r18, Y+8	; 0x08
    26ec:	39 85       	ldd	r19, Y+9	; 0x09
    26ee:	29 30       	cpi	r18, 0x09	; 9
    26f0:	31 05       	cpc	r19, r1
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <Gpt_Init+0x850>
    26f4:	9b c0       	rjmp	.+310    	; 0x282c <Gpt_Init+0x986>
    26f6:	b0 c0       	rjmp	.+352    	; 0x2858 <Gpt_Init+0x9b2>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    26f8:	ae e4       	ldi	r26, 0x4E	; 78
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	ee e4       	ldi	r30, 0x4E	; 78
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	8e 7f       	andi	r24, 0xFE	; 254
    2704:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    2706:	ae e4       	ldi	r26, 0x4E	; 78
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	ee e4       	ldi	r30, 0x4E	; 78
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	8d 7f       	andi	r24, 0xFD	; 253
    2712:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2714:	ae e4       	ldi	r26, 0x4E	; 78
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	ee e4       	ldi	r30, 0x4E	; 78
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	8b 7f       	andi	r24, 0xFB	; 251
    2720:	8c 93       	st	X, r24
    2722:	11 c2       	rjmp	.+1058   	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    2724:	ae e4       	ldi	r26, 0x4E	; 78
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	ee e4       	ldi	r30, 0x4E	; 78
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	81 60       	ori	r24, 0x01	; 1
    2730:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    2732:	ae e4       	ldi	r26, 0x4E	; 78
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	ee e4       	ldi	r30, 0x4E	; 78
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	8d 7f       	andi	r24, 0xFD	; 253
    273e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2740:	ae e4       	ldi	r26, 0x4E	; 78
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	ee e4       	ldi	r30, 0x4E	; 78
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	80 81       	ld	r24, Z
    274a:	8b 7f       	andi	r24, 0xFB	; 251
    274c:	8c 93       	st	X, r24
    274e:	fb c1       	rjmp	.+1014   	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2750:	ae e4       	ldi	r26, 0x4E	; 78
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	ee e4       	ldi	r30, 0x4E	; 78
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	8e 7f       	andi	r24, 0xFE	; 254
    275c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    275e:	ae e4       	ldi	r26, 0x4E	; 78
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	ee e4       	ldi	r30, 0x4E	; 78
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	82 60       	ori	r24, 0x02	; 2
    276a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    276c:	ae e4       	ldi	r26, 0x4E	; 78
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	ee e4       	ldi	r30, 0x4E	; 78
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	8b 7f       	andi	r24, 0xFB	; 251
    2778:	8c 93       	st	X, r24
    277a:	e5 c1       	rjmp	.+970    	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    277c:	ae e4       	ldi	r26, 0x4E	; 78
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	ee e4       	ldi	r30, 0x4E	; 78
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	81 60       	ori	r24, 0x01	; 1
    2788:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    278a:	ae e4       	ldi	r26, 0x4E	; 78
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	ee e4       	ldi	r30, 0x4E	; 78
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	82 60       	ori	r24, 0x02	; 2
    2796:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    2798:	ae e4       	ldi	r26, 0x4E	; 78
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	ee e4       	ldi	r30, 0x4E	; 78
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	8b 7f       	andi	r24, 0xFB	; 251
    27a4:	8c 93       	st	X, r24
    27a6:	cf c1       	rjmp	.+926    	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    27a8:	ae e4       	ldi	r26, 0x4E	; 78
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	ee e4       	ldi	r30, 0x4E	; 78
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	8e 7f       	andi	r24, 0xFE	; 254
    27b4:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    27b6:	ae e4       	ldi	r26, 0x4E	; 78
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	ee e4       	ldi	r30, 0x4E	; 78
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	8d 7f       	andi	r24, 0xFD	; 253
    27c2:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    27c4:	ae e4       	ldi	r26, 0x4E	; 78
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	ee e4       	ldi	r30, 0x4E	; 78
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	80 81       	ld	r24, Z
    27ce:	84 60       	ori	r24, 0x04	; 4
    27d0:	8c 93       	st	X, r24
    27d2:	b9 c1       	rjmp	.+882    	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    27d4:	ae e4       	ldi	r26, 0x4E	; 78
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	ee e4       	ldi	r30, 0x4E	; 78
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	81 60       	ori	r24, 0x01	; 1
    27e0:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    27e2:	ae e4       	ldi	r26, 0x4E	; 78
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	ee e4       	ldi	r30, 0x4E	; 78
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	80 81       	ld	r24, Z
    27ec:	8d 7f       	andi	r24, 0xFD	; 253
    27ee:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    27f0:	ae e4       	ldi	r26, 0x4E	; 78
    27f2:	b0 e0       	ldi	r27, 0x00	; 0
    27f4:	ee e4       	ldi	r30, 0x4E	; 78
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	80 81       	ld	r24, Z
    27fa:	84 60       	ori	r24, 0x04	; 4
    27fc:	8c 93       	st	X, r24
    27fe:	a3 c1       	rjmp	.+838    	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    2800:	ae e4       	ldi	r26, 0x4E	; 78
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	ee e4       	ldi	r30, 0x4E	; 78
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	8e 7f       	andi	r24, 0xFE	; 254
    280c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    280e:	ae e4       	ldi	r26, 0x4E	; 78
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	ee e4       	ldi	r30, 0x4E	; 78
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	82 60       	ori	r24, 0x02	; 2
    281a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    281c:	ae e4       	ldi	r26, 0x4E	; 78
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	ee e4       	ldi	r30, 0x4E	; 78
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	84 60       	ori	r24, 0x04	; 4
    2828:	8c 93       	st	X, r24
    282a:	8d c1       	rjmp	.+794    	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    282c:	ae e4       	ldi	r26, 0x4E	; 78
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	ee e4       	ldi	r30, 0x4E	; 78
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	81 60       	ori	r24, 0x01	; 1
    2838:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    283a:	ae e4       	ldi	r26, 0x4E	; 78
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	ee e4       	ldi	r30, 0x4E	; 78
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	82 60       	ori	r24, 0x02	; 2
    2846:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    2848:	ae e4       	ldi	r26, 0x4E	; 78
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	ee e4       	ldi	r30, 0x4E	; 78
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	84 60       	ori	r24, 0x04	; 4
    2854:	8c 93       	st	X, r24
    2856:	77 c1       	rjmp	.+750    	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2858:	19 82       	std	Y+1, r1	; 0x01
    285a:	75 c1       	rjmp	.+746    	; 0x2b46 <Gpt_Init+0xca0>
        }
        break;

    case GPT_CHANNEL_TIMER2:
        /*Waveform Generation Mode*/
        if (config->mode == GPT_MODE_NORMAL)
    285c:	ea 81       	ldd	r30, Y+2	; 0x02
    285e:	fb 81       	ldd	r31, Y+3	; 0x03
    2860:	81 81       	ldd	r24, Z+1	; 0x01
    2862:	88 23       	and	r24, r24
    2864:	79 f4       	brne	.+30     	; 0x2884 <Gpt_Init+0x9de>
        {
            CLR_BIT(TCCR2,TCCR2_COM20);
    2866:	a5 e4       	ldi	r26, 0x45	; 69
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	e5 e4       	ldi	r30, 0x45	; 69
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	8f 7e       	andi	r24, 0xEF	; 239
    2872:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_COM21);
    2874:	a5 e4       	ldi	r26, 0x45	; 69
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	e5 e4       	ldi	r30, 0x45	; 69
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	8f 7d       	andi	r24, 0xDF	; 223
    2880:	8c 93       	st	X, r24
    2882:	15 c0       	rjmp	.+42     	; 0x28ae <Gpt_Init+0xa08>
            // TODO
            // TODO
        }
        else if (config->mode == GPT_MODE_CTC)
    2884:	ea 81       	ldd	r30, Y+2	; 0x02
    2886:	fb 81       	ldd	r31, Y+3	; 0x03
    2888:	81 81       	ldd	r24, Z+1	; 0x01
    288a:	81 30       	cpi	r24, 0x01	; 1
    288c:	79 f4       	brne	.+30     	; 0x28ac <Gpt_Init+0xa06>
        {
            CLR_BIT(TCCR2,TCCR2_COM20);
    288e:	a5 e4       	ldi	r26, 0x45	; 69
    2890:	b0 e0       	ldi	r27, 0x00	; 0
    2892:	e5 e4       	ldi	r30, 0x45	; 69
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	80 81       	ld	r24, Z
    2898:	8f 7e       	andi	r24, 0xEF	; 239
    289a:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_COM21);
    289c:	a5 e4       	ldi	r26, 0x45	; 69
    289e:	b0 e0       	ldi	r27, 0x00	; 0
    28a0:	e5 e4       	ldi	r30, 0x45	; 69
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	80 81       	ld	r24, Z
    28a6:	80 62       	ori	r24, 0x20	; 32
    28a8:	8c 93       	st	X, r24
    28aa:	01 c0       	rjmp	.+2      	; 0x28ae <Gpt_Init+0xa08>
            // TODO
            // TODO
        }
        else
        {
            returnValue = GPT_ERROR;
    28ac:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    28ae:	ea 81       	ldd	r30, Y+2	; 0x02
    28b0:	fb 81       	ldd	r31, Y+3	; 0x03
    28b2:	82 81       	ldd	r24, Z+2	; 0x02
    28b4:	28 2f       	mov	r18, r24
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	3f 83       	std	Y+7, r19	; 0x07
    28ba:	2e 83       	std	Y+6, r18	; 0x06
    28bc:	8e 81       	ldd	r24, Y+6	; 0x06
    28be:	9f 81       	ldd	r25, Y+7	; 0x07
    28c0:	81 30       	cpi	r24, 0x01	; 1
    28c2:	91 05       	cpc	r25, r1
    28c4:	21 f1       	breq	.+72     	; 0x290e <Gpt_Init+0xa68>
    28c6:	2e 81       	ldd	r18, Y+6	; 0x06
    28c8:	3f 81       	ldd	r19, Y+7	; 0x07
    28ca:	22 30       	cpi	r18, 0x02	; 2
    28cc:	31 05       	cpc	r19, r1
    28ce:	2c f4       	brge	.+10     	; 0x28da <Gpt_Init+0xa34>
    28d0:	8e 81       	ldd	r24, Y+6	; 0x06
    28d2:	9f 81       	ldd	r25, Y+7	; 0x07
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	61 f0       	breq	.+24     	; 0x28f0 <Gpt_Init+0xa4a>
    28d8:	47 c0       	rjmp	.+142    	; 0x2968 <Gpt_Init+0xac2>
    28da:	2e 81       	ldd	r18, Y+6	; 0x06
    28dc:	3f 81       	ldd	r19, Y+7	; 0x07
    28de:	22 30       	cpi	r18, 0x02	; 2
    28e0:	31 05       	cpc	r19, r1
    28e2:	21 f1       	breq	.+72     	; 0x292c <Gpt_Init+0xa86>
    28e4:	8e 81       	ldd	r24, Y+6	; 0x06
    28e6:	9f 81       	ldd	r25, Y+7	; 0x07
    28e8:	83 30       	cpi	r24, 0x03	; 3
    28ea:	91 05       	cpc	r25, r1
    28ec:	71 f1       	breq	.+92     	; 0x294a <Gpt_Init+0xaa4>
    28ee:	3c c0       	rjmp	.+120    	; 0x2968 <Gpt_Init+0xac2>
        {
        case GPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR2,TCCR2_COM20);
    28f0:	a5 e4       	ldi	r26, 0x45	; 69
    28f2:	b0 e0       	ldi	r27, 0x00	; 0
    28f4:	e5 e4       	ldi	r30, 0x45	; 69
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	80 81       	ld	r24, Z
    28fa:	8f 7e       	andi	r24, 0xEF	; 239
    28fc:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_COM21);
    28fe:	a5 e4       	ldi	r26, 0x45	; 69
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	e5 e4       	ldi	r30, 0x45	; 69
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	8f 7d       	andi	r24, 0xDF	; 223
    290a:	8c 93       	st	X, r24
    290c:	2e c0       	rjmp	.+92     	; 0x296a <Gpt_Init+0xac4>
            // TODO
            break;
        case GPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR2,TCCR2_COM20);
    290e:	a5 e4       	ldi	r26, 0x45	; 69
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	e5 e4       	ldi	r30, 0x45	; 69
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	80 61       	ori	r24, 0x10	; 16
    291a:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_COM21);
    291c:	a5 e4       	ldi	r26, 0x45	; 69
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	e5 e4       	ldi	r30, 0x45	; 69
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	8f 7d       	andi	r24, 0xDF	; 223
    2928:	8c 93       	st	X, r24
    292a:	1f c0       	rjmp	.+62     	; 0x296a <Gpt_Init+0xac4>
            // TODO
            break;
        case GPT_OUTPUT_SET:
            SET_BIT(TCCR2,TCCR2_COM20);
    292c:	a5 e4       	ldi	r26, 0x45	; 69
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	e5 e4       	ldi	r30, 0x45	; 69
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	80 61       	ori	r24, 0x10	; 16
    2938:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_COM21);
    293a:	a5 e4       	ldi	r26, 0x45	; 69
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	e5 e4       	ldi	r30, 0x45	; 69
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	80 62       	ori	r24, 0x20	; 32
    2946:	8c 93       	st	X, r24
    2948:	10 c0       	rjmp	.+32     	; 0x296a <Gpt_Init+0xac4>
            // TODO
            break;
        case GPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR2,TCCR2_COM20);
    294a:	a5 e4       	ldi	r26, 0x45	; 69
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	e5 e4       	ldi	r30, 0x45	; 69
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	80 81       	ld	r24, Z
    2954:	8f 7e       	andi	r24, 0xEF	; 239
    2956:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_COM21);
    2958:	a5 e4       	ldi	r26, 0x45	; 69
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	e5 e4       	ldi	r30, 0x45	; 69
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	80 62       	ori	r24, 0x20	; 32
    2964:	8c 93       	st	X, r24
    2966:	01 c0       	rjmp	.+2      	; 0x296a <Gpt_Init+0xac4>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2968:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    296a:	ea 81       	ldd	r30, Y+2	; 0x02
    296c:	fb 81       	ldd	r31, Y+3	; 0x03
    296e:	83 81       	ldd	r24, Z+3	; 0x03
    2970:	28 2f       	mov	r18, r24
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	3d 83       	std	Y+5, r19	; 0x05
    2976:	2c 83       	std	Y+4, r18	; 0x04
    2978:	8c 81       	ldd	r24, Y+4	; 0x04
    297a:	9d 81       	ldd	r25, Y+5	; 0x05
    297c:	83 30       	cpi	r24, 0x03	; 3
    297e:	91 05       	cpc	r25, r1
    2980:	09 f4       	brne	.+2      	; 0x2984 <Gpt_Init+0xade>
    2982:	70 c0       	rjmp	.+224    	; 0x2a64 <Gpt_Init+0xbbe>
    2984:	2c 81       	ldd	r18, Y+4	; 0x04
    2986:	3d 81       	ldd	r19, Y+5	; 0x05
    2988:	24 30       	cpi	r18, 0x04	; 4
    298a:	31 05       	cpc	r19, r1
    298c:	84 f4       	brge	.+32     	; 0x29ae <Gpt_Init+0xb08>
    298e:	8c 81       	ldd	r24, Y+4	; 0x04
    2990:	9d 81       	ldd	r25, Y+5	; 0x05
    2992:	81 30       	cpi	r24, 0x01	; 1
    2994:	91 05       	cpc	r25, r1
    2996:	d1 f1       	breq	.+116    	; 0x2a0c <Gpt_Init+0xb66>
    2998:	2c 81       	ldd	r18, Y+4	; 0x04
    299a:	3d 81       	ldd	r19, Y+5	; 0x05
    299c:	22 30       	cpi	r18, 0x02	; 2
    299e:	31 05       	cpc	r19, r1
    29a0:	0c f0       	brlt	.+2      	; 0x29a4 <Gpt_Init+0xafe>
    29a2:	4a c0       	rjmp	.+148    	; 0x2a38 <Gpt_Init+0xb92>
    29a4:	8c 81       	ldd	r24, Y+4	; 0x04
    29a6:	9d 81       	ldd	r25, Y+5	; 0x05
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	d1 f0       	breq	.+52     	; 0x29e0 <Gpt_Init+0xb3a>
    29ac:	c9 c0       	rjmp	.+402    	; 0x2b40 <Gpt_Init+0xc9a>
    29ae:	2c 81       	ldd	r18, Y+4	; 0x04
    29b0:	3d 81       	ldd	r19, Y+5	; 0x05
    29b2:	25 30       	cpi	r18, 0x05	; 5
    29b4:	31 05       	cpc	r19, r1
    29b6:	09 f4       	brne	.+2      	; 0x29ba <Gpt_Init+0xb14>
    29b8:	81 c0       	rjmp	.+258    	; 0x2abc <Gpt_Init+0xc16>
    29ba:	8c 81       	ldd	r24, Y+4	; 0x04
    29bc:	9d 81       	ldd	r25, Y+5	; 0x05
    29be:	85 30       	cpi	r24, 0x05	; 5
    29c0:	91 05       	cpc	r25, r1
    29c2:	0c f4       	brge	.+2      	; 0x29c6 <Gpt_Init+0xb20>
    29c4:	65 c0       	rjmp	.+202    	; 0x2a90 <Gpt_Init+0xbea>
    29c6:	2c 81       	ldd	r18, Y+4	; 0x04
    29c8:	3d 81       	ldd	r19, Y+5	; 0x05
    29ca:	26 30       	cpi	r18, 0x06	; 6
    29cc:	31 05       	cpc	r19, r1
    29ce:	09 f4       	brne	.+2      	; 0x29d2 <Gpt_Init+0xb2c>
    29d0:	8b c0       	rjmp	.+278    	; 0x2ae8 <Gpt_Init+0xc42>
    29d2:	8c 81       	ldd	r24, Y+4	; 0x04
    29d4:	9d 81       	ldd	r25, Y+5	; 0x05
    29d6:	87 30       	cpi	r24, 0x07	; 7
    29d8:	91 05       	cpc	r25, r1
    29da:	09 f4       	brne	.+2      	; 0x29de <Gpt_Init+0xb38>
    29dc:	9b c0       	rjmp	.+310    	; 0x2b14 <Gpt_Init+0xc6e>
    29de:	b0 c0       	rjmp	.+352    	; 0x2b40 <Gpt_Init+0xc9a>
        {
        case GPT_PRESCALER_0:
            CLR_BIT(TCCR2,TCCR2_CS20);
    29e0:	a5 e4       	ldi	r26, 0x45	; 69
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	e5 e4       	ldi	r30, 0x45	; 69
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
    29ea:	8e 7f       	andi	r24, 0xFE	; 254
    29ec:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS21);
    29ee:	a5 e4       	ldi	r26, 0x45	; 69
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	e5 e4       	ldi	r30, 0x45	; 69
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	8d 7f       	andi	r24, 0xFD	; 253
    29fa:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS22);
    29fc:	a5 e4       	ldi	r26, 0x45	; 69
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	e5 e4       	ldi	r30, 0x45	; 69
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	8b 7f       	andi	r24, 0xFB	; 251
    2a08:	8c 93       	st	X, r24
    2a0a:	9d c0       	rjmp	.+314    	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1:
            SET_BIT(TCCR2,TCCR2_CS20);
    2a0c:	a5 e4       	ldi	r26, 0x45	; 69
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	e5 e4       	ldi	r30, 0x45	; 69
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	81 60       	ori	r24, 0x01	; 1
    2a18:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS21);
    2a1a:	a5 e4       	ldi	r26, 0x45	; 69
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	e5 e4       	ldi	r30, 0x45	; 69
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	8d 7f       	andi	r24, 0xFD	; 253
    2a26:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS22);
    2a28:	a5 e4       	ldi	r26, 0x45	; 69
    2a2a:	b0 e0       	ldi	r27, 0x00	; 0
    2a2c:	e5 e4       	ldi	r30, 0x45	; 69
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	8b 7f       	andi	r24, 0xFB	; 251
    2a34:	8c 93       	st	X, r24
    2a36:	87 c0       	rjmp	.+270    	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_8:
            CLR_BIT(TCCR2,TCCR2_CS20);
    2a38:	a5 e4       	ldi	r26, 0x45	; 69
    2a3a:	b0 e0       	ldi	r27, 0x00	; 0
    2a3c:	e5 e4       	ldi	r30, 0x45	; 69
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	80 81       	ld	r24, Z
    2a42:	8e 7f       	andi	r24, 0xFE	; 254
    2a44:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS21);
    2a46:	a5 e4       	ldi	r26, 0x45	; 69
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	e5 e4       	ldi	r30, 0x45	; 69
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	80 81       	ld	r24, Z
    2a50:	82 60       	ori	r24, 0x02	; 2
    2a52:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS22);
    2a54:	a5 e4       	ldi	r26, 0x45	; 69
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	e5 e4       	ldi	r30, 0x45	; 69
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	8b 7f       	andi	r24, 0xFB	; 251
    2a60:	8c 93       	st	X, r24
    2a62:	71 c0       	rjmp	.+226    	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_32:
            SET_BIT(TCCR2,TCCR2_CS20);
    2a64:	a5 e4       	ldi	r26, 0x45	; 69
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	e5 e4       	ldi	r30, 0x45	; 69
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	81 60       	ori	r24, 0x01	; 1
    2a70:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS21);
    2a72:	a5 e4       	ldi	r26, 0x45	; 69
    2a74:	b0 e0       	ldi	r27, 0x00	; 0
    2a76:	e5 e4       	ldi	r30, 0x45	; 69
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	82 60       	ori	r24, 0x02	; 2
    2a7e:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS22);
    2a80:	a5 e4       	ldi	r26, 0x45	; 69
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	e5 e4       	ldi	r30, 0x45	; 69
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	80 81       	ld	r24, Z
    2a8a:	8b 7f       	andi	r24, 0xFB	; 251
    2a8c:	8c 93       	st	X, r24
    2a8e:	5b c0       	rjmp	.+182    	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_64:
            CLR_BIT(TCCR2,TCCR2_CS20);
    2a90:	a5 e4       	ldi	r26, 0x45	; 69
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	e5 e4       	ldi	r30, 0x45	; 69
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	8e 7f       	andi	r24, 0xFE	; 254
    2a9c:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS21);
    2a9e:	a5 e4       	ldi	r26, 0x45	; 69
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	e5 e4       	ldi	r30, 0x45	; 69
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	8d 7f       	andi	r24, 0xFD	; 253
    2aaa:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS22);
    2aac:	a5 e4       	ldi	r26, 0x45	; 69
    2aae:	b0 e0       	ldi	r27, 0x00	; 0
    2ab0:	e5 e4       	ldi	r30, 0x45	; 69
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	80 81       	ld	r24, Z
    2ab6:	84 60       	ori	r24, 0x04	; 4
    2ab8:	8c 93       	st	X, r24
    2aba:	45 c0       	rjmp	.+138    	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_128:
            SET_BIT(TCCR2,TCCR2_CS20);
    2abc:	a5 e4       	ldi	r26, 0x45	; 69
    2abe:	b0 e0       	ldi	r27, 0x00	; 0
    2ac0:	e5 e4       	ldi	r30, 0x45	; 69
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	81 60       	ori	r24, 0x01	; 1
    2ac8:	8c 93       	st	X, r24
            CLR_BIT(TCCR2,TCCR2_CS21);
    2aca:	a5 e4       	ldi	r26, 0x45	; 69
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	e5 e4       	ldi	r30, 0x45	; 69
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	80 81       	ld	r24, Z
    2ad4:	8d 7f       	andi	r24, 0xFD	; 253
    2ad6:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS22);
    2ad8:	a5 e4       	ldi	r26, 0x45	; 69
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	e5 e4       	ldi	r30, 0x45	; 69
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
    2ae2:	84 60       	ori	r24, 0x04	; 4
    2ae4:	8c 93       	st	X, r24
    2ae6:	2f c0       	rjmp	.+94     	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_256:
            CLR_BIT(TCCR2,TCCR2_CS20);
    2ae8:	a5 e4       	ldi	r26, 0x45	; 69
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	e5 e4       	ldi	r30, 0x45	; 69
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
    2af2:	8e 7f       	andi	r24, 0xFE	; 254
    2af4:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS21);
    2af6:	a5 e4       	ldi	r26, 0x45	; 69
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	e5 e4       	ldi	r30, 0x45	; 69
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	80 81       	ld	r24, Z
    2b00:	82 60       	ori	r24, 0x02	; 2
    2b02:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS22);
    2b04:	a5 e4       	ldi	r26, 0x45	; 69
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	e5 e4       	ldi	r30, 0x45	; 69
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	84 60       	ori	r24, 0x04	; 4
    2b10:	8c 93       	st	X, r24
    2b12:	19 c0       	rjmp	.+50     	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        case GPT_PRESCALER_1024:
            SET_BIT(TCCR2,TCCR2_CS20);
    2b14:	a5 e4       	ldi	r26, 0x45	; 69
    2b16:	b0 e0       	ldi	r27, 0x00	; 0
    2b18:	e5 e4       	ldi	r30, 0x45	; 69
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	80 81       	ld	r24, Z
    2b1e:	81 60       	ori	r24, 0x01	; 1
    2b20:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS21);
    2b22:	a5 e4       	ldi	r26, 0x45	; 69
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	e5 e4       	ldi	r30, 0x45	; 69
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	82 60       	ori	r24, 0x02	; 2
    2b2e:	8c 93       	st	X, r24
            SET_BIT(TCCR2,TCCR2_CS22);
    2b30:	a5 e4       	ldi	r26, 0x45	; 69
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	e5 e4       	ldi	r30, 0x45	; 69
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	84 60       	ori	r24, 0x04	; 4
    2b3c:	8c 93       	st	X, r24
    2b3e:	03 c0       	rjmp	.+6      	; 0x2b46 <Gpt_Init+0xca0>
            // TODO
            break;
        default:
            returnValue = GPT_ERROR;
    2b40:	19 82       	std	Y+1, r1	; 0x01
    2b42:	01 c0       	rjmp	.+2      	; 0x2b46 <Gpt_Init+0xca0>
            break;
        }
        break;

    default:
        returnValue = GPT_ERROR;
    2b44:	19 82       	std	Y+1, r1	; 0x01
    }
    return returnValue;
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b48:	65 96       	adiw	r28, 0x15	; 21
    2b4a:	0f b6       	in	r0, 0x3f	; 63
    2b4c:	f8 94       	cli
    2b4e:	de bf       	out	0x3e, r29	; 62
    2b50:	0f be       	out	0x3f, r0	; 63
    2b52:	cd bf       	out	0x3d, r28	; 61
    2b54:	cf 91       	pop	r28
    2b56:	df 91       	pop	r29
    2b58:	08 95       	ret

00002b5a <Gpt_StartTimer>:

Gpt_ReturnType Gpt_StartTimer(Gpt_ChannelType channel, u16 value)
{
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	00 d0       	rcall	.+0      	; 0x2b60 <Gpt_StartTimer+0x6>
    2b60:	00 d0       	rcall	.+0      	; 0x2b62 <Gpt_StartTimer+0x8>
    2b62:	00 d0       	rcall	.+0      	; 0x2b64 <Gpt_StartTimer+0xa>
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
    2b68:	8a 83       	std	Y+2, r24	; 0x02
    2b6a:	7c 83       	std	Y+4, r23	; 0x04
    2b6c:	6b 83       	std	Y+3, r22	; 0x03
    Gpt_ReturnType returnValue = GPT_OK;
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	89 83       	std	Y+1, r24	; 0x01
    switch (channel)
    2b72:	8a 81       	ldd	r24, Y+2	; 0x02
    2b74:	28 2f       	mov	r18, r24
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	3e 83       	std	Y+6, r19	; 0x06
    2b7a:	2d 83       	std	Y+5, r18	; 0x05
    2b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b80:	81 30       	cpi	r24, 0x01	; 1
    2b82:	91 05       	cpc	r25, r1
    2b84:	11 f1       	breq	.+68     	; 0x2bca <Gpt_StartTimer+0x70>
    2b86:	2d 81       	ldd	r18, Y+5	; 0x05
    2b88:	3e 81       	ldd	r19, Y+6	; 0x06
    2b8a:	22 30       	cpi	r18, 0x02	; 2
    2b8c:	31 05       	cpc	r19, r1
    2b8e:	2c f4       	brge	.+10     	; 0x2b9a <Gpt_StartTimer+0x40>
    2b90:	8d 81       	ldd	r24, Y+5	; 0x05
    2b92:	9e 81       	ldd	r25, Y+6	; 0x06
    2b94:	00 97       	sbiw	r24, 0x00	; 0
    2b96:	61 f0       	breq	.+24     	; 0x2bb0 <Gpt_StartTimer+0x56>
    2b98:	32 c0       	rjmp	.+100    	; 0x2bfe <Gpt_StartTimer+0xa4>
    2b9a:	2d 81       	ldd	r18, Y+5	; 0x05
    2b9c:	3e 81       	ldd	r19, Y+6	; 0x06
    2b9e:	22 30       	cpi	r18, 0x02	; 2
    2ba0:	31 05       	cpc	r19, r1
    2ba2:	d1 f0       	breq	.+52     	; 0x2bd8 <Gpt_StartTimer+0x7e>
    2ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba8:	83 30       	cpi	r24, 0x03	; 3
    2baa:	91 05       	cpc	r25, r1
    2bac:	e1 f0       	breq	.+56     	; 0x2be6 <Gpt_StartTimer+0x8c>
    2bae:	27 c0       	rjmp	.+78     	; 0x2bfe <Gpt_StartTimer+0xa4>
    {
    case GPT_CHANNEL_TIMER0:
        if (value < 256)
    2bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb4:	8f 3f       	cpi	r24, 0xFF	; 255
    2bb6:	91 05       	cpc	r25, r1
    2bb8:	09 f0       	breq	.+2      	; 0x2bbc <Gpt_StartTimer+0x62>
    2bba:	28 f4       	brcc	.+10     	; 0x2bc6 <Gpt_StartTimer+0x6c>
        {
            OCR0 = value;
    2bbc:	ec e5       	ldi	r30, 0x5C	; 92
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc2:	80 83       	st	Z, r24
    2bc4:	1c c0       	rjmp	.+56     	; 0x2bfe <Gpt_StartTimer+0xa4>
        }
        else
        {
            returnValue = GPT_ERROR;
    2bc6:	19 82       	std	Y+1, r1	; 0x01
    2bc8:	1a c0       	rjmp	.+52     	; 0x2bfe <Gpt_StartTimer+0xa4>
        }
        break;
    case GPT_CHANNEL_TIMER1A:
        if (value < 65536)
        {
            OCR1A = value;
    2bca:	ea e4       	ldi	r30, 0x4A	; 74
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd2:	91 83       	std	Z+1, r25	; 0x01
    2bd4:	80 83       	st	Z, r24
    2bd6:	13 c0       	rjmp	.+38     	; 0x2bfe <Gpt_StartTimer+0xa4>
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        if (value < 65536)
        {
            OCR1B = value;
    2bd8:	e8 e4       	ldi	r30, 0x48	; 72
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bde:	9c 81       	ldd	r25, Y+4	; 0x04
    2be0:	91 83       	std	Z+1, r25	; 0x01
    2be2:	80 83       	st	Z, r24
    2be4:	0c c0       	rjmp	.+24     	; 0x2bfe <Gpt_StartTimer+0xa4>
            returnValue = GPT_ERROR;
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        if (value < 256)
    2be6:	8b 81       	ldd	r24, Y+3	; 0x03
    2be8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bea:	8f 3f       	cpi	r24, 0xFF	; 255
    2bec:	91 05       	cpc	r25, r1
    2bee:	09 f0       	breq	.+2      	; 0x2bf2 <Gpt_StartTimer+0x98>
    2bf0:	28 f4       	brcc	.+10     	; 0x2bfc <Gpt_StartTimer+0xa2>
        {
            OCR2 = value;
    2bf2:	e3 e4       	ldi	r30, 0x43	; 67
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf8:	80 83       	st	Z, r24
    2bfa:	01 c0       	rjmp	.+2      	; 0x2bfe <Gpt_StartTimer+0xa4>
        }
        else
        {
            returnValue = GPT_ERROR;
    2bfc:	19 82       	std	Y+1, r1	; 0x01
        break;

    default:
        break;
    }
    return returnValue;
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c00:	26 96       	adiw	r28, 0x06	; 6
    2c02:	0f b6       	in	r0, 0x3f	; 63
    2c04:	f8 94       	cli
    2c06:	de bf       	out	0x3e, r29	; 62
    2c08:	0f be       	out	0x3f, r0	; 63
    2c0a:	cd bf       	out	0x3d, r28	; 61
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	08 95       	ret

00002c12 <Gpt_GetTimeElapsed>:

u16 Gpt_GetTimeElapsed(Gpt_ChannelType channel)
{
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	00 d0       	rcall	.+0      	; 0x2c18 <Gpt_GetTimeElapsed+0x6>
    2c18:	00 d0       	rcall	.+0      	; 0x2c1a <Gpt_GetTimeElapsed+0x8>
    2c1a:	0f 92       	push	r0
    2c1c:	cd b7       	in	r28, 0x3d	; 61
    2c1e:	de b7       	in	r29, 0x3e	; 62
    2c20:	8b 83       	std	Y+3, r24	; 0x03
    u16 value = 0;
    2c22:	1a 82       	std	Y+2, r1	; 0x02
    2c24:	19 82       	std	Y+1, r1	; 0x01
    switch (channel)
    2c26:	8b 81       	ldd	r24, Y+3	; 0x03
    2c28:	28 2f       	mov	r18, r24
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	3d 83       	std	Y+5, r19	; 0x05
    2c2e:	2c 83       	std	Y+4, r18	; 0x04
    2c30:	8c 81       	ldd	r24, Y+4	; 0x04
    2c32:	9d 81       	ldd	r25, Y+5	; 0x05
    2c34:	81 30       	cpi	r24, 0x01	; 1
    2c36:	91 05       	cpc	r25, r1
    2c38:	e9 f0       	breq	.+58     	; 0x2c74 <Gpt_GetTimeElapsed+0x62>
    2c3a:	2c 81       	ldd	r18, Y+4	; 0x04
    2c3c:	3d 81       	ldd	r19, Y+5	; 0x05
    2c3e:	22 30       	cpi	r18, 0x02	; 2
    2c40:	31 05       	cpc	r19, r1
    2c42:	2c f4       	brge	.+10     	; 0x2c4e <Gpt_GetTimeElapsed+0x3c>
    2c44:	8c 81       	ldd	r24, Y+4	; 0x04
    2c46:	9d 81       	ldd	r25, Y+5	; 0x05
    2c48:	00 97       	sbiw	r24, 0x00	; 0
    2c4a:	61 f0       	breq	.+24     	; 0x2c64 <Gpt_GetTimeElapsed+0x52>
    2c4c:	28 c0       	rjmp	.+80     	; 0x2c9e <Gpt_GetTimeElapsed+0x8c>
    2c4e:	2c 81       	ldd	r18, Y+4	; 0x04
    2c50:	3d 81       	ldd	r19, Y+5	; 0x05
    2c52:	22 30       	cpi	r18, 0x02	; 2
    2c54:	31 05       	cpc	r19, r1
    2c56:	a9 f0       	breq	.+42     	; 0x2c82 <Gpt_GetTimeElapsed+0x70>
    2c58:	8c 81       	ldd	r24, Y+4	; 0x04
    2c5a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c5c:	83 30       	cpi	r24, 0x03	; 3
    2c5e:	91 05       	cpc	r25, r1
    2c60:	b9 f0       	breq	.+46     	; 0x2c90 <Gpt_GetTimeElapsed+0x7e>
    2c62:	1d c0       	rjmp	.+58     	; 0x2c9e <Gpt_GetTimeElapsed+0x8c>
    {
    case GPT_CHANNEL_TIMER0:
        value = TCNT0;
    2c64:	e2 e5       	ldi	r30, 0x52	; 82
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	88 2f       	mov	r24, r24
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	9a 83       	std	Y+2, r25	; 0x02
    2c70:	89 83       	std	Y+1, r24	; 0x01
    2c72:	15 c0       	rjmp	.+42     	; 0x2c9e <Gpt_GetTimeElapsed+0x8c>
        break;
    case GPT_CHANNEL_TIMER1A:
        value = TCNT1;        
    2c74:	ec e4       	ldi	r30, 0x4C	; 76
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	80 81       	ld	r24, Z
    2c7a:	91 81       	ldd	r25, Z+1	; 0x01
    2c7c:	9a 83       	std	Y+2, r25	; 0x02
    2c7e:	89 83       	std	Y+1, r24	; 0x01
    2c80:	0e c0       	rjmp	.+28     	; 0x2c9e <Gpt_GetTimeElapsed+0x8c>
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        value = TCNT1;
    2c82:	ec e4       	ldi	r30, 0x4C	; 76
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	91 81       	ldd	r25, Z+1	; 0x01
    2c8a:	9a 83       	std	Y+2, r25	; 0x02
    2c8c:	89 83       	std	Y+1, r24	; 0x01
    2c8e:	07 c0       	rjmp	.+14     	; 0x2c9e <Gpt_GetTimeElapsed+0x8c>
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        value = TCNT2;
    2c90:	e4 e4       	ldi	r30, 0x44	; 68
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	80 81       	ld	r24, Z
    2c96:	88 2f       	mov	r24, r24
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	9a 83       	std	Y+2, r25	; 0x02
    2c9c:	89 83       	std	Y+1, r24	; 0x01
        // TODO
        break;
    default:
        break;
    }
    return value;
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	0f 90       	pop	r0
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <Gpt_GetTimeRemaining>:

u16 Gpt_GetTimeRemaining(Gpt_ChannelType channel, Gpt_ModeType mode)
{
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	00 d0       	rcall	.+0      	; 0x2cb8 <Gpt_GetTimeRemaining+0x6>
    2cb8:	00 d0       	rcall	.+0      	; 0x2cba <Gpt_GetTimeRemaining+0x8>
    2cba:	00 d0       	rcall	.+0      	; 0x2cbc <Gpt_GetTimeRemaining+0xa>
    2cbc:	cd b7       	in	r28, 0x3d	; 61
    2cbe:	de b7       	in	r29, 0x3e	; 62
    2cc0:	8b 83       	std	Y+3, r24	; 0x03
    2cc2:	6c 83       	std	Y+4, r22	; 0x04
    u16 value = 0;
    2cc4:	1a 82       	std	Y+2, r1	; 0x02
    2cc6:	19 82       	std	Y+1, r1	; 0x01
    switch (channel)
    2cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cca:	28 2f       	mov	r18, r24
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	3e 83       	std	Y+6, r19	; 0x06
    2cd0:	2d 83       	std	Y+5, r18	; 0x05
    2cd2:	4d 81       	ldd	r20, Y+5	; 0x05
    2cd4:	5e 81       	ldd	r21, Y+6	; 0x06
    2cd6:	41 30       	cpi	r20, 0x01	; 1
    2cd8:	51 05       	cpc	r21, r1
    2cda:	e1 f1       	breq	.+120    	; 0x2d54 <Gpt_GetTimeRemaining+0xa2>
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	82 30       	cpi	r24, 0x02	; 2
    2ce2:	91 05       	cpc	r25, r1
    2ce4:	34 f4       	brge	.+12     	; 0x2cf2 <Gpt_GetTimeRemaining+0x40>
    2ce6:	2d 81       	ldd	r18, Y+5	; 0x05
    2ce8:	3e 81       	ldd	r19, Y+6	; 0x06
    2cea:	21 15       	cp	r18, r1
    2cec:	31 05       	cpc	r19, r1
    2cee:	71 f0       	breq	.+28     	; 0x2d0c <Gpt_GetTimeRemaining+0x5a>
    2cf0:	90 c0       	rjmp	.+288    	; 0x2e12 <Gpt_GetTimeRemaining+0x160>
    2cf2:	4d 81       	ldd	r20, Y+5	; 0x05
    2cf4:	5e 81       	ldd	r21, Y+6	; 0x06
    2cf6:	42 30       	cpi	r20, 0x02	; 2
    2cf8:	51 05       	cpc	r21, r1
    2cfa:	09 f4       	brne	.+2      	; 0x2cfe <Gpt_GetTimeRemaining+0x4c>
    2cfc:	4a c0       	rjmp	.+148    	; 0x2d92 <Gpt_GetTimeRemaining+0xe0>
    2cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2d00:	9e 81       	ldd	r25, Y+6	; 0x06
    2d02:	83 30       	cpi	r24, 0x03	; 3
    2d04:	91 05       	cpc	r25, r1
    2d06:	09 f4       	brne	.+2      	; 0x2d0a <Gpt_GetTimeRemaining+0x58>
    2d08:	62 c0       	rjmp	.+196    	; 0x2dce <Gpt_GetTimeRemaining+0x11c>
    2d0a:	83 c0       	rjmp	.+262    	; 0x2e12 <Gpt_GetTimeRemaining+0x160>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    2d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d0e:	88 23       	and	r24, r24
    2d10:	61 f4       	brne	.+24     	; 0x2d2a <Gpt_GetTimeRemaining+0x78>
        {
            value = 0xFF - TCNT0;
    2d12:	e2 e5       	ldi	r30, 0x52	; 82
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	28 2f       	mov	r18, r24
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	8f ef       	ldi	r24, 0xFF	; 255
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	82 1b       	sub	r24, r18
    2d22:	93 0b       	sbc	r25, r19
    2d24:	9a 83       	std	Y+2, r25	; 0x02
    2d26:	89 83       	std	Y+1, r24	; 0x01
    2d28:	74 c0       	rjmp	.+232    	; 0x2e12 <Gpt_GetTimeRemaining+0x160>
        }
        else if (mode == GPT_MODE_CTC)
    2d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d2c:	81 30       	cpi	r24, 0x01	; 1
    2d2e:	09 f0       	breq	.+2      	; 0x2d32 <Gpt_GetTimeRemaining+0x80>
    2d30:	70 c0       	rjmp	.+224    	; 0x2e12 <Gpt_GetTimeRemaining+0x160>
        {
            value = OCR0 - TCNT0;
    2d32:	ec e5       	ldi	r30, 0x5C	; 92
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	80 81       	ld	r24, Z
    2d38:	28 2f       	mov	r18, r24
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	e2 e5       	ldi	r30, 0x52	; 82
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	80 81       	ld	r24, Z
    2d42:	88 2f       	mov	r24, r24
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	a9 01       	movw	r20, r18
    2d48:	48 1b       	sub	r20, r24
    2d4a:	59 0b       	sbc	r21, r25
    2d4c:	ca 01       	movw	r24, r20
    2d4e:	9a 83       	std	Y+2, r25	; 0x02
    2d50:	89 83       	std	Y+1, r24	; 0x01
    2d52:	5f c0       	rjmp	.+190    	; 0x2e12 <Gpt_GetTimeRemaining+0x160>
        }
        break;
    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    2d54:	8c 81       	ldd	r24, Y+4	; 0x04
    2d56:	88 23       	and	r24, r24
    2d58:	49 f4       	brne	.+18     	; 0x2d6c <Gpt_GetTimeRemaining+0xba>
        {
            value = 0xFFFF - TCNT1;
    2d5a:	ec e4       	ldi	r30, 0x4C	; 76
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	80 81       	ld	r24, Z
    2d60:	91 81       	ldd	r25, Z+1	; 0x01
    2d62:	80 95       	com	r24
    2d64:	90 95       	com	r25
    2d66:	9a 83       	std	Y+2, r25	; 0x02
    2d68:	89 83       	std	Y+1, r24	; 0x01
    2d6a:	53 c0       	rjmp	.+166    	; 0x2e12 <Gpt_GetTimeRemaining+0x160>
        }
        else if (mode == GPT_MODE_CTC)
    2d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d6e:	81 30       	cpi	r24, 0x01	; 1
    2d70:	09 f0       	breq	.+2      	; 0x2d74 <Gpt_GetTimeRemaining+0xc2>
    2d72:	4f c0       	rjmp	.+158    	; 0x2e12 <Gpt_GetTimeRemaining+0x160>
        {
            value = OCR1A - TCNT1;
    2d74:	ea e4       	ldi	r30, 0x4A	; 74
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	20 81       	ld	r18, Z
    2d7a:	31 81       	ldd	r19, Z+1	; 0x01
    2d7c:	ec e4       	ldi	r30, 0x4C	; 76
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	91 81       	ldd	r25, Z+1	; 0x01
    2d84:	a9 01       	movw	r20, r18
    2d86:	48 1b       	sub	r20, r24
    2d88:	59 0b       	sbc	r21, r25
    2d8a:	ca 01       	movw	r24, r20
    2d8c:	9a 83       	std	Y+2, r25	; 0x02
    2d8e:	89 83       	std	Y+1, r24	; 0x01
    2d90:	40 c0       	rjmp	.+128    	; 0x2e12 <Gpt_GetTimeRemaining+0x160>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    2d92:	8c 81       	ldd	r24, Y+4	; 0x04
    2d94:	88 23       	and	r24, r24
    2d96:	49 f4       	brne	.+18     	; 0x2daa <Gpt_GetTimeRemaining+0xf8>
        {
            value = 0xFFFF - TCNT1;
    2d98:	ec e4       	ldi	r30, 0x4C	; 76
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	80 81       	ld	r24, Z
    2d9e:	91 81       	ldd	r25, Z+1	; 0x01
    2da0:	80 95       	com	r24
    2da2:	90 95       	com	r25
    2da4:	9a 83       	std	Y+2, r25	; 0x02
    2da6:	89 83       	std	Y+1, r24	; 0x01
    2da8:	34 c0       	rjmp	.+104    	; 0x2e12 <Gpt_GetTimeRemaining+0x160>
        }
        else if (mode == GPT_MODE_CTC)
    2daa:	8c 81       	ldd	r24, Y+4	; 0x04
    2dac:	81 30       	cpi	r24, 0x01	; 1
    2dae:	89 f5       	brne	.+98     	; 0x2e12 <Gpt_GetTimeRemaining+0x160>
        {
            value = OCR1B - TCNT1;
    2db0:	e8 e4       	ldi	r30, 0x48	; 72
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	20 81       	ld	r18, Z
    2db6:	31 81       	ldd	r19, Z+1	; 0x01
    2db8:	ec e4       	ldi	r30, 0x4C	; 76
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	80 81       	ld	r24, Z
    2dbe:	91 81       	ldd	r25, Z+1	; 0x01
    2dc0:	a9 01       	movw	r20, r18
    2dc2:	48 1b       	sub	r20, r24
    2dc4:	59 0b       	sbc	r21, r25
    2dc6:	ca 01       	movw	r24, r20
    2dc8:	9a 83       	std	Y+2, r25	; 0x02
    2dca:	89 83       	std	Y+1, r24	; 0x01
    2dcc:	22 c0       	rjmp	.+68     	; 0x2e12 <Gpt_GetTimeRemaining+0x160>
        }
        // TODO
        break;
    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    2dce:	8c 81       	ldd	r24, Y+4	; 0x04
    2dd0:	88 23       	and	r24, r24
    2dd2:	61 f4       	brne	.+24     	; 0x2dec <Gpt_GetTimeRemaining+0x13a>
        {
            value = 0xFF - TCNT2;
    2dd4:	e4 e4       	ldi	r30, 0x44	; 68
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	80 81       	ld	r24, Z
    2dda:	28 2f       	mov	r18, r24
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	8f ef       	ldi	r24, 0xFF	; 255
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	82 1b       	sub	r24, r18
    2de4:	93 0b       	sbc	r25, r19
    2de6:	9a 83       	std	Y+2, r25	; 0x02
    2de8:	89 83       	std	Y+1, r24	; 0x01
    2dea:	13 c0       	rjmp	.+38     	; 0x2e12 <Gpt_GetTimeRemaining+0x160>
        }
        else if (mode == GPT_MODE_CTC)
    2dec:	8c 81       	ldd	r24, Y+4	; 0x04
    2dee:	81 30       	cpi	r24, 0x01	; 1
    2df0:	81 f4       	brne	.+32     	; 0x2e12 <Gpt_GetTimeRemaining+0x160>
        {
            value = OCR2 - TCNT2;
    2df2:	e3 e4       	ldi	r30, 0x43	; 67
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	28 2f       	mov	r18, r24
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	e4 e4       	ldi	r30, 0x44	; 68
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 81       	ld	r24, Z
    2e02:	88 2f       	mov	r24, r24
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	a9 01       	movw	r20, r18
    2e08:	48 1b       	sub	r20, r24
    2e0a:	59 0b       	sbc	r21, r25
    2e0c:	ca 01       	movw	r24, r20
    2e0e:	9a 83       	std	Y+2, r25	; 0x02
    2e10:	89 83       	std	Y+1, r24	; 0x01
        // TODO
        break;
    default:
        break;
    }
    return value;
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e16:	26 96       	adiw	r28, 0x06	; 6
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	f8 94       	cli
    2e1c:	de bf       	out	0x3e, r29	; 62
    2e1e:	0f be       	out	0x3f, r0	; 63
    2e20:	cd bf       	out	0x3d, r28	; 61
    2e22:	cf 91       	pop	r28
    2e24:	df 91       	pop	r29
    2e26:	08 95       	ret

00002e28 <Gpt_EnableNotification>:

void Gpt_EnableNotification(Gpt_ChannelType channel, Gpt_ModeType mode, void (*callback)(void))
{
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	00 d0       	rcall	.+0      	; 0x2e2e <Gpt_EnableNotification+0x6>
    2e2e:	00 d0       	rcall	.+0      	; 0x2e30 <Gpt_EnableNotification+0x8>
    2e30:	00 d0       	rcall	.+0      	; 0x2e32 <Gpt_EnableNotification+0xa>
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	89 83       	std	Y+1, r24	; 0x01
    2e38:	6a 83       	std	Y+2, r22	; 0x02
    2e3a:	5c 83       	std	Y+4, r21	; 0x04
    2e3c:	4b 83       	std	Y+3, r20	; 0x03
    switch (channel)
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	28 2f       	mov	r18, r24
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	3e 83       	std	Y+6, r19	; 0x06
    2e46:	2d 83       	std	Y+5, r18	; 0x05
    2e48:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4c:	81 30       	cpi	r24, 0x01	; 1
    2e4e:	91 05       	cpc	r25, r1
    2e50:	d1 f1       	breq	.+116    	; 0x2ec6 <Gpt_EnableNotification+0x9e>
    2e52:	2d 81       	ldd	r18, Y+5	; 0x05
    2e54:	3e 81       	ldd	r19, Y+6	; 0x06
    2e56:	22 30       	cpi	r18, 0x02	; 2
    2e58:	31 05       	cpc	r19, r1
    2e5a:	2c f4       	brge	.+10     	; 0x2e66 <Gpt_EnableNotification+0x3e>
    2e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e60:	00 97       	sbiw	r24, 0x00	; 0
    2e62:	71 f0       	breq	.+28     	; 0x2e80 <Gpt_EnableNotification+0x58>
    2e64:	96 c0       	rjmp	.+300    	; 0x2f92 <Gpt_EnableNotification+0x16a>
    2e66:	2d 81       	ldd	r18, Y+5	; 0x05
    2e68:	3e 81       	ldd	r19, Y+6	; 0x06
    2e6a:	22 30       	cpi	r18, 0x02	; 2
    2e6c:	31 05       	cpc	r19, r1
    2e6e:	09 f4       	brne	.+2      	; 0x2e72 <Gpt_EnableNotification+0x4a>
    2e70:	4d c0       	rjmp	.+154    	; 0x2f0c <Gpt_EnableNotification+0xe4>
    2e72:	8d 81       	ldd	r24, Y+5	; 0x05
    2e74:	9e 81       	ldd	r25, Y+6	; 0x06
    2e76:	83 30       	cpi	r24, 0x03	; 3
    2e78:	91 05       	cpc	r25, r1
    2e7a:	09 f4       	brne	.+2      	; 0x2e7e <Gpt_EnableNotification+0x56>
    2e7c:	69 c0       	rjmp	.+210    	; 0x2f50 <Gpt_EnableNotification+0x128>
    2e7e:	89 c0       	rjmp	.+274    	; 0x2f92 <Gpt_EnableNotification+0x16a>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    2e80:	8a 81       	ldd	r24, Y+2	; 0x02
    2e82:	88 23       	and	r24, r24
    2e84:	71 f4       	brne	.+28     	; 0x2ea2 <Gpt_EnableNotification+0x7a>
        {
            Gpt_Timer0_Callback_Normal = callback;
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8a:	90 93 11 01 	sts	0x0111, r25
    2e8e:	80 93 10 01 	sts	0x0110, r24
            SET_BIT(TIMSK, TIMSK_TOIE0);
    2e92:	a9 e5       	ldi	r26, 0x59	; 89
    2e94:	b0 e0       	ldi	r27, 0x00	; 0
    2e96:	e9 e5       	ldi	r30, 0x59	; 89
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	80 81       	ld	r24, Z
    2e9c:	81 60       	ori	r24, 0x01	; 1
    2e9e:	8c 93       	st	X, r24
    2ea0:	78 c0       	rjmp	.+240    	; 0x2f92 <Gpt_EnableNotification+0x16a>
        }
        else if (mode == GPT_MODE_CTC)
    2ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea4:	81 30       	cpi	r24, 0x01	; 1
    2ea6:	09 f0       	breq	.+2      	; 0x2eaa <Gpt_EnableNotification+0x82>
    2ea8:	74 c0       	rjmp	.+232    	; 0x2f92 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer0_Callback_Ctc = callback;
    2eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2eac:	9c 81       	ldd	r25, Y+4	; 0x04
    2eae:	90 93 07 01 	sts	0x0107, r25
    2eb2:	80 93 06 01 	sts	0x0106, r24
            SET_BIT(TIMSK, TIMSK_OCIE0);
    2eb6:	a9 e5       	ldi	r26, 0x59	; 89
    2eb8:	b0 e0       	ldi	r27, 0x00	; 0
    2eba:	e9 e5       	ldi	r30, 0x59	; 89
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	80 81       	ld	r24, Z
    2ec0:	82 60       	ori	r24, 0x02	; 2
    2ec2:	8c 93       	st	X, r24
    2ec4:	66 c0       	rjmp	.+204    	; 0x2f92 <Gpt_EnableNotification+0x16a>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    2ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec8:	88 23       	and	r24, r24
    2eca:	71 f4       	brne	.+28     	; 0x2ee8 <Gpt_EnableNotification+0xc0>
        {
            Gpt_Timer1_Callback_Normal = callback;
    2ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ece:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed0:	90 93 13 01 	sts	0x0113, r25
    2ed4:	80 93 12 01 	sts	0x0112, r24
            SET_BIT(TIMSK, TIMSK_TOIE1);
    2ed8:	a9 e5       	ldi	r26, 0x59	; 89
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	e9 e5       	ldi	r30, 0x59	; 89
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	84 60       	ori	r24, 0x04	; 4
    2ee4:	8c 93       	st	X, r24
    2ee6:	55 c0       	rjmp	.+170    	; 0x2f92 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    2ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eea:	81 30       	cpi	r24, 0x01	; 1
    2eec:	09 f0       	breq	.+2      	; 0x2ef0 <Gpt_EnableNotification+0xc8>
    2eee:	51 c0       	rjmp	.+162    	; 0x2f92 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer1A_Callback_Ctc = callback;
    2ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef4:	90 93 0f 01 	sts	0x010F, r25
    2ef8:	80 93 0e 01 	sts	0x010E, r24
            SET_BIT(TIMSK, TIMSK_OCIE1A);
    2efc:	a9 e5       	ldi	r26, 0x59	; 89
    2efe:	b0 e0       	ldi	r27, 0x00	; 0
    2f00:	e9 e5       	ldi	r30, 0x59	; 89
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	80 61       	ori	r24, 0x10	; 16
    2f08:	8c 93       	st	X, r24
    2f0a:	43 c0       	rjmp	.+134    	; 0x2f92 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    2f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0e:	88 23       	and	r24, r24
    2f10:	71 f4       	brne	.+28     	; 0x2f2e <Gpt_EnableNotification+0x106>
        {
            Gpt_Timer1_Callback_Normal = callback;
    2f12:	8b 81       	ldd	r24, Y+3	; 0x03
    2f14:	9c 81       	ldd	r25, Y+4	; 0x04
    2f16:	90 93 13 01 	sts	0x0113, r25
    2f1a:	80 93 12 01 	sts	0x0112, r24
            SET_BIT(TIMSK, TIMSK_TOIE1);
    2f1e:	a9 e5       	ldi	r26, 0x59	; 89
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	e9 e5       	ldi	r30, 0x59	; 89
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 81       	ld	r24, Z
    2f28:	84 60       	ori	r24, 0x04	; 4
    2f2a:	8c 93       	st	X, r24
    2f2c:	32 c0       	rjmp	.+100    	; 0x2f92 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    2f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f30:	81 30       	cpi	r24, 0x01	; 1
    2f32:	79 f5       	brne	.+94     	; 0x2f92 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer1B_Callback_Ctc = callback;
    2f34:	8b 81       	ldd	r24, Y+3	; 0x03
    2f36:	9c 81       	ldd	r25, Y+4	; 0x04
    2f38:	90 93 0b 01 	sts	0x010B, r25
    2f3c:	80 93 0a 01 	sts	0x010A, r24
            SET_BIT(TIMSK, TIMSK_OCIE1B);
    2f40:	a9 e5       	ldi	r26, 0x59	; 89
    2f42:	b0 e0       	ldi	r27, 0x00	; 0
    2f44:	e9 e5       	ldi	r30, 0x59	; 89
    2f46:	f0 e0       	ldi	r31, 0x00	; 0
    2f48:	80 81       	ld	r24, Z
    2f4a:	88 60       	ori	r24, 0x08	; 8
    2f4c:	8c 93       	st	X, r24
    2f4e:	21 c0       	rjmp	.+66     	; 0x2f92 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    2f50:	8a 81       	ldd	r24, Y+2	; 0x02
    2f52:	88 23       	and	r24, r24
    2f54:	71 f4       	brne	.+28     	; 0x2f72 <Gpt_EnableNotification+0x14a>
        {
            Gpt_Timer2_Callback_Normal = callback;
    2f56:	8b 81       	ldd	r24, Y+3	; 0x03
    2f58:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5a:	90 93 0d 01 	sts	0x010D, r25
    2f5e:	80 93 0c 01 	sts	0x010C, r24
            SET_BIT(TIMSK, TIMSK_TOIE2);
    2f62:	a9 e5       	ldi	r26, 0x59	; 89
    2f64:	b0 e0       	ldi	r27, 0x00	; 0
    2f66:	e9 e5       	ldi	r30, 0x59	; 89
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	80 81       	ld	r24, Z
    2f6c:	80 64       	ori	r24, 0x40	; 64
    2f6e:	8c 93       	st	X, r24
    2f70:	10 c0       	rjmp	.+32     	; 0x2f92 <Gpt_EnableNotification+0x16a>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    2f72:	8a 81       	ldd	r24, Y+2	; 0x02
    2f74:	81 30       	cpi	r24, 0x01	; 1
    2f76:	69 f4       	brne	.+26     	; 0x2f92 <Gpt_EnableNotification+0x16a>
        {
            Gpt_Timer2_Callback_Ctc = callback;
    2f78:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7c:	90 93 09 01 	sts	0x0109, r25
    2f80:	80 93 08 01 	sts	0x0108, r24
            SET_BIT(TIMSK, TIMSK_OCIE2);
    2f84:	a9 e5       	ldi	r26, 0x59	; 89
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	e9 e5       	ldi	r30, 0x59	; 89
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	80 81       	ld	r24, Z
    2f8e:	80 68       	ori	r24, 0x80	; 128
    2f90:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
    2f92:	26 96       	adiw	r28, 0x06	; 6
    2f94:	0f b6       	in	r0, 0x3f	; 63
    2f96:	f8 94       	cli
    2f98:	de bf       	out	0x3e, r29	; 62
    2f9a:	0f be       	out	0x3f, r0	; 63
    2f9c:	cd bf       	out	0x3d, r28	; 61
    2f9e:	cf 91       	pop	r28
    2fa0:	df 91       	pop	r29
    2fa2:	08 95       	ret

00002fa4 <Gpt_DisableNotification>:

void Gpt_DisableNotification(Gpt_ChannelType channel, Gpt_ModeType mode)
{
    2fa4:	df 93       	push	r29
    2fa6:	cf 93       	push	r28
    2fa8:	00 d0       	rcall	.+0      	; 0x2faa <Gpt_DisableNotification+0x6>
    2faa:	00 d0       	rcall	.+0      	; 0x2fac <Gpt_DisableNotification+0x8>
    2fac:	cd b7       	in	r28, 0x3d	; 61
    2fae:	de b7       	in	r29, 0x3e	; 62
    2fb0:	89 83       	std	Y+1, r24	; 0x01
    2fb2:	6a 83       	std	Y+2, r22	; 0x02
    switch (channel)
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	28 2f       	mov	r18, r24
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	3c 83       	std	Y+4, r19	; 0x04
    2fbc:	2b 83       	std	Y+3, r18	; 0x03
    2fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc2:	81 30       	cpi	r24, 0x01	; 1
    2fc4:	91 05       	cpc	r25, r1
    2fc6:	69 f1       	breq	.+90     	; 0x3022 <Gpt_DisableNotification+0x7e>
    2fc8:	2b 81       	ldd	r18, Y+3	; 0x03
    2fca:	3c 81       	ldd	r19, Y+4	; 0x04
    2fcc:	22 30       	cpi	r18, 0x02	; 2
    2fce:	31 05       	cpc	r19, r1
    2fd0:	2c f4       	brge	.+10     	; 0x2fdc <Gpt_DisableNotification+0x38>
    2fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd6:	00 97       	sbiw	r24, 0x00	; 0
    2fd8:	69 f0       	breq	.+26     	; 0x2ff4 <Gpt_DisableNotification+0x50>
    2fda:	64 c0       	rjmp	.+200    	; 0x30a4 <Gpt_DisableNotification+0x100>
    2fdc:	2b 81       	ldd	r18, Y+3	; 0x03
    2fde:	3c 81       	ldd	r19, Y+4	; 0x04
    2fe0:	22 30       	cpi	r18, 0x02	; 2
    2fe2:	31 05       	cpc	r19, r1
    2fe4:	a1 f1       	breq	.+104    	; 0x304e <Gpt_DisableNotification+0xaa>
    2fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fea:	83 30       	cpi	r24, 0x03	; 3
    2fec:	91 05       	cpc	r25, r1
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <Gpt_DisableNotification+0x4e>
    2ff0:	44 c0       	rjmp	.+136    	; 0x307a <Gpt_DisableNotification+0xd6>
    2ff2:	58 c0       	rjmp	.+176    	; 0x30a4 <Gpt_DisableNotification+0x100>
    {
    case GPT_CHANNEL_TIMER0:
        if (mode == GPT_MODE_NORMAL)
    2ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff6:	88 23       	and	r24, r24
    2ff8:	41 f4       	brne	.+16     	; 0x300a <Gpt_DisableNotification+0x66>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE0);
    2ffa:	a9 e5       	ldi	r26, 0x59	; 89
    2ffc:	b0 e0       	ldi	r27, 0x00	; 0
    2ffe:	e9 e5       	ldi	r30, 0x59	; 89
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	80 81       	ld	r24, Z
    3004:	8e 7f       	andi	r24, 0xFE	; 254
    3006:	8c 93       	st	X, r24
    3008:	4d c0       	rjmp	.+154    	; 0x30a4 <Gpt_DisableNotification+0x100>
        }
        else if (mode == GPT_MODE_CTC)
    300a:	8a 81       	ldd	r24, Y+2	; 0x02
    300c:	81 30       	cpi	r24, 0x01	; 1
    300e:	09 f0       	breq	.+2      	; 0x3012 <Gpt_DisableNotification+0x6e>
    3010:	49 c0       	rjmp	.+146    	; 0x30a4 <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE0);
    3012:	a9 e5       	ldi	r26, 0x59	; 89
    3014:	b0 e0       	ldi	r27, 0x00	; 0
    3016:	e9 e5       	ldi	r30, 0x59	; 89
    3018:	f0 e0       	ldi	r31, 0x00	; 0
    301a:	80 81       	ld	r24, Z
    301c:	8d 7f       	andi	r24, 0xFD	; 253
    301e:	8c 93       	st	X, r24
    3020:	41 c0       	rjmp	.+130    	; 0x30a4 <Gpt_DisableNotification+0x100>
        }
        break;

    case GPT_CHANNEL_TIMER1A:
        if (mode == GPT_MODE_NORMAL)
    3022:	8a 81       	ldd	r24, Y+2	; 0x02
    3024:	88 23       	and	r24, r24
    3026:	41 f4       	brne	.+16     	; 0x3038 <Gpt_DisableNotification+0x94>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE1);
    3028:	a9 e5       	ldi	r26, 0x59	; 89
    302a:	b0 e0       	ldi	r27, 0x00	; 0
    302c:	e9 e5       	ldi	r30, 0x59	; 89
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	80 81       	ld	r24, Z
    3032:	8b 7f       	andi	r24, 0xFB	; 251
    3034:	8c 93       	st	X, r24
    3036:	36 c0       	rjmp	.+108    	; 0x30a4 <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    3038:	8a 81       	ldd	r24, Y+2	; 0x02
    303a:	81 30       	cpi	r24, 0x01	; 1
    303c:	99 f5       	brne	.+102    	; 0x30a4 <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE1A);
    303e:	a9 e5       	ldi	r26, 0x59	; 89
    3040:	b0 e0       	ldi	r27, 0x00	; 0
    3042:	e9 e5       	ldi	r30, 0x59	; 89
    3044:	f0 e0       	ldi	r31, 0x00	; 0
    3046:	80 81       	ld	r24, Z
    3048:	8f 7e       	andi	r24, 0xEF	; 239
    304a:	8c 93       	st	X, r24
    304c:	2b c0       	rjmp	.+86     	; 0x30a4 <Gpt_DisableNotification+0x100>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER1B:
        if (mode == GPT_MODE_NORMAL)
    304e:	8a 81       	ldd	r24, Y+2	; 0x02
    3050:	88 23       	and	r24, r24
    3052:	41 f4       	brne	.+16     	; 0x3064 <Gpt_DisableNotification+0xc0>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE1);
    3054:	a9 e5       	ldi	r26, 0x59	; 89
    3056:	b0 e0       	ldi	r27, 0x00	; 0
    3058:	e9 e5       	ldi	r30, 0x59	; 89
    305a:	f0 e0       	ldi	r31, 0x00	; 0
    305c:	80 81       	ld	r24, Z
    305e:	8b 7f       	andi	r24, 0xFB	; 251
    3060:	8c 93       	st	X, r24
    3062:	20 c0       	rjmp	.+64     	; 0x30a4 <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    3064:	8a 81       	ldd	r24, Y+2	; 0x02
    3066:	81 30       	cpi	r24, 0x01	; 1
    3068:	e9 f4       	brne	.+58     	; 0x30a4 <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE1B);
    306a:	a9 e5       	ldi	r26, 0x59	; 89
    306c:	b0 e0       	ldi	r27, 0x00	; 0
    306e:	e9 e5       	ldi	r30, 0x59	; 89
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	80 81       	ld	r24, Z
    3074:	87 7f       	andi	r24, 0xF7	; 247
    3076:	8c 93       	st	X, r24
    3078:	15 c0       	rjmp	.+42     	; 0x30a4 <Gpt_DisableNotification+0x100>
            // TODO
        }
        break;

    case GPT_CHANNEL_TIMER2:
        if (mode == GPT_MODE_NORMAL)
    307a:	8a 81       	ldd	r24, Y+2	; 0x02
    307c:	88 23       	and	r24, r24
    307e:	41 f4       	brne	.+16     	; 0x3090 <Gpt_DisableNotification+0xec>
        {
            CLR_BIT(TIMSK, TIMSK_TOIE2);
    3080:	a9 e5       	ldi	r26, 0x59	; 89
    3082:	b0 e0       	ldi	r27, 0x00	; 0
    3084:	e9 e5       	ldi	r30, 0x59	; 89
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	80 81       	ld	r24, Z
    308a:	8f 7b       	andi	r24, 0xBF	; 191
    308c:	8c 93       	st	X, r24
    308e:	0a c0       	rjmp	.+20     	; 0x30a4 <Gpt_DisableNotification+0x100>
            // TODO
        }
        else if (mode == GPT_MODE_CTC)
    3090:	8a 81       	ldd	r24, Y+2	; 0x02
    3092:	81 30       	cpi	r24, 0x01	; 1
    3094:	39 f4       	brne	.+14     	; 0x30a4 <Gpt_DisableNotification+0x100>
        {
            CLR_BIT(TIMSK, TIMSK_OCIE2);
    3096:	a9 e5       	ldi	r26, 0x59	; 89
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	e9 e5       	ldi	r30, 0x59	; 89
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	80 81       	ld	r24, Z
    30a0:	8f 77       	andi	r24, 0x7F	; 127
    30a2:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
    30a4:	0f 90       	pop	r0
    30a6:	0f 90       	pop	r0
    30a8:	0f 90       	pop	r0
    30aa:	0f 90       	pop	r0
    30ac:	cf 91       	pop	r28
    30ae:	df 91       	pop	r29
    30b0:	08 95       	ret

000030b2 <I2C_InitMaster>:
#include "Registers.h"
#include "I2C.h"
#include "I2C_cfg.h"

void I2C_InitMaster(void)
{
    30b2:	df 93       	push	r29
    30b4:	cf 93       	push	r28
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWBR = 0x02;
    30ba:	e0 e2       	ldi	r30, 0x20	; 32
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	82 e0       	ldi	r24, 0x02	; 2
    30c0:	80 83       	st	Z, r24
	TWSR = 0x00;
    30c2:	e1 e2       	ldi	r30, 0x21	; 33
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	10 82       	st	Z, r1

	TWCR = (1<<2); /* enable TWI */
    30c8:	e6 e5       	ldi	r30, 0x56	; 86
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	84 e0       	ldi	r24, 0x04	; 4
    30ce:	80 83       	st	Z, r24
}
    30d0:	cf 91       	pop	r28
    30d2:	df 91       	pop	r29
    30d4:	08 95       	ret

000030d6 <I2C_SendStartCondition>:
void I2C_SendStartCondition(void)
{
    30d6:	df 93       	push	r29
    30d8:	cf 93       	push	r28
    30da:	cd b7       	in	r28, 0x3d	; 61
    30dc:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << 7) | (1 << 5) | (1 << 2);
    30de:	e6 e5       	ldi	r30, 0x56	; 86
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	84 ea       	ldi	r24, 0xA4	; 164
    30e4:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(GET_BIT(TWCR,7)==0);
    30e6:	e6 e5       	ldi	r30, 0x56	; 86
    30e8:	f0 e0       	ldi	r31, 0x00	; 0
    30ea:	80 81       	ld	r24, Z
    30ec:	88 23       	and	r24, r24
    30ee:	dc f7       	brge	.-10     	; 0x30e6 <I2C_SendStartCondition+0x10>
}
    30f0:	cf 91       	pop	r28
    30f2:	df 91       	pop	r29
    30f4:	08 95       	ret

000030f6 <I2C_SendStopCondition>:
void I2C_SendStopCondition(void)
{
    30f6:	df 93       	push	r29
    30f8:	cf 93       	push	r28
    30fa:	cd b7       	in	r28, 0x3d	; 61
    30fc:	de b7       	in	r29, 0x3e	; 62
	 *  Enable TWI Module TWEN=1 ---> //SET_BIT(TWCR,2);
		        Sent stop condition on the bus ---> //SET_BIT(TWCR,4);
		        Clear the interrupt flag To start the previous operation
		         //SET_BIT(TWCR,7);
	 */
	TWCR = (1 << 7) | (1 << 4) | (1 << 2);
    30fe:	e6 e5       	ldi	r30, 0x56	; 86
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	84 e9       	ldi	r24, 0x94	; 148
    3104:	80 83       	st	Z, r24
}
    3106:	cf 91       	pop	r28
    3108:	df 91       	pop	r29
    310a:	08 95       	ret

0000310c <I2C_MasterWriteDataByte>:
void I2C_MasterWriteDataByte(u8 Data)
{
    310c:	df 93       	push	r29
    310e:	cf 93       	push	r28
    3110:	0f 92       	push	r0
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62
    3116:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = Data;
    3118:	e3 e2       	ldi	r30, 0x23	; 35
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	89 81       	ldd	r24, Y+1	; 0x01
    311e:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << 7) | (1 << 2);
    3120:	e6 e5       	ldi	r30, 0x56	; 86
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	84 e8       	ldi	r24, 0x84	; 132
    3126:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(GET_BIT(TWCR,7)==0);
    3128:	e6 e5       	ldi	r30, 0x56	; 86
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 81       	ld	r24, Z
    312e:	88 23       	and	r24, r24
    3130:	dc f7       	brge	.-10     	; 0x3128 <I2C_MasterWriteDataByte+0x1c>
}
    3132:	0f 90       	pop	r0
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	08 95       	ret

0000313a <I2C_MasterReadDataByteWith_ACK>:
u8   I2C_MasterReadDataByteWith_ACK(void)
{
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
	 * --------------------------------------------
	 *     Enable Acknowledge bit --> //SET_BIT(TWCR,6);
	 *     Clear the interrupt flag To start the previous operation --> //SET_BIT(TWCR,7);
	 *     Enable TWI Module TWEN=1 -->//SET_BIT(TWCR,2);
	 */
	TWCR = (1 << 7) | (1 << 2) | (1 << 6);
    3142:	e6 e5       	ldi	r30, 0x56	; 86
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	84 ec       	ldi	r24, 0xC4	; 196
    3148:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(GET_BIT(TWCR,7)==0);
    314a:	e6 e5       	ldi	r30, 0x56	; 86
    314c:	f0 e0       	ldi	r31, 0x00	; 0
    314e:	80 81       	ld	r24, Z
    3150:	88 23       	and	r24, r24
    3152:	dc f7       	brge	.-10     	; 0x314a <I2C_MasterReadDataByteWith_ACK+0x10>
	/* Read Data */
	return TWDR;
    3154:	e3 e2       	ldi	r30, 0x23	; 35
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	80 81       	ld	r24, Z
}
    315a:	cf 91       	pop	r28
    315c:	df 91       	pop	r29
    315e:	08 95       	ret

00003160 <I2C_MasterReadDataByteWith_NACK>:
u8   I2C_MasterReadDataByteWith_NACK(void)
{
    3160:	df 93       	push	r29
    3162:	cf 93       	push	r28
    3164:	cd b7       	in	r28, 0x3d	; 61
    3166:	de b7       	in	r29, 0x3e	; 62
	 * -------------------------------------------
	 * 	 * Disable Acknowledge bit --> //CLR_BIT(TWCR,6);
	 *     Clear the interrupt flag To start the previous operation --> //SET_BIT(TWCR,7);
	 *     Enable TWI Module TWEN=1 -->//SET_BIT(TWCR,2);
	 */
	TWCR = (1 << 7) | (1 << 2);
    3168:	e6 e5       	ldi	r30, 0x56	; 86
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	84 e8       	ldi	r24, 0x84	; 132
    316e:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(GET_BIT(TWCR,7)==0);
    3170:	e6 e5       	ldi	r30, 0x56	; 86
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	80 81       	ld	r24, Z
    3176:	88 23       	and	r24, r24
    3178:	dc f7       	brge	.-10     	; 0x3170 <I2C_MasterReadDataByteWith_NACK+0x10>
	/* Read Data */
	return TWDR;
    317a:	e3 e2       	ldi	r30, 0x23	; 35
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	80 81       	ld	r24, Z
}
    3180:	cf 91       	pop	r28
    3182:	df 91       	pop	r29
    3184:	08 95       	ret

00003186 <Keypad_Init>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"
#include "Keypad.h"

void Keypad_Init(void) {
    3186:	df 93       	push	r29
    3188:	cf 93       	push	r28
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
    /* Set all rows to input pullup */
    DIO_SetPinMode(KEYPAD_PIN_R0, DIO_INPUT_PULLUP);
    318e:	83 e0       	ldi	r24, 0x03	; 3
    3190:	60 e0       	ldi	r22, 0x00	; 0
    3192:	41 e0       	ldi	r20, 0x01	; 1
    3194:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R1, DIO_INPUT_PULLUP);
    3198:	83 e0       	ldi	r24, 0x03	; 3
    319a:	61 e0       	ldi	r22, 0x01	; 1
    319c:	41 e0       	ldi	r20, 0x01	; 1
    319e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R2, DIO_INPUT_PULLUP);
    31a2:	83 e0       	ldi	r24, 0x03	; 3
    31a4:	62 e0       	ldi	r22, 0x02	; 2
    31a6:	41 e0       	ldi	r20, 0x01	; 1
    31a8:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R3, DIO_INPUT_PULLUP);
    31ac:	83 e0       	ldi	r24, 0x03	; 3
    31ae:	63 e0       	ldi	r22, 0x03	; 3
    31b0:	41 e0       	ldi	r20, 0x01	; 1
    31b2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    /* Set all columns to output */
    DIO_SetPinMode(KEYPAD_PIN_C0, DIO_OUTPUT);
    31b6:	83 e0       	ldi	r24, 0x03	; 3
    31b8:	64 e0       	ldi	r22, 0x04	; 4
    31ba:	42 e0       	ldi	r20, 0x02	; 2
    31bc:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C1, DIO_OUTPUT);
    31c0:	83 e0       	ldi	r24, 0x03	; 3
    31c2:	65 e0       	ldi	r22, 0x05	; 5
    31c4:	42 e0       	ldi	r20, 0x02	; 2
    31c6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C2, DIO_OUTPUT);
    31ca:	83 e0       	ldi	r24, 0x03	; 3
    31cc:	66 e0       	ldi	r22, 0x06	; 6
    31ce:	42 e0       	ldi	r20, 0x02	; 2
    31d0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C3, DIO_OUTPUT);
    31d4:	83 e0       	ldi	r24, 0x03	; 3
    31d6:	67 e0       	ldi	r22, 0x07	; 7
    31d8:	42 e0       	ldi	r20, 0x02	; 2
    31da:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
}
    31de:	cf 91       	pop	r28
    31e0:	df 91       	pop	r29
    31e2:	08 95       	ret

000031e4 <Keypad_GetButtonState>:
	low  -> Pressed

*/


Keypad_StateType Keypad_GetButtonState(Keypad_ButtonType button) {
    31e4:	df 93       	push	r29
    31e6:	cf 93       	push	r28
    31e8:	cd b7       	in	r28, 0x3d	; 61
    31ea:	de b7       	in	r29, 0x3e	; 62
    31ec:	28 97       	sbiw	r28, 0x08	; 8
    31ee:	0f b6       	in	r0, 0x3f	; 63
    31f0:	f8 94       	cli
    31f2:	de bf       	out	0x3e, r29	; 62
    31f4:	0f be       	out	0x3f, r0	; 63
    31f6:	cd bf       	out	0x3d, r28	; 61
    31f8:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    31fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3200:	86 95       	lsr	r24
    3202:	86 95       	lsr	r24
    3204:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    3206:	8c 81       	ldd	r24, Y+4	; 0x04
    3208:	83 70       	andi	r24, 0x03	; 3
    320a:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    320c:	83 e0       	ldi	r24, 0x03	; 3
    320e:	64 e0       	ldi	r22, 0x04	; 4
    3210:	41 e0       	ldi	r20, 0x01	; 1
    3212:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    3216:	83 e0       	ldi	r24, 0x03	; 3
    3218:	65 e0       	ldi	r22, 0x05	; 5
    321a:	41 e0       	ldi	r20, 0x01	; 1
    321c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    3220:	83 e0       	ldi	r24, 0x03	; 3
    3222:	66 e0       	ldi	r22, 0x06	; 6
    3224:	41 e0       	ldi	r20, 0x01	; 1
    3226:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    322a:	83 e0       	ldi	r24, 0x03	; 3
    322c:	67 e0       	ldi	r22, 0x07	; 7
    322e:	41 e0       	ldi	r20, 0x01	; 1
    3230:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    switch (column)
    3234:	89 81       	ldd	r24, Y+1	; 0x01
    3236:	28 2f       	mov	r18, r24
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	38 87       	std	Y+8, r19	; 0x08
    323c:	2f 83       	std	Y+7, r18	; 0x07
    323e:	8f 81       	ldd	r24, Y+7	; 0x07
    3240:	98 85       	ldd	r25, Y+8	; 0x08
    3242:	81 30       	cpi	r24, 0x01	; 1
    3244:	91 05       	cpc	r25, r1
    3246:	d9 f0       	breq	.+54     	; 0x327e <Keypad_GetButtonState+0x9a>
    3248:	2f 81       	ldd	r18, Y+7	; 0x07
    324a:	38 85       	ldd	r19, Y+8	; 0x08
    324c:	22 30       	cpi	r18, 0x02	; 2
    324e:	31 05       	cpc	r19, r1
    3250:	2c f4       	brge	.+10     	; 0x325c <Keypad_GetButtonState+0x78>
    3252:	8f 81       	ldd	r24, Y+7	; 0x07
    3254:	98 85       	ldd	r25, Y+8	; 0x08
    3256:	00 97       	sbiw	r24, 0x00	; 0
    3258:	61 f0       	breq	.+24     	; 0x3272 <Keypad_GetButtonState+0x8e>
    325a:	22 c0       	rjmp	.+68     	; 0x32a0 <Keypad_GetButtonState+0xbc>
    325c:	2f 81       	ldd	r18, Y+7	; 0x07
    325e:	38 85       	ldd	r19, Y+8	; 0x08
    3260:	22 30       	cpi	r18, 0x02	; 2
    3262:	31 05       	cpc	r19, r1
    3264:	91 f0       	breq	.+36     	; 0x328a <Keypad_GetButtonState+0xa6>
    3266:	8f 81       	ldd	r24, Y+7	; 0x07
    3268:	98 85       	ldd	r25, Y+8	; 0x08
    326a:	83 30       	cpi	r24, 0x03	; 3
    326c:	91 05       	cpc	r25, r1
    326e:	99 f0       	breq	.+38     	; 0x3296 <Keypad_GetButtonState+0xb2>
    3270:	17 c0       	rjmp	.+46     	; 0x32a0 <Keypad_GetButtonState+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    3272:	83 e0       	ldi	r24, 0x03	; 3
    3274:	64 e0       	ldi	r22, 0x04	; 4
    3276:	40 e0       	ldi	r20, 0x00	; 0
    3278:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    327c:	11 c0       	rjmp	.+34     	; 0x32a0 <Keypad_GetButtonState+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    327e:	83 e0       	ldi	r24, 0x03	; 3
    3280:	65 e0       	ldi	r22, 0x05	; 5
    3282:	40 e0       	ldi	r20, 0x00	; 0
    3284:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    3288:	0b c0       	rjmp	.+22     	; 0x32a0 <Keypad_GetButtonState+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    328a:	83 e0       	ldi	r24, 0x03	; 3
    328c:	66 e0       	ldi	r22, 0x06	; 6
    328e:	40 e0       	ldi	r20, 0x00	; 0
    3290:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    3294:	05 c0       	rjmp	.+10     	; 0x32a0 <Keypad_GetButtonState+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    3296:	83 e0       	ldi	r24, 0x03	; 3
    3298:	67 e0       	ldi	r22, 0x07	; 7
    329a:	40 e0       	ldi	r20, 0x00	; 0
    329c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    32a0:	8a 81       	ldd	r24, Y+2	; 0x02
    32a2:	28 2f       	mov	r18, r24
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	3e 83       	std	Y+6, r19	; 0x06
    32a8:	2d 83       	std	Y+5, r18	; 0x05
    32aa:	8d 81       	ldd	r24, Y+5	; 0x05
    32ac:	9e 81       	ldd	r25, Y+6	; 0x06
    32ae:	81 30       	cpi	r24, 0x01	; 1
    32b0:	91 05       	cpc	r25, r1
    32b2:	e9 f0       	breq	.+58     	; 0x32ee <Keypad_GetButtonState+0x10a>
    32b4:	2d 81       	ldd	r18, Y+5	; 0x05
    32b6:	3e 81       	ldd	r19, Y+6	; 0x06
    32b8:	22 30       	cpi	r18, 0x02	; 2
    32ba:	31 05       	cpc	r19, r1
    32bc:	2c f4       	brge	.+10     	; 0x32c8 <Keypad_GetButtonState+0xe4>
    32be:	8d 81       	ldd	r24, Y+5	; 0x05
    32c0:	9e 81       	ldd	r25, Y+6	; 0x06
    32c2:	00 97       	sbiw	r24, 0x00	; 0
    32c4:	61 f0       	breq	.+24     	; 0x32de <Keypad_GetButtonState+0xfa>
    32c6:	2a c0       	rjmp	.+84     	; 0x331c <Keypad_GetButtonState+0x138>
    32c8:	2d 81       	ldd	r18, Y+5	; 0x05
    32ca:	3e 81       	ldd	r19, Y+6	; 0x06
    32cc:	22 30       	cpi	r18, 0x02	; 2
    32ce:	31 05       	cpc	r19, r1
    32d0:	b1 f0       	breq	.+44     	; 0x32fe <Keypad_GetButtonState+0x11a>
    32d2:	8d 81       	ldd	r24, Y+5	; 0x05
    32d4:	9e 81       	ldd	r25, Y+6	; 0x06
    32d6:	83 30       	cpi	r24, 0x03	; 3
    32d8:	91 05       	cpc	r25, r1
    32da:	c9 f0       	breq	.+50     	; 0x330e <Keypad_GetButtonState+0x12a>
    32dc:	1f c0       	rjmp	.+62     	; 0x331c <Keypad_GetButtonState+0x138>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    32de:	83 e0       	ldi	r24, 0x03	; 3
    32e0:	60 e0       	ldi	r22, 0x00	; 0
    32e2:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_ReadPinLevel>
    32e6:	88 23       	and	r24, r24
    32e8:	c9 f4       	brne	.+50     	; 0x331c <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    32ea:	1b 82       	std	Y+3, r1	; 0x03
    32ec:	17 c0       	rjmp	.+46     	; 0x331c <Keypad_GetButtonState+0x138>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    32ee:	83 e0       	ldi	r24, 0x03	; 3
    32f0:	61 e0       	ldi	r22, 0x01	; 1
    32f2:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_ReadPinLevel>
    32f6:	88 23       	and	r24, r24
    32f8:	89 f4       	brne	.+34     	; 0x331c <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    32fa:	1b 82       	std	Y+3, r1	; 0x03
    32fc:	0f c0       	rjmp	.+30     	; 0x331c <Keypad_GetButtonState+0x138>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    32fe:	83 e0       	ldi	r24, 0x03	; 3
    3300:	62 e0       	ldi	r22, 0x02	; 2
    3302:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_ReadPinLevel>
    3306:	88 23       	and	r24, r24
    3308:	49 f4       	brne	.+18     	; 0x331c <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    330a:	1b 82       	std	Y+3, r1	; 0x03
    330c:	07 c0       	rjmp	.+14     	; 0x331c <Keypad_GetButtonState+0x138>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    330e:	83 e0       	ldi	r24, 0x03	; 3
    3310:	63 e0       	ldi	r22, 0x03	; 3
    3312:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_ReadPinLevel>
    3316:	88 23       	and	r24, r24
    3318:	09 f4       	brne	.+2      	; 0x331c <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    331a:	1b 82       	std	Y+3, r1	; 0x03
        }
        break;
    default:
        break;
    }
    return state;
    331c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    331e:	28 96       	adiw	r28, 0x08	; 8
    3320:	0f b6       	in	r0, 0x3f	; 63
    3322:	f8 94       	cli
    3324:	de bf       	out	0x3e, r29	; 62
    3326:	0f be       	out	0x3f, r0	; 63
    3328:	cd bf       	out	0x3d, r28	; 61
    332a:	cf 91       	pop	r28
    332c:	df 91       	pop	r29
    332e:	08 95       	ret

00003330 <Keypad_GetButtonStatePooling>:

Keypad_StateType Keypad_GetButtonStatePooling(Keypad_ButtonType button) {
    3330:	df 93       	push	r29
    3332:	cf 93       	push	r28
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
    3338:	28 97       	sbiw	r28, 0x08	; 8
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	f8 94       	cli
    333e:	de bf       	out	0x3e, r29	; 62
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	cd bf       	out	0x3d, r28	; 61
    3344:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    334a:	8c 81       	ldd	r24, Y+4	; 0x04
    334c:	86 95       	lsr	r24
    334e:	86 95       	lsr	r24
    3350:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    3352:	8c 81       	ldd	r24, Y+4	; 0x04
    3354:	83 70       	andi	r24, 0x03	; 3
    3356:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    3358:	83 e0       	ldi	r24, 0x03	; 3
    335a:	64 e0       	ldi	r22, 0x04	; 4
    335c:	41 e0       	ldi	r20, 0x01	; 1
    335e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    3362:	83 e0       	ldi	r24, 0x03	; 3
    3364:	65 e0       	ldi	r22, 0x05	; 5
    3366:	41 e0       	ldi	r20, 0x01	; 1
    3368:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    336c:	83 e0       	ldi	r24, 0x03	; 3
    336e:	66 e0       	ldi	r22, 0x06	; 6
    3370:	41 e0       	ldi	r20, 0x01	; 1
    3372:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    3376:	83 e0       	ldi	r24, 0x03	; 3
    3378:	67 e0       	ldi	r22, 0x07	; 7
    337a:	41 e0       	ldi	r20, 0x01	; 1
    337c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    switch (column)
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	28 2f       	mov	r18, r24
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	38 87       	std	Y+8, r19	; 0x08
    3388:	2f 83       	std	Y+7, r18	; 0x07
    338a:	8f 81       	ldd	r24, Y+7	; 0x07
    338c:	98 85       	ldd	r25, Y+8	; 0x08
    338e:	81 30       	cpi	r24, 0x01	; 1
    3390:	91 05       	cpc	r25, r1
    3392:	d9 f0       	breq	.+54     	; 0x33ca <Keypad_GetButtonStatePooling+0x9a>
    3394:	2f 81       	ldd	r18, Y+7	; 0x07
    3396:	38 85       	ldd	r19, Y+8	; 0x08
    3398:	22 30       	cpi	r18, 0x02	; 2
    339a:	31 05       	cpc	r19, r1
    339c:	2c f4       	brge	.+10     	; 0x33a8 <Keypad_GetButtonStatePooling+0x78>
    339e:	8f 81       	ldd	r24, Y+7	; 0x07
    33a0:	98 85       	ldd	r25, Y+8	; 0x08
    33a2:	00 97       	sbiw	r24, 0x00	; 0
    33a4:	61 f0       	breq	.+24     	; 0x33be <Keypad_GetButtonStatePooling+0x8e>
    33a6:	22 c0       	rjmp	.+68     	; 0x33ec <Keypad_GetButtonStatePooling+0xbc>
    33a8:	2f 81       	ldd	r18, Y+7	; 0x07
    33aa:	38 85       	ldd	r19, Y+8	; 0x08
    33ac:	22 30       	cpi	r18, 0x02	; 2
    33ae:	31 05       	cpc	r19, r1
    33b0:	91 f0       	breq	.+36     	; 0x33d6 <Keypad_GetButtonStatePooling+0xa6>
    33b2:	8f 81       	ldd	r24, Y+7	; 0x07
    33b4:	98 85       	ldd	r25, Y+8	; 0x08
    33b6:	83 30       	cpi	r24, 0x03	; 3
    33b8:	91 05       	cpc	r25, r1
    33ba:	99 f0       	breq	.+38     	; 0x33e2 <Keypad_GetButtonStatePooling+0xb2>
    33bc:	17 c0       	rjmp	.+46     	; 0x33ec <Keypad_GetButtonStatePooling+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    33be:	83 e0       	ldi	r24, 0x03	; 3
    33c0:	64 e0       	ldi	r22, 0x04	; 4
    33c2:	40 e0       	ldi	r20, 0x00	; 0
    33c4:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    33c8:	11 c0       	rjmp	.+34     	; 0x33ec <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    33ca:	83 e0       	ldi	r24, 0x03	; 3
    33cc:	65 e0       	ldi	r22, 0x05	; 5
    33ce:	40 e0       	ldi	r20, 0x00	; 0
    33d0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    33d4:	0b c0       	rjmp	.+22     	; 0x33ec <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    33d6:	83 e0       	ldi	r24, 0x03	; 3
    33d8:	66 e0       	ldi	r22, 0x06	; 6
    33da:	40 e0       	ldi	r20, 0x00	; 0
    33dc:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    33e0:	05 c0       	rjmp	.+10     	; 0x33ec <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    33e2:	83 e0       	ldi	r24, 0x03	; 3
    33e4:	67 e0       	ldi	r22, 0x07	; 7
    33e6:	40 e0       	ldi	r20, 0x00	; 0
    33e8:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    33ec:	8a 81       	ldd	r24, Y+2	; 0x02
    33ee:	28 2f       	mov	r18, r24
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	3e 83       	std	Y+6, r19	; 0x06
    33f4:	2d 83       	std	Y+5, r18	; 0x05
    33f6:	8d 81       	ldd	r24, Y+5	; 0x05
    33f8:	9e 81       	ldd	r25, Y+6	; 0x06
    33fa:	81 30       	cpi	r24, 0x01	; 1
    33fc:	91 05       	cpc	r25, r1
    33fe:	19 f1       	breq	.+70     	; 0x3446 <Keypad_GetButtonStatePooling+0x116>
    3400:	2d 81       	ldd	r18, Y+5	; 0x05
    3402:	3e 81       	ldd	r19, Y+6	; 0x06
    3404:	22 30       	cpi	r18, 0x02	; 2
    3406:	31 05       	cpc	r19, r1
    3408:	2c f4       	brge	.+10     	; 0x3414 <Keypad_GetButtonStatePooling+0xe4>
    340a:	8d 81       	ldd	r24, Y+5	; 0x05
    340c:	9e 81       	ldd	r25, Y+6	; 0x06
    340e:	00 97       	sbiw	r24, 0x00	; 0
    3410:	61 f0       	breq	.+24     	; 0x342a <Keypad_GetButtonStatePooling+0xfa>
    3412:	42 c0       	rjmp	.+132    	; 0x3498 <Keypad_GetButtonStatePooling+0x168>
    3414:	2d 81       	ldd	r18, Y+5	; 0x05
    3416:	3e 81       	ldd	r19, Y+6	; 0x06
    3418:	22 30       	cpi	r18, 0x02	; 2
    341a:	31 05       	cpc	r19, r1
    341c:	11 f1       	breq	.+68     	; 0x3462 <Keypad_GetButtonStatePooling+0x132>
    341e:	8d 81       	ldd	r24, Y+5	; 0x05
    3420:	9e 81       	ldd	r25, Y+6	; 0x06
    3422:	83 30       	cpi	r24, 0x03	; 3
    3424:	91 05       	cpc	r25, r1
    3426:	59 f1       	breq	.+86     	; 0x347e <Keypad_GetButtonStatePooling+0x14e>
    3428:	37 c0       	rjmp	.+110    	; 0x3498 <Keypad_GetButtonStatePooling+0x168>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    342a:	83 e0       	ldi	r24, 0x03	; 3
    342c:	60 e0       	ldi	r22, 0x00	; 0
    342e:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_ReadPinLevel>
    3432:	88 23       	and	r24, r24
    3434:	89 f5       	brne	.+98     	; 0x3498 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    3436:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW);
    3438:	83 e0       	ldi	r24, 0x03	; 3
    343a:	60 e0       	ldi	r22, 0x00	; 0
    343c:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_ReadPinLevel>
    3440:	88 23       	and	r24, r24
    3442:	d1 f3       	breq	.-12     	; 0x3438 <Keypad_GetButtonStatePooling+0x108>
    3444:	29 c0       	rjmp	.+82     	; 0x3498 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    3446:	83 e0       	ldi	r24, 0x03	; 3
    3448:	61 e0       	ldi	r22, 0x01	; 1
    344a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_ReadPinLevel>
    344e:	88 23       	and	r24, r24
    3450:	19 f5       	brne	.+70     	; 0x3498 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    3452:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW);
    3454:	83 e0       	ldi	r24, 0x03	; 3
    3456:	61 e0       	ldi	r22, 0x01	; 1
    3458:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_ReadPinLevel>
    345c:	88 23       	and	r24, r24
    345e:	d1 f3       	breq	.-12     	; 0x3454 <Keypad_GetButtonStatePooling+0x124>
    3460:	1b c0       	rjmp	.+54     	; 0x3498 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    3462:	83 e0       	ldi	r24, 0x03	; 3
    3464:	62 e0       	ldi	r22, 0x02	; 2
    3466:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_ReadPinLevel>
    346a:	88 23       	and	r24, r24
    346c:	a9 f4       	brne	.+42     	; 0x3498 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    346e:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW);
    3470:	83 e0       	ldi	r24, 0x03	; 3
    3472:	62 e0       	ldi	r22, 0x02	; 2
    3474:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_ReadPinLevel>
    3478:	88 23       	and	r24, r24
    347a:	d1 f3       	breq	.-12     	; 0x3470 <Keypad_GetButtonStatePooling+0x140>
    347c:	0d c0       	rjmp	.+26     	; 0x3498 <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    347e:	83 e0       	ldi	r24, 0x03	; 3
    3480:	63 e0       	ldi	r22, 0x03	; 3
    3482:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_ReadPinLevel>
    3486:	88 23       	and	r24, r24
    3488:	39 f4       	brne	.+14     	; 0x3498 <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    348a:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW);
    348c:	83 e0       	ldi	r24, 0x03	; 3
    348e:	63 e0       	ldi	r22, 0x03	; 3
    3490:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_ReadPinLevel>
    3494:	88 23       	and	r24, r24
    3496:	d1 f3       	breq	.-12     	; 0x348c <Keypad_GetButtonStatePooling+0x15c>
        }
        break;
    default:
        break;
    }
    return state;
    3498:	8b 81       	ldd	r24, Y+3	; 0x03
}
    349a:	28 96       	adiw	r28, 0x08	; 8
    349c:	0f b6       	in	r0, 0x3f	; 63
    349e:	f8 94       	cli
    34a0:	de bf       	out	0x3e, r29	; 62
    34a2:	0f be       	out	0x3f, r0	; 63
    34a4:	cd bf       	out	0x3d, r28	; 61
    34a6:	cf 91       	pop	r28
    34a8:	df 91       	pop	r29
    34aa:	08 95       	ret

000034ac <Keypad_GetPressedButton>:


Keypad_ButtonType Keypad_GetPressedButton(void) {
    34ac:	df 93       	push	r29
    34ae:	cf 93       	push	r28
    34b0:	00 d0       	rcall	.+0      	; 0x34b2 <Keypad_GetPressedButton+0x6>
    34b2:	cd b7       	in	r28, 0x3d	; 61
    34b4:	de b7       	in	r29, 0x3e	; 62
    u8 i=0;
    34b6:	1a 82       	std	Y+2, r1	; 0x02
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    34b8:	80 e1       	ldi	r24, 0x10	; 16
    34ba:	89 83       	std	Y+1, r24	; 0x01
    for (i=0; i<16; i++) {
    34bc:	1a 82       	std	Y+2, r1	; 0x02
    34be:	0b c0       	rjmp	.+22     	; 0x34d6 <Keypad_GetPressedButton+0x2a>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
    34c0:	8a 81       	ldd	r24, Y+2	; 0x02
    34c2:	0e 94 98 19 	call	0x3330	; 0x3330 <Keypad_GetButtonStatePooling>
    34c6:	88 23       	and	r24, r24
    34c8:	19 f4       	brne	.+6      	; 0x34d0 <Keypad_GetPressedButton+0x24>
            pressed_button = i;
    34ca:	8a 81       	ldd	r24, Y+2	; 0x02
    34cc:	89 83       	std	Y+1, r24	; 0x01
    34ce:	06 c0       	rjmp	.+12     	; 0x34dc <Keypad_GetPressedButton+0x30>


Keypad_ButtonType Keypad_GetPressedButton(void) {
    u8 i=0;
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    for (i=0; i<16; i++) {
    34d0:	8a 81       	ldd	r24, Y+2	; 0x02
    34d2:	8f 5f       	subi	r24, 0xFF	; 255
    34d4:	8a 83       	std	Y+2, r24	; 0x02
    34d6:	8a 81       	ldd	r24, Y+2	; 0x02
    34d8:	80 31       	cpi	r24, 0x10	; 16
    34da:	90 f3       	brcs	.-28     	; 0x34c0 <Keypad_GetPressedButton+0x14>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
            pressed_button = i;
            break;
        }
    }
    return pressed_button;
    34dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    34de:	0f 90       	pop	r0
    34e0:	0f 90       	pop	r0
    34e2:	cf 91       	pop	r28
    34e4:	df 91       	pop	r29
    34e6:	08 95       	ret

000034e8 <LCD_Init>:

static void LCD_SendData(u8 data);
static void LCD_SendCommand(u8 command);
static void LCD_InitPinsMode(void);

void LCD_Init(void) {
    34e8:	df 93       	push	r29
    34ea:	cf 93       	push	r28
    34ec:	cd b7       	in	r28, 0x3d	; 61
    34ee:	de b7       	in	r29, 0x3e	; 62
    34f0:	2f 97       	sbiw	r28, 0x0f	; 15
    34f2:	0f b6       	in	r0, 0x3f	; 63
    34f4:	f8 94       	cli
    34f6:	de bf       	out	0x3e, r29	; 62
    34f8:	0f be       	out	0x3f, r0	; 63
    34fa:	cd bf       	out	0x3d, r28	; 61
    u8 command = 0;
    34fc:	1f 86       	std	Y+15, r1	; 0x0f
    LCD_InitPinsMode();
    34fe:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <LCD_InitPinsMode>
    3502:	80 e0       	ldi	r24, 0x00	; 0
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	a0 ef       	ldi	r26, 0xF0	; 240
    3508:	b1 e4       	ldi	r27, 0x41	; 65
    350a:	8b 87       	std	Y+11, r24	; 0x0b
    350c:	9c 87       	std	Y+12, r25	; 0x0c
    350e:	ad 87       	std	Y+13, r26	; 0x0d
    3510:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3512:	6b 85       	ldd	r22, Y+11	; 0x0b
    3514:	7c 85       	ldd	r23, Y+12	; 0x0c
    3516:	8d 85       	ldd	r24, Y+13	; 0x0d
    3518:	9e 85       	ldd	r25, Y+14	; 0x0e
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	4a ef       	ldi	r20, 0xFA	; 250
    3520:	54 e4       	ldi	r21, 0x44	; 68
    3522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	8f 83       	std	Y+7, r24	; 0x07
    352c:	98 87       	std	Y+8, r25	; 0x08
    352e:	a9 87       	std	Y+9, r26	; 0x09
    3530:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3532:	6f 81       	ldd	r22, Y+7	; 0x07
    3534:	78 85       	ldd	r23, Y+8	; 0x08
    3536:	89 85       	ldd	r24, Y+9	; 0x09
    3538:	9a 85       	ldd	r25, Y+10	; 0x0a
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	40 e8       	ldi	r20, 0x80	; 128
    3540:	5f e3       	ldi	r21, 0x3F	; 63
    3542:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3546:	88 23       	and	r24, r24
    3548:	2c f4       	brge	.+10     	; 0x3554 <LCD_Init+0x6c>
		__ticks = 1;
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	9e 83       	std	Y+6, r25	; 0x06
    3550:	8d 83       	std	Y+5, r24	; 0x05
    3552:	3f c0       	rjmp	.+126    	; 0x35d2 <LCD_Init+0xea>
	else if (__tmp > 65535)
    3554:	6f 81       	ldd	r22, Y+7	; 0x07
    3556:	78 85       	ldd	r23, Y+8	; 0x08
    3558:	89 85       	ldd	r24, Y+9	; 0x09
    355a:	9a 85       	ldd	r25, Y+10	; 0x0a
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	3f ef       	ldi	r19, 0xFF	; 255
    3560:	4f e7       	ldi	r20, 0x7F	; 127
    3562:	57 e4       	ldi	r21, 0x47	; 71
    3564:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3568:	18 16       	cp	r1, r24
    356a:	4c f5       	brge	.+82     	; 0x35be <LCD_Init+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    356c:	6b 85       	ldd	r22, Y+11	; 0x0b
    356e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3570:	8d 85       	ldd	r24, Y+13	; 0x0d
    3572:	9e 85       	ldd	r25, Y+14	; 0x0e
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	40 e2       	ldi	r20, 0x20	; 32
    357a:	51 e4       	ldi	r21, 0x41	; 65
    357c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3580:	dc 01       	movw	r26, r24
    3582:	cb 01       	movw	r24, r22
    3584:	bc 01       	movw	r22, r24
    3586:	cd 01       	movw	r24, r26
    3588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358c:	dc 01       	movw	r26, r24
    358e:	cb 01       	movw	r24, r22
    3590:	9e 83       	std	Y+6, r25	; 0x06
    3592:	8d 83       	std	Y+5, r24	; 0x05
    3594:	0f c0       	rjmp	.+30     	; 0x35b4 <LCD_Init+0xcc>
    3596:	88 ec       	ldi	r24, 0xC8	; 200
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	9c 83       	std	Y+4, r25	; 0x04
    359c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    359e:	8b 81       	ldd	r24, Y+3	; 0x03
    35a0:	9c 81       	ldd	r25, Y+4	; 0x04
    35a2:	01 97       	sbiw	r24, 0x01	; 1
    35a4:	f1 f7       	brne	.-4      	; 0x35a2 <LCD_Init+0xba>
    35a6:	9c 83       	std	Y+4, r25	; 0x04
    35a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35aa:	8d 81       	ldd	r24, Y+5	; 0x05
    35ac:	9e 81       	ldd	r25, Y+6	; 0x06
    35ae:	01 97       	sbiw	r24, 0x01	; 1
    35b0:	9e 83       	std	Y+6, r25	; 0x06
    35b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b4:	8d 81       	ldd	r24, Y+5	; 0x05
    35b6:	9e 81       	ldd	r25, Y+6	; 0x06
    35b8:	00 97       	sbiw	r24, 0x00	; 0
    35ba:	69 f7       	brne	.-38     	; 0x3596 <LCD_Init+0xae>
    35bc:	14 c0       	rjmp	.+40     	; 0x35e6 <LCD_Init+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35be:	6f 81       	ldd	r22, Y+7	; 0x07
    35c0:	78 85       	ldd	r23, Y+8	; 0x08
    35c2:	89 85       	ldd	r24, Y+9	; 0x09
    35c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	9e 83       	std	Y+6, r25	; 0x06
    35d0:	8d 83       	std	Y+5, r24	; 0x05
    35d2:	8d 81       	ldd	r24, Y+5	; 0x05
    35d4:	9e 81       	ldd	r25, Y+6	; 0x06
    35d6:	9a 83       	std	Y+2, r25	; 0x02
    35d8:	89 83       	std	Y+1, r24	; 0x01
    35da:	89 81       	ldd	r24, Y+1	; 0x01
    35dc:	9a 81       	ldd	r25, Y+2	; 0x02
    35de:	01 97       	sbiw	r24, 0x01	; 1
    35e0:	f1 f7       	brne	.-4      	; 0x35de <LCD_Init+0xf6>
    35e2:	9a 83       	std	Y+2, r25	; 0x02
    35e4:	89 83       	std	Y+1, r24	; 0x01

    /* Function Set:
        N: 1 (two lines)
        F: 0 (5x7)
    */
    command = 0b00110000;
    35e6:	80 e3       	ldi	r24, 0x30	; 48
    35e8:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_LINES == LCD_TWO_LINES)
        SET_BIT(command, 3);
    35ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ec:	88 60       	ori	r24, 0x08	; 8
    35ee:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_DOTS == LCD_DOTS_5X10)
        SET_BIT(command, 2);
    35f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    35f2:	84 60       	ori	r24, 0x04	; 4
    35f4:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    35f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    35f8:	0e 94 2c 1c 	call	0x3858	; 0x3858 <LCD_SendCommand>
    /* Display ON/OFF
        D: 1 (Display ON)
        C: 0 (Cursor off)
        B: 0 (Cursor not blink)
    */
    command = 0b00001000; 
    35fc:	88 e0       	ldi	r24, 0x08	; 8
    35fe:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_DISPLAY == LCD_DISPLAY_ON)
        SET_BIT(command, 2);
    3600:	8f 85       	ldd	r24, Y+15	; 0x0f
    3602:	84 60       	ori	r24, 0x04	; 4
    3604:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_BLINK)
        SET_BIT(command, 0);
    3606:	8f 85       	ldd	r24, Y+15	; 0x0f
    3608:	81 60       	ori	r24, 0x01	; 1
    360a:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(command, 1);
    360c:	8f 85       	ldd	r24, Y+15	; 0x0f
    360e:	82 60       	ori	r24, 0x02	; 2
    3610:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_NO_BLINK)
        SET_BIT(command, 1);
    3612:	8f 85       	ldd	r24, Y+15	; 0x0f
    3614:	82 60       	ori	r24, 0x02	; 2
    3616:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    3618:	8f 85       	ldd	r24, Y+15	; 0x0f
    361a:	0e 94 2c 1c 	call	0x3858	; 0x3858 <LCD_SendCommand>

    /* Display Clear */
    LCD_SendCommand(0b00000001);
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	0e 94 2c 1c 	call	0x3858	; 0x3858 <LCD_SendCommand>
}
    3624:	2f 96       	adiw	r28, 0x0f	; 15
    3626:	0f b6       	in	r0, 0x3f	; 63
    3628:	f8 94       	cli
    362a:	de bf       	out	0x3e, r29	; 62
    362c:	0f be       	out	0x3f, r0	; 63
    362e:	cd bf       	out	0x3d, r28	; 61
    3630:	cf 91       	pop	r28
    3632:	df 91       	pop	r29
    3634:	08 95       	ret

00003636 <LCD_Clear>:


void LCD_Clear (void) {
    3636:	df 93       	push	r29
    3638:	cf 93       	push	r28
    363a:	cd b7       	in	r28, 0x3d	; 61
    363c:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(0b00000001);
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	0e 94 2c 1c 	call	0x3858	; 0x3858 <LCD_SendCommand>
}
    3644:	cf 91       	pop	r28
    3646:	df 91       	pop	r29
    3648:	08 95       	ret

0000364a <LCD_DisplayCharacter>:

void LCD_DisplayCharacter (u8 data) {
    364a:	df 93       	push	r29
    364c:	cf 93       	push	r28
    364e:	0f 92       	push	r0
    3650:	cd b7       	in	r28, 0x3d	; 61
    3652:	de b7       	in	r29, 0x3e	; 62
    3654:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
    3656:	89 81       	ldd	r24, Y+1	; 0x01
    3658:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <LCD_SendData>
}
    365c:	0f 90       	pop	r0
    365e:	cf 91       	pop	r28
    3660:	df 91       	pop	r29
    3662:	08 95       	ret

00003664 <LCD_DisplayString>:

void LCD_DisplayString (u8 *str) {
    3664:	df 93       	push	r29
    3666:	cf 93       	push	r28
    3668:	00 d0       	rcall	.+0      	; 0x366a <LCD_DisplayString+0x6>
    366a:	0f 92       	push	r0
    366c:	cd b7       	in	r28, 0x3d	; 61
    366e:	de b7       	in	r29, 0x3e	; 62
    3670:	9b 83       	std	Y+3, r25	; 0x03
    3672:	8a 83       	std	Y+2, r24	; 0x02
    u8 i=0;
    3674:	19 82       	std	Y+1, r1	; 0x01
    3676:	0e c0       	rjmp	.+28     	; 0x3694 <LCD_DisplayString+0x30>
    while(str[i] != '\0') {
        LCD_DisplayCharacter(str[i]);
    3678:	89 81       	ldd	r24, Y+1	; 0x01
    367a:	28 2f       	mov	r18, r24
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	8a 81       	ldd	r24, Y+2	; 0x02
    3680:	9b 81       	ldd	r25, Y+3	; 0x03
    3682:	fc 01       	movw	r30, r24
    3684:	e2 0f       	add	r30, r18
    3686:	f3 1f       	adc	r31, r19
    3688:	80 81       	ld	r24, Z
    368a:	0e 94 25 1b 	call	0x364a	; 0x364a <LCD_DisplayCharacter>
        i++;
    368e:	89 81       	ldd	r24, Y+1	; 0x01
    3690:	8f 5f       	subi	r24, 0xFF	; 255
    3692:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
}

void LCD_DisplayString (u8 *str) {
    u8 i=0;
    while(str[i] != '\0') {
    3694:	89 81       	ldd	r24, Y+1	; 0x01
    3696:	28 2f       	mov	r18, r24
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	8a 81       	ldd	r24, Y+2	; 0x02
    369c:	9b 81       	ldd	r25, Y+3	; 0x03
    369e:	fc 01       	movw	r30, r24
    36a0:	e2 0f       	add	r30, r18
    36a2:	f3 1f       	adc	r31, r19
    36a4:	80 81       	ld	r24, Z
    36a6:	88 23       	and	r24, r24
    36a8:	39 f7       	brne	.-50     	; 0x3678 <LCD_DisplayString+0x14>
        LCD_DisplayCharacter(str[i]);
        i++;
    }
}
    36aa:	0f 90       	pop	r0
    36ac:	0f 90       	pop	r0
    36ae:	0f 90       	pop	r0
    36b0:	cf 91       	pop	r28
    36b2:	df 91       	pop	r29
    36b4:	08 95       	ret

000036b6 <LCD_SetCursorPosition>:

void LCD_SetCursorPosition(u8 row, u8 column) {
    36b6:	df 93       	push	r29
    36b8:	cf 93       	push	r28
    36ba:	00 d0       	rcall	.+0      	; 0x36bc <LCD_SetCursorPosition+0x6>
    36bc:	0f 92       	push	r0
    36be:	cd b7       	in	r28, 0x3d	; 61
    36c0:	de b7       	in	r29, 0x3e	; 62
    36c2:	8a 83       	std	Y+2, r24	; 0x02
    36c4:	6b 83       	std	Y+3, r22	; 0x03
    u8 address = column + row*0x40;
    36c6:	8a 81       	ldd	r24, Y+2	; 0x02
    36c8:	88 2f       	mov	r24, r24
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	00 24       	eor	r0, r0
    36ce:	96 95       	lsr	r25
    36d0:	87 95       	ror	r24
    36d2:	07 94       	ror	r0
    36d4:	96 95       	lsr	r25
    36d6:	87 95       	ror	r24
    36d8:	07 94       	ror	r0
    36da:	98 2f       	mov	r25, r24
    36dc:	80 2d       	mov	r24, r0
    36de:	98 2f       	mov	r25, r24
    36e0:	8b 81       	ldd	r24, Y+3	; 0x03
    36e2:	89 0f       	add	r24, r25
    36e4:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(address, 7);
    36e6:	89 81       	ldd	r24, Y+1	; 0x01
    36e8:	80 68       	ori	r24, 0x80	; 128
    36ea:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendCommand(address);
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	0e 94 2c 1c 	call	0x3858	; 0x3858 <LCD_SendCommand>
}
    36f2:	0f 90       	pop	r0
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	cf 91       	pop	r28
    36fa:	df 91       	pop	r29
    36fc:	08 95       	ret

000036fe <LCD_DisplayNumber>:

void LCD_DisplayNumber (s32 number) {
    36fe:	df 93       	push	r29
    3700:	cf 93       	push	r28
    3702:	00 d0       	rcall	.+0      	; 0x3704 <LCD_DisplayNumber+0x6>
    3704:	00 d0       	rcall	.+0      	; 0x3706 <LCD_DisplayNumber+0x8>
    3706:	00 d0       	rcall	.+0      	; 0x3708 <LCD_DisplayNumber+0xa>
    3708:	cd b7       	in	r28, 0x3d	; 61
    370a:	de b7       	in	r29, 0x3e	; 62
    370c:	9e 83       	std	Y+6, r25	; 0x06
    370e:	8d 83       	std	Y+5, r24	; 0x05
    u32 reversed_number = 0;
    3710:	1c 82       	std	Y+4, r1	; 0x04
    3712:	1b 82       	std	Y+3, r1	; 0x03
    u8 digits = 0;
    3714:	1a 82       	std	Y+2, r1	; 0x02
    if (number < 0) {
    3716:	8d 81       	ldd	r24, Y+5	; 0x05
    3718:	9e 81       	ldd	r25, Y+6	; 0x06
    371a:	99 23       	and	r25, r25
    371c:	5c f4       	brge	.+22     	; 0x3734 <LCD_DisplayNumber+0x36>
        number = number*-1;
    371e:	8d 81       	ldd	r24, Y+5	; 0x05
    3720:	9e 81       	ldd	r25, Y+6	; 0x06
    3722:	90 95       	com	r25
    3724:	81 95       	neg	r24
    3726:	9f 4f       	sbci	r25, 0xFF	; 255
    3728:	9e 83       	std	Y+6, r25	; 0x06
    372a:	8d 83       	std	Y+5, r24	; 0x05
        LCD_DisplayCharacter('-');
    372c:	8d e2       	ldi	r24, 0x2D	; 45
    372e:	0e 94 25 1b 	call	0x364a	; 0x364a <LCD_DisplayCharacter>
    3732:	2d c0       	rjmp	.+90     	; 0x378e <LCD_DisplayNumber+0x90>
    }
    else if (number == 0) {
    3734:	8d 81       	ldd	r24, Y+5	; 0x05
    3736:	9e 81       	ldd	r25, Y+6	; 0x06
    3738:	00 97       	sbiw	r24, 0x00	; 0
    373a:	49 f5       	brne	.+82     	; 0x378e <LCD_DisplayNumber+0x90>
        LCD_DisplayCharacter('0');
    373c:	80 e3       	ldi	r24, 0x30	; 48
    373e:	0e 94 25 1b 	call	0x364a	; 0x364a <LCD_DisplayCharacter>
    3742:	25 c0       	rjmp	.+74     	; 0x378e <LCD_DisplayNumber+0x90>
    }
    while (number != 0)
    {
        reversed_number = (reversed_number*10) + (number%10);
    3744:	8b 81       	ldd	r24, Y+3	; 0x03
    3746:	9c 81       	ldd	r25, Y+4	; 0x04
    3748:	9c 01       	movw	r18, r24
    374a:	22 0f       	add	r18, r18
    374c:	33 1f       	adc	r19, r19
    374e:	c9 01       	movw	r24, r18
    3750:	88 0f       	add	r24, r24
    3752:	99 1f       	adc	r25, r25
    3754:	88 0f       	add	r24, r24
    3756:	99 1f       	adc	r25, r25
    3758:	f9 01       	movw	r30, r18
    375a:	e8 0f       	add	r30, r24
    375c:	f9 1f       	adc	r31, r25
    375e:	8d 81       	ldd	r24, Y+5	; 0x05
    3760:	9e 81       	ldd	r25, Y+6	; 0x06
    3762:	2a e0       	ldi	r18, 0x0A	; 10
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	b9 01       	movw	r22, r18
    3768:	0e 94 15 2c 	call	0x582a	; 0x582a <__divmodhi4>
    376c:	8e 0f       	add	r24, r30
    376e:	9f 1f       	adc	r25, r31
    3770:	9c 83       	std	Y+4, r25	; 0x04
    3772:	8b 83       	std	Y+3, r24	; 0x03
        number = number / 10;
    3774:	8d 81       	ldd	r24, Y+5	; 0x05
    3776:	9e 81       	ldd	r25, Y+6	; 0x06
    3778:	2a e0       	ldi	r18, 0x0A	; 10
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	b9 01       	movw	r22, r18
    377e:	0e 94 15 2c 	call	0x582a	; 0x582a <__divmodhi4>
    3782:	cb 01       	movw	r24, r22
    3784:	9e 83       	std	Y+6, r25	; 0x06
    3786:	8d 83       	std	Y+5, r24	; 0x05
        digits++;
    3788:	8a 81       	ldd	r24, Y+2	; 0x02
    378a:	8f 5f       	subi	r24, 0xFF	; 255
    378c:	8a 83       	std	Y+2, r24	; 0x02
        LCD_DisplayCharacter('-');
    }
    else if (number == 0) {
        LCD_DisplayCharacter('0');
    }
    while (number != 0)
    378e:	8d 81       	ldd	r24, Y+5	; 0x05
    3790:	9e 81       	ldd	r25, Y+6	; 0x06
    3792:	00 97       	sbiw	r24, 0x00	; 0
    3794:	b9 f6       	brne	.-82     	; 0x3744 <LCD_DisplayNumber+0x46>
    3796:	1b c0       	rjmp	.+54     	; 0x37ce <LCD_DisplayNumber+0xd0>
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    {
        u8 data = reversed_number % 10;
    3798:	8b 81       	ldd	r24, Y+3	; 0x03
    379a:	9c 81       	ldd	r25, Y+4	; 0x04
    379c:	2a e0       	ldi	r18, 0x0A	; 10
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	b9 01       	movw	r22, r18
    37a2:	0e 94 01 2c 	call	0x5802	; 0x5802 <__udivmodhi4>
    37a6:	89 83       	std	Y+1, r24	; 0x01
        data = data + '0';
    37a8:	89 81       	ldd	r24, Y+1	; 0x01
    37aa:	80 5d       	subi	r24, 0xD0	; 208
    37ac:	89 83       	std	Y+1, r24	; 0x01
        LCD_DisplayCharacter(data);
    37ae:	89 81       	ldd	r24, Y+1	; 0x01
    37b0:	0e 94 25 1b 	call	0x364a	; 0x364a <LCD_DisplayCharacter>
        reversed_number = reversed_number / 10;
    37b4:	8b 81       	ldd	r24, Y+3	; 0x03
    37b6:	9c 81       	ldd	r25, Y+4	; 0x04
    37b8:	2a e0       	ldi	r18, 0x0A	; 10
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	b9 01       	movw	r22, r18
    37be:	0e 94 01 2c 	call	0x5802	; 0x5802 <__udivmodhi4>
    37c2:	cb 01       	movw	r24, r22
    37c4:	9c 83       	std	Y+4, r25	; 0x04
    37c6:	8b 83       	std	Y+3, r24	; 0x03
        digits--;
    37c8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ca:	81 50       	subi	r24, 0x01	; 1
    37cc:	8a 83       	std	Y+2, r24	; 0x02
    {
        reversed_number = (reversed_number*10) + (number%10);
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    37ce:	8b 81       	ldd	r24, Y+3	; 0x03
    37d0:	9c 81       	ldd	r25, Y+4	; 0x04
    37d2:	00 97       	sbiw	r24, 0x00	; 0
    37d4:	09 f7       	brne	.-62     	; 0x3798 <LCD_DisplayNumber+0x9a>
    37d6:	06 c0       	rjmp	.+12     	; 0x37e4 <LCD_DisplayNumber+0xe6>
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
        LCD_DisplayCharacter('0');
    37d8:	80 e3       	ldi	r24, 0x30	; 48
    37da:	0e 94 25 1b 	call	0x364a	; 0x364a <LCD_DisplayCharacter>
        digits--;
    37de:	8a 81       	ldd	r24, Y+2	; 0x02
    37e0:	81 50       	subi	r24, 0x01	; 1
    37e2:	8a 83       	std	Y+2, r24	; 0x02
        data = data + '0';
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
    37e4:	8a 81       	ldd	r24, Y+2	; 0x02
    37e6:	88 23       	and	r24, r24
    37e8:	b9 f7       	brne	.-18     	; 0x37d8 <LCD_DisplayNumber+0xda>
        LCD_DisplayCharacter('0');
        digits--;
    }
    
}
    37ea:	26 96       	adiw	r28, 0x06	; 6
    37ec:	0f b6       	in	r0, 0x3f	; 63
    37ee:	f8 94       	cli
    37f0:	de bf       	out	0x3e, r29	; 62
    37f2:	0f be       	out	0x3f, r0	; 63
    37f4:	cd bf       	out	0x3d, r28	; 61
    37f6:	cf 91       	pop	r28
    37f8:	df 91       	pop	r29
    37fa:	08 95       	ret

000037fc <LCD_ShiftLeft>:

void LCD_ShiftLeft (u8 counter) {
    37fc:	df 93       	push	r29
    37fe:	cf 93       	push	r28
    3800:	00 d0       	rcall	.+0      	; 0x3802 <LCD_ShiftLeft+0x6>
    3802:	cd b7       	in	r28, 0x3d	; 61
    3804:	de b7       	in	r29, 0x3e	; 62
    3806:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    3808:	19 82       	std	Y+1, r1	; 0x01
    380a:	06 c0       	rjmp	.+12     	; 0x3818 <LCD_ShiftLeft+0x1c>
        LCD_SendCommand(0b00011000);
    380c:	88 e1       	ldi	r24, 0x18	; 24
    380e:	0e 94 2c 1c 	call	0x3858	; 0x3858 <LCD_SendCommand>
    
}

void LCD_ShiftLeft (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    3812:	89 81       	ldd	r24, Y+1	; 0x01
    3814:	8f 5f       	subi	r24, 0xFF	; 255
    3816:	89 83       	std	Y+1, r24	; 0x01
    3818:	99 81       	ldd	r25, Y+1	; 0x01
    381a:	8a 81       	ldd	r24, Y+2	; 0x02
    381c:	98 17       	cp	r25, r24
    381e:	b0 f3       	brcs	.-20     	; 0x380c <LCD_ShiftLeft+0x10>
        LCD_SendCommand(0b00011000);
    }
}
    3820:	0f 90       	pop	r0
    3822:	0f 90       	pop	r0
    3824:	cf 91       	pop	r28
    3826:	df 91       	pop	r29
    3828:	08 95       	ret

0000382a <LCD_ShiftRight>:
void LCD_ShiftRight (u8 counter) {
    382a:	df 93       	push	r29
    382c:	cf 93       	push	r28
    382e:	00 d0       	rcall	.+0      	; 0x3830 <LCD_ShiftRight+0x6>
    3830:	cd b7       	in	r28, 0x3d	; 61
    3832:	de b7       	in	r29, 0x3e	; 62
    3834:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    3836:	19 82       	std	Y+1, r1	; 0x01
    3838:	06 c0       	rjmp	.+12     	; 0x3846 <LCD_ShiftRight+0x1c>
        LCD_SendCommand(0b00011100);
    383a:	8c e1       	ldi	r24, 0x1C	; 28
    383c:	0e 94 2c 1c 	call	0x3858	; 0x3858 <LCD_SendCommand>
        LCD_SendCommand(0b00011000);
    }
}
void LCD_ShiftRight (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    3840:	89 81       	ldd	r24, Y+1	; 0x01
    3842:	8f 5f       	subi	r24, 0xFF	; 255
    3844:	89 83       	std	Y+1, r24	; 0x01
    3846:	99 81       	ldd	r25, Y+1	; 0x01
    3848:	8a 81       	ldd	r24, Y+2	; 0x02
    384a:	98 17       	cp	r25, r24
    384c:	b0 f3       	brcs	.-20     	; 0x383a <LCD_ShiftRight+0x10>
        LCD_SendCommand(0b00011100);
    }
}
    384e:	0f 90       	pop	r0
    3850:	0f 90       	pop	r0
    3852:	cf 91       	pop	r28
    3854:	df 91       	pop	r29
    3856:	08 95       	ret

00003858 <LCD_SendCommand>:

static void LCD_SendCommand(u8 command) {
    3858:	df 93       	push	r29
    385a:	cf 93       	push	r28
    385c:	cd b7       	in	r28, 0x3d	; 61
    385e:	de b7       	in	r29, 0x3e	; 62
    3860:	2f 97       	sbiw	r28, 0x0f	; 15
    3862:	0f b6       	in	r0, 0x3f	; 63
    3864:	f8 94       	cli
    3866:	de bf       	out	0x3e, r29	; 62
    3868:	0f be       	out	0x3f, r0	; 63
    386a:	cd bf       	out	0x3d, r28	; 61
    386c:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 0 Command
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_LOW);
    386e:	81 e0       	ldi	r24, 0x01	; 1
    3870:	62 e0       	ldi	r22, 0x02	; 2
    3872:	40 e0       	ldi	r20, 0x00	; 0
    3874:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    3878:	81 e0       	ldi	r24, 0x01	; 1
    387a:	61 e0       	ldi	r22, 0x01	; 1
    387c:	40 e0       	ldi	r20, 0x00	; 0
    387e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    
    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(command, 0));
    3882:	8f 85       	ldd	r24, Y+15	; 0x0f
    3884:	98 2f       	mov	r25, r24
    3886:	91 70       	andi	r25, 0x01	; 1
    3888:	80 e0       	ldi	r24, 0x00	; 0
    388a:	67 e0       	ldi	r22, 0x07	; 7
    388c:	49 2f       	mov	r20, r25
    388e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(command, 1));
    3892:	8f 85       	ldd	r24, Y+15	; 0x0f
    3894:	86 95       	lsr	r24
    3896:	98 2f       	mov	r25, r24
    3898:	91 70       	andi	r25, 0x01	; 1
    389a:	80 e0       	ldi	r24, 0x00	; 0
    389c:	66 e0       	ldi	r22, 0x06	; 6
    389e:	49 2f       	mov	r20, r25
    38a0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(command, 2));
    38a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    38a6:	86 95       	lsr	r24
    38a8:	86 95       	lsr	r24
    38aa:	98 2f       	mov	r25, r24
    38ac:	91 70       	andi	r25, 0x01	; 1
    38ae:	80 e0       	ldi	r24, 0x00	; 0
    38b0:	65 e0       	ldi	r22, 0x05	; 5
    38b2:	49 2f       	mov	r20, r25
    38b4:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(command, 3));
    38b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    38ba:	86 95       	lsr	r24
    38bc:	86 95       	lsr	r24
    38be:	86 95       	lsr	r24
    38c0:	98 2f       	mov	r25, r24
    38c2:	91 70       	andi	r25, 0x01	; 1
    38c4:	80 e0       	ldi	r24, 0x00	; 0
    38c6:	64 e0       	ldi	r22, 0x04	; 4
    38c8:	49 2f       	mov	r20, r25
    38ca:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(command, 4));
    38ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    38d0:	82 95       	swap	r24
    38d2:	8f 70       	andi	r24, 0x0F	; 15
    38d4:	98 2f       	mov	r25, r24
    38d6:	91 70       	andi	r25, 0x01	; 1
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	63 e0       	ldi	r22, 0x03	; 3
    38dc:	49 2f       	mov	r20, r25
    38de:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(command, 5));
    38e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    38e4:	82 95       	swap	r24
    38e6:	86 95       	lsr	r24
    38e8:	87 70       	andi	r24, 0x07	; 7
    38ea:	98 2f       	mov	r25, r24
    38ec:	91 70       	andi	r25, 0x01	; 1
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	62 e0       	ldi	r22, 0x02	; 2
    38f2:	49 2f       	mov	r20, r25
    38f4:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(command, 6));
    38f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    38fa:	82 95       	swap	r24
    38fc:	86 95       	lsr	r24
    38fe:	86 95       	lsr	r24
    3900:	83 70       	andi	r24, 0x03	; 3
    3902:	98 2f       	mov	r25, r24
    3904:	91 70       	andi	r25, 0x01	; 1
    3906:	80 e0       	ldi	r24, 0x00	; 0
    3908:	61 e0       	ldi	r22, 0x01	; 1
    390a:	49 2f       	mov	r20, r25
    390c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(command, 7));
    3910:	8f 85       	ldd	r24, Y+15	; 0x0f
    3912:	98 2f       	mov	r25, r24
    3914:	99 1f       	adc	r25, r25
    3916:	99 27       	eor	r25, r25
    3918:	99 1f       	adc	r25, r25
    391a:	80 e0       	ldi	r24, 0x00	; 0
    391c:	60 e0       	ldi	r22, 0x00	; 0
    391e:	49 2f       	mov	r20, r25
    3920:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	60 e0       	ldi	r22, 0x00	; 0
    3928:	41 e0       	ldi	r20, 0x01	; 1
    392a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	a0 e0       	ldi	r26, 0x00	; 0
    3934:	b0 e4       	ldi	r27, 0x40	; 64
    3936:	8b 87       	std	Y+11, r24	; 0x0b
    3938:	9c 87       	std	Y+12, r25	; 0x0c
    393a:	ad 87       	std	Y+13, r26	; 0x0d
    393c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    393e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3940:	7c 85       	ldd	r23, Y+12	; 0x0c
    3942:	8d 85       	ldd	r24, Y+13	; 0x0d
    3944:	9e 85       	ldd	r25, Y+14	; 0x0e
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	4a ef       	ldi	r20, 0xFA	; 250
    394c:	54 e4       	ldi	r21, 0x44	; 68
    394e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3952:	dc 01       	movw	r26, r24
    3954:	cb 01       	movw	r24, r22
    3956:	8f 83       	std	Y+7, r24	; 0x07
    3958:	98 87       	std	Y+8, r25	; 0x08
    395a:	a9 87       	std	Y+9, r26	; 0x09
    395c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    395e:	6f 81       	ldd	r22, Y+7	; 0x07
    3960:	78 85       	ldd	r23, Y+8	; 0x08
    3962:	89 85       	ldd	r24, Y+9	; 0x09
    3964:	9a 85       	ldd	r25, Y+10	; 0x0a
    3966:	20 e0       	ldi	r18, 0x00	; 0
    3968:	30 e0       	ldi	r19, 0x00	; 0
    396a:	40 e8       	ldi	r20, 0x80	; 128
    396c:	5f e3       	ldi	r21, 0x3F	; 63
    396e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3972:	88 23       	and	r24, r24
    3974:	2c f4       	brge	.+10     	; 0x3980 <LCD_SendCommand+0x128>
		__ticks = 1;
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	9e 83       	std	Y+6, r25	; 0x06
    397c:	8d 83       	std	Y+5, r24	; 0x05
    397e:	3f c0       	rjmp	.+126    	; 0x39fe <LCD_SendCommand+0x1a6>
	else if (__tmp > 65535)
    3980:	6f 81       	ldd	r22, Y+7	; 0x07
    3982:	78 85       	ldd	r23, Y+8	; 0x08
    3984:	89 85       	ldd	r24, Y+9	; 0x09
    3986:	9a 85       	ldd	r25, Y+10	; 0x0a
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	3f ef       	ldi	r19, 0xFF	; 255
    398c:	4f e7       	ldi	r20, 0x7F	; 127
    398e:	57 e4       	ldi	r21, 0x47	; 71
    3990:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3994:	18 16       	cp	r1, r24
    3996:	4c f5       	brge	.+82     	; 0x39ea <LCD_SendCommand+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3998:	6b 85       	ldd	r22, Y+11	; 0x0b
    399a:	7c 85       	ldd	r23, Y+12	; 0x0c
    399c:	8d 85       	ldd	r24, Y+13	; 0x0d
    399e:	9e 85       	ldd	r25, Y+14	; 0x0e
    39a0:	20 e0       	ldi	r18, 0x00	; 0
    39a2:	30 e0       	ldi	r19, 0x00	; 0
    39a4:	40 e2       	ldi	r20, 0x20	; 32
    39a6:	51 e4       	ldi	r21, 0x41	; 65
    39a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ac:	dc 01       	movw	r26, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	bc 01       	movw	r22, r24
    39b2:	cd 01       	movw	r24, r26
    39b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b8:	dc 01       	movw	r26, r24
    39ba:	cb 01       	movw	r24, r22
    39bc:	9e 83       	std	Y+6, r25	; 0x06
    39be:	8d 83       	std	Y+5, r24	; 0x05
    39c0:	0f c0       	rjmp	.+30     	; 0x39e0 <LCD_SendCommand+0x188>
    39c2:	88 ec       	ldi	r24, 0xC8	; 200
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	9c 83       	std	Y+4, r25	; 0x04
    39c8:	8b 83       	std	Y+3, r24	; 0x03
    39ca:	8b 81       	ldd	r24, Y+3	; 0x03
    39cc:	9c 81       	ldd	r25, Y+4	; 0x04
    39ce:	01 97       	sbiw	r24, 0x01	; 1
    39d0:	f1 f7       	brne	.-4      	; 0x39ce <LCD_SendCommand+0x176>
    39d2:	9c 83       	std	Y+4, r25	; 0x04
    39d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d6:	8d 81       	ldd	r24, Y+5	; 0x05
    39d8:	9e 81       	ldd	r25, Y+6	; 0x06
    39da:	01 97       	sbiw	r24, 0x01	; 1
    39dc:	9e 83       	std	Y+6, r25	; 0x06
    39de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39e0:	8d 81       	ldd	r24, Y+5	; 0x05
    39e2:	9e 81       	ldd	r25, Y+6	; 0x06
    39e4:	00 97       	sbiw	r24, 0x00	; 0
    39e6:	69 f7       	brne	.-38     	; 0x39c2 <LCD_SendCommand+0x16a>
    39e8:	14 c0       	rjmp	.+40     	; 0x3a12 <LCD_SendCommand+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ea:	6f 81       	ldd	r22, Y+7	; 0x07
    39ec:	78 85       	ldd	r23, Y+8	; 0x08
    39ee:	89 85       	ldd	r24, Y+9	; 0x09
    39f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f6:	dc 01       	movw	r26, r24
    39f8:	cb 01       	movw	r24, r22
    39fa:	9e 83       	std	Y+6, r25	; 0x06
    39fc:	8d 83       	std	Y+5, r24	; 0x05
    39fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3a00:	9e 81       	ldd	r25, Y+6	; 0x06
    3a02:	9a 83       	std	Y+2, r25	; 0x02
    3a04:	89 83       	std	Y+1, r24	; 0x01
    3a06:	89 81       	ldd	r24, Y+1	; 0x01
    3a08:	9a 81       	ldd	r25, Y+2	; 0x02
    3a0a:	01 97       	sbiw	r24, 0x01	; 1
    3a0c:	f1 f7       	brne	.-4      	; 0x3a0a <LCD_SendCommand+0x1b2>
    3a0e:	9a 83       	std	Y+2, r25	; 0x02
    3a10:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	60 e0       	ldi	r22, 0x00	; 0
    3a16:	40 e0       	ldi	r20, 0x00	; 0
    3a18:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
}
    3a1c:	2f 96       	adiw	r28, 0x0f	; 15
    3a1e:	0f b6       	in	r0, 0x3f	; 63
    3a20:	f8 94       	cli
    3a22:	de bf       	out	0x3e, r29	; 62
    3a24:	0f be       	out	0x3f, r0	; 63
    3a26:	cd bf       	out	0x3d, r28	; 61
    3a28:	cf 91       	pop	r28
    3a2a:	df 91       	pop	r29
    3a2c:	08 95       	ret

00003a2e <LCD_SendData>:

static void LCD_SendData(u8 data) {
    3a2e:	df 93       	push	r29
    3a30:	cf 93       	push	r28
    3a32:	cd b7       	in	r28, 0x3d	; 61
    3a34:	de b7       	in	r29, 0x3e	; 62
    3a36:	2f 97       	sbiw	r28, 0x0f	; 15
    3a38:	0f b6       	in	r0, 0x3f	; 63
    3a3a:	f8 94       	cli
    3a3c:	de bf       	out	0x3e, r29	; 62
    3a3e:	0f be       	out	0x3f, r0	; 63
    3a40:	cd bf       	out	0x3d, r28	; 61
    3a42:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 1 Data
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_HIGH);
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	62 e0       	ldi	r22, 0x02	; 2
    3a48:	41 e0       	ldi	r20, 0x01	; 1
    3a4a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	61 e0       	ldi	r22, 0x01	; 1
    3a52:	40 e0       	ldi	r20, 0x00	; 0
    3a54:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    
    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(data, 0));
    3a58:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a5a:	98 2f       	mov	r25, r24
    3a5c:	91 70       	andi	r25, 0x01	; 1
    3a5e:	80 e0       	ldi	r24, 0x00	; 0
    3a60:	67 e0       	ldi	r22, 0x07	; 7
    3a62:	49 2f       	mov	r20, r25
    3a64:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(data, 1));
    3a68:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a6a:	86 95       	lsr	r24
    3a6c:	98 2f       	mov	r25, r24
    3a6e:	91 70       	andi	r25, 0x01	; 1
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	66 e0       	ldi	r22, 0x06	; 6
    3a74:	49 2f       	mov	r20, r25
    3a76:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(data, 2));
    3a7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a7c:	86 95       	lsr	r24
    3a7e:	86 95       	lsr	r24
    3a80:	98 2f       	mov	r25, r24
    3a82:	91 70       	andi	r25, 0x01	; 1
    3a84:	80 e0       	ldi	r24, 0x00	; 0
    3a86:	65 e0       	ldi	r22, 0x05	; 5
    3a88:	49 2f       	mov	r20, r25
    3a8a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(data, 3));
    3a8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a90:	86 95       	lsr	r24
    3a92:	86 95       	lsr	r24
    3a94:	86 95       	lsr	r24
    3a96:	98 2f       	mov	r25, r24
    3a98:	91 70       	andi	r25, 0x01	; 1
    3a9a:	80 e0       	ldi	r24, 0x00	; 0
    3a9c:	64 e0       	ldi	r22, 0x04	; 4
    3a9e:	49 2f       	mov	r20, r25
    3aa0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(data, 4));
    3aa4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3aa6:	82 95       	swap	r24
    3aa8:	8f 70       	andi	r24, 0x0F	; 15
    3aaa:	98 2f       	mov	r25, r24
    3aac:	91 70       	andi	r25, 0x01	; 1
    3aae:	80 e0       	ldi	r24, 0x00	; 0
    3ab0:	63 e0       	ldi	r22, 0x03	; 3
    3ab2:	49 2f       	mov	r20, r25
    3ab4:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(data, 5));
    3ab8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3aba:	82 95       	swap	r24
    3abc:	86 95       	lsr	r24
    3abe:	87 70       	andi	r24, 0x07	; 7
    3ac0:	98 2f       	mov	r25, r24
    3ac2:	91 70       	andi	r25, 0x01	; 1
    3ac4:	80 e0       	ldi	r24, 0x00	; 0
    3ac6:	62 e0       	ldi	r22, 0x02	; 2
    3ac8:	49 2f       	mov	r20, r25
    3aca:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(data, 6));
    3ace:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ad0:	82 95       	swap	r24
    3ad2:	86 95       	lsr	r24
    3ad4:	86 95       	lsr	r24
    3ad6:	83 70       	andi	r24, 0x03	; 3
    3ad8:	98 2f       	mov	r25, r24
    3ada:	91 70       	andi	r25, 0x01	; 1
    3adc:	80 e0       	ldi	r24, 0x00	; 0
    3ade:	61 e0       	ldi	r22, 0x01	; 1
    3ae0:	49 2f       	mov	r20, r25
    3ae2:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(data, 7));
    3ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ae8:	98 2f       	mov	r25, r24
    3aea:	99 1f       	adc	r25, r25
    3aec:	99 27       	eor	r25, r25
    3aee:	99 1f       	adc	r25, r25
    3af0:	80 e0       	ldi	r24, 0x00	; 0
    3af2:	60 e0       	ldi	r22, 0x00	; 0
    3af4:	49 2f       	mov	r20, r25
    3af6:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	60 e0       	ldi	r22, 0x00	; 0
    3afe:	41 e0       	ldi	r20, 0x01	; 1
    3b00:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	a0 e0       	ldi	r26, 0x00	; 0
    3b0a:	b0 e4       	ldi	r27, 0x40	; 64
    3b0c:	8b 87       	std	Y+11, r24	; 0x0b
    3b0e:	9c 87       	std	Y+12, r25	; 0x0c
    3b10:	ad 87       	std	Y+13, r26	; 0x0d
    3b12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b14:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b16:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	4a ef       	ldi	r20, 0xFA	; 250
    3b22:	54 e4       	ldi	r21, 0x44	; 68
    3b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b28:	dc 01       	movw	r26, r24
    3b2a:	cb 01       	movw	r24, r22
    3b2c:	8f 83       	std	Y+7, r24	; 0x07
    3b2e:	98 87       	std	Y+8, r25	; 0x08
    3b30:	a9 87       	std	Y+9, r26	; 0x09
    3b32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b34:	6f 81       	ldd	r22, Y+7	; 0x07
    3b36:	78 85       	ldd	r23, Y+8	; 0x08
    3b38:	89 85       	ldd	r24, Y+9	; 0x09
    3b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	40 e8       	ldi	r20, 0x80	; 128
    3b42:	5f e3       	ldi	r21, 0x3F	; 63
    3b44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b48:	88 23       	and	r24, r24
    3b4a:	2c f4       	brge	.+10     	; 0x3b56 <LCD_SendData+0x128>
		__ticks = 1;
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	9e 83       	std	Y+6, r25	; 0x06
    3b52:	8d 83       	std	Y+5, r24	; 0x05
    3b54:	3f c0       	rjmp	.+126    	; 0x3bd4 <LCD_SendData+0x1a6>
	else if (__tmp > 65535)
    3b56:	6f 81       	ldd	r22, Y+7	; 0x07
    3b58:	78 85       	ldd	r23, Y+8	; 0x08
    3b5a:	89 85       	ldd	r24, Y+9	; 0x09
    3b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	3f ef       	ldi	r19, 0xFF	; 255
    3b62:	4f e7       	ldi	r20, 0x7F	; 127
    3b64:	57 e4       	ldi	r21, 0x47	; 71
    3b66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b6a:	18 16       	cp	r1, r24
    3b6c:	4c f5       	brge	.+82     	; 0x3bc0 <LCD_SendData+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b70:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b72:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b74:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b76:	20 e0       	ldi	r18, 0x00	; 0
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	40 e2       	ldi	r20, 0x20	; 32
    3b7c:	51 e4       	ldi	r21, 0x41	; 65
    3b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b82:	dc 01       	movw	r26, r24
    3b84:	cb 01       	movw	r24, r22
    3b86:	bc 01       	movw	r22, r24
    3b88:	cd 01       	movw	r24, r26
    3b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b8e:	dc 01       	movw	r26, r24
    3b90:	cb 01       	movw	r24, r22
    3b92:	9e 83       	std	Y+6, r25	; 0x06
    3b94:	8d 83       	std	Y+5, r24	; 0x05
    3b96:	0f c0       	rjmp	.+30     	; 0x3bb6 <LCD_SendData+0x188>
    3b98:	88 ec       	ldi	r24, 0xC8	; 200
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	9c 83       	std	Y+4, r25	; 0x04
    3b9e:	8b 83       	std	Y+3, r24	; 0x03
    3ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ba4:	01 97       	sbiw	r24, 0x01	; 1
    3ba6:	f1 f7       	brne	.-4      	; 0x3ba4 <LCD_SendData+0x176>
    3ba8:	9c 83       	std	Y+4, r25	; 0x04
    3baa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bac:	8d 81       	ldd	r24, Y+5	; 0x05
    3bae:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb0:	01 97       	sbiw	r24, 0x01	; 1
    3bb2:	9e 83       	std	Y+6, r25	; 0x06
    3bb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bba:	00 97       	sbiw	r24, 0x00	; 0
    3bbc:	69 f7       	brne	.-38     	; 0x3b98 <LCD_SendData+0x16a>
    3bbe:	14 c0       	rjmp	.+40     	; 0x3be8 <LCD_SendData+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    3bc2:	78 85       	ldd	r23, Y+8	; 0x08
    3bc4:	89 85       	ldd	r24, Y+9	; 0x09
    3bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bcc:	dc 01       	movw	r26, r24
    3bce:	cb 01       	movw	r24, r22
    3bd0:	9e 83       	std	Y+6, r25	; 0x06
    3bd2:	8d 83       	std	Y+5, r24	; 0x05
    3bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd8:	9a 83       	std	Y+2, r25	; 0x02
    3bda:	89 83       	std	Y+1, r24	; 0x01
    3bdc:	89 81       	ldd	r24, Y+1	; 0x01
    3bde:	9a 81       	ldd	r25, Y+2	; 0x02
    3be0:	01 97       	sbiw	r24, 0x01	; 1
    3be2:	f1 f7       	brne	.-4      	; 0x3be0 <LCD_SendData+0x1b2>
    3be4:	9a 83       	std	Y+2, r25	; 0x02
    3be6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    3be8:	81 e0       	ldi	r24, 0x01	; 1
    3bea:	60 e0       	ldi	r22, 0x00	; 0
    3bec:	40 e0       	ldi	r20, 0x00	; 0
    3bee:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
}
    3bf2:	2f 96       	adiw	r28, 0x0f	; 15
    3bf4:	0f b6       	in	r0, 0x3f	; 63
    3bf6:	f8 94       	cli
    3bf8:	de bf       	out	0x3e, r29	; 62
    3bfa:	0f be       	out	0x3f, r0	; 63
    3bfc:	cd bf       	out	0x3d, r28	; 61
    3bfe:	cf 91       	pop	r28
    3c00:	df 91       	pop	r29
    3c02:	08 95       	ret

00003c04 <LCD_InitPinsMode>:


static void LCD_InitPinsMode(void) {
    3c04:	df 93       	push	r29
    3c06:	cf 93       	push	r28
    3c08:	cd b7       	in	r28, 0x3d	; 61
    3c0a:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(LCD_PIN_RS, DIO_OUTPUT);
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    3c0e:	62 e0       	ldi	r22, 0x02	; 2
    3c10:	42 e0       	ldi	r20, 0x02	; 2
    3c12:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_RW, DIO_OUTPUT);
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	61 e0       	ldi	r22, 0x01	; 1
    3c1a:	42 e0       	ldi	r20, 0x02	; 2
    3c1c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_E , DIO_OUTPUT);
    3c20:	81 e0       	ldi	r24, 0x01	; 1
    3c22:	60 e0       	ldi	r22, 0x00	; 0
    3c24:	42 e0       	ldi	r20, 0x02	; 2
    3c26:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D0, DIO_OUTPUT);
    3c2a:	80 e0       	ldi	r24, 0x00	; 0
    3c2c:	67 e0       	ldi	r22, 0x07	; 7
    3c2e:	42 e0       	ldi	r20, 0x02	; 2
    3c30:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D1, DIO_OUTPUT);
    3c34:	80 e0       	ldi	r24, 0x00	; 0
    3c36:	66 e0       	ldi	r22, 0x06	; 6
    3c38:	42 e0       	ldi	r20, 0x02	; 2
    3c3a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D2, DIO_OUTPUT);
    3c3e:	80 e0       	ldi	r24, 0x00	; 0
    3c40:	65 e0       	ldi	r22, 0x05	; 5
    3c42:	42 e0       	ldi	r20, 0x02	; 2
    3c44:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D3, DIO_OUTPUT);
    3c48:	80 e0       	ldi	r24, 0x00	; 0
    3c4a:	64 e0       	ldi	r22, 0x04	; 4
    3c4c:	42 e0       	ldi	r20, 0x02	; 2
    3c4e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D4, DIO_OUTPUT);
    3c52:	80 e0       	ldi	r24, 0x00	; 0
    3c54:	63 e0       	ldi	r22, 0x03	; 3
    3c56:	42 e0       	ldi	r20, 0x02	; 2
    3c58:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D5, DIO_OUTPUT);
    3c5c:	80 e0       	ldi	r24, 0x00	; 0
    3c5e:	62 e0       	ldi	r22, 0x02	; 2
    3c60:	42 e0       	ldi	r20, 0x02	; 2
    3c62:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D6, DIO_OUTPUT);
    3c66:	80 e0       	ldi	r24, 0x00	; 0
    3c68:	61 e0       	ldi	r22, 0x01	; 1
    3c6a:	42 e0       	ldi	r20, 0x02	; 2
    3c6c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D7, DIO_OUTPUT);
    3c70:	80 e0       	ldi	r24, 0x00	; 0
    3c72:	60 e0       	ldi	r22, 0x00	; 0
    3c74:	42 e0       	ldi	r20, 0x02	; 2
    3c76:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
}
    3c7a:	cf 91       	pop	r28
    3c7c:	df 91       	pop	r29
    3c7e:	08 95       	ret

00003c80 <SPI_Init>:
#include "SPI.h"
#include "SPI_cfg.h"
#include "DIO.h"


void SPI_Init () {
    3c80:	df 93       	push	r29
    3c82:	cf 93       	push	r28
    3c84:	cd b7       	in	r28, 0x3d	; 61
    3c86:	de b7       	in	r29, 0x3e	; 62

    #if (DATA_ORDER == LSB)
    SET_BIT(SPCR,SPCR_DORD);
    3c88:	ad e2       	ldi	r26, 0x2D	; 45
    3c8a:	b0 e0       	ldi	r27, 0x00	; 0
    3c8c:	ed e2       	ldi	r30, 0x2D	; 45
    3c8e:	f0 e0       	ldi	r31, 0x00	; 0
    3c90:	80 81       	ld	r24, Z
    3c92:	80 62       	ori	r24, 0x20	; 32
    3c94:	8c 93       	st	X, r24
    DIO_SetPinMode(DIO_PORTB,DIO_PIN5,DIO_OUTPUT);
    DIO_SetPinMode(DIO_PORTB,DIO_PIN4,DIO_OUTPUT);
    DIO_SetPinMode(DIO_PORTB,DIO_PIN7,DIO_OUTPUT);
    DIO_SetPinMode(DIO_PORTB,DIO_PIN6,DIO_INPUT_FLOATING);
    #elif (SPI_MODE == SLAVE)
    CLR_BIT(SPCR,SPCR_MSTR);
    3c96:	ad e2       	ldi	r26, 0x2D	; 45
    3c98:	b0 e0       	ldi	r27, 0x00	; 0
    3c9a:	ed e2       	ldi	r30, 0x2D	; 45
    3c9c:	f0 e0       	ldi	r31, 0x00	; 0
    3c9e:	80 81       	ld	r24, Z
    3ca0:	8f 7e       	andi	r24, 0xEF	; 239
    3ca2:	8c 93       	st	X, r24
    DIO_SetPinMode(DIO_PORTB,DIO_PIN5,DIO_INPUT_FLOATING);
    3ca4:	81 e0       	ldi	r24, 0x01	; 1
    3ca6:	65 e0       	ldi	r22, 0x05	; 5
    3ca8:	40 e0       	ldi	r20, 0x00	; 0
    3caa:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTB,DIO_PIN4,DIO_INPUT_FLOATING);
    3cae:	81 e0       	ldi	r24, 0x01	; 1
    3cb0:	64 e0       	ldi	r22, 0x04	; 4
    3cb2:	40 e0       	ldi	r20, 0x00	; 0
    3cb4:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTB,DIO_PIN7,DIO_INPUT_FLOATING);
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	67 e0       	ldi	r22, 0x07	; 7
    3cbc:	40 e0       	ldi	r20, 0x00	; 0
    3cbe:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(DIO_PORTB,DIO_PIN6,DIO_OUTPUT);
    3cc2:	81 e0       	ldi	r24, 0x01	; 1
    3cc4:	66 e0       	ldi	r22, 0x06	; 6
    3cc6:	42 e0       	ldi	r20, 0x02	; 2
    3cc8:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    #endif

    SET_BIT(SPCR,SPCR_SPE);
    3ccc:	ad e2       	ldi	r26, 0x2D	; 45
    3cce:	b0 e0       	ldi	r27, 0x00	; 0
    3cd0:	ed e2       	ldi	r30, 0x2D	; 45
    3cd2:	f0 e0       	ldi	r31, 0x00	; 0
    3cd4:	80 81       	ld	r24, Z
    3cd6:	80 64       	ori	r24, 0x40	; 64
    3cd8:	8c 93       	st	X, r24
}
    3cda:	cf 91       	pop	r28
    3cdc:	df 91       	pop	r29
    3cde:	08 95       	ret

00003ce0 <SPI_Send_Data>:
void SPI_Send_Data(u8 data) {
    3ce0:	df 93       	push	r29
    3ce2:	cf 93       	push	r28
    3ce4:	0f 92       	push	r0
    3ce6:	cd b7       	in	r28, 0x3d	; 61
    3ce8:	de b7       	in	r29, 0x3e	; 62
    3cea:	89 83       	std	Y+1, r24	; 0x01
    SPDR = data;
    3cec:	ef e2       	ldi	r30, 0x2F	; 47
    3cee:	f0 e0       	ldi	r31, 0x00	; 0
    3cf0:	89 81       	ldd	r24, Y+1	; 0x01
    3cf2:	80 83       	st	Z, r24
    while (GET_BIT(SPSR,SPSR_SPIF) == 0);
    3cf4:	ee e2       	ldi	r30, 0x2E	; 46
    3cf6:	f0 e0       	ldi	r31, 0x00	; 0
    3cf8:	80 81       	ld	r24, Z
    3cfa:	88 23       	and	r24, r24
    3cfc:	dc f7       	brge	.-10     	; 0x3cf4 <SPI_Send_Data+0x14>
}
    3cfe:	0f 90       	pop	r0
    3d00:	cf 91       	pop	r28
    3d02:	df 91       	pop	r29
    3d04:	08 95       	ret

00003d06 <SPI_Recieve_Data>:
u8 SPI_Recieve_Data() {
    3d06:	df 93       	push	r29
    3d08:	cf 93       	push	r28
    3d0a:	cd b7       	in	r28, 0x3d	; 61
    3d0c:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(SPSR,SPSR_SPIF) == 0);
    3d0e:	ee e2       	ldi	r30, 0x2E	; 46
    3d10:	f0 e0       	ldi	r31, 0x00	; 0
    3d12:	80 81       	ld	r24, Z
    3d14:	88 23       	and	r24, r24
    3d16:	dc f7       	brge	.-10     	; 0x3d0e <SPI_Recieve_Data+0x8>
    return SPDR;
    3d18:	ef e2       	ldi	r30, 0x2F	; 47
    3d1a:	f0 e0       	ldi	r31, 0x00	; 0
    3d1c:	80 81       	ld	r24, Z
}
    3d1e:	cf 91       	pop	r28
    3d20:	df 91       	pop	r29
    3d22:	08 95       	ret

00003d24 <SSD_Init>:
	_delay_ms(500);
	PORTD = 0b01101111; // Print 9
	_delay_ms(500);
	PORTD = 0b00000000; // off*/

void SSD_Init(void) {
    3d24:	df 93       	push	r29
    3d26:	cf 93       	push	r28
    3d28:	cd b7       	in	r28, 0x3d	; 61
    3d2a:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(SSD_PIN_A, DIO_OUTPUT);
    3d2c:	83 e0       	ldi	r24, 0x03	; 3
    3d2e:	60 e0       	ldi	r22, 0x00	; 0
    3d30:	42 e0       	ldi	r20, 0x02	; 2
    3d32:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_B, DIO_OUTPUT);
    3d36:	83 e0       	ldi	r24, 0x03	; 3
    3d38:	61 e0       	ldi	r22, 0x01	; 1
    3d3a:	42 e0       	ldi	r20, 0x02	; 2
    3d3c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_C, DIO_OUTPUT);
    3d40:	83 e0       	ldi	r24, 0x03	; 3
    3d42:	62 e0       	ldi	r22, 0x02	; 2
    3d44:	42 e0       	ldi	r20, 0x02	; 2
    3d46:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_D, DIO_OUTPUT);
    3d4a:	83 e0       	ldi	r24, 0x03	; 3
    3d4c:	63 e0       	ldi	r22, 0x03	; 3
    3d4e:	42 e0       	ldi	r20, 0x02	; 2
    3d50:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_E, DIO_OUTPUT);
    3d54:	83 e0       	ldi	r24, 0x03	; 3
    3d56:	64 e0       	ldi	r22, 0x04	; 4
    3d58:	42 e0       	ldi	r20, 0x02	; 2
    3d5a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_F, DIO_OUTPUT);
    3d5e:	83 e0       	ldi	r24, 0x03	; 3
    3d60:	65 e0       	ldi	r22, 0x05	; 5
    3d62:	42 e0       	ldi	r20, 0x02	; 2
    3d64:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_G, DIO_OUTPUT);
    3d68:	83 e0       	ldi	r24, 0x03	; 3
    3d6a:	66 e0       	ldi	r22, 0x06	; 6
    3d6c:	42 e0       	ldi	r20, 0x02	; 2
    3d6e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>

}
    3d72:	cf 91       	pop	r28
    3d74:	df 91       	pop	r29
    3d76:	08 95       	ret

00003d78 <SSD_Write>:
void SSD_Write (SSD_NumberType number) {
    3d78:	df 93       	push	r29
    3d7a:	cf 93       	push	r28
    3d7c:	00 d0       	rcall	.+0      	; 0x3d7e <SSD_Write+0x6>
    3d7e:	0f 92       	push	r0
    3d80:	cd b7       	in	r28, 0x3d	; 61
    3d82:	de b7       	in	r29, 0x3e	; 62
    3d84:	89 83       	std	Y+1, r24	; 0x01
    switch (number)
    3d86:	89 81       	ldd	r24, Y+1	; 0x01
    3d88:	28 2f       	mov	r18, r24
    3d8a:	30 e0       	ldi	r19, 0x00	; 0
    3d8c:	3b 83       	std	Y+3, r19	; 0x03
    3d8e:	2a 83       	std	Y+2, r18	; 0x02
    3d90:	8a 81       	ldd	r24, Y+2	; 0x02
    3d92:	9b 81       	ldd	r25, Y+3	; 0x03
    3d94:	84 30       	cpi	r24, 0x04	; 4
    3d96:	91 05       	cpc	r25, r1
    3d98:	09 f4       	brne	.+2      	; 0x3d9c <SSD_Write+0x24>
    3d9a:	d7 c0       	rjmp	.+430    	; 0x3f4a <SSD_Write+0x1d2>
    3d9c:	2a 81       	ldd	r18, Y+2	; 0x02
    3d9e:	3b 81       	ldd	r19, Y+3	; 0x03
    3da0:	25 30       	cpi	r18, 0x05	; 5
    3da2:	31 05       	cpc	r19, r1
    3da4:	ec f4       	brge	.+58     	; 0x3de0 <SSD_Write+0x68>
    3da6:	8a 81       	ldd	r24, Y+2	; 0x02
    3da8:	9b 81       	ldd	r25, Y+3	; 0x03
    3daa:	81 30       	cpi	r24, 0x01	; 1
    3dac:	91 05       	cpc	r25, r1
    3dae:	09 f4       	brne	.+2      	; 0x3db2 <SSD_Write+0x3a>
    3db0:	60 c0       	rjmp	.+192    	; 0x3e72 <SSD_Write+0xfa>
    3db2:	2a 81       	ldd	r18, Y+2	; 0x02
    3db4:	3b 81       	ldd	r19, Y+3	; 0x03
    3db6:	22 30       	cpi	r18, 0x02	; 2
    3db8:	31 05       	cpc	r19, r1
    3dba:	2c f4       	brge	.+10     	; 0x3dc6 <SSD_Write+0x4e>
    3dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    3dc0:	00 97       	sbiw	r24, 0x00	; 0
    3dc2:	99 f1       	breq	.+102    	; 0x3e2a <SSD_Write+0xb2>
    3dc4:	9a c1       	rjmp	.+820    	; 0x40fa <SSD_Write+0x382>
    3dc6:	2a 81       	ldd	r18, Y+2	; 0x02
    3dc8:	3b 81       	ldd	r19, Y+3	; 0x03
    3dca:	22 30       	cpi	r18, 0x02	; 2
    3dcc:	31 05       	cpc	r19, r1
    3dce:	09 f4       	brne	.+2      	; 0x3dd2 <SSD_Write+0x5a>
    3dd0:	74 c0       	rjmp	.+232    	; 0x3eba <SSD_Write+0x142>
    3dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd4:	9b 81       	ldd	r25, Y+3	; 0x03
    3dd6:	83 30       	cpi	r24, 0x03	; 3
    3dd8:	91 05       	cpc	r25, r1
    3dda:	09 f4       	brne	.+2      	; 0x3dde <SSD_Write+0x66>
    3ddc:	92 c0       	rjmp	.+292    	; 0x3f02 <SSD_Write+0x18a>
    3dde:	8d c1       	rjmp	.+794    	; 0x40fa <SSD_Write+0x382>
    3de0:	2a 81       	ldd	r18, Y+2	; 0x02
    3de2:	3b 81       	ldd	r19, Y+3	; 0x03
    3de4:	27 30       	cpi	r18, 0x07	; 7
    3de6:	31 05       	cpc	r19, r1
    3de8:	09 f4       	brne	.+2      	; 0x3dec <SSD_Write+0x74>
    3dea:	1b c1       	rjmp	.+566    	; 0x4022 <SSD_Write+0x2aa>
    3dec:	8a 81       	ldd	r24, Y+2	; 0x02
    3dee:	9b 81       	ldd	r25, Y+3	; 0x03
    3df0:	88 30       	cpi	r24, 0x08	; 8
    3df2:	91 05       	cpc	r25, r1
    3df4:	6c f4       	brge	.+26     	; 0x3e10 <SSD_Write+0x98>
    3df6:	2a 81       	ldd	r18, Y+2	; 0x02
    3df8:	3b 81       	ldd	r19, Y+3	; 0x03
    3dfa:	25 30       	cpi	r18, 0x05	; 5
    3dfc:	31 05       	cpc	r19, r1
    3dfe:	09 f4       	brne	.+2      	; 0x3e02 <SSD_Write+0x8a>
    3e00:	c8 c0       	rjmp	.+400    	; 0x3f92 <SSD_Write+0x21a>
    3e02:	8a 81       	ldd	r24, Y+2	; 0x02
    3e04:	9b 81       	ldd	r25, Y+3	; 0x03
    3e06:	86 30       	cpi	r24, 0x06	; 6
    3e08:	91 05       	cpc	r25, r1
    3e0a:	09 f4       	brne	.+2      	; 0x3e0e <SSD_Write+0x96>
    3e0c:	e6 c0       	rjmp	.+460    	; 0x3fda <SSD_Write+0x262>
    3e0e:	75 c1       	rjmp	.+746    	; 0x40fa <SSD_Write+0x382>
    3e10:	2a 81       	ldd	r18, Y+2	; 0x02
    3e12:	3b 81       	ldd	r19, Y+3	; 0x03
    3e14:	28 30       	cpi	r18, 0x08	; 8
    3e16:	31 05       	cpc	r19, r1
    3e18:	09 f4       	brne	.+2      	; 0x3e1c <SSD_Write+0xa4>
    3e1a:	27 c1       	rjmp	.+590    	; 0x406a <SSD_Write+0x2f2>
    3e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e1e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e20:	89 30       	cpi	r24, 0x09	; 9
    3e22:	91 05       	cpc	r25, r1
    3e24:	09 f4       	brne	.+2      	; 0x3e28 <SSD_Write+0xb0>
    3e26:	45 c1       	rjmp	.+650    	; 0x40b2 <SSD_Write+0x33a>
    3e28:	68 c1       	rjmp	.+720    	; 0x40fa <SSD_Write+0x382>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    3e2a:	83 e0       	ldi	r24, 0x03	; 3
    3e2c:	60 e0       	ldi	r22, 0x00	; 0
    3e2e:	40 e0       	ldi	r20, 0x00	; 0
    3e30:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    3e34:	83 e0       	ldi	r24, 0x03	; 3
    3e36:	61 e0       	ldi	r22, 0x01	; 1
    3e38:	40 e0       	ldi	r20, 0x00	; 0
    3e3a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    3e3e:	83 e0       	ldi	r24, 0x03	; 3
    3e40:	62 e0       	ldi	r22, 0x02	; 2
    3e42:	40 e0       	ldi	r20, 0x00	; 0
    3e44:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    3e48:	83 e0       	ldi	r24, 0x03	; 3
    3e4a:	63 e0       	ldi	r22, 0x03	; 3
    3e4c:	40 e0       	ldi	r20, 0x00	; 0
    3e4e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    3e52:	83 e0       	ldi	r24, 0x03	; 3
    3e54:	64 e0       	ldi	r22, 0x04	; 4
    3e56:	40 e0       	ldi	r20, 0x00	; 0
    3e58:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    3e5c:	83 e0       	ldi	r24, 0x03	; 3
    3e5e:	65 e0       	ldi	r22, 0x05	; 5
    3e60:	40 e0       	ldi	r20, 0x00	; 0
    3e62:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    3e66:	83 e0       	ldi	r24, 0x03	; 3
    3e68:	66 e0       	ldi	r22, 0x06	; 6
    3e6a:	41 e0       	ldi	r20, 0x01	; 1
    3e6c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    3e70:	67 c1       	rjmp	.+718    	; 0x4140 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    3e72:	83 e0       	ldi	r24, 0x03	; 3
    3e74:	60 e0       	ldi	r22, 0x00	; 0
    3e76:	41 e0       	ldi	r20, 0x01	; 1
    3e78:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    3e7c:	83 e0       	ldi	r24, 0x03	; 3
    3e7e:	61 e0       	ldi	r22, 0x01	; 1
    3e80:	40 e0       	ldi	r20, 0x00	; 0
    3e82:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    3e86:	83 e0       	ldi	r24, 0x03	; 3
    3e88:	62 e0       	ldi	r22, 0x02	; 2
    3e8a:	40 e0       	ldi	r20, 0x00	; 0
    3e8c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    3e90:	83 e0       	ldi	r24, 0x03	; 3
    3e92:	63 e0       	ldi	r22, 0x03	; 3
    3e94:	41 e0       	ldi	r20, 0x01	; 1
    3e96:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    3e9a:	83 e0       	ldi	r24, 0x03	; 3
    3e9c:	64 e0       	ldi	r22, 0x04	; 4
    3e9e:	41 e0       	ldi	r20, 0x01	; 1
    3ea0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    3ea4:	83 e0       	ldi	r24, 0x03	; 3
    3ea6:	65 e0       	ldi	r22, 0x05	; 5
    3ea8:	41 e0       	ldi	r20, 0x01	; 1
    3eaa:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    3eae:	83 e0       	ldi	r24, 0x03	; 3
    3eb0:	66 e0       	ldi	r22, 0x06	; 6
    3eb2:	41 e0       	ldi	r20, 0x01	; 1
    3eb4:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    3eb8:	43 c1       	rjmp	.+646    	; 0x4140 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    3eba:	83 e0       	ldi	r24, 0x03	; 3
    3ebc:	60 e0       	ldi	r22, 0x00	; 0
    3ebe:	40 e0       	ldi	r20, 0x00	; 0
    3ec0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    3ec4:	83 e0       	ldi	r24, 0x03	; 3
    3ec6:	61 e0       	ldi	r22, 0x01	; 1
    3ec8:	40 e0       	ldi	r20, 0x00	; 0
    3eca:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    3ece:	83 e0       	ldi	r24, 0x03	; 3
    3ed0:	62 e0       	ldi	r22, 0x02	; 2
    3ed2:	41 e0       	ldi	r20, 0x01	; 1
    3ed4:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    3ed8:	83 e0       	ldi	r24, 0x03	; 3
    3eda:	63 e0       	ldi	r22, 0x03	; 3
    3edc:	40 e0       	ldi	r20, 0x00	; 0
    3ede:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    3ee2:	83 e0       	ldi	r24, 0x03	; 3
    3ee4:	64 e0       	ldi	r22, 0x04	; 4
    3ee6:	40 e0       	ldi	r20, 0x00	; 0
    3ee8:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    3eec:	83 e0       	ldi	r24, 0x03	; 3
    3eee:	65 e0       	ldi	r22, 0x05	; 5
    3ef0:	41 e0       	ldi	r20, 0x01	; 1
    3ef2:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    3ef6:	83 e0       	ldi	r24, 0x03	; 3
    3ef8:	66 e0       	ldi	r22, 0x06	; 6
    3efa:	40 e0       	ldi	r20, 0x00	; 0
    3efc:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    3f00:	1f c1       	rjmp	.+574    	; 0x4140 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    3f02:	83 e0       	ldi	r24, 0x03	; 3
    3f04:	60 e0       	ldi	r22, 0x00	; 0
    3f06:	40 e0       	ldi	r20, 0x00	; 0
    3f08:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    3f0c:	83 e0       	ldi	r24, 0x03	; 3
    3f0e:	61 e0       	ldi	r22, 0x01	; 1
    3f10:	40 e0       	ldi	r20, 0x00	; 0
    3f12:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    3f16:	83 e0       	ldi	r24, 0x03	; 3
    3f18:	62 e0       	ldi	r22, 0x02	; 2
    3f1a:	40 e0       	ldi	r20, 0x00	; 0
    3f1c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    3f20:	83 e0       	ldi	r24, 0x03	; 3
    3f22:	63 e0       	ldi	r22, 0x03	; 3
    3f24:	40 e0       	ldi	r20, 0x00	; 0
    3f26:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    3f2a:	83 e0       	ldi	r24, 0x03	; 3
    3f2c:	64 e0       	ldi	r22, 0x04	; 4
    3f2e:	41 e0       	ldi	r20, 0x01	; 1
    3f30:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    3f34:	83 e0       	ldi	r24, 0x03	; 3
    3f36:	65 e0       	ldi	r22, 0x05	; 5
    3f38:	41 e0       	ldi	r20, 0x01	; 1
    3f3a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    3f3e:	83 e0       	ldi	r24, 0x03	; 3
    3f40:	66 e0       	ldi	r22, 0x06	; 6
    3f42:	40 e0       	ldi	r20, 0x00	; 0
    3f44:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    3f48:	fb c0       	rjmp	.+502    	; 0x4140 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    3f4a:	83 e0       	ldi	r24, 0x03	; 3
    3f4c:	60 e0       	ldi	r22, 0x00	; 0
    3f4e:	41 e0       	ldi	r20, 0x01	; 1
    3f50:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    3f54:	83 e0       	ldi	r24, 0x03	; 3
    3f56:	61 e0       	ldi	r22, 0x01	; 1
    3f58:	40 e0       	ldi	r20, 0x00	; 0
    3f5a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    3f5e:	83 e0       	ldi	r24, 0x03	; 3
    3f60:	62 e0       	ldi	r22, 0x02	; 2
    3f62:	40 e0       	ldi	r20, 0x00	; 0
    3f64:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    3f68:	83 e0       	ldi	r24, 0x03	; 3
    3f6a:	63 e0       	ldi	r22, 0x03	; 3
    3f6c:	41 e0       	ldi	r20, 0x01	; 1
    3f6e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    3f72:	83 e0       	ldi	r24, 0x03	; 3
    3f74:	64 e0       	ldi	r22, 0x04	; 4
    3f76:	41 e0       	ldi	r20, 0x01	; 1
    3f78:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    3f7c:	83 e0       	ldi	r24, 0x03	; 3
    3f7e:	65 e0       	ldi	r22, 0x05	; 5
    3f80:	40 e0       	ldi	r20, 0x00	; 0
    3f82:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    3f86:	83 e0       	ldi	r24, 0x03	; 3
    3f88:	66 e0       	ldi	r22, 0x06	; 6
    3f8a:	40 e0       	ldi	r20, 0x00	; 0
    3f8c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    3f90:	d7 c0       	rjmp	.+430    	; 0x4140 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    3f92:	83 e0       	ldi	r24, 0x03	; 3
    3f94:	60 e0       	ldi	r22, 0x00	; 0
    3f96:	40 e0       	ldi	r20, 0x00	; 0
    3f98:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    3f9c:	83 e0       	ldi	r24, 0x03	; 3
    3f9e:	61 e0       	ldi	r22, 0x01	; 1
    3fa0:	41 e0       	ldi	r20, 0x01	; 1
    3fa2:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    3fa6:	83 e0       	ldi	r24, 0x03	; 3
    3fa8:	62 e0       	ldi	r22, 0x02	; 2
    3faa:	40 e0       	ldi	r20, 0x00	; 0
    3fac:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    3fb0:	83 e0       	ldi	r24, 0x03	; 3
    3fb2:	63 e0       	ldi	r22, 0x03	; 3
    3fb4:	40 e0       	ldi	r20, 0x00	; 0
    3fb6:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    3fba:	83 e0       	ldi	r24, 0x03	; 3
    3fbc:	64 e0       	ldi	r22, 0x04	; 4
    3fbe:	41 e0       	ldi	r20, 0x01	; 1
    3fc0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    3fc4:	83 e0       	ldi	r24, 0x03	; 3
    3fc6:	65 e0       	ldi	r22, 0x05	; 5
    3fc8:	40 e0       	ldi	r20, 0x00	; 0
    3fca:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    3fce:	83 e0       	ldi	r24, 0x03	; 3
    3fd0:	66 e0       	ldi	r22, 0x06	; 6
    3fd2:	40 e0       	ldi	r20, 0x00	; 0
    3fd4:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    3fd8:	b3 c0       	rjmp	.+358    	; 0x4140 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    3fda:	83 e0       	ldi	r24, 0x03	; 3
    3fdc:	60 e0       	ldi	r22, 0x00	; 0
    3fde:	40 e0       	ldi	r20, 0x00	; 0
    3fe0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    3fe4:	83 e0       	ldi	r24, 0x03	; 3
    3fe6:	61 e0       	ldi	r22, 0x01	; 1
    3fe8:	41 e0       	ldi	r20, 0x01	; 1
    3fea:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    3fee:	83 e0       	ldi	r24, 0x03	; 3
    3ff0:	62 e0       	ldi	r22, 0x02	; 2
    3ff2:	40 e0       	ldi	r20, 0x00	; 0
    3ff4:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    3ff8:	83 e0       	ldi	r24, 0x03	; 3
    3ffa:	63 e0       	ldi	r22, 0x03	; 3
    3ffc:	40 e0       	ldi	r20, 0x00	; 0
    3ffe:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    4002:	83 e0       	ldi	r24, 0x03	; 3
    4004:	64 e0       	ldi	r22, 0x04	; 4
    4006:	40 e0       	ldi	r20, 0x00	; 0
    4008:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    400c:	83 e0       	ldi	r24, 0x03	; 3
    400e:	65 e0       	ldi	r22, 0x05	; 5
    4010:	40 e0       	ldi	r20, 0x00	; 0
    4012:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    4016:	83 e0       	ldi	r24, 0x03	; 3
    4018:	66 e0       	ldi	r22, 0x06	; 6
    401a:	40 e0       	ldi	r20, 0x00	; 0
    401c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    4020:	8f c0       	rjmp	.+286    	; 0x4140 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    4022:	83 e0       	ldi	r24, 0x03	; 3
    4024:	60 e0       	ldi	r22, 0x00	; 0
    4026:	40 e0       	ldi	r20, 0x00	; 0
    4028:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    402c:	83 e0       	ldi	r24, 0x03	; 3
    402e:	61 e0       	ldi	r22, 0x01	; 1
    4030:	40 e0       	ldi	r20, 0x00	; 0
    4032:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    4036:	83 e0       	ldi	r24, 0x03	; 3
    4038:	62 e0       	ldi	r22, 0x02	; 2
    403a:	40 e0       	ldi	r20, 0x00	; 0
    403c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    4040:	83 e0       	ldi	r24, 0x03	; 3
    4042:	63 e0       	ldi	r22, 0x03	; 3
    4044:	41 e0       	ldi	r20, 0x01	; 1
    4046:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    404a:	83 e0       	ldi	r24, 0x03	; 3
    404c:	64 e0       	ldi	r22, 0x04	; 4
    404e:	41 e0       	ldi	r20, 0x01	; 1
    4050:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    4054:	83 e0       	ldi	r24, 0x03	; 3
    4056:	65 e0       	ldi	r22, 0x05	; 5
    4058:	41 e0       	ldi	r20, 0x01	; 1
    405a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    405e:	83 e0       	ldi	r24, 0x03	; 3
    4060:	66 e0       	ldi	r22, 0x06	; 6
    4062:	41 e0       	ldi	r20, 0x01	; 1
    4064:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    4068:	6b c0       	rjmp	.+214    	; 0x4140 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    406a:	83 e0       	ldi	r24, 0x03	; 3
    406c:	60 e0       	ldi	r22, 0x00	; 0
    406e:	40 e0       	ldi	r20, 0x00	; 0
    4070:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    4074:	83 e0       	ldi	r24, 0x03	; 3
    4076:	61 e0       	ldi	r22, 0x01	; 1
    4078:	40 e0       	ldi	r20, 0x00	; 0
    407a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    407e:	83 e0       	ldi	r24, 0x03	; 3
    4080:	62 e0       	ldi	r22, 0x02	; 2
    4082:	40 e0       	ldi	r20, 0x00	; 0
    4084:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    4088:	83 e0       	ldi	r24, 0x03	; 3
    408a:	63 e0       	ldi	r22, 0x03	; 3
    408c:	40 e0       	ldi	r20, 0x00	; 0
    408e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    4092:	83 e0       	ldi	r24, 0x03	; 3
    4094:	64 e0       	ldi	r22, 0x04	; 4
    4096:	40 e0       	ldi	r20, 0x00	; 0
    4098:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    409c:	83 e0       	ldi	r24, 0x03	; 3
    409e:	65 e0       	ldi	r22, 0x05	; 5
    40a0:	40 e0       	ldi	r20, 0x00	; 0
    40a2:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    40a6:	83 e0       	ldi	r24, 0x03	; 3
    40a8:	66 e0       	ldi	r22, 0x06	; 6
    40aa:	40 e0       	ldi	r20, 0x00	; 0
    40ac:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    40b0:	47 c0       	rjmp	.+142    	; 0x4140 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    40b2:	83 e0       	ldi	r24, 0x03	; 3
    40b4:	60 e0       	ldi	r22, 0x00	; 0
    40b6:	40 e0       	ldi	r20, 0x00	; 0
    40b8:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    40bc:	83 e0       	ldi	r24, 0x03	; 3
    40be:	61 e0       	ldi	r22, 0x01	; 1
    40c0:	40 e0       	ldi	r20, 0x00	; 0
    40c2:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    40c6:	83 e0       	ldi	r24, 0x03	; 3
    40c8:	62 e0       	ldi	r22, 0x02	; 2
    40ca:	40 e0       	ldi	r20, 0x00	; 0
    40cc:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    40d0:	83 e0       	ldi	r24, 0x03	; 3
    40d2:	63 e0       	ldi	r22, 0x03	; 3
    40d4:	40 e0       	ldi	r20, 0x00	; 0
    40d6:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    40da:	83 e0       	ldi	r24, 0x03	; 3
    40dc:	64 e0       	ldi	r22, 0x04	; 4
    40de:	41 e0       	ldi	r20, 0x01	; 1
    40e0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    40e4:	83 e0       	ldi	r24, 0x03	; 3
    40e6:	65 e0       	ldi	r22, 0x05	; 5
    40e8:	40 e0       	ldi	r20, 0x00	; 0
    40ea:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    40ee:	83 e0       	ldi	r24, 0x03	; 3
    40f0:	66 e0       	ldi	r22, 0x06	; 6
    40f2:	40 e0       	ldi	r20, 0x00	; 0
    40f4:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    40f8:	23 c0       	rjmp	.+70     	; 0x4140 <SSD_Write+0x3c8>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    #elif SSD_TYPE == COMM_ANODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    40fa:	83 e0       	ldi	r24, 0x03	; 3
    40fc:	60 e0       	ldi	r22, 0x00	; 0
    40fe:	41 e0       	ldi	r20, 0x01	; 1
    4100:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    4104:	83 e0       	ldi	r24, 0x03	; 3
    4106:	61 e0       	ldi	r22, 0x01	; 1
    4108:	41 e0       	ldi	r20, 0x01	; 1
    410a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    410e:	83 e0       	ldi	r24, 0x03	; 3
    4110:	62 e0       	ldi	r22, 0x02	; 2
    4112:	41 e0       	ldi	r20, 0x01	; 1
    4114:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    4118:	83 e0       	ldi	r24, 0x03	; 3
    411a:	63 e0       	ldi	r22, 0x03	; 3
    411c:	41 e0       	ldi	r20, 0x01	; 1
    411e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    4122:	83 e0       	ldi	r24, 0x03	; 3
    4124:	64 e0       	ldi	r22, 0x04	; 4
    4126:	41 e0       	ldi	r20, 0x01	; 1
    4128:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    412c:	83 e0       	ldi	r24, 0x03	; 3
    412e:	65 e0       	ldi	r22, 0x05	; 5
    4130:	41 e0       	ldi	r20, 0x01	; 1
    4132:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    4136:	83 e0       	ldi	r24, 0x03	; 3
    4138:	66 e0       	ldi	r22, 0x06	; 6
    413a:	41 e0       	ldi	r20, 0x01	; 1
    413c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
    #else 
        #error "Invalid SSD Type"
    #endif
        break;
    }
}
    4140:	0f 90       	pop	r0
    4142:	0f 90       	pop	r0
    4144:	0f 90       	pop	r0
    4146:	cf 91       	pop	r28
    4148:	df 91       	pop	r29
    414a:	08 95       	ret

0000414c <Spt_Init>:
// {
//     Spt_Timer2_Callback_Ctc();
// }

Spt_ReturnType Spt_Init(Spt_ConfigType *config)
{
    414c:	df 93       	push	r29
    414e:	cf 93       	push	r28
    4150:	cd b7       	in	r28, 0x3d	; 61
    4152:	de b7       	in	r29, 0x3e	; 62
    4154:	61 97       	sbiw	r28, 0x11	; 17
    4156:	0f b6       	in	r0, 0x3f	; 63
    4158:	f8 94       	cli
    415a:	de bf       	out	0x3e, r29	; 62
    415c:	0f be       	out	0x3f, r0	; 63
    415e:	cd bf       	out	0x3d, r28	; 61
    4160:	9b 83       	std	Y+3, r25	; 0x03
    4162:	8a 83       	std	Y+2, r24	; 0x02
    Spt_ReturnType returnValue = SPT_OK;
    4164:	81 e0       	ldi	r24, 0x01	; 1
    4166:	89 83       	std	Y+1, r24	; 0x01

    switch (config->channel)
    4168:	ea 81       	ldd	r30, Y+2	; 0x02
    416a:	fb 81       	ldd	r31, Y+3	; 0x03
    416c:	80 81       	ld	r24, Z
    416e:	28 2f       	mov	r18, r24
    4170:	30 e0       	ldi	r19, 0x00	; 0
    4172:	39 8b       	std	Y+17, r19	; 0x11
    4174:	28 8b       	std	Y+16, r18	; 0x10
    4176:	88 89       	ldd	r24, Y+16	; 0x10
    4178:	99 89       	ldd	r25, Y+17	; 0x11
    417a:	81 30       	cpi	r24, 0x01	; 1
    417c:	91 05       	cpc	r25, r1
    417e:	09 f4       	brne	.+2      	; 0x4182 <Spt_Init+0x36>
    4180:	6b c1       	rjmp	.+726    	; 0x4458 <Spt_Init+0x30c>
    4182:	28 89       	ldd	r18, Y+16	; 0x10
    4184:	39 89       	ldd	r19, Y+17	; 0x11
    4186:	22 30       	cpi	r18, 0x02	; 2
    4188:	31 05       	cpc	r19, r1
    418a:	09 f4       	brne	.+2      	; 0x418e <Spt_Init+0x42>
    418c:	da c2       	rjmp	.+1460   	; 0x4742 <Spt_Init+0x5f6>
    418e:	88 89       	ldd	r24, Y+16	; 0x10
    4190:	99 89       	ldd	r25, Y+17	; 0x11
    4192:	00 97       	sbiw	r24, 0x00	; 0
    4194:	09 f0       	breq	.+2      	; 0x4198 <Spt_Init+0x4c>
    4196:	4a c4       	rjmp	.+2196   	; 0x4a2c <Spt_Init+0x8e0>
    {

    case SPT_CHANNEL_TIMER0:
        /*Waveform Generation Mode*/
        if (config->mode == SPT_MODE_FAST_PWM)
    4198:	ea 81       	ldd	r30, Y+2	; 0x02
    419a:	fb 81       	ldd	r31, Y+3	; 0x03
    419c:	81 81       	ldd	r24, Z+1	; 0x01
    419e:	88 23       	and	r24, r24
    41a0:	79 f4       	brne	.+30     	; 0x41c0 <Spt_Init+0x74>
        {
            SET_BIT(TCCR0, TCCR0_WGM00);
    41a2:	a3 e5       	ldi	r26, 0x53	; 83
    41a4:	b0 e0       	ldi	r27, 0x00	; 0
    41a6:	e3 e5       	ldi	r30, 0x53	; 83
    41a8:	f0 e0       	ldi	r31, 0x00	; 0
    41aa:	80 81       	ld	r24, Z
    41ac:	80 64       	ori	r24, 0x40	; 64
    41ae:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_WGM01);
    41b0:	a3 e5       	ldi	r26, 0x53	; 83
    41b2:	b0 e0       	ldi	r27, 0x00	; 0
    41b4:	e3 e5       	ldi	r30, 0x53	; 83
    41b6:	f0 e0       	ldi	r31, 0x00	; 0
    41b8:	80 81       	ld	r24, Z
    41ba:	88 60       	ori	r24, 0x08	; 8
    41bc:	8c 93       	st	X, r24
    41be:	15 c0       	rjmp	.+42     	; 0x41ea <Spt_Init+0x9e>
        }
        else if (config->mode == SPT_MODE_PWM_PHASE_CORRECT)
    41c0:	ea 81       	ldd	r30, Y+2	; 0x02
    41c2:	fb 81       	ldd	r31, Y+3	; 0x03
    41c4:	81 81       	ldd	r24, Z+1	; 0x01
    41c6:	81 30       	cpi	r24, 0x01	; 1
    41c8:	79 f4       	brne	.+30     	; 0x41e8 <Spt_Init+0x9c>
        {
            SET_BIT(TCCR0, TCCR0_WGM00);
    41ca:	a3 e5       	ldi	r26, 0x53	; 83
    41cc:	b0 e0       	ldi	r27, 0x00	; 0
    41ce:	e3 e5       	ldi	r30, 0x53	; 83
    41d0:	f0 e0       	ldi	r31, 0x00	; 0
    41d2:	80 81       	ld	r24, Z
    41d4:	80 64       	ori	r24, 0x40	; 64
    41d6:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_WGM01);
    41d8:	a3 e5       	ldi	r26, 0x53	; 83
    41da:	b0 e0       	ldi	r27, 0x00	; 0
    41dc:	e3 e5       	ldi	r30, 0x53	; 83
    41de:	f0 e0       	ldi	r31, 0x00	; 0
    41e0:	80 81       	ld	r24, Z
    41e2:	87 7f       	andi	r24, 0xF7	; 247
    41e4:	8c 93       	st	X, r24
    41e6:	01 c0       	rjmp	.+2      	; 0x41ea <Spt_Init+0x9e>
        }
        else
        {
            returnValue = SPT_ERROR;
    41e8:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    41ea:	ea 81       	ldd	r30, Y+2	; 0x02
    41ec:	fb 81       	ldd	r31, Y+3	; 0x03
    41ee:	82 81       	ldd	r24, Z+2	; 0x02
    41f0:	28 2f       	mov	r18, r24
    41f2:	30 e0       	ldi	r19, 0x00	; 0
    41f4:	3f 87       	std	Y+15, r19	; 0x0f
    41f6:	2e 87       	std	Y+14, r18	; 0x0e
    41f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    41fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    41fc:	82 30       	cpi	r24, 0x02	; 2
    41fe:	91 05       	cpc	r25, r1
    4200:	c1 f0       	breq	.+48     	; 0x4232 <Spt_Init+0xe6>
    4202:	2e 85       	ldd	r18, Y+14	; 0x0e
    4204:	3f 85       	ldd	r19, Y+15	; 0x0f
    4206:	23 30       	cpi	r18, 0x03	; 3
    4208:	31 05       	cpc	r19, r1
    420a:	11 f1       	breq	.+68     	; 0x4250 <Spt_Init+0x104>
    420c:	8e 85       	ldd	r24, Y+14	; 0x0e
    420e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4210:	00 97       	sbiw	r24, 0x00	; 0
    4212:	69 f5       	brne	.+90     	; 0x426e <Spt_Init+0x122>
        {
        case SPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR0, TCCR0_COM00);
    4214:	a3 e5       	ldi	r26, 0x53	; 83
    4216:	b0 e0       	ldi	r27, 0x00	; 0
    4218:	e3 e5       	ldi	r30, 0x53	; 83
    421a:	f0 e0       	ldi	r31, 0x00	; 0
    421c:	80 81       	ld	r24, Z
    421e:	8f 7e       	andi	r24, 0xEF	; 239
    4220:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_COM01);
    4222:	a3 e5       	ldi	r26, 0x53	; 83
    4224:	b0 e0       	ldi	r27, 0x00	; 0
    4226:	e3 e5       	ldi	r30, 0x53	; 83
    4228:	f0 e0       	ldi	r31, 0x00	; 0
    422a:	80 81       	ld	r24, Z
    422c:	8f 7d       	andi	r24, 0xDF	; 223
    422e:	8c 93       	st	X, r24
    4230:	1f c0       	rjmp	.+62     	; 0x4270 <Spt_Init+0x124>
            break;
        case SPT_OUTPUT_SET:
            SET_BIT(TCCR0, TCCR0_COM00);
    4232:	a3 e5       	ldi	r26, 0x53	; 83
    4234:	b0 e0       	ldi	r27, 0x00	; 0
    4236:	e3 e5       	ldi	r30, 0x53	; 83
    4238:	f0 e0       	ldi	r31, 0x00	; 0
    423a:	80 81       	ld	r24, Z
    423c:	80 61       	ori	r24, 0x10	; 16
    423e:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    4240:	a3 e5       	ldi	r26, 0x53	; 83
    4242:	b0 e0       	ldi	r27, 0x00	; 0
    4244:	e3 e5       	ldi	r30, 0x53	; 83
    4246:	f0 e0       	ldi	r31, 0x00	; 0
    4248:	80 81       	ld	r24, Z
    424a:	80 62       	ori	r24, 0x20	; 32
    424c:	8c 93       	st	X, r24
    424e:	10 c0       	rjmp	.+32     	; 0x4270 <Spt_Init+0x124>
            // TODO
            break;
        case SPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR0, TCCR0_COM00);
    4250:	a3 e5       	ldi	r26, 0x53	; 83
    4252:	b0 e0       	ldi	r27, 0x00	; 0
    4254:	e3 e5       	ldi	r30, 0x53	; 83
    4256:	f0 e0       	ldi	r31, 0x00	; 0
    4258:	80 81       	ld	r24, Z
    425a:	8f 7e       	andi	r24, 0xEF	; 239
    425c:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_COM01);
    425e:	a3 e5       	ldi	r26, 0x53	; 83
    4260:	b0 e0       	ldi	r27, 0x00	; 0
    4262:	e3 e5       	ldi	r30, 0x53	; 83
    4264:	f0 e0       	ldi	r31, 0x00	; 0
    4266:	80 81       	ld	r24, Z
    4268:	80 62       	ori	r24, 0x20	; 32
    426a:	8c 93       	st	X, r24
    426c:	01 c0       	rjmp	.+2      	; 0x4270 <Spt_Init+0x124>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    426e:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    4270:	ea 81       	ldd	r30, Y+2	; 0x02
    4272:	fb 81       	ldd	r31, Y+3	; 0x03
    4274:	83 81       	ldd	r24, Z+3	; 0x03
    4276:	28 2f       	mov	r18, r24
    4278:	30 e0       	ldi	r19, 0x00	; 0
    427a:	3d 87       	std	Y+13, r19	; 0x0d
    427c:	2c 87       	std	Y+12, r18	; 0x0c
    427e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4280:	9d 85       	ldd	r25, Y+13	; 0x0d
    4282:	84 30       	cpi	r24, 0x04	; 4
    4284:	91 05       	cpc	r25, r1
    4286:	09 f4       	brne	.+2      	; 0x428a <Spt_Init+0x13e>
    4288:	77 c0       	rjmp	.+238    	; 0x4378 <Spt_Init+0x22c>
    428a:	2c 85       	ldd	r18, Y+12	; 0x0c
    428c:	3d 85       	ldd	r19, Y+13	; 0x0d
    428e:	25 30       	cpi	r18, 0x05	; 5
    4290:	31 05       	cpc	r19, r1
    4292:	8c f4       	brge	.+34     	; 0x42b6 <Spt_Init+0x16a>
    4294:	8c 85       	ldd	r24, Y+12	; 0x0c
    4296:	9d 85       	ldd	r25, Y+13	; 0x0d
    4298:	81 30       	cpi	r24, 0x01	; 1
    429a:	91 05       	cpc	r25, r1
    429c:	09 f4       	brne	.+2      	; 0x42a0 <Spt_Init+0x154>
    429e:	40 c0       	rjmp	.+128    	; 0x4320 <Spt_Init+0x1d4>
    42a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    42a2:	3d 85       	ldd	r19, Y+13	; 0x0d
    42a4:	22 30       	cpi	r18, 0x02	; 2
    42a6:	31 05       	cpc	r19, r1
    42a8:	09 f4       	brne	.+2      	; 0x42ac <Spt_Init+0x160>
    42aa:	50 c0       	rjmp	.+160    	; 0x434c <Spt_Init+0x200>
    42ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    42ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    42b0:	00 97       	sbiw	r24, 0x00	; 0
    42b2:	01 f1       	breq	.+64     	; 0x42f4 <Spt_Init+0x1a8>
    42b4:	cf c0       	rjmp	.+414    	; 0x4454 <Spt_Init+0x308>
    42b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    42b8:	3d 85       	ldd	r19, Y+13	; 0x0d
    42ba:	27 30       	cpi	r18, 0x07	; 7
    42bc:	31 05       	cpc	r19, r1
    42be:	09 f4       	brne	.+2      	; 0x42c2 <Spt_Init+0x176>
    42c0:	87 c0       	rjmp	.+270    	; 0x43d0 <Spt_Init+0x284>
    42c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    42c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    42c6:	88 30       	cpi	r24, 0x08	; 8
    42c8:	91 05       	cpc	r25, r1
    42ca:	3c f4       	brge	.+14     	; 0x42da <Spt_Init+0x18e>
    42cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    42ce:	3d 85       	ldd	r19, Y+13	; 0x0d
    42d0:	26 30       	cpi	r18, 0x06	; 6
    42d2:	31 05       	cpc	r19, r1
    42d4:	09 f4       	brne	.+2      	; 0x42d8 <Spt_Init+0x18c>
    42d6:	66 c0       	rjmp	.+204    	; 0x43a4 <Spt_Init+0x258>
    42d8:	bd c0       	rjmp	.+378    	; 0x4454 <Spt_Init+0x308>
    42da:	8c 85       	ldd	r24, Y+12	; 0x0c
    42dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    42de:	88 30       	cpi	r24, 0x08	; 8
    42e0:	91 05       	cpc	r25, r1
    42e2:	09 f4       	brne	.+2      	; 0x42e6 <Spt_Init+0x19a>
    42e4:	8b c0       	rjmp	.+278    	; 0x43fc <Spt_Init+0x2b0>
    42e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    42e8:	3d 85       	ldd	r19, Y+13	; 0x0d
    42ea:	29 30       	cpi	r18, 0x09	; 9
    42ec:	31 05       	cpc	r19, r1
    42ee:	09 f4       	brne	.+2      	; 0x42f2 <Spt_Init+0x1a6>
    42f0:	9b c0       	rjmp	.+310    	; 0x4428 <Spt_Init+0x2dc>
    42f2:	b0 c0       	rjmp	.+352    	; 0x4454 <Spt_Init+0x308>
        {
        case SPT_PRESCALER_0:
            CLR_BIT(TCCR0, TCCR0_CS00);
    42f4:	a3 e5       	ldi	r26, 0x53	; 83
    42f6:	b0 e0       	ldi	r27, 0x00	; 0
    42f8:	e3 e5       	ldi	r30, 0x53	; 83
    42fa:	f0 e0       	ldi	r31, 0x00	; 0
    42fc:	80 81       	ld	r24, Z
    42fe:	8e 7f       	andi	r24, 0xFE	; 254
    4300:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    4302:	a3 e5       	ldi	r26, 0x53	; 83
    4304:	b0 e0       	ldi	r27, 0x00	; 0
    4306:	e3 e5       	ldi	r30, 0x53	; 83
    4308:	f0 e0       	ldi	r31, 0x00	; 0
    430a:	80 81       	ld	r24, Z
    430c:	8d 7f       	andi	r24, 0xFD	; 253
    430e:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    4310:	a3 e5       	ldi	r26, 0x53	; 83
    4312:	b0 e0       	ldi	r27, 0x00	; 0
    4314:	e3 e5       	ldi	r30, 0x53	; 83
    4316:	f0 e0       	ldi	r31, 0x00	; 0
    4318:	80 81       	ld	r24, Z
    431a:	8b 7f       	andi	r24, 0xFB	; 251
    431c:	8c 93       	st	X, r24
    431e:	87 c3       	rjmp	.+1806   	; 0x4a2e <Spt_Init+0x8e2>
            break;
        case SPT_PRESCALER_1:
            SET_BIT(TCCR0, TCCR0_CS00);
    4320:	a3 e5       	ldi	r26, 0x53	; 83
    4322:	b0 e0       	ldi	r27, 0x00	; 0
    4324:	e3 e5       	ldi	r30, 0x53	; 83
    4326:	f0 e0       	ldi	r31, 0x00	; 0
    4328:	80 81       	ld	r24, Z
    432a:	81 60       	ori	r24, 0x01	; 1
    432c:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    432e:	a3 e5       	ldi	r26, 0x53	; 83
    4330:	b0 e0       	ldi	r27, 0x00	; 0
    4332:	e3 e5       	ldi	r30, 0x53	; 83
    4334:	f0 e0       	ldi	r31, 0x00	; 0
    4336:	80 81       	ld	r24, Z
    4338:	8d 7f       	andi	r24, 0xFD	; 253
    433a:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    433c:	a3 e5       	ldi	r26, 0x53	; 83
    433e:	b0 e0       	ldi	r27, 0x00	; 0
    4340:	e3 e5       	ldi	r30, 0x53	; 83
    4342:	f0 e0       	ldi	r31, 0x00	; 0
    4344:	80 81       	ld	r24, Z
    4346:	8b 7f       	andi	r24, 0xFB	; 251
    4348:	8c 93       	st	X, r24
    434a:	71 c3       	rjmp	.+1762   	; 0x4a2e <Spt_Init+0x8e2>
            break;
        case SPT_PRESCALER_8:
            CLR_BIT(TCCR0, TCCR0_CS00);
    434c:	a3 e5       	ldi	r26, 0x53	; 83
    434e:	b0 e0       	ldi	r27, 0x00	; 0
    4350:	e3 e5       	ldi	r30, 0x53	; 83
    4352:	f0 e0       	ldi	r31, 0x00	; 0
    4354:	80 81       	ld	r24, Z
    4356:	8e 7f       	andi	r24, 0xFE	; 254
    4358:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    435a:	a3 e5       	ldi	r26, 0x53	; 83
    435c:	b0 e0       	ldi	r27, 0x00	; 0
    435e:	e3 e5       	ldi	r30, 0x53	; 83
    4360:	f0 e0       	ldi	r31, 0x00	; 0
    4362:	80 81       	ld	r24, Z
    4364:	82 60       	ori	r24, 0x02	; 2
    4366:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    4368:	a3 e5       	ldi	r26, 0x53	; 83
    436a:	b0 e0       	ldi	r27, 0x00	; 0
    436c:	e3 e5       	ldi	r30, 0x53	; 83
    436e:	f0 e0       	ldi	r31, 0x00	; 0
    4370:	80 81       	ld	r24, Z
    4372:	8b 7f       	andi	r24, 0xFB	; 251
    4374:	8c 93       	st	X, r24
    4376:	5b c3       	rjmp	.+1718   	; 0x4a2e <Spt_Init+0x8e2>
            break;
        case SPT_PRESCALER_64:
            SET_BIT(TCCR0, TCCR0_CS00);
    4378:	a3 e5       	ldi	r26, 0x53	; 83
    437a:	b0 e0       	ldi	r27, 0x00	; 0
    437c:	e3 e5       	ldi	r30, 0x53	; 83
    437e:	f0 e0       	ldi	r31, 0x00	; 0
    4380:	80 81       	ld	r24, Z
    4382:	81 60       	ori	r24, 0x01	; 1
    4384:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    4386:	a3 e5       	ldi	r26, 0x53	; 83
    4388:	b0 e0       	ldi	r27, 0x00	; 0
    438a:	e3 e5       	ldi	r30, 0x53	; 83
    438c:	f0 e0       	ldi	r31, 0x00	; 0
    438e:	80 81       	ld	r24, Z
    4390:	82 60       	ori	r24, 0x02	; 2
    4392:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS02);
    4394:	a3 e5       	ldi	r26, 0x53	; 83
    4396:	b0 e0       	ldi	r27, 0x00	; 0
    4398:	e3 e5       	ldi	r30, 0x53	; 83
    439a:	f0 e0       	ldi	r31, 0x00	; 0
    439c:	80 81       	ld	r24, Z
    439e:	8b 7f       	andi	r24, 0xFB	; 251
    43a0:	8c 93       	st	X, r24
    43a2:	45 c3       	rjmp	.+1674   	; 0x4a2e <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_256:
            CLR_BIT(TCCR0, TCCR0_CS00);
    43a4:	a3 e5       	ldi	r26, 0x53	; 83
    43a6:	b0 e0       	ldi	r27, 0x00	; 0
    43a8:	e3 e5       	ldi	r30, 0x53	; 83
    43aa:	f0 e0       	ldi	r31, 0x00	; 0
    43ac:	80 81       	ld	r24, Z
    43ae:	8e 7f       	andi	r24, 0xFE	; 254
    43b0:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    43b2:	a3 e5       	ldi	r26, 0x53	; 83
    43b4:	b0 e0       	ldi	r27, 0x00	; 0
    43b6:	e3 e5       	ldi	r30, 0x53	; 83
    43b8:	f0 e0       	ldi	r31, 0x00	; 0
    43ba:	80 81       	ld	r24, Z
    43bc:	8d 7f       	andi	r24, 0xFD	; 253
    43be:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    43c0:	a3 e5       	ldi	r26, 0x53	; 83
    43c2:	b0 e0       	ldi	r27, 0x00	; 0
    43c4:	e3 e5       	ldi	r30, 0x53	; 83
    43c6:	f0 e0       	ldi	r31, 0x00	; 0
    43c8:	80 81       	ld	r24, Z
    43ca:	84 60       	ori	r24, 0x04	; 4
    43cc:	8c 93       	st	X, r24
    43ce:	2f c3       	rjmp	.+1630   	; 0x4a2e <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_1024:
            SET_BIT(TCCR0, TCCR0_CS00);
    43d0:	a3 e5       	ldi	r26, 0x53	; 83
    43d2:	b0 e0       	ldi	r27, 0x00	; 0
    43d4:	e3 e5       	ldi	r30, 0x53	; 83
    43d6:	f0 e0       	ldi	r31, 0x00	; 0
    43d8:	80 81       	ld	r24, Z
    43da:	81 60       	ori	r24, 0x01	; 1
    43dc:	8c 93       	st	X, r24
            CLR_BIT(TCCR0, TCCR0_CS01);
    43de:	a3 e5       	ldi	r26, 0x53	; 83
    43e0:	b0 e0       	ldi	r27, 0x00	; 0
    43e2:	e3 e5       	ldi	r30, 0x53	; 83
    43e4:	f0 e0       	ldi	r31, 0x00	; 0
    43e6:	80 81       	ld	r24, Z
    43e8:	8d 7f       	andi	r24, 0xFD	; 253
    43ea:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    43ec:	a3 e5       	ldi	r26, 0x53	; 83
    43ee:	b0 e0       	ldi	r27, 0x00	; 0
    43f0:	e3 e5       	ldi	r30, 0x53	; 83
    43f2:	f0 e0       	ldi	r31, 0x00	; 0
    43f4:	80 81       	ld	r24, Z
    43f6:	84 60       	ori	r24, 0x04	; 4
    43f8:	8c 93       	st	X, r24
    43fa:	19 c3       	rjmp	.+1586   	; 0x4a2e <Spt_Init+0x8e2>
            break;
        case SPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR0, TCCR0_CS00);
    43fc:	a3 e5       	ldi	r26, 0x53	; 83
    43fe:	b0 e0       	ldi	r27, 0x00	; 0
    4400:	e3 e5       	ldi	r30, 0x53	; 83
    4402:	f0 e0       	ldi	r31, 0x00	; 0
    4404:	80 81       	ld	r24, Z
    4406:	8e 7f       	andi	r24, 0xFE	; 254
    4408:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    440a:	a3 e5       	ldi	r26, 0x53	; 83
    440c:	b0 e0       	ldi	r27, 0x00	; 0
    440e:	e3 e5       	ldi	r30, 0x53	; 83
    4410:	f0 e0       	ldi	r31, 0x00	; 0
    4412:	80 81       	ld	r24, Z
    4414:	82 60       	ori	r24, 0x02	; 2
    4416:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    4418:	a3 e5       	ldi	r26, 0x53	; 83
    441a:	b0 e0       	ldi	r27, 0x00	; 0
    441c:	e3 e5       	ldi	r30, 0x53	; 83
    441e:	f0 e0       	ldi	r31, 0x00	; 0
    4420:	80 81       	ld	r24, Z
    4422:	84 60       	ori	r24, 0x04	; 4
    4424:	8c 93       	st	X, r24
    4426:	03 c3       	rjmp	.+1542   	; 0x4a2e <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR0, TCCR0_CS00);
    4428:	a3 e5       	ldi	r26, 0x53	; 83
    442a:	b0 e0       	ldi	r27, 0x00	; 0
    442c:	e3 e5       	ldi	r30, 0x53	; 83
    442e:	f0 e0       	ldi	r31, 0x00	; 0
    4430:	80 81       	ld	r24, Z
    4432:	81 60       	ori	r24, 0x01	; 1
    4434:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS01);
    4436:	a3 e5       	ldi	r26, 0x53	; 83
    4438:	b0 e0       	ldi	r27, 0x00	; 0
    443a:	e3 e5       	ldi	r30, 0x53	; 83
    443c:	f0 e0       	ldi	r31, 0x00	; 0
    443e:	80 81       	ld	r24, Z
    4440:	82 60       	ori	r24, 0x02	; 2
    4442:	8c 93       	st	X, r24
            SET_BIT(TCCR0, TCCR0_CS02);
    4444:	a3 e5       	ldi	r26, 0x53	; 83
    4446:	b0 e0       	ldi	r27, 0x00	; 0
    4448:	e3 e5       	ldi	r30, 0x53	; 83
    444a:	f0 e0       	ldi	r31, 0x00	; 0
    444c:	80 81       	ld	r24, Z
    444e:	84 60       	ori	r24, 0x04	; 4
    4450:	8c 93       	st	X, r24
    4452:	ed c2       	rjmp	.+1498   	; 0x4a2e <Spt_Init+0x8e2>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    4454:	19 82       	std	Y+1, r1	; 0x01
    4456:	eb c2       	rjmp	.+1494   	; 0x4a2e <Spt_Init+0x8e2>
        }
        break;

    case SPT_CHANNEL_TIMER1A:
        /*Waveform Generation Mode*/
        if (config->mode == SPT_MODE_FAST_PWM)
    4458:	ea 81       	ldd	r30, Y+2	; 0x02
    445a:	fb 81       	ldd	r31, Y+3	; 0x03
    445c:	81 81       	ldd	r24, Z+1	; 0x01
    445e:	88 23       	and	r24, r24
    4460:	e9 f4       	brne	.+58     	; 0x449c <Spt_Init+0x350>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    4462:	af e4       	ldi	r26, 0x4F	; 79
    4464:	b0 e0       	ldi	r27, 0x00	; 0
    4466:	ef e4       	ldi	r30, 0x4F	; 79
    4468:	f0 e0       	ldi	r31, 0x00	; 0
    446a:	80 81       	ld	r24, Z
    446c:	8e 7f       	andi	r24, 0xFE	; 254
    446e:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_WGM11);
    4470:	af e4       	ldi	r26, 0x4F	; 79
    4472:	b0 e0       	ldi	r27, 0x00	; 0
    4474:	ef e4       	ldi	r30, 0x4F	; 79
    4476:	f0 e0       	ldi	r31, 0x00	; 0
    4478:	80 81       	ld	r24, Z
    447a:	82 60       	ori	r24, 0x02	; 2
    447c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    447e:	ae e4       	ldi	r26, 0x4E	; 78
    4480:	b0 e0       	ldi	r27, 0x00	; 0
    4482:	ee e4       	ldi	r30, 0x4E	; 78
    4484:	f0 e0       	ldi	r31, 0x00	; 0
    4486:	80 81       	ld	r24, Z
    4488:	88 60       	ori	r24, 0x08	; 8
    448a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM13);
    448c:	ae e4       	ldi	r26, 0x4E	; 78
    448e:	b0 e0       	ldi	r27, 0x00	; 0
    4490:	ee e4       	ldi	r30, 0x4E	; 78
    4492:	f0 e0       	ldi	r31, 0x00	; 0
    4494:	80 81       	ld	r24, Z
    4496:	80 61       	ori	r24, 0x10	; 16
    4498:	8c 93       	st	X, r24
    449a:	01 c0       	rjmp	.+2      	; 0x449e <Spt_Init+0x352>
        //     // TODO
        //     // TODO
        // }
        else
        {
            returnValue = SPT_ERROR;
    449c:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    449e:	ea 81       	ldd	r30, Y+2	; 0x02
    44a0:	fb 81       	ldd	r31, Y+3	; 0x03
    44a2:	82 81       	ldd	r24, Z+2	; 0x02
    44a4:	28 2f       	mov	r18, r24
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	3b 87       	std	Y+11, r19	; 0x0b
    44aa:	2a 87       	std	Y+10, r18	; 0x0a
    44ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    44ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    44b0:	81 30       	cpi	r24, 0x01	; 1
    44b2:	91 05       	cpc	r25, r1
    44b4:	21 f1       	breq	.+72     	; 0x44fe <Spt_Init+0x3b2>
    44b6:	2a 85       	ldd	r18, Y+10	; 0x0a
    44b8:	3b 85       	ldd	r19, Y+11	; 0x0b
    44ba:	22 30       	cpi	r18, 0x02	; 2
    44bc:	31 05       	cpc	r19, r1
    44be:	2c f4       	brge	.+10     	; 0x44ca <Spt_Init+0x37e>
    44c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    44c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    44c4:	00 97       	sbiw	r24, 0x00	; 0
    44c6:	61 f0       	breq	.+24     	; 0x44e0 <Spt_Init+0x394>
    44c8:	47 c0       	rjmp	.+142    	; 0x4558 <Spt_Init+0x40c>
    44ca:	2a 85       	ldd	r18, Y+10	; 0x0a
    44cc:	3b 85       	ldd	r19, Y+11	; 0x0b
    44ce:	22 30       	cpi	r18, 0x02	; 2
    44d0:	31 05       	cpc	r19, r1
    44d2:	21 f1       	breq	.+72     	; 0x451c <Spt_Init+0x3d0>
    44d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    44d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    44d8:	83 30       	cpi	r24, 0x03	; 3
    44da:	91 05       	cpc	r25, r1
    44dc:	71 f1       	breq	.+92     	; 0x453a <Spt_Init+0x3ee>
    44de:	3c c0       	rjmp	.+120    	; 0x4558 <Spt_Init+0x40c>
        {
        case SPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    44e0:	af e4       	ldi	r26, 0x4F	; 79
    44e2:	b0 e0       	ldi	r27, 0x00	; 0
    44e4:	ef e4       	ldi	r30, 0x4F	; 79
    44e6:	f0 e0       	ldi	r31, 0x00	; 0
    44e8:	80 81       	ld	r24, Z
    44ea:	8f 7b       	andi	r24, 0xBF	; 191
    44ec:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    44ee:	af e4       	ldi	r26, 0x4F	; 79
    44f0:	b0 e0       	ldi	r27, 0x00	; 0
    44f2:	ef e4       	ldi	r30, 0x4F	; 79
    44f4:	f0 e0       	ldi	r31, 0x00	; 0
    44f6:	80 81       	ld	r24, Z
    44f8:	8f 77       	andi	r24, 0x7F	; 127
    44fa:	8c 93       	st	X, r24
    44fc:	2e c0       	rjmp	.+92     	; 0x455a <Spt_Init+0x40e>
            // TODO
            break;
        case SPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    44fe:	af e4       	ldi	r26, 0x4F	; 79
    4500:	b0 e0       	ldi	r27, 0x00	; 0
    4502:	ef e4       	ldi	r30, 0x4F	; 79
    4504:	f0 e0       	ldi	r31, 0x00	; 0
    4506:	80 81       	ld	r24, Z
    4508:	80 64       	ori	r24, 0x40	; 64
    450a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    450c:	af e4       	ldi	r26, 0x4F	; 79
    450e:	b0 e0       	ldi	r27, 0x00	; 0
    4510:	ef e4       	ldi	r30, 0x4F	; 79
    4512:	f0 e0       	ldi	r31, 0x00	; 0
    4514:	80 81       	ld	r24, Z
    4516:	8f 77       	andi	r24, 0x7F	; 127
    4518:	8c 93       	st	X, r24
    451a:	1f c0       	rjmp	.+62     	; 0x455a <Spt_Init+0x40e>
            // TODO
            break;
        case SPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1A0);
    451c:	af e4       	ldi	r26, 0x4F	; 79
    451e:	b0 e0       	ldi	r27, 0x00	; 0
    4520:	ef e4       	ldi	r30, 0x4F	; 79
    4522:	f0 e0       	ldi	r31, 0x00	; 0
    4524:	80 81       	ld	r24, Z
    4526:	80 64       	ori	r24, 0x40	; 64
    4528:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    452a:	af e4       	ldi	r26, 0x4F	; 79
    452c:	b0 e0       	ldi	r27, 0x00	; 0
    452e:	ef e4       	ldi	r30, 0x4F	; 79
    4530:	f0 e0       	ldi	r31, 0x00	; 0
    4532:	80 81       	ld	r24, Z
    4534:	80 68       	ori	r24, 0x80	; 128
    4536:	8c 93       	st	X, r24
    4538:	10 c0       	rjmp	.+32     	; 0x455a <Spt_Init+0x40e>
            // TODO
            break;
        case SPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    453a:	af e4       	ldi	r26, 0x4F	; 79
    453c:	b0 e0       	ldi	r27, 0x00	; 0
    453e:	ef e4       	ldi	r30, 0x4F	; 79
    4540:	f0 e0       	ldi	r31, 0x00	; 0
    4542:	80 81       	ld	r24, Z
    4544:	8f 7b       	andi	r24, 0xBF	; 191
    4546:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1A1);
    4548:	af e4       	ldi	r26, 0x4F	; 79
    454a:	b0 e0       	ldi	r27, 0x00	; 0
    454c:	ef e4       	ldi	r30, 0x4F	; 79
    454e:	f0 e0       	ldi	r31, 0x00	; 0
    4550:	80 81       	ld	r24, Z
    4552:	80 68       	ori	r24, 0x80	; 128
    4554:	8c 93       	st	X, r24
    4556:	01 c0       	rjmp	.+2      	; 0x455a <Spt_Init+0x40e>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    4558:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    455a:	ea 81       	ldd	r30, Y+2	; 0x02
    455c:	fb 81       	ldd	r31, Y+3	; 0x03
    455e:	83 81       	ldd	r24, Z+3	; 0x03
    4560:	28 2f       	mov	r18, r24
    4562:	30 e0       	ldi	r19, 0x00	; 0
    4564:	39 87       	std	Y+9, r19	; 0x09
    4566:	28 87       	std	Y+8, r18	; 0x08
    4568:	88 85       	ldd	r24, Y+8	; 0x08
    456a:	99 85       	ldd	r25, Y+9	; 0x09
    456c:	84 30       	cpi	r24, 0x04	; 4
    456e:	91 05       	cpc	r25, r1
    4570:	09 f4       	brne	.+2      	; 0x4574 <Spt_Init+0x428>
    4572:	77 c0       	rjmp	.+238    	; 0x4662 <Spt_Init+0x516>
    4574:	28 85       	ldd	r18, Y+8	; 0x08
    4576:	39 85       	ldd	r19, Y+9	; 0x09
    4578:	25 30       	cpi	r18, 0x05	; 5
    457a:	31 05       	cpc	r19, r1
    457c:	8c f4       	brge	.+34     	; 0x45a0 <Spt_Init+0x454>
    457e:	88 85       	ldd	r24, Y+8	; 0x08
    4580:	99 85       	ldd	r25, Y+9	; 0x09
    4582:	81 30       	cpi	r24, 0x01	; 1
    4584:	91 05       	cpc	r25, r1
    4586:	09 f4       	brne	.+2      	; 0x458a <Spt_Init+0x43e>
    4588:	40 c0       	rjmp	.+128    	; 0x460a <Spt_Init+0x4be>
    458a:	28 85       	ldd	r18, Y+8	; 0x08
    458c:	39 85       	ldd	r19, Y+9	; 0x09
    458e:	22 30       	cpi	r18, 0x02	; 2
    4590:	31 05       	cpc	r19, r1
    4592:	09 f4       	brne	.+2      	; 0x4596 <Spt_Init+0x44a>
    4594:	50 c0       	rjmp	.+160    	; 0x4636 <Spt_Init+0x4ea>
    4596:	88 85       	ldd	r24, Y+8	; 0x08
    4598:	99 85       	ldd	r25, Y+9	; 0x09
    459a:	00 97       	sbiw	r24, 0x00	; 0
    459c:	01 f1       	breq	.+64     	; 0x45de <Spt_Init+0x492>
    459e:	cf c0       	rjmp	.+414    	; 0x473e <Spt_Init+0x5f2>
    45a0:	28 85       	ldd	r18, Y+8	; 0x08
    45a2:	39 85       	ldd	r19, Y+9	; 0x09
    45a4:	27 30       	cpi	r18, 0x07	; 7
    45a6:	31 05       	cpc	r19, r1
    45a8:	09 f4       	brne	.+2      	; 0x45ac <Spt_Init+0x460>
    45aa:	87 c0       	rjmp	.+270    	; 0x46ba <Spt_Init+0x56e>
    45ac:	88 85       	ldd	r24, Y+8	; 0x08
    45ae:	99 85       	ldd	r25, Y+9	; 0x09
    45b0:	88 30       	cpi	r24, 0x08	; 8
    45b2:	91 05       	cpc	r25, r1
    45b4:	3c f4       	brge	.+14     	; 0x45c4 <Spt_Init+0x478>
    45b6:	28 85       	ldd	r18, Y+8	; 0x08
    45b8:	39 85       	ldd	r19, Y+9	; 0x09
    45ba:	26 30       	cpi	r18, 0x06	; 6
    45bc:	31 05       	cpc	r19, r1
    45be:	09 f4       	brne	.+2      	; 0x45c2 <Spt_Init+0x476>
    45c0:	66 c0       	rjmp	.+204    	; 0x468e <Spt_Init+0x542>
    45c2:	bd c0       	rjmp	.+378    	; 0x473e <Spt_Init+0x5f2>
    45c4:	88 85       	ldd	r24, Y+8	; 0x08
    45c6:	99 85       	ldd	r25, Y+9	; 0x09
    45c8:	88 30       	cpi	r24, 0x08	; 8
    45ca:	91 05       	cpc	r25, r1
    45cc:	09 f4       	brne	.+2      	; 0x45d0 <Spt_Init+0x484>
    45ce:	8b c0       	rjmp	.+278    	; 0x46e6 <Spt_Init+0x59a>
    45d0:	28 85       	ldd	r18, Y+8	; 0x08
    45d2:	39 85       	ldd	r19, Y+9	; 0x09
    45d4:	29 30       	cpi	r18, 0x09	; 9
    45d6:	31 05       	cpc	r19, r1
    45d8:	09 f4       	brne	.+2      	; 0x45dc <Spt_Init+0x490>
    45da:	9b c0       	rjmp	.+310    	; 0x4712 <Spt_Init+0x5c6>
    45dc:	b0 c0       	rjmp	.+352    	; 0x473e <Spt_Init+0x5f2>
        {
        case SPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    45de:	ae e4       	ldi	r26, 0x4E	; 78
    45e0:	b0 e0       	ldi	r27, 0x00	; 0
    45e2:	ee e4       	ldi	r30, 0x4E	; 78
    45e4:	f0 e0       	ldi	r31, 0x00	; 0
    45e6:	80 81       	ld	r24, Z
    45e8:	8e 7f       	andi	r24, 0xFE	; 254
    45ea:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    45ec:	ae e4       	ldi	r26, 0x4E	; 78
    45ee:	b0 e0       	ldi	r27, 0x00	; 0
    45f0:	ee e4       	ldi	r30, 0x4E	; 78
    45f2:	f0 e0       	ldi	r31, 0x00	; 0
    45f4:	80 81       	ld	r24, Z
    45f6:	8d 7f       	andi	r24, 0xFD	; 253
    45f8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    45fa:	ae e4       	ldi	r26, 0x4E	; 78
    45fc:	b0 e0       	ldi	r27, 0x00	; 0
    45fe:	ee e4       	ldi	r30, 0x4E	; 78
    4600:	f0 e0       	ldi	r31, 0x00	; 0
    4602:	80 81       	ld	r24, Z
    4604:	8b 7f       	andi	r24, 0xFB	; 251
    4606:	8c 93       	st	X, r24
    4608:	12 c2       	rjmp	.+1060   	; 0x4a2e <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    460a:	ae e4       	ldi	r26, 0x4E	; 78
    460c:	b0 e0       	ldi	r27, 0x00	; 0
    460e:	ee e4       	ldi	r30, 0x4E	; 78
    4610:	f0 e0       	ldi	r31, 0x00	; 0
    4612:	80 81       	ld	r24, Z
    4614:	81 60       	ori	r24, 0x01	; 1
    4616:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    4618:	ae e4       	ldi	r26, 0x4E	; 78
    461a:	b0 e0       	ldi	r27, 0x00	; 0
    461c:	ee e4       	ldi	r30, 0x4E	; 78
    461e:	f0 e0       	ldi	r31, 0x00	; 0
    4620:	80 81       	ld	r24, Z
    4622:	8d 7f       	andi	r24, 0xFD	; 253
    4624:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4626:	ae e4       	ldi	r26, 0x4E	; 78
    4628:	b0 e0       	ldi	r27, 0x00	; 0
    462a:	ee e4       	ldi	r30, 0x4E	; 78
    462c:	f0 e0       	ldi	r31, 0x00	; 0
    462e:	80 81       	ld	r24, Z
    4630:	8b 7f       	andi	r24, 0xFB	; 251
    4632:	8c 93       	st	X, r24
    4634:	fc c1       	rjmp	.+1016   	; 0x4a2e <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    4636:	ae e4       	ldi	r26, 0x4E	; 78
    4638:	b0 e0       	ldi	r27, 0x00	; 0
    463a:	ee e4       	ldi	r30, 0x4E	; 78
    463c:	f0 e0       	ldi	r31, 0x00	; 0
    463e:	80 81       	ld	r24, Z
    4640:	8e 7f       	andi	r24, 0xFE	; 254
    4642:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4644:	ae e4       	ldi	r26, 0x4E	; 78
    4646:	b0 e0       	ldi	r27, 0x00	; 0
    4648:	ee e4       	ldi	r30, 0x4E	; 78
    464a:	f0 e0       	ldi	r31, 0x00	; 0
    464c:	80 81       	ld	r24, Z
    464e:	82 60       	ori	r24, 0x02	; 2
    4650:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4652:	ae e4       	ldi	r26, 0x4E	; 78
    4654:	b0 e0       	ldi	r27, 0x00	; 0
    4656:	ee e4       	ldi	r30, 0x4E	; 78
    4658:	f0 e0       	ldi	r31, 0x00	; 0
    465a:	80 81       	ld	r24, Z
    465c:	8b 7f       	andi	r24, 0xFB	; 251
    465e:	8c 93       	st	X, r24
    4660:	e6 c1       	rjmp	.+972    	; 0x4a2e <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    4662:	ae e4       	ldi	r26, 0x4E	; 78
    4664:	b0 e0       	ldi	r27, 0x00	; 0
    4666:	ee e4       	ldi	r30, 0x4E	; 78
    4668:	f0 e0       	ldi	r31, 0x00	; 0
    466a:	80 81       	ld	r24, Z
    466c:	81 60       	ori	r24, 0x01	; 1
    466e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4670:	ae e4       	ldi	r26, 0x4E	; 78
    4672:	b0 e0       	ldi	r27, 0x00	; 0
    4674:	ee e4       	ldi	r30, 0x4E	; 78
    4676:	f0 e0       	ldi	r31, 0x00	; 0
    4678:	80 81       	ld	r24, Z
    467a:	82 60       	ori	r24, 0x02	; 2
    467c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    467e:	ae e4       	ldi	r26, 0x4E	; 78
    4680:	b0 e0       	ldi	r27, 0x00	; 0
    4682:	ee e4       	ldi	r30, 0x4E	; 78
    4684:	f0 e0       	ldi	r31, 0x00	; 0
    4686:	80 81       	ld	r24, Z
    4688:	8b 7f       	andi	r24, 0xFB	; 251
    468a:	8c 93       	st	X, r24
    468c:	d0 c1       	rjmp	.+928    	; 0x4a2e <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    468e:	ae e4       	ldi	r26, 0x4E	; 78
    4690:	b0 e0       	ldi	r27, 0x00	; 0
    4692:	ee e4       	ldi	r30, 0x4E	; 78
    4694:	f0 e0       	ldi	r31, 0x00	; 0
    4696:	80 81       	ld	r24, Z
    4698:	8e 7f       	andi	r24, 0xFE	; 254
    469a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    469c:	ae e4       	ldi	r26, 0x4E	; 78
    469e:	b0 e0       	ldi	r27, 0x00	; 0
    46a0:	ee e4       	ldi	r30, 0x4E	; 78
    46a2:	f0 e0       	ldi	r31, 0x00	; 0
    46a4:	80 81       	ld	r24, Z
    46a6:	8d 7f       	andi	r24, 0xFD	; 253
    46a8:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    46aa:	ae e4       	ldi	r26, 0x4E	; 78
    46ac:	b0 e0       	ldi	r27, 0x00	; 0
    46ae:	ee e4       	ldi	r30, 0x4E	; 78
    46b0:	f0 e0       	ldi	r31, 0x00	; 0
    46b2:	80 81       	ld	r24, Z
    46b4:	84 60       	ori	r24, 0x04	; 4
    46b6:	8c 93       	st	X, r24
    46b8:	ba c1       	rjmp	.+884    	; 0x4a2e <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    46ba:	ae e4       	ldi	r26, 0x4E	; 78
    46bc:	b0 e0       	ldi	r27, 0x00	; 0
    46be:	ee e4       	ldi	r30, 0x4E	; 78
    46c0:	f0 e0       	ldi	r31, 0x00	; 0
    46c2:	80 81       	ld	r24, Z
    46c4:	81 60       	ori	r24, 0x01	; 1
    46c6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    46c8:	ae e4       	ldi	r26, 0x4E	; 78
    46ca:	b0 e0       	ldi	r27, 0x00	; 0
    46cc:	ee e4       	ldi	r30, 0x4E	; 78
    46ce:	f0 e0       	ldi	r31, 0x00	; 0
    46d0:	80 81       	ld	r24, Z
    46d2:	8d 7f       	andi	r24, 0xFD	; 253
    46d4:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    46d6:	ae e4       	ldi	r26, 0x4E	; 78
    46d8:	b0 e0       	ldi	r27, 0x00	; 0
    46da:	ee e4       	ldi	r30, 0x4E	; 78
    46dc:	f0 e0       	ldi	r31, 0x00	; 0
    46de:	80 81       	ld	r24, Z
    46e0:	84 60       	ori	r24, 0x04	; 4
    46e2:	8c 93       	st	X, r24
    46e4:	a4 c1       	rjmp	.+840    	; 0x4a2e <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    46e6:	ae e4       	ldi	r26, 0x4E	; 78
    46e8:	b0 e0       	ldi	r27, 0x00	; 0
    46ea:	ee e4       	ldi	r30, 0x4E	; 78
    46ec:	f0 e0       	ldi	r31, 0x00	; 0
    46ee:	80 81       	ld	r24, Z
    46f0:	8e 7f       	andi	r24, 0xFE	; 254
    46f2:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    46f4:	ae e4       	ldi	r26, 0x4E	; 78
    46f6:	b0 e0       	ldi	r27, 0x00	; 0
    46f8:	ee e4       	ldi	r30, 0x4E	; 78
    46fa:	f0 e0       	ldi	r31, 0x00	; 0
    46fc:	80 81       	ld	r24, Z
    46fe:	82 60       	ori	r24, 0x02	; 2
    4700:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4702:	ae e4       	ldi	r26, 0x4E	; 78
    4704:	b0 e0       	ldi	r27, 0x00	; 0
    4706:	ee e4       	ldi	r30, 0x4E	; 78
    4708:	f0 e0       	ldi	r31, 0x00	; 0
    470a:	80 81       	ld	r24, Z
    470c:	84 60       	ori	r24, 0x04	; 4
    470e:	8c 93       	st	X, r24
    4710:	8e c1       	rjmp	.+796    	; 0x4a2e <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    4712:	ae e4       	ldi	r26, 0x4E	; 78
    4714:	b0 e0       	ldi	r27, 0x00	; 0
    4716:	ee e4       	ldi	r30, 0x4E	; 78
    4718:	f0 e0       	ldi	r31, 0x00	; 0
    471a:	80 81       	ld	r24, Z
    471c:	81 60       	ori	r24, 0x01	; 1
    471e:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4720:	ae e4       	ldi	r26, 0x4E	; 78
    4722:	b0 e0       	ldi	r27, 0x00	; 0
    4724:	ee e4       	ldi	r30, 0x4E	; 78
    4726:	f0 e0       	ldi	r31, 0x00	; 0
    4728:	80 81       	ld	r24, Z
    472a:	82 60       	ori	r24, 0x02	; 2
    472c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    472e:	ae e4       	ldi	r26, 0x4E	; 78
    4730:	b0 e0       	ldi	r27, 0x00	; 0
    4732:	ee e4       	ldi	r30, 0x4E	; 78
    4734:	f0 e0       	ldi	r31, 0x00	; 0
    4736:	80 81       	ld	r24, Z
    4738:	84 60       	ori	r24, 0x04	; 4
    473a:	8c 93       	st	X, r24
    473c:	78 c1       	rjmp	.+752    	; 0x4a2e <Spt_Init+0x8e2>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    473e:	19 82       	std	Y+1, r1	; 0x01
    4740:	76 c1       	rjmp	.+748    	; 0x4a2e <Spt_Init+0x8e2>
        }
        break;

        case SPT_CHANNEL_TIMER1B:
        /*Waveform Generation Mode*/
        if (config->mode == SPT_MODE_FAST_PWM)
    4742:	ea 81       	ldd	r30, Y+2	; 0x02
    4744:	fb 81       	ldd	r31, Y+3	; 0x03
    4746:	81 81       	ldd	r24, Z+1	; 0x01
    4748:	88 23       	and	r24, r24
    474a:	e9 f4       	brne	.+58     	; 0x4786 <Spt_Init+0x63a>
        {
            CLR_BIT(TCCR1A,TCCR1A_WGM10);
    474c:	af e4       	ldi	r26, 0x4F	; 79
    474e:	b0 e0       	ldi	r27, 0x00	; 0
    4750:	ef e4       	ldi	r30, 0x4F	; 79
    4752:	f0 e0       	ldi	r31, 0x00	; 0
    4754:	80 81       	ld	r24, Z
    4756:	8e 7f       	andi	r24, 0xFE	; 254
    4758:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_WGM11);
    475a:	af e4       	ldi	r26, 0x4F	; 79
    475c:	b0 e0       	ldi	r27, 0x00	; 0
    475e:	ef e4       	ldi	r30, 0x4F	; 79
    4760:	f0 e0       	ldi	r31, 0x00	; 0
    4762:	80 81       	ld	r24, Z
    4764:	82 60       	ori	r24, 0x02	; 2
    4766:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM12);
    4768:	ae e4       	ldi	r26, 0x4E	; 78
    476a:	b0 e0       	ldi	r27, 0x00	; 0
    476c:	ee e4       	ldi	r30, 0x4E	; 78
    476e:	f0 e0       	ldi	r31, 0x00	; 0
    4770:	80 81       	ld	r24, Z
    4772:	88 60       	ori	r24, 0x08	; 8
    4774:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_WGM13);
    4776:	ae e4       	ldi	r26, 0x4E	; 78
    4778:	b0 e0       	ldi	r27, 0x00	; 0
    477a:	ee e4       	ldi	r30, 0x4E	; 78
    477c:	f0 e0       	ldi	r31, 0x00	; 0
    477e:	80 81       	ld	r24, Z
    4780:	80 61       	ori	r24, 0x10	; 16
    4782:	8c 93       	st	X, r24
    4784:	01 c0       	rjmp	.+2      	; 0x4788 <Spt_Init+0x63c>
        //         // TODO
        //         // TODO
        //     }
        else
        {
            returnValue = SPT_ERROR;
    4786:	19 82       	std	Y+1, r1	; 0x01
        }

        /*Compare Match Output Mode*/
        switch (config->output)
    4788:	ea 81       	ldd	r30, Y+2	; 0x02
    478a:	fb 81       	ldd	r31, Y+3	; 0x03
    478c:	82 81       	ldd	r24, Z+2	; 0x02
    478e:	28 2f       	mov	r18, r24
    4790:	30 e0       	ldi	r19, 0x00	; 0
    4792:	3f 83       	std	Y+7, r19	; 0x07
    4794:	2e 83       	std	Y+6, r18	; 0x06
    4796:	8e 81       	ldd	r24, Y+6	; 0x06
    4798:	9f 81       	ldd	r25, Y+7	; 0x07
    479a:	81 30       	cpi	r24, 0x01	; 1
    479c:	91 05       	cpc	r25, r1
    479e:	21 f1       	breq	.+72     	; 0x47e8 <Spt_Init+0x69c>
    47a0:	2e 81       	ldd	r18, Y+6	; 0x06
    47a2:	3f 81       	ldd	r19, Y+7	; 0x07
    47a4:	22 30       	cpi	r18, 0x02	; 2
    47a6:	31 05       	cpc	r19, r1
    47a8:	2c f4       	brge	.+10     	; 0x47b4 <Spt_Init+0x668>
    47aa:	8e 81       	ldd	r24, Y+6	; 0x06
    47ac:	9f 81       	ldd	r25, Y+7	; 0x07
    47ae:	00 97       	sbiw	r24, 0x00	; 0
    47b0:	61 f0       	breq	.+24     	; 0x47ca <Spt_Init+0x67e>
    47b2:	47 c0       	rjmp	.+142    	; 0x4842 <Spt_Init+0x6f6>
    47b4:	2e 81       	ldd	r18, Y+6	; 0x06
    47b6:	3f 81       	ldd	r19, Y+7	; 0x07
    47b8:	22 30       	cpi	r18, 0x02	; 2
    47ba:	31 05       	cpc	r19, r1
    47bc:	21 f1       	breq	.+72     	; 0x4806 <Spt_Init+0x6ba>
    47be:	8e 81       	ldd	r24, Y+6	; 0x06
    47c0:	9f 81       	ldd	r25, Y+7	; 0x07
    47c2:	83 30       	cpi	r24, 0x03	; 3
    47c4:	91 05       	cpc	r25, r1
    47c6:	71 f1       	breq	.+92     	; 0x4824 <Spt_Init+0x6d8>
    47c8:	3c c0       	rjmp	.+120    	; 0x4842 <Spt_Init+0x6f6>
        {
        case SPT_OUTPUT_NORMAL:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    47ca:	af e4       	ldi	r26, 0x4F	; 79
    47cc:	b0 e0       	ldi	r27, 0x00	; 0
    47ce:	ef e4       	ldi	r30, 0x4F	; 79
    47d0:	f0 e0       	ldi	r31, 0x00	; 0
    47d2:	80 81       	ld	r24, Z
    47d4:	8f 7e       	andi	r24, 0xEF	; 239
    47d6:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    47d8:	af e4       	ldi	r26, 0x4F	; 79
    47da:	b0 e0       	ldi	r27, 0x00	; 0
    47dc:	ef e4       	ldi	r30, 0x4F	; 79
    47de:	f0 e0       	ldi	r31, 0x00	; 0
    47e0:	80 81       	ld	r24, Z
    47e2:	8f 7d       	andi	r24, 0xDF	; 223
    47e4:	8c 93       	st	X, r24
    47e6:	2e c0       	rjmp	.+92     	; 0x4844 <Spt_Init+0x6f8>
            // TODO
            break;
        case SPT_OUTPUT_TOGGLE:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    47e8:	af e4       	ldi	r26, 0x4F	; 79
    47ea:	b0 e0       	ldi	r27, 0x00	; 0
    47ec:	ef e4       	ldi	r30, 0x4F	; 79
    47ee:	f0 e0       	ldi	r31, 0x00	; 0
    47f0:	80 81       	ld	r24, Z
    47f2:	80 61       	ori	r24, 0x10	; 16
    47f4:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    47f6:	af e4       	ldi	r26, 0x4F	; 79
    47f8:	b0 e0       	ldi	r27, 0x00	; 0
    47fa:	ef e4       	ldi	r30, 0x4F	; 79
    47fc:	f0 e0       	ldi	r31, 0x00	; 0
    47fe:	80 81       	ld	r24, Z
    4800:	8f 7d       	andi	r24, 0xDF	; 223
    4802:	8c 93       	st	X, r24
    4804:	1f c0       	rjmp	.+62     	; 0x4844 <Spt_Init+0x6f8>
            // TODO
            break;
        case SPT_OUTPUT_SET:
            SET_BIT(TCCR1A,TCCR1A_COM1B0);
    4806:	af e4       	ldi	r26, 0x4F	; 79
    4808:	b0 e0       	ldi	r27, 0x00	; 0
    480a:	ef e4       	ldi	r30, 0x4F	; 79
    480c:	f0 e0       	ldi	r31, 0x00	; 0
    480e:	80 81       	ld	r24, Z
    4810:	80 61       	ori	r24, 0x10	; 16
    4812:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    4814:	af e4       	ldi	r26, 0x4F	; 79
    4816:	b0 e0       	ldi	r27, 0x00	; 0
    4818:	ef e4       	ldi	r30, 0x4F	; 79
    481a:	f0 e0       	ldi	r31, 0x00	; 0
    481c:	80 81       	ld	r24, Z
    481e:	80 62       	ori	r24, 0x20	; 32
    4820:	8c 93       	st	X, r24
    4822:	10 c0       	rjmp	.+32     	; 0x4844 <Spt_Init+0x6f8>
            // TODO
            break;
        case SPT_OUTPUT_CLEAR:
            CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    4824:	af e4       	ldi	r26, 0x4F	; 79
    4826:	b0 e0       	ldi	r27, 0x00	; 0
    4828:	ef e4       	ldi	r30, 0x4F	; 79
    482a:	f0 e0       	ldi	r31, 0x00	; 0
    482c:	80 81       	ld	r24, Z
    482e:	8f 7e       	andi	r24, 0xEF	; 239
    4830:	8c 93       	st	X, r24
            SET_BIT(TCCR1A,TCCR1A_COM1B1);
    4832:	af e4       	ldi	r26, 0x4F	; 79
    4834:	b0 e0       	ldi	r27, 0x00	; 0
    4836:	ef e4       	ldi	r30, 0x4F	; 79
    4838:	f0 e0       	ldi	r31, 0x00	; 0
    483a:	80 81       	ld	r24, Z
    483c:	80 62       	ori	r24, 0x20	; 32
    483e:	8c 93       	st	X, r24
    4840:	01 c0       	rjmp	.+2      	; 0x4844 <Spt_Init+0x6f8>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    4842:	19 82       	std	Y+1, r1	; 0x01
            break;
        }

        /*Clock Select*/
        switch (config->prescaler)
    4844:	ea 81       	ldd	r30, Y+2	; 0x02
    4846:	fb 81       	ldd	r31, Y+3	; 0x03
    4848:	83 81       	ldd	r24, Z+3	; 0x03
    484a:	28 2f       	mov	r18, r24
    484c:	30 e0       	ldi	r19, 0x00	; 0
    484e:	3d 83       	std	Y+5, r19	; 0x05
    4850:	2c 83       	std	Y+4, r18	; 0x04
    4852:	8c 81       	ldd	r24, Y+4	; 0x04
    4854:	9d 81       	ldd	r25, Y+5	; 0x05
    4856:	84 30       	cpi	r24, 0x04	; 4
    4858:	91 05       	cpc	r25, r1
    485a:	09 f4       	brne	.+2      	; 0x485e <Spt_Init+0x712>
    485c:	77 c0       	rjmp	.+238    	; 0x494c <Spt_Init+0x800>
    485e:	2c 81       	ldd	r18, Y+4	; 0x04
    4860:	3d 81       	ldd	r19, Y+5	; 0x05
    4862:	25 30       	cpi	r18, 0x05	; 5
    4864:	31 05       	cpc	r19, r1
    4866:	8c f4       	brge	.+34     	; 0x488a <Spt_Init+0x73e>
    4868:	8c 81       	ldd	r24, Y+4	; 0x04
    486a:	9d 81       	ldd	r25, Y+5	; 0x05
    486c:	81 30       	cpi	r24, 0x01	; 1
    486e:	91 05       	cpc	r25, r1
    4870:	09 f4       	brne	.+2      	; 0x4874 <Spt_Init+0x728>
    4872:	40 c0       	rjmp	.+128    	; 0x48f4 <Spt_Init+0x7a8>
    4874:	2c 81       	ldd	r18, Y+4	; 0x04
    4876:	3d 81       	ldd	r19, Y+5	; 0x05
    4878:	22 30       	cpi	r18, 0x02	; 2
    487a:	31 05       	cpc	r19, r1
    487c:	09 f4       	brne	.+2      	; 0x4880 <Spt_Init+0x734>
    487e:	50 c0       	rjmp	.+160    	; 0x4920 <Spt_Init+0x7d4>
    4880:	8c 81       	ldd	r24, Y+4	; 0x04
    4882:	9d 81       	ldd	r25, Y+5	; 0x05
    4884:	00 97       	sbiw	r24, 0x00	; 0
    4886:	01 f1       	breq	.+64     	; 0x48c8 <Spt_Init+0x77c>
    4888:	cf c0       	rjmp	.+414    	; 0x4a28 <Spt_Init+0x8dc>
    488a:	2c 81       	ldd	r18, Y+4	; 0x04
    488c:	3d 81       	ldd	r19, Y+5	; 0x05
    488e:	27 30       	cpi	r18, 0x07	; 7
    4890:	31 05       	cpc	r19, r1
    4892:	09 f4       	brne	.+2      	; 0x4896 <Spt_Init+0x74a>
    4894:	87 c0       	rjmp	.+270    	; 0x49a4 <Spt_Init+0x858>
    4896:	8c 81       	ldd	r24, Y+4	; 0x04
    4898:	9d 81       	ldd	r25, Y+5	; 0x05
    489a:	88 30       	cpi	r24, 0x08	; 8
    489c:	91 05       	cpc	r25, r1
    489e:	3c f4       	brge	.+14     	; 0x48ae <Spt_Init+0x762>
    48a0:	2c 81       	ldd	r18, Y+4	; 0x04
    48a2:	3d 81       	ldd	r19, Y+5	; 0x05
    48a4:	26 30       	cpi	r18, 0x06	; 6
    48a6:	31 05       	cpc	r19, r1
    48a8:	09 f4       	brne	.+2      	; 0x48ac <Spt_Init+0x760>
    48aa:	66 c0       	rjmp	.+204    	; 0x4978 <Spt_Init+0x82c>
    48ac:	bd c0       	rjmp	.+378    	; 0x4a28 <Spt_Init+0x8dc>
    48ae:	8c 81       	ldd	r24, Y+4	; 0x04
    48b0:	9d 81       	ldd	r25, Y+5	; 0x05
    48b2:	88 30       	cpi	r24, 0x08	; 8
    48b4:	91 05       	cpc	r25, r1
    48b6:	09 f4       	brne	.+2      	; 0x48ba <Spt_Init+0x76e>
    48b8:	8b c0       	rjmp	.+278    	; 0x49d0 <Spt_Init+0x884>
    48ba:	2c 81       	ldd	r18, Y+4	; 0x04
    48bc:	3d 81       	ldd	r19, Y+5	; 0x05
    48be:	29 30       	cpi	r18, 0x09	; 9
    48c0:	31 05       	cpc	r19, r1
    48c2:	09 f4       	brne	.+2      	; 0x48c6 <Spt_Init+0x77a>
    48c4:	9b c0       	rjmp	.+310    	; 0x49fc <Spt_Init+0x8b0>
    48c6:	b0 c0       	rjmp	.+352    	; 0x4a28 <Spt_Init+0x8dc>
        {
        case SPT_PRESCALER_0:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    48c8:	ae e4       	ldi	r26, 0x4E	; 78
    48ca:	b0 e0       	ldi	r27, 0x00	; 0
    48cc:	ee e4       	ldi	r30, 0x4E	; 78
    48ce:	f0 e0       	ldi	r31, 0x00	; 0
    48d0:	80 81       	ld	r24, Z
    48d2:	8e 7f       	andi	r24, 0xFE	; 254
    48d4:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    48d6:	ae e4       	ldi	r26, 0x4E	; 78
    48d8:	b0 e0       	ldi	r27, 0x00	; 0
    48da:	ee e4       	ldi	r30, 0x4E	; 78
    48dc:	f0 e0       	ldi	r31, 0x00	; 0
    48de:	80 81       	ld	r24, Z
    48e0:	8d 7f       	andi	r24, 0xFD	; 253
    48e2:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    48e4:	ae e4       	ldi	r26, 0x4E	; 78
    48e6:	b0 e0       	ldi	r27, 0x00	; 0
    48e8:	ee e4       	ldi	r30, 0x4E	; 78
    48ea:	f0 e0       	ldi	r31, 0x00	; 0
    48ec:	80 81       	ld	r24, Z
    48ee:	8b 7f       	andi	r24, 0xFB	; 251
    48f0:	8c 93       	st	X, r24
    48f2:	9d c0       	rjmp	.+314    	; 0x4a2e <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_1:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    48f4:	ae e4       	ldi	r26, 0x4E	; 78
    48f6:	b0 e0       	ldi	r27, 0x00	; 0
    48f8:	ee e4       	ldi	r30, 0x4E	; 78
    48fa:	f0 e0       	ldi	r31, 0x00	; 0
    48fc:	80 81       	ld	r24, Z
    48fe:	81 60       	ori	r24, 0x01	; 1
    4900:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    4902:	ae e4       	ldi	r26, 0x4E	; 78
    4904:	b0 e0       	ldi	r27, 0x00	; 0
    4906:	ee e4       	ldi	r30, 0x4E	; 78
    4908:	f0 e0       	ldi	r31, 0x00	; 0
    490a:	80 81       	ld	r24, Z
    490c:	8d 7f       	andi	r24, 0xFD	; 253
    490e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4910:	ae e4       	ldi	r26, 0x4E	; 78
    4912:	b0 e0       	ldi	r27, 0x00	; 0
    4914:	ee e4       	ldi	r30, 0x4E	; 78
    4916:	f0 e0       	ldi	r31, 0x00	; 0
    4918:	80 81       	ld	r24, Z
    491a:	8b 7f       	andi	r24, 0xFB	; 251
    491c:	8c 93       	st	X, r24
    491e:	87 c0       	rjmp	.+270    	; 0x4a2e <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_8:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    4920:	ae e4       	ldi	r26, 0x4E	; 78
    4922:	b0 e0       	ldi	r27, 0x00	; 0
    4924:	ee e4       	ldi	r30, 0x4E	; 78
    4926:	f0 e0       	ldi	r31, 0x00	; 0
    4928:	80 81       	ld	r24, Z
    492a:	8e 7f       	andi	r24, 0xFE	; 254
    492c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    492e:	ae e4       	ldi	r26, 0x4E	; 78
    4930:	b0 e0       	ldi	r27, 0x00	; 0
    4932:	ee e4       	ldi	r30, 0x4E	; 78
    4934:	f0 e0       	ldi	r31, 0x00	; 0
    4936:	80 81       	ld	r24, Z
    4938:	82 60       	ori	r24, 0x02	; 2
    493a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    493c:	ae e4       	ldi	r26, 0x4E	; 78
    493e:	b0 e0       	ldi	r27, 0x00	; 0
    4940:	ee e4       	ldi	r30, 0x4E	; 78
    4942:	f0 e0       	ldi	r31, 0x00	; 0
    4944:	80 81       	ld	r24, Z
    4946:	8b 7f       	andi	r24, 0xFB	; 251
    4948:	8c 93       	st	X, r24
    494a:	71 c0       	rjmp	.+226    	; 0x4a2e <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_64:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    494c:	ae e4       	ldi	r26, 0x4E	; 78
    494e:	b0 e0       	ldi	r27, 0x00	; 0
    4950:	ee e4       	ldi	r30, 0x4E	; 78
    4952:	f0 e0       	ldi	r31, 0x00	; 0
    4954:	80 81       	ld	r24, Z
    4956:	81 60       	ori	r24, 0x01	; 1
    4958:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    495a:	ae e4       	ldi	r26, 0x4E	; 78
    495c:	b0 e0       	ldi	r27, 0x00	; 0
    495e:	ee e4       	ldi	r30, 0x4E	; 78
    4960:	f0 e0       	ldi	r31, 0x00	; 0
    4962:	80 81       	ld	r24, Z
    4964:	82 60       	ori	r24, 0x02	; 2
    4966:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS12);
    4968:	ae e4       	ldi	r26, 0x4E	; 78
    496a:	b0 e0       	ldi	r27, 0x00	; 0
    496c:	ee e4       	ldi	r30, 0x4E	; 78
    496e:	f0 e0       	ldi	r31, 0x00	; 0
    4970:	80 81       	ld	r24, Z
    4972:	8b 7f       	andi	r24, 0xFB	; 251
    4974:	8c 93       	st	X, r24
    4976:	5b c0       	rjmp	.+182    	; 0x4a2e <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_256:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    4978:	ae e4       	ldi	r26, 0x4E	; 78
    497a:	b0 e0       	ldi	r27, 0x00	; 0
    497c:	ee e4       	ldi	r30, 0x4E	; 78
    497e:	f0 e0       	ldi	r31, 0x00	; 0
    4980:	80 81       	ld	r24, Z
    4982:	8e 7f       	andi	r24, 0xFE	; 254
    4984:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    4986:	ae e4       	ldi	r26, 0x4E	; 78
    4988:	b0 e0       	ldi	r27, 0x00	; 0
    498a:	ee e4       	ldi	r30, 0x4E	; 78
    498c:	f0 e0       	ldi	r31, 0x00	; 0
    498e:	80 81       	ld	r24, Z
    4990:	8d 7f       	andi	r24, 0xFD	; 253
    4992:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4994:	ae e4       	ldi	r26, 0x4E	; 78
    4996:	b0 e0       	ldi	r27, 0x00	; 0
    4998:	ee e4       	ldi	r30, 0x4E	; 78
    499a:	f0 e0       	ldi	r31, 0x00	; 0
    499c:	80 81       	ld	r24, Z
    499e:	84 60       	ori	r24, 0x04	; 4
    49a0:	8c 93       	st	X, r24
    49a2:	45 c0       	rjmp	.+138    	; 0x4a2e <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_1024:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    49a4:	ae e4       	ldi	r26, 0x4E	; 78
    49a6:	b0 e0       	ldi	r27, 0x00	; 0
    49a8:	ee e4       	ldi	r30, 0x4E	; 78
    49aa:	f0 e0       	ldi	r31, 0x00	; 0
    49ac:	80 81       	ld	r24, Z
    49ae:	81 60       	ori	r24, 0x01	; 1
    49b0:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B,TCCR1B_CS11);
    49b2:	ae e4       	ldi	r26, 0x4E	; 78
    49b4:	b0 e0       	ldi	r27, 0x00	; 0
    49b6:	ee e4       	ldi	r30, 0x4E	; 78
    49b8:	f0 e0       	ldi	r31, 0x00	; 0
    49ba:	80 81       	ld	r24, Z
    49bc:	8d 7f       	andi	r24, 0xFD	; 253
    49be:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    49c0:	ae e4       	ldi	r26, 0x4E	; 78
    49c2:	b0 e0       	ldi	r27, 0x00	; 0
    49c4:	ee e4       	ldi	r30, 0x4E	; 78
    49c6:	f0 e0       	ldi	r31, 0x00	; 0
    49c8:	80 81       	ld	r24, Z
    49ca:	84 60       	ori	r24, 0x04	; 4
    49cc:	8c 93       	st	X, r24
    49ce:	2f c0       	rjmp	.+94     	; 0x4a2e <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_EXT_FALLING:
            CLR_BIT(TCCR1B,TCCR1B_CS10);
    49d0:	ae e4       	ldi	r26, 0x4E	; 78
    49d2:	b0 e0       	ldi	r27, 0x00	; 0
    49d4:	ee e4       	ldi	r30, 0x4E	; 78
    49d6:	f0 e0       	ldi	r31, 0x00	; 0
    49d8:	80 81       	ld	r24, Z
    49da:	8e 7f       	andi	r24, 0xFE	; 254
    49dc:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    49de:	ae e4       	ldi	r26, 0x4E	; 78
    49e0:	b0 e0       	ldi	r27, 0x00	; 0
    49e2:	ee e4       	ldi	r30, 0x4E	; 78
    49e4:	f0 e0       	ldi	r31, 0x00	; 0
    49e6:	80 81       	ld	r24, Z
    49e8:	82 60       	ori	r24, 0x02	; 2
    49ea:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    49ec:	ae e4       	ldi	r26, 0x4E	; 78
    49ee:	b0 e0       	ldi	r27, 0x00	; 0
    49f0:	ee e4       	ldi	r30, 0x4E	; 78
    49f2:	f0 e0       	ldi	r31, 0x00	; 0
    49f4:	80 81       	ld	r24, Z
    49f6:	84 60       	ori	r24, 0x04	; 4
    49f8:	8c 93       	st	X, r24
    49fa:	19 c0       	rjmp	.+50     	; 0x4a2e <Spt_Init+0x8e2>
            // TODO
            break;
        case SPT_PRESCALER_EXT_RISING:
            SET_BIT(TCCR1B,TCCR1B_CS10);
    49fc:	ae e4       	ldi	r26, 0x4E	; 78
    49fe:	b0 e0       	ldi	r27, 0x00	; 0
    4a00:	ee e4       	ldi	r30, 0x4E	; 78
    4a02:	f0 e0       	ldi	r31, 0x00	; 0
    4a04:	80 81       	ld	r24, Z
    4a06:	81 60       	ori	r24, 0x01	; 1
    4a08:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS11);
    4a0a:	ae e4       	ldi	r26, 0x4E	; 78
    4a0c:	b0 e0       	ldi	r27, 0x00	; 0
    4a0e:	ee e4       	ldi	r30, 0x4E	; 78
    4a10:	f0 e0       	ldi	r31, 0x00	; 0
    4a12:	80 81       	ld	r24, Z
    4a14:	82 60       	ori	r24, 0x02	; 2
    4a16:	8c 93       	st	X, r24
            SET_BIT(TCCR1B,TCCR1B_CS12);
    4a18:	ae e4       	ldi	r26, 0x4E	; 78
    4a1a:	b0 e0       	ldi	r27, 0x00	; 0
    4a1c:	ee e4       	ldi	r30, 0x4E	; 78
    4a1e:	f0 e0       	ldi	r31, 0x00	; 0
    4a20:	80 81       	ld	r24, Z
    4a22:	84 60       	ori	r24, 0x04	; 4
    4a24:	8c 93       	st	X, r24
    4a26:	03 c0       	rjmp	.+6      	; 0x4a2e <Spt_Init+0x8e2>
            // TODO
            break;
        default:
            returnValue = SPT_ERROR;
    4a28:	19 82       	std	Y+1, r1	; 0x01
    4a2a:	01 c0       	rjmp	.+2      	; 0x4a2e <Spt_Init+0x8e2>
        //         break;
        //     }
        //     break;

        default:
            returnValue = SPT_ERROR;
    4a2c:	19 82       	std	Y+1, r1	; 0x01
        }
        return returnValue;
    4a2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4a30:	61 96       	adiw	r28, 0x11	; 17
    4a32:	0f b6       	in	r0, 0x3f	; 63
    4a34:	f8 94       	cli
    4a36:	de bf       	out	0x3e, r29	; 62
    4a38:	0f be       	out	0x3f, r0	; 63
    4a3a:	cd bf       	out	0x3d, r28	; 61
    4a3c:	cf 91       	pop	r28
    4a3e:	df 91       	pop	r29
    4a40:	08 95       	ret

00004a42 <Spt_Set_ICR1>:

void Spt_Set_ICR1(u16 value) {
    4a42:	df 93       	push	r29
    4a44:	cf 93       	push	r28
    4a46:	00 d0       	rcall	.+0      	; 0x4a48 <Spt_Set_ICR1+0x6>
    4a48:	cd b7       	in	r28, 0x3d	; 61
    4a4a:	de b7       	in	r29, 0x3e	; 62
    4a4c:	9a 83       	std	Y+2, r25	; 0x02
    4a4e:	89 83       	std	Y+1, r24	; 0x01
    ICR1 = value;
    4a50:	e6 e4       	ldi	r30, 0x46	; 70
    4a52:	f0 e0       	ldi	r31, 0x00	; 0
    4a54:	89 81       	ldd	r24, Y+1	; 0x01
    4a56:	9a 81       	ldd	r25, Y+2	; 0x02
    4a58:	91 83       	std	Z+1, r25	; 0x01
    4a5a:	80 83       	st	Z, r24
}
    4a5c:	0f 90       	pop	r0
    4a5e:	0f 90       	pop	r0
    4a60:	cf 91       	pop	r28
    4a62:	df 91       	pop	r29
    4a64:	08 95       	ret

00004a66 <Get_OCR_Value>:

u16 Get_OCR_Value (u8 angle) {
    4a66:	df 93       	push	r29
    4a68:	cf 93       	push	r28
    4a6a:	0f 92       	push	r0
    4a6c:	cd b7       	in	r28, 0x3d	; 61
    4a6e:	de b7       	in	r29, 0x3e	; 62
    4a70:	89 83       	std	Y+1, r24	; 0x01
    return ((angle*1000)/180)+1000;
    4a72:	89 81       	ldd	r24, Y+1	; 0x01
    4a74:	28 2f       	mov	r18, r24
    4a76:	30 e0       	ldi	r19, 0x00	; 0
    4a78:	88 ee       	ldi	r24, 0xE8	; 232
    4a7a:	93 e0       	ldi	r25, 0x03	; 3
    4a7c:	ac 01       	movw	r20, r24
    4a7e:	24 9f       	mul	r18, r20
    4a80:	c0 01       	movw	r24, r0
    4a82:	25 9f       	mul	r18, r21
    4a84:	90 0d       	add	r25, r0
    4a86:	34 9f       	mul	r19, r20
    4a88:	90 0d       	add	r25, r0
    4a8a:	11 24       	eor	r1, r1
    4a8c:	24 eb       	ldi	r18, 0xB4	; 180
    4a8e:	30 e0       	ldi	r19, 0x00	; 0
    4a90:	b9 01       	movw	r22, r18
    4a92:	0e 94 15 2c 	call	0x582a	; 0x582a <__divmodhi4>
    4a96:	cb 01       	movw	r24, r22
    4a98:	88 51       	subi	r24, 0x18	; 24
    4a9a:	9c 4f       	sbci	r25, 0xFC	; 252
}
    4a9c:	0f 90       	pop	r0
    4a9e:	cf 91       	pop	r28
    4aa0:	df 91       	pop	r29
    4aa2:	08 95       	ret

00004aa4 <Spt_StartTimer>:

Spt_ReturnType Spt_StartTimer(Spt_ChannelType channel, u16 value)
{
    4aa4:	df 93       	push	r29
    4aa6:	cf 93       	push	r28
    4aa8:	00 d0       	rcall	.+0      	; 0x4aaa <Spt_StartTimer+0x6>
    4aaa:	00 d0       	rcall	.+0      	; 0x4aac <Spt_StartTimer+0x8>
    4aac:	00 d0       	rcall	.+0      	; 0x4aae <Spt_StartTimer+0xa>
    4aae:	cd b7       	in	r28, 0x3d	; 61
    4ab0:	de b7       	in	r29, 0x3e	; 62
    4ab2:	8a 83       	std	Y+2, r24	; 0x02
    4ab4:	7c 83       	std	Y+4, r23	; 0x04
    4ab6:	6b 83       	std	Y+3, r22	; 0x03
    Spt_ReturnType returnValue = SPT_OK;
    4ab8:	81 e0       	ldi	r24, 0x01	; 1
    4aba:	89 83       	std	Y+1, r24	; 0x01
    switch (channel)
    4abc:	8a 81       	ldd	r24, Y+2	; 0x02
    4abe:	28 2f       	mov	r18, r24
    4ac0:	30 e0       	ldi	r19, 0x00	; 0
    4ac2:	3e 83       	std	Y+6, r19	; 0x06
    4ac4:	2d 83       	std	Y+5, r18	; 0x05
    4ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    4aca:	81 30       	cpi	r24, 0x01	; 1
    4acc:	91 05       	cpc	r25, r1
    4ace:	b1 f0       	breq	.+44     	; 0x4afc <Spt_StartTimer+0x58>
    4ad0:	2d 81       	ldd	r18, Y+5	; 0x05
    4ad2:	3e 81       	ldd	r19, Y+6	; 0x06
    4ad4:	22 30       	cpi	r18, 0x02	; 2
    4ad6:	31 05       	cpc	r19, r1
    4ad8:	c1 f0       	breq	.+48     	; 0x4b0a <Spt_StartTimer+0x66>
    4ada:	8d 81       	ldd	r24, Y+5	; 0x05
    4adc:	9e 81       	ldd	r25, Y+6	; 0x06
    4ade:	00 97       	sbiw	r24, 0x00	; 0
    4ae0:	d1 f4       	brne	.+52     	; 0x4b16 <Spt_StartTimer+0x72>
    {
    case SPT_CHANNEL_TIMER0:
        if (value < 256)
    4ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ae6:	8f 3f       	cpi	r24, 0xFF	; 255
    4ae8:	91 05       	cpc	r25, r1
    4aea:	09 f0       	breq	.+2      	; 0x4aee <Spt_StartTimer+0x4a>
    4aec:	28 f4       	brcc	.+10     	; 0x4af8 <Spt_StartTimer+0x54>
        {
            OCR0 = value;
    4aee:	ec e5       	ldi	r30, 0x5C	; 92
    4af0:	f0 e0       	ldi	r31, 0x00	; 0
    4af2:	8b 81       	ldd	r24, Y+3	; 0x03
    4af4:	80 83       	st	Z, r24
    4af6:	0f c0       	rjmp	.+30     	; 0x4b16 <Spt_StartTimer+0x72>
        }
        else
        {
            returnValue = SPT_ERROR;
    4af8:	19 82       	std	Y+1, r1	; 0x01
    4afa:	0d c0       	rjmp	.+26     	; 0x4b16 <Spt_StartTimer+0x72>
        }
        break;
    case SPT_CHANNEL_TIMER1A:
        if (value < 65536)
        {
            OCR1A = value;
    4afc:	ea e4       	ldi	r30, 0x4A	; 74
    4afe:	f0 e0       	ldi	r31, 0x00	; 0
    4b00:	8b 81       	ldd	r24, Y+3	; 0x03
    4b02:	9c 81       	ldd	r25, Y+4	; 0x04
    4b04:	91 83       	std	Z+1, r25	; 0x01
    4b06:	80 83       	st	Z, r24
    4b08:	06 c0       	rjmp	.+12     	; 0x4b16 <Spt_StartTimer+0x72>
        // TODO
        break;
    case SPT_CHANNEL_TIMER1B:
        if (value < 65536)
        {
            OCR1B = value;
    4b0a:	e8 e4       	ldi	r30, 0x48	; 72
    4b0c:	f0 e0       	ldi	r31, 0x00	; 0
    4b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    4b10:	9c 81       	ldd	r25, Y+4	; 0x04
    4b12:	91 83       	std	Z+1, r25	; 0x01
    4b14:	80 83       	st	Z, r24
    //     break;

    default:
        break;
    }
    return returnValue;
    4b16:	89 81       	ldd	r24, Y+1	; 0x01
}
    4b18:	26 96       	adiw	r28, 0x06	; 6
    4b1a:	0f b6       	in	r0, 0x3f	; 63
    4b1c:	f8 94       	cli
    4b1e:	de bf       	out	0x3e, r29	; 62
    4b20:	0f be       	out	0x3f, r0	; 63
    4b22:	cd bf       	out	0x3d, r28	; 61
    4b24:	cf 91       	pop	r28
    4b26:	df 91       	pop	r29
    4b28:	08 95       	ret

00004b2a <Clock_Set_Hour>:
 *      Author: medoa
 */
#include "Time_Table.h"
#include "EEPROM.h"

void Clock_Set_Hour(u8 data){
    4b2a:	df 93       	push	r29
    4b2c:	cf 93       	push	r28
    4b2e:	0f 92       	push	r0
    4b30:	cd b7       	in	r28, 0x3d	; 61
    4b32:	de b7       	in	r29, 0x3e	; 62
    4b34:	89 83       	std	Y+1, r24	; 0x01
   EEPROM_Write_Byte(0b10100000,0b00000000,4);
    4b36:	80 ea       	ldi	r24, 0xA0	; 160
    4b38:	60 e0       	ldi	r22, 0x00	; 0
    4b3a:	44 e0       	ldi	r20, 0x04	; 4
    4b3c:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EEPROM_Write_Byte>
}
    4b40:	0f 90       	pop	r0
    4b42:	cf 91       	pop	r28
    4b44:	df 91       	pop	r29
    4b46:	08 95       	ret

00004b48 <Clock_Set_Min>:
void Clock_Set_Min(u8 data){
    4b48:	df 93       	push	r29
    4b4a:	cf 93       	push	r28
    4b4c:	0f 92       	push	r0
    4b4e:	cd b7       	in	r28, 0x3d	; 61
    4b50:	de b7       	in	r29, 0x3e	; 62
    4b52:	89 83       	std	Y+1, r24	; 0x01
    EEPROM_Write_Byte(0b10100000,Clock_Min_add1,data);
    4b54:	80 ea       	ldi	r24, 0xA0	; 160
    4b56:	63 e0       	ldi	r22, 0x03	; 3
    4b58:	49 81       	ldd	r20, Y+1	; 0x01
    4b5a:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EEPROM_Write_Byte>

}
    4b5e:	0f 90       	pop	r0
    4b60:	cf 91       	pop	r28
    4b62:	df 91       	pop	r29
    4b64:	08 95       	ret

00004b66 <Clock_Set_Fajr>:

void Clock_Set_Fajr(u8 data){
    4b66:	df 93       	push	r29
    4b68:	cf 93       	push	r28
    4b6a:	0f 92       	push	r0
    4b6c:	cd b7       	in	r28, 0x3d	; 61
    4b6e:	de b7       	in	r29, 0x3e	; 62
    4b70:	89 83       	std	Y+1, r24	; 0x01
    EEPROM_Write_Byte(0b10100000,Clock_Fajr_add1,data);
    4b72:	80 ea       	ldi	r24, 0xA0	; 160
    4b74:	65 e0       	ldi	r22, 0x05	; 5
    4b76:	49 81       	ldd	r20, Y+1	; 0x01
    4b78:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EEPROM_Write_Byte>
}
    4b7c:	0f 90       	pop	r0
    4b7e:	cf 91       	pop	r28
    4b80:	df 91       	pop	r29
    4b82:	08 95       	ret

00004b84 <Clock_Set_Dhuhr>:
void Clock_Set_Dhuhr(u8 data){
    4b84:	df 93       	push	r29
    4b86:	cf 93       	push	r28
    4b88:	0f 92       	push	r0
    4b8a:	cd b7       	in	r28, 0x3d	; 61
    4b8c:	de b7       	in	r29, 0x3e	; 62
    4b8e:	89 83       	std	Y+1, r24	; 0x01
    EEPROM_Write_Byte(0b10100000,Clock_Dhuhr_add1,data);
    4b90:	80 ea       	ldi	r24, 0xA0	; 160
    4b92:	69 e0       	ldi	r22, 0x09	; 9
    4b94:	49 81       	ldd	r20, Y+1	; 0x01
    4b96:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EEPROM_Write_Byte>
}
    4b9a:	0f 90       	pop	r0
    4b9c:	cf 91       	pop	r28
    4b9e:	df 91       	pop	r29
    4ba0:	08 95       	ret

00004ba2 <Clock_Set_Asr>:
void Clock_Set_Asr(u8 data){
    4ba2:	df 93       	push	r29
    4ba4:	cf 93       	push	r28
    4ba6:	0f 92       	push	r0
    4ba8:	cd b7       	in	r28, 0x3d	; 61
    4baa:	de b7       	in	r29, 0x3e	; 62
    4bac:	89 83       	std	Y+1, r24	; 0x01
    EEPROM_Write_Byte(0b10100000,Clock_Asr_add1,data);
    4bae:	80 ea       	ldi	r24, 0xA0	; 160
    4bb0:	6d e0       	ldi	r22, 0x0D	; 13
    4bb2:	49 81       	ldd	r20, Y+1	; 0x01
    4bb4:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EEPROM_Write_Byte>
}
    4bb8:	0f 90       	pop	r0
    4bba:	cf 91       	pop	r28
    4bbc:	df 91       	pop	r29
    4bbe:	08 95       	ret

00004bc0 <Clock_Set_Maghrib>:
void Clock_Set_Maghrib(u8 data){
    4bc0:	df 93       	push	r29
    4bc2:	cf 93       	push	r28
    4bc4:	0f 92       	push	r0
    4bc6:	cd b7       	in	r28, 0x3d	; 61
    4bc8:	de b7       	in	r29, 0x3e	; 62
    4bca:	89 83       	std	Y+1, r24	; 0x01
    EEPROM_Write_Byte(0b10100000,Clock_Maghrib_add1,data);
    4bcc:	80 ea       	ldi	r24, 0xA0	; 160
    4bce:	61 e1       	ldi	r22, 0x11	; 17
    4bd0:	49 81       	ldd	r20, Y+1	; 0x01
    4bd2:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EEPROM_Write_Byte>
}
    4bd6:	0f 90       	pop	r0
    4bd8:	cf 91       	pop	r28
    4bda:	df 91       	pop	r29
    4bdc:	08 95       	ret

00004bde <Clock_Set_Isha>:
void Clock_Set_Isha(u8 data){
    4bde:	df 93       	push	r29
    4be0:	cf 93       	push	r28
    4be2:	0f 92       	push	r0
    4be4:	cd b7       	in	r28, 0x3d	; 61
    4be6:	de b7       	in	r29, 0x3e	; 62
    4be8:	89 83       	std	Y+1, r24	; 0x01
    EEPROM_Write_Byte(0b10100000,Clock_Isha_add1,data);
    4bea:	80 ea       	ldi	r24, 0xA0	; 160
    4bec:	63 e1       	ldi	r22, 0x13	; 19
    4bee:	49 81       	ldd	r20, Y+1	; 0x01
    4bf0:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EEPROM_Write_Byte>

}
    4bf4:	0f 90       	pop	r0
    4bf6:	cf 91       	pop	r28
    4bf8:	df 91       	pop	r29
    4bfa:	08 95       	ret

00004bfc <Clock_Get_Hour>:

u8 Clock_Get_Hour(){
    4bfc:	df 93       	push	r29
    4bfe:	cf 93       	push	r28
    4c00:	cd b7       	in	r28, 0x3d	; 61
    4c02:	de b7       	in	r29, 0x3e	; 62
    return EEPROM_Read_Byte(0b10100000,Clock_Hour_add1);
    4c04:	80 ea       	ldi	r24, 0xA0	; 160
    4c06:	61 e0       	ldi	r22, 0x01	; 1
    4c08:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <EEPROM_Read_Byte>
}
    4c0c:	cf 91       	pop	r28
    4c0e:	df 91       	pop	r29
    4c10:	08 95       	ret

00004c12 <Clock_Get_Min>:
u8 Clock_Get_Min(){
    4c12:	df 93       	push	r29
    4c14:	cf 93       	push	r28
    4c16:	cd b7       	in	r28, 0x3d	; 61
    4c18:	de b7       	in	r29, 0x3e	; 62
    return EEPROM_Read_Byte(0b10100000,Clock_Min_add1);
    4c1a:	80 ea       	ldi	r24, 0xA0	; 160
    4c1c:	63 e0       	ldi	r22, 0x03	; 3
    4c1e:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <EEPROM_Read_Byte>
}
    4c22:	cf 91       	pop	r28
    4c24:	df 91       	pop	r29
    4c26:	08 95       	ret

00004c28 <Clock_Get_Fajr>:
u8 Clock_Get_Fajr(){
    4c28:	df 93       	push	r29
    4c2a:	cf 93       	push	r28
    4c2c:	cd b7       	in	r28, 0x3d	; 61
    4c2e:	de b7       	in	r29, 0x3e	; 62
    return EEPROM_Read_Byte(0b10100000,Clock_Fajr_add1);
    4c30:	80 ea       	ldi	r24, 0xA0	; 160
    4c32:	65 e0       	ldi	r22, 0x05	; 5
    4c34:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <EEPROM_Read_Byte>
}
    4c38:	cf 91       	pop	r28
    4c3a:	df 91       	pop	r29
    4c3c:	08 95       	ret

00004c3e <Clock_Get_Dhuhr>:
u8 Clock_Get_Dhuhr(){
    4c3e:	df 93       	push	r29
    4c40:	cf 93       	push	r28
    4c42:	cd b7       	in	r28, 0x3d	; 61
    4c44:	de b7       	in	r29, 0x3e	; 62
    return EEPROM_Read_Byte(0b10100000,Clock_Dhuhr_add1);
    4c46:	80 ea       	ldi	r24, 0xA0	; 160
    4c48:	69 e0       	ldi	r22, 0x09	; 9
    4c4a:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <EEPROM_Read_Byte>
}
    4c4e:	cf 91       	pop	r28
    4c50:	df 91       	pop	r29
    4c52:	08 95       	ret

00004c54 <Clock_Get_Asr>:
u8 Clock_Get_Asr(){
    4c54:	df 93       	push	r29
    4c56:	cf 93       	push	r28
    4c58:	cd b7       	in	r28, 0x3d	; 61
    4c5a:	de b7       	in	r29, 0x3e	; 62
    return EEPROM_Read_Byte(0b10100000,Clock_Asr_add1);
    4c5c:	80 ea       	ldi	r24, 0xA0	; 160
    4c5e:	6d e0       	ldi	r22, 0x0D	; 13
    4c60:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <EEPROM_Read_Byte>
}
    4c64:	cf 91       	pop	r28
    4c66:	df 91       	pop	r29
    4c68:	08 95       	ret

00004c6a <Clock_Get_Maghrib>:
u8 Clock_Get_Maghrib(){
    4c6a:	df 93       	push	r29
    4c6c:	cf 93       	push	r28
    4c6e:	cd b7       	in	r28, 0x3d	; 61
    4c70:	de b7       	in	r29, 0x3e	; 62
    return EEPROM_Read_Byte(0b10100000,Clock_Maghrib_add1);
    4c72:	80 ea       	ldi	r24, 0xA0	; 160
    4c74:	61 e1       	ldi	r22, 0x11	; 17
    4c76:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <EEPROM_Read_Byte>
}
    4c7a:	cf 91       	pop	r28
    4c7c:	df 91       	pop	r29
    4c7e:	08 95       	ret

00004c80 <Clock_Get_Isha>:
u8 Clock_Get_Isha(){
    4c80:	df 93       	push	r29
    4c82:	cf 93       	push	r28
    4c84:	cd b7       	in	r28, 0x3d	; 61
    4c86:	de b7       	in	r29, 0x3e	; 62
    return EEPROM_Read_Byte(0b10100000,Clock_Isha_add1);
    4c88:	80 ea       	ldi	r24, 0xA0	; 160
    4c8a:	63 e1       	ldi	r22, 0x13	; 19
    4c8c:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <EEPROM_Read_Byte>
}
    4c90:	cf 91       	pop	r28
    4c92:	df 91       	pop	r29
    4c94:	08 95       	ret

00004c96 <UART_Init>:
#define UCSRB_RXEN 4

#define UCSRA_TXC 6
#define UCSRA_RXC 7

void UART_Init (UART_ConfigType* config) {
    4c96:	df 93       	push	r29
    4c98:	cf 93       	push	r28
    4c9a:	cd b7       	in	r28, 0x3d	; 61
    4c9c:	de b7       	in	r29, 0x3e	; 62
    4c9e:	28 97       	sbiw	r28, 0x08	; 8
    4ca0:	0f b6       	in	r0, 0x3f	; 63
    4ca2:	f8 94       	cli
    4ca4:	de bf       	out	0x3e, r29	; 62
    4ca6:	0f be       	out	0x3f, r0	; 63
    4ca8:	cd bf       	out	0x3d, r28	; 61
    4caa:	9a 83       	std	Y+2, r25	; 0x02
    4cac:	89 83       	std	Y+1, r24	; 0x01

    SET_BIT(UCSRC,UCSRC_URSEL);
    4cae:	a0 e4       	ldi	r26, 0x40	; 64
    4cb0:	b0 e0       	ldi	r27, 0x00	; 0
    4cb2:	e0 e4       	ldi	r30, 0x40	; 64
    4cb4:	f0 e0       	ldi	r31, 0x00	; 0
    4cb6:	80 81       	ld	r24, Z
    4cb8:	80 68       	ori	r24, 0x80	; 128
    4cba:	8c 93       	st	X, r24
    CLR_BIT(UCSRC,UCSRC_UMSEL);
    4cbc:	a0 e4       	ldi	r26, 0x40	; 64
    4cbe:	b0 e0       	ldi	r27, 0x00	; 0
    4cc0:	e0 e4       	ldi	r30, 0x40	; 64
    4cc2:	f0 e0       	ldi	r31, 0x00	; 0
    4cc4:	80 81       	ld	r24, Z
    4cc6:	8f 7b       	andi	r24, 0xBF	; 191
    4cc8:	8c 93       	st	X, r24

    switch (config->parity)
    4cca:	e9 81       	ldd	r30, Y+1	; 0x01
    4ccc:	fa 81       	ldd	r31, Y+2	; 0x02
    4cce:	80 81       	ld	r24, Z
    4cd0:	28 2f       	mov	r18, r24
    4cd2:	30 e0       	ldi	r19, 0x00	; 0
    4cd4:	38 87       	std	Y+8, r19	; 0x08
    4cd6:	2f 83       	std	Y+7, r18	; 0x07
    4cd8:	8f 81       	ldd	r24, Y+7	; 0x07
    4cda:	98 85       	ldd	r25, Y+8	; 0x08
    4cdc:	81 30       	cpi	r24, 0x01	; 1
    4cde:	91 05       	cpc	r25, r1
    4ce0:	c1 f0       	breq	.+48     	; 0x4d12 <UART_Init+0x7c>
    4ce2:	2f 81       	ldd	r18, Y+7	; 0x07
    4ce4:	38 85       	ldd	r19, Y+8	; 0x08
    4ce6:	22 30       	cpi	r18, 0x02	; 2
    4ce8:	31 05       	cpc	r19, r1
    4cea:	11 f1       	breq	.+68     	; 0x4d30 <UART_Init+0x9a>
    4cec:	8f 81       	ldd	r24, Y+7	; 0x07
    4cee:	98 85       	ldd	r25, Y+8	; 0x08
    4cf0:	00 97       	sbiw	r24, 0x00	; 0
    4cf2:	61 f5       	brne	.+88     	; 0x4d4c <UART_Init+0xb6>
    {
        case DISABLE_PRITY:
            CLR_BIT(UCSRC,UCSRC_UPM0);
    4cf4:	a0 e4       	ldi	r26, 0x40	; 64
    4cf6:	b0 e0       	ldi	r27, 0x00	; 0
    4cf8:	e0 e4       	ldi	r30, 0x40	; 64
    4cfa:	f0 e0       	ldi	r31, 0x00	; 0
    4cfc:	80 81       	ld	r24, Z
    4cfe:	8f 7e       	andi	r24, 0xEF	; 239
    4d00:	8c 93       	st	X, r24
            CLR_BIT(UCSRC,UCSRC_UPM1);
    4d02:	a0 e4       	ldi	r26, 0x40	; 64
    4d04:	b0 e0       	ldi	r27, 0x00	; 0
    4d06:	e0 e4       	ldi	r30, 0x40	; 64
    4d08:	f0 e0       	ldi	r31, 0x00	; 0
    4d0a:	80 81       	ld	r24, Z
    4d0c:	8f 7d       	andi	r24, 0xDF	; 223
    4d0e:	8c 93       	st	X, r24
    4d10:	1d c0       	rjmp	.+58     	; 0x4d4c <UART_Init+0xb6>
            break;
        case ENABLE_EVEN_PARITY:
            CLR_BIT(UCSRC,UCSRC_UPM0);
    4d12:	a0 e4       	ldi	r26, 0x40	; 64
    4d14:	b0 e0       	ldi	r27, 0x00	; 0
    4d16:	e0 e4       	ldi	r30, 0x40	; 64
    4d18:	f0 e0       	ldi	r31, 0x00	; 0
    4d1a:	80 81       	ld	r24, Z
    4d1c:	8f 7e       	andi	r24, 0xEF	; 239
    4d1e:	8c 93       	st	X, r24
            SET_BIT(UCSRC,UCSRC_UPM1);
    4d20:	a0 e4       	ldi	r26, 0x40	; 64
    4d22:	b0 e0       	ldi	r27, 0x00	; 0
    4d24:	e0 e4       	ldi	r30, 0x40	; 64
    4d26:	f0 e0       	ldi	r31, 0x00	; 0
    4d28:	80 81       	ld	r24, Z
    4d2a:	80 62       	ori	r24, 0x20	; 32
    4d2c:	8c 93       	st	X, r24
    4d2e:	0e c0       	rjmp	.+28     	; 0x4d4c <UART_Init+0xb6>
            break;
        case ENABLE_ODD_PARITY:
            SET_BIT(UCSRC,UCSRC_UPM0);
    4d30:	a0 e4       	ldi	r26, 0x40	; 64
    4d32:	b0 e0       	ldi	r27, 0x00	; 0
    4d34:	e0 e4       	ldi	r30, 0x40	; 64
    4d36:	f0 e0       	ldi	r31, 0x00	; 0
    4d38:	80 81       	ld	r24, Z
    4d3a:	80 61       	ori	r24, 0x10	; 16
    4d3c:	8c 93       	st	X, r24
            SET_BIT(UCSRC,UCSRC_UPM1);
    4d3e:	a0 e4       	ldi	r26, 0x40	; 64
    4d40:	b0 e0       	ldi	r27, 0x00	; 0
    4d42:	e0 e4       	ldi	r30, 0x40	; 64
    4d44:	f0 e0       	ldi	r31, 0x00	; 0
    4d46:	80 81       	ld	r24, Z
    4d48:	80 62       	ori	r24, 0x20	; 32
    4d4a:	8c 93       	st	X, r24
            break;
        default:
            break;
    }

    switch (config->stop_bit)
    4d4c:	e9 81       	ldd	r30, Y+1	; 0x01
    4d4e:	fa 81       	ldd	r31, Y+2	; 0x02
    4d50:	81 81       	ldd	r24, Z+1	; 0x01
    4d52:	28 2f       	mov	r18, r24
    4d54:	30 e0       	ldi	r19, 0x00	; 0
    4d56:	3e 83       	std	Y+6, r19	; 0x06
    4d58:	2d 83       	std	Y+5, r18	; 0x05
    4d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    4d5e:	00 97       	sbiw	r24, 0x00	; 0
    4d60:	31 f0       	breq	.+12     	; 0x4d6e <UART_Init+0xd8>
    4d62:	2d 81       	ldd	r18, Y+5	; 0x05
    4d64:	3e 81       	ldd	r19, Y+6	; 0x06
    4d66:	21 30       	cpi	r18, 0x01	; 1
    4d68:	31 05       	cpc	r19, r1
    4d6a:	49 f0       	breq	.+18     	; 0x4d7e <UART_Init+0xe8>
    4d6c:	0f c0       	rjmp	.+30     	; 0x4d8c <UART_Init+0xf6>
    {
        case ONE_STOP_BIT:
            CLR_BIT(UCSRC,UCSRC_USBS);
    4d6e:	a0 e4       	ldi	r26, 0x40	; 64
    4d70:	b0 e0       	ldi	r27, 0x00	; 0
    4d72:	e0 e4       	ldi	r30, 0x40	; 64
    4d74:	f0 e0       	ldi	r31, 0x00	; 0
    4d76:	80 81       	ld	r24, Z
    4d78:	87 7f       	andi	r24, 0xF7	; 247
    4d7a:	8c 93       	st	X, r24
    4d7c:	07 c0       	rjmp	.+14     	; 0x4d8c <UART_Init+0xf6>
            break;
        case TWO_STOP_BIT:
            SET_BIT(UCSRC,UCSRC_USBS);
    4d7e:	a0 e4       	ldi	r26, 0x40	; 64
    4d80:	b0 e0       	ldi	r27, 0x00	; 0
    4d82:	e0 e4       	ldi	r30, 0x40	; 64
    4d84:	f0 e0       	ldi	r31, 0x00	; 0
    4d86:	80 81       	ld	r24, Z
    4d88:	88 60       	ori	r24, 0x08	; 8
    4d8a:	8c 93       	st	X, r24
            break;
        default:
            break;
    }

    switch (config->char_size)
    4d8c:	e9 81       	ldd	r30, Y+1	; 0x01
    4d8e:	fa 81       	ldd	r31, Y+2	; 0x02
    4d90:	82 81       	ldd	r24, Z+2	; 0x02
    4d92:	28 2f       	mov	r18, r24
    4d94:	30 e0       	ldi	r19, 0x00	; 0
    4d96:	3c 83       	std	Y+4, r19	; 0x04
    4d98:	2b 83       	std	Y+3, r18	; 0x03
    4d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    4d9e:	82 30       	cpi	r24, 0x02	; 2
    4da0:	91 05       	cpc	r25, r1
    4da2:	09 f4       	brne	.+2      	; 0x4da6 <UART_Init+0x110>
    4da4:	48 c0       	rjmp	.+144    	; 0x4e36 <UART_Init+0x1a0>
    4da6:	2b 81       	ldd	r18, Y+3	; 0x03
    4da8:	3c 81       	ldd	r19, Y+4	; 0x04
    4daa:	23 30       	cpi	r18, 0x03	; 3
    4dac:	31 05       	cpc	r19, r1
    4dae:	54 f4       	brge	.+20     	; 0x4dc4 <UART_Init+0x12e>
    4db0:	8b 81       	ldd	r24, Y+3	; 0x03
    4db2:	9c 81       	ldd	r25, Y+4	; 0x04
    4db4:	00 97       	sbiw	r24, 0x00	; 0
    4db6:	99 f0       	breq	.+38     	; 0x4dde <UART_Init+0x148>
    4db8:	2b 81       	ldd	r18, Y+3	; 0x03
    4dba:	3c 81       	ldd	r19, Y+4	; 0x04
    4dbc:	21 30       	cpi	r18, 0x01	; 1
    4dbe:	31 05       	cpc	r19, r1
    4dc0:	21 f1       	breq	.+72     	; 0x4e0a <UART_Init+0x174>
    4dc2:	7a c0       	rjmp	.+244    	; 0x4eb8 <UART_Init+0x222>
    4dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    4dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    4dc8:	83 30       	cpi	r24, 0x03	; 3
    4dca:	91 05       	cpc	r25, r1
    4dcc:	09 f4       	brne	.+2      	; 0x4dd0 <UART_Init+0x13a>
    4dce:	49 c0       	rjmp	.+146    	; 0x4e62 <UART_Init+0x1cc>
    4dd0:	2b 81       	ldd	r18, Y+3	; 0x03
    4dd2:	3c 81       	ldd	r19, Y+4	; 0x04
    4dd4:	24 30       	cpi	r18, 0x04	; 4
    4dd6:	31 05       	cpc	r19, r1
    4dd8:	09 f4       	brne	.+2      	; 0x4ddc <UART_Init+0x146>
    4dda:	59 c0       	rjmp	.+178    	; 0x4e8e <UART_Init+0x1f8>
    4ddc:	6d c0       	rjmp	.+218    	; 0x4eb8 <UART_Init+0x222>
    {
        case CHARACTER_SIZE_5_BIT:
            CLR_BIT(UCSRC,UCSRC_UCSZ0);
    4dde:	a0 e4       	ldi	r26, 0x40	; 64
    4de0:	b0 e0       	ldi	r27, 0x00	; 0
    4de2:	e0 e4       	ldi	r30, 0x40	; 64
    4de4:	f0 e0       	ldi	r31, 0x00	; 0
    4de6:	80 81       	ld	r24, Z
    4de8:	8d 7f       	andi	r24, 0xFD	; 253
    4dea:	8c 93       	st	X, r24
            CLR_BIT(UCSRC,UCSRC_UCSZ1);
    4dec:	a0 e4       	ldi	r26, 0x40	; 64
    4dee:	b0 e0       	ldi	r27, 0x00	; 0
    4df0:	e0 e4       	ldi	r30, 0x40	; 64
    4df2:	f0 e0       	ldi	r31, 0x00	; 0
    4df4:	80 81       	ld	r24, Z
    4df6:	8b 7f       	andi	r24, 0xFB	; 251
    4df8:	8c 93       	st	X, r24
            CLR_BIT(UCSRB,UCSRB_UCSZ2);
    4dfa:	aa e2       	ldi	r26, 0x2A	; 42
    4dfc:	b0 e0       	ldi	r27, 0x00	; 0
    4dfe:	ea e2       	ldi	r30, 0x2A	; 42
    4e00:	f0 e0       	ldi	r31, 0x00	; 0
    4e02:	80 81       	ld	r24, Z
    4e04:	8b 7f       	andi	r24, 0xFB	; 251
    4e06:	8c 93       	st	X, r24
    4e08:	57 c0       	rjmp	.+174    	; 0x4eb8 <UART_Init+0x222>
            break;
        case CHARACTER_SIZE_6_BIT:
            SET_BIT(UCSRC,UCSRC_UCSZ0);
    4e0a:	a0 e4       	ldi	r26, 0x40	; 64
    4e0c:	b0 e0       	ldi	r27, 0x00	; 0
    4e0e:	e0 e4       	ldi	r30, 0x40	; 64
    4e10:	f0 e0       	ldi	r31, 0x00	; 0
    4e12:	80 81       	ld	r24, Z
    4e14:	82 60       	ori	r24, 0x02	; 2
    4e16:	8c 93       	st	X, r24
            CLR_BIT(UCSRC,UCSRC_UCSZ1);
    4e18:	a0 e4       	ldi	r26, 0x40	; 64
    4e1a:	b0 e0       	ldi	r27, 0x00	; 0
    4e1c:	e0 e4       	ldi	r30, 0x40	; 64
    4e1e:	f0 e0       	ldi	r31, 0x00	; 0
    4e20:	80 81       	ld	r24, Z
    4e22:	8b 7f       	andi	r24, 0xFB	; 251
    4e24:	8c 93       	st	X, r24
            CLR_BIT(UCSRB,UCSRB_UCSZ2);
    4e26:	aa e2       	ldi	r26, 0x2A	; 42
    4e28:	b0 e0       	ldi	r27, 0x00	; 0
    4e2a:	ea e2       	ldi	r30, 0x2A	; 42
    4e2c:	f0 e0       	ldi	r31, 0x00	; 0
    4e2e:	80 81       	ld	r24, Z
    4e30:	8b 7f       	andi	r24, 0xFB	; 251
    4e32:	8c 93       	st	X, r24
    4e34:	41 c0       	rjmp	.+130    	; 0x4eb8 <UART_Init+0x222>
            break;
        case CHARACTER_SIZE_7_BIT:
            CLR_BIT(UCSRC,UCSRC_UCSZ0);
    4e36:	a0 e4       	ldi	r26, 0x40	; 64
    4e38:	b0 e0       	ldi	r27, 0x00	; 0
    4e3a:	e0 e4       	ldi	r30, 0x40	; 64
    4e3c:	f0 e0       	ldi	r31, 0x00	; 0
    4e3e:	80 81       	ld	r24, Z
    4e40:	8d 7f       	andi	r24, 0xFD	; 253
    4e42:	8c 93       	st	X, r24
            SET_BIT(UCSRC,UCSRC_UCSZ1);
    4e44:	a0 e4       	ldi	r26, 0x40	; 64
    4e46:	b0 e0       	ldi	r27, 0x00	; 0
    4e48:	e0 e4       	ldi	r30, 0x40	; 64
    4e4a:	f0 e0       	ldi	r31, 0x00	; 0
    4e4c:	80 81       	ld	r24, Z
    4e4e:	84 60       	ori	r24, 0x04	; 4
    4e50:	8c 93       	st	X, r24
            CLR_BIT(UCSRB,UCSRB_UCSZ2);
    4e52:	aa e2       	ldi	r26, 0x2A	; 42
    4e54:	b0 e0       	ldi	r27, 0x00	; 0
    4e56:	ea e2       	ldi	r30, 0x2A	; 42
    4e58:	f0 e0       	ldi	r31, 0x00	; 0
    4e5a:	80 81       	ld	r24, Z
    4e5c:	8b 7f       	andi	r24, 0xFB	; 251
    4e5e:	8c 93       	st	X, r24
    4e60:	2b c0       	rjmp	.+86     	; 0x4eb8 <UART_Init+0x222>
            break;
        case CHARACTER_SIZE_8_BIT:
            SET_BIT(UCSRC,UCSRC_UCSZ0);
    4e62:	a0 e4       	ldi	r26, 0x40	; 64
    4e64:	b0 e0       	ldi	r27, 0x00	; 0
    4e66:	e0 e4       	ldi	r30, 0x40	; 64
    4e68:	f0 e0       	ldi	r31, 0x00	; 0
    4e6a:	80 81       	ld	r24, Z
    4e6c:	82 60       	ori	r24, 0x02	; 2
    4e6e:	8c 93       	st	X, r24
            SET_BIT(UCSRC,UCSRC_UCSZ1);
    4e70:	a0 e4       	ldi	r26, 0x40	; 64
    4e72:	b0 e0       	ldi	r27, 0x00	; 0
    4e74:	e0 e4       	ldi	r30, 0x40	; 64
    4e76:	f0 e0       	ldi	r31, 0x00	; 0
    4e78:	80 81       	ld	r24, Z
    4e7a:	84 60       	ori	r24, 0x04	; 4
    4e7c:	8c 93       	st	X, r24
            CLR_BIT(UCSRB,UCSRB_UCSZ2);
    4e7e:	aa e2       	ldi	r26, 0x2A	; 42
    4e80:	b0 e0       	ldi	r27, 0x00	; 0
    4e82:	ea e2       	ldi	r30, 0x2A	; 42
    4e84:	f0 e0       	ldi	r31, 0x00	; 0
    4e86:	80 81       	ld	r24, Z
    4e88:	8b 7f       	andi	r24, 0xFB	; 251
    4e8a:	8c 93       	st	X, r24
    4e8c:	15 c0       	rjmp	.+42     	; 0x4eb8 <UART_Init+0x222>
            break;
        case CHARACTER_SIZE_9_BIT:
            SET_BIT(UCSRC,UCSRC_UCSZ0);
    4e8e:	a0 e4       	ldi	r26, 0x40	; 64
    4e90:	b0 e0       	ldi	r27, 0x00	; 0
    4e92:	e0 e4       	ldi	r30, 0x40	; 64
    4e94:	f0 e0       	ldi	r31, 0x00	; 0
    4e96:	80 81       	ld	r24, Z
    4e98:	82 60       	ori	r24, 0x02	; 2
    4e9a:	8c 93       	st	X, r24
            SET_BIT(UCSRC,UCSRC_UCSZ1);
    4e9c:	a0 e4       	ldi	r26, 0x40	; 64
    4e9e:	b0 e0       	ldi	r27, 0x00	; 0
    4ea0:	e0 e4       	ldi	r30, 0x40	; 64
    4ea2:	f0 e0       	ldi	r31, 0x00	; 0
    4ea4:	80 81       	ld	r24, Z
    4ea6:	84 60       	ori	r24, 0x04	; 4
    4ea8:	8c 93       	st	X, r24
            SET_BIT(UCSRB,UCSRB_UCSZ2);
    4eaa:	aa e2       	ldi	r26, 0x2A	; 42
    4eac:	b0 e0       	ldi	r27, 0x00	; 0
    4eae:	ea e2       	ldi	r30, 0x2A	; 42
    4eb0:	f0 e0       	ldi	r31, 0x00	; 0
    4eb2:	80 81       	ld	r24, Z
    4eb4:	84 60       	ori	r24, 0x04	; 4
    4eb6:	8c 93       	st	X, r24
            break;
        default:
            break;
    }

    UBRRL=103;
    4eb8:	e9 e2       	ldi	r30, 0x29	; 41
    4eba:	f0 e0       	ldi	r31, 0x00	; 0
    4ebc:	87 e6       	ldi	r24, 0x67	; 103
    4ebe:	80 83       	st	Z, r24
    SET_BIT(UCSRB,UCSRB_RXEN);
    4ec0:	aa e2       	ldi	r26, 0x2A	; 42
    4ec2:	b0 e0       	ldi	r27, 0x00	; 0
    4ec4:	ea e2       	ldi	r30, 0x2A	; 42
    4ec6:	f0 e0       	ldi	r31, 0x00	; 0
    4ec8:	80 81       	ld	r24, Z
    4eca:	80 61       	ori	r24, 0x10	; 16
    4ecc:	8c 93       	st	X, r24
    SET_BIT(UCSRB,UCSRB_TXEN);
    4ece:	aa e2       	ldi	r26, 0x2A	; 42
    4ed0:	b0 e0       	ldi	r27, 0x00	; 0
    4ed2:	ea e2       	ldi	r30, 0x2A	; 42
    4ed4:	f0 e0       	ldi	r31, 0x00	; 0
    4ed6:	80 81       	ld	r24, Z
    4ed8:	88 60       	ori	r24, 0x08	; 8
    4eda:	8c 93       	st	X, r24
}
    4edc:	28 96       	adiw	r28, 0x08	; 8
    4ede:	0f b6       	in	r0, 0x3f	; 63
    4ee0:	f8 94       	cli
    4ee2:	de bf       	out	0x3e, r29	; 62
    4ee4:	0f be       	out	0x3f, r0	; 63
    4ee6:	cd bf       	out	0x3d, r28	; 61
    4ee8:	cf 91       	pop	r28
    4eea:	df 91       	pop	r29
    4eec:	08 95       	ret

00004eee <UART_Send_Data>:

void UART_Send_Data (u8 data) {
    4eee:	df 93       	push	r29
    4ef0:	cf 93       	push	r28
    4ef2:	0f 92       	push	r0
    4ef4:	cd b7       	in	r28, 0x3d	; 61
    4ef6:	de b7       	in	r29, 0x3e	; 62
    4ef8:	89 83       	std	Y+1, r24	; 0x01
    UDR=data;
    4efa:	ec e2       	ldi	r30, 0x2C	; 44
    4efc:	f0 e0       	ldi	r31, 0x00	; 0
    4efe:	89 81       	ldd	r24, Y+1	; 0x01
    4f00:	80 83       	st	Z, r24
    while (GET_BIT(UCSRA,UCSRA_TXC) == 0);
    4f02:	eb e2       	ldi	r30, 0x2B	; 43
    4f04:	f0 e0       	ldi	r31, 0x00	; 0
    4f06:	80 81       	ld	r24, Z
    4f08:	82 95       	swap	r24
    4f0a:	86 95       	lsr	r24
    4f0c:	86 95       	lsr	r24
    4f0e:	83 70       	andi	r24, 0x03	; 3
    4f10:	88 2f       	mov	r24, r24
    4f12:	90 e0       	ldi	r25, 0x00	; 0
    4f14:	81 70       	andi	r24, 0x01	; 1
    4f16:	90 70       	andi	r25, 0x00	; 0
    4f18:	00 97       	sbiw	r24, 0x00	; 0
    4f1a:	99 f3       	breq	.-26     	; 0x4f02 <UART_Send_Data+0x14>
}
    4f1c:	0f 90       	pop	r0
    4f1e:	cf 91       	pop	r28
    4f20:	df 91       	pop	r29
    4f22:	08 95       	ret

00004f24 <UART_Recieve_Data>:

u8 UART_Recieve_Data (void) {
    4f24:	df 93       	push	r29
    4f26:	cf 93       	push	r28
    4f28:	cd b7       	in	r28, 0x3d	; 61
    4f2a:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(UCSRA,UCSRA_RXC) == 0);
    4f2c:	eb e2       	ldi	r30, 0x2B	; 43
    4f2e:	f0 e0       	ldi	r31, 0x00	; 0
    4f30:	80 81       	ld	r24, Z
    4f32:	88 23       	and	r24, r24
    4f34:	dc f7       	brge	.-10     	; 0x4f2c <UART_Recieve_Data+0x8>
    return UDR;
    4f36:	ec e2       	ldi	r30, 0x2C	; 44
    4f38:	f0 e0       	ldi	r31, 0x00	; 0
    4f3a:	80 81       	ld	r24, Z
}
    4f3c:	cf 91       	pop	r28
    4f3e:	df 91       	pop	r29
    4f40:	08 95       	ret

00004f42 <WDT_Enable>:
#include "std_types.h"
#include "macros.h"
#include "Registers.h"
#include "WDT.h"

void WDT_Enable (void) {
    4f42:	df 93       	push	r29
    4f44:	cf 93       	push	r28
    4f46:	cd b7       	in	r28, 0x3d	; 61
    4f48:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(WDTCR,3);
    4f4a:	a1 e4       	ldi	r26, 0x41	; 65
    4f4c:	b0 e0       	ldi	r27, 0x00	; 0
    4f4e:	e1 e4       	ldi	r30, 0x41	; 65
    4f50:	f0 e0       	ldi	r31, 0x00	; 0
    4f52:	80 81       	ld	r24, Z
    4f54:	88 60       	ori	r24, 0x08	; 8
    4f56:	8c 93       	st	X, r24
}
    4f58:	cf 91       	pop	r28
    4f5a:	df 91       	pop	r29
    4f5c:	08 95       	ret

00004f5e <WDT_Disable>:
void WDT_Disable (void) {
    4f5e:	df 93       	push	r29
    4f60:	cf 93       	push	r28
    4f62:	cd b7       	in	r28, 0x3d	; 61
    4f64:	de b7       	in	r29, 0x3e	; 62
    WDTCR=0b00011000;
    4f66:	e1 e4       	ldi	r30, 0x41	; 65
    4f68:	f0 e0       	ldi	r31, 0x00	; 0
    4f6a:	88 e1       	ldi	r24, 0x18	; 24
    4f6c:	80 83       	st	Z, r24
    //WDTCR=0;
}
    4f6e:	cf 91       	pop	r28
    4f70:	df 91       	pop	r29
    4f72:	08 95       	ret

00004f74 <WDT_SleepTime>:
void WDT_SleepTime (void) {
    4f74:	df 93       	push	r29
    4f76:	cf 93       	push	r28
    4f78:	cd b7       	in	r28, 0x3d	; 61
    4f7a:	de b7       	in	r29, 0x3e	; 62
    #elif (TIME_OUT == 1000)
    CLR_BIT(WDTCR,0);
    SET_BIT(WDTCR,1);
    SET_BIT(WDTCR,2);
    #elif (TIME_OUT == 2100)
    SET_BIT(WDTCR,0);
    4f7c:	a1 e4       	ldi	r26, 0x41	; 65
    4f7e:	b0 e0       	ldi	r27, 0x00	; 0
    4f80:	e1 e4       	ldi	r30, 0x41	; 65
    4f82:	f0 e0       	ldi	r31, 0x00	; 0
    4f84:	80 81       	ld	r24, Z
    4f86:	81 60       	ori	r24, 0x01	; 1
    4f88:	8c 93       	st	X, r24
    SET_BIT(WDTCR,1);
    4f8a:	a1 e4       	ldi	r26, 0x41	; 65
    4f8c:	b0 e0       	ldi	r27, 0x00	; 0
    4f8e:	e1 e4       	ldi	r30, 0x41	; 65
    4f90:	f0 e0       	ldi	r31, 0x00	; 0
    4f92:	80 81       	ld	r24, Z
    4f94:	82 60       	ori	r24, 0x02	; 2
    4f96:	8c 93       	st	X, r24
    SET_BIT(WDTCR,2);
    4f98:	a1 e4       	ldi	r26, 0x41	; 65
    4f9a:	b0 e0       	ldi	r27, 0x00	; 0
    4f9c:	e1 e4       	ldi	r30, 0x41	; 65
    4f9e:	f0 e0       	ldi	r31, 0x00	; 0
    4fa0:	80 81       	ld	r24, Z
    4fa2:	84 60       	ori	r24, 0x04	; 4
    4fa4:	8c 93       	st	X, r24
    #endif
}
    4fa6:	cf 91       	pop	r28
    4fa8:	df 91       	pop	r29
    4faa:	08 95       	ret

00004fac <main>:

u8 Check_IS_Anumber(Keypad_ButtonType pressed_button);
u8 Check_For_PassWord();

int main(void)
{
    4fac:	df 93       	push	r29
    4fae:	cf 93       	push	r28
    4fb0:	cd b7       	in	r28, 0x3d	; 61
    4fb2:	de b7       	in	r29, 0x3e	; 62
    4fb4:	e9 97       	sbiw	r28, 0x39	; 57
    4fb6:	0f b6       	in	r0, 0x3f	; 63
    4fb8:	f8 94       	cli
    4fba:	de bf       	out	0x3e, r29	; 62
    4fbc:	0f be       	out	0x3f, r0	; 63
    4fbe:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinMode(DIO_PORTC,DIO_PIN0,DIO_OUTPUT);
    4fc0:	82 e0       	ldi	r24, 0x02	; 2
    4fc2:	60 e0       	ldi	r22, 0x00	; 0
    4fc4:	42 e0       	ldi	r20, 0x02	; 2
    4fc6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_SetPinMode>
	DIO_SetPinLevel(DIO_PORTC,DIO_PIN0,DIO_HIGH);
    4fca:	82 e0       	ldi	r24, 0x02	; 2
    4fcc:	60 e0       	ldi	r22, 0x00	; 0
    4fce:	41 e0       	ldi	r20, 0x01	; 1
    4fd0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_SetPinLevel>
	LCD_Init();
    4fd4:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <LCD_Init>
	EEPROM_Init();
    4fd8:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <EEPROM_Init>
	LCD_Clear();
    4fdc:	0e 94 1b 1b 	call	0x3636	; 0x3636 <LCD_Clear>

	// EEPROM_Write_Byte(0b10100000,0b00000000,4);
	Clock_Set_Fajr(04);
    4fe0:	84 e0       	ldi	r24, 0x04	; 4
    4fe2:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <Clock_Set_Fajr>
    4fe6:	80 e0       	ldi	r24, 0x00	; 0
    4fe8:	90 e0       	ldi	r25, 0x00	; 0
    4fea:	aa e7       	ldi	r26, 0x7A	; 122
    4fec:	b4 e4       	ldi	r27, 0x44	; 68
    4fee:	8d ab       	std	Y+53, r24	; 0x35
    4ff0:	9e ab       	std	Y+54, r25	; 0x36
    4ff2:	af ab       	std	Y+55, r26	; 0x37
    4ff4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ff6:	6d a9       	ldd	r22, Y+53	; 0x35
    4ff8:	7e a9       	ldd	r23, Y+54	; 0x36
    4ffa:	8f a9       	ldd	r24, Y+55	; 0x37
    4ffc:	98 ad       	ldd	r25, Y+56	; 0x38
    4ffe:	20 e0       	ldi	r18, 0x00	; 0
    5000:	30 e0       	ldi	r19, 0x00	; 0
    5002:	4a ef       	ldi	r20, 0xFA	; 250
    5004:	54 e4       	ldi	r21, 0x44	; 68
    5006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    500a:	dc 01       	movw	r26, r24
    500c:	cb 01       	movw	r24, r22
    500e:	89 ab       	std	Y+49, r24	; 0x31
    5010:	9a ab       	std	Y+50, r25	; 0x32
    5012:	ab ab       	std	Y+51, r26	; 0x33
    5014:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5016:	69 a9       	ldd	r22, Y+49	; 0x31
    5018:	7a a9       	ldd	r23, Y+50	; 0x32
    501a:	8b a9       	ldd	r24, Y+51	; 0x33
    501c:	9c a9       	ldd	r25, Y+52	; 0x34
    501e:	20 e0       	ldi	r18, 0x00	; 0
    5020:	30 e0       	ldi	r19, 0x00	; 0
    5022:	40 e8       	ldi	r20, 0x80	; 128
    5024:	5f e3       	ldi	r21, 0x3F	; 63
    5026:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    502a:	88 23       	and	r24, r24
    502c:	2c f4       	brge	.+10     	; 0x5038 <main+0x8c>
		__ticks = 1;
    502e:	81 e0       	ldi	r24, 0x01	; 1
    5030:	90 e0       	ldi	r25, 0x00	; 0
    5032:	98 ab       	std	Y+48, r25	; 0x30
    5034:	8f a7       	std	Y+47, r24	; 0x2f
    5036:	3f c0       	rjmp	.+126    	; 0x50b6 <main+0x10a>
	else if (__tmp > 65535)
    5038:	69 a9       	ldd	r22, Y+49	; 0x31
    503a:	7a a9       	ldd	r23, Y+50	; 0x32
    503c:	8b a9       	ldd	r24, Y+51	; 0x33
    503e:	9c a9       	ldd	r25, Y+52	; 0x34
    5040:	20 e0       	ldi	r18, 0x00	; 0
    5042:	3f ef       	ldi	r19, 0xFF	; 255
    5044:	4f e7       	ldi	r20, 0x7F	; 127
    5046:	57 e4       	ldi	r21, 0x47	; 71
    5048:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    504c:	18 16       	cp	r1, r24
    504e:	4c f5       	brge	.+82     	; 0x50a2 <main+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5050:	6d a9       	ldd	r22, Y+53	; 0x35
    5052:	7e a9       	ldd	r23, Y+54	; 0x36
    5054:	8f a9       	ldd	r24, Y+55	; 0x37
    5056:	98 ad       	ldd	r25, Y+56	; 0x38
    5058:	20 e0       	ldi	r18, 0x00	; 0
    505a:	30 e0       	ldi	r19, 0x00	; 0
    505c:	40 e2       	ldi	r20, 0x20	; 32
    505e:	51 e4       	ldi	r21, 0x41	; 65
    5060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5064:	dc 01       	movw	r26, r24
    5066:	cb 01       	movw	r24, r22
    5068:	bc 01       	movw	r22, r24
    506a:	cd 01       	movw	r24, r26
    506c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5070:	dc 01       	movw	r26, r24
    5072:	cb 01       	movw	r24, r22
    5074:	98 ab       	std	Y+48, r25	; 0x30
    5076:	8f a7       	std	Y+47, r24	; 0x2f
    5078:	0f c0       	rjmp	.+30     	; 0x5098 <main+0xec>
    507a:	88 ec       	ldi	r24, 0xC8	; 200
    507c:	90 e0       	ldi	r25, 0x00	; 0
    507e:	9e a7       	std	Y+46, r25	; 0x2e
    5080:	8d a7       	std	Y+45, r24	; 0x2d
    5082:	8d a5       	ldd	r24, Y+45	; 0x2d
    5084:	9e a5       	ldd	r25, Y+46	; 0x2e
    5086:	01 97       	sbiw	r24, 0x01	; 1
    5088:	f1 f7       	brne	.-4      	; 0x5086 <main+0xda>
    508a:	9e a7       	std	Y+46, r25	; 0x2e
    508c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    508e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5090:	98 a9       	ldd	r25, Y+48	; 0x30
    5092:	01 97       	sbiw	r24, 0x01	; 1
    5094:	98 ab       	std	Y+48, r25	; 0x30
    5096:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5098:	8f a5       	ldd	r24, Y+47	; 0x2f
    509a:	98 a9       	ldd	r25, Y+48	; 0x30
    509c:	00 97       	sbiw	r24, 0x00	; 0
    509e:	69 f7       	brne	.-38     	; 0x507a <main+0xce>
    50a0:	14 c0       	rjmp	.+40     	; 0x50ca <main+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50a2:	69 a9       	ldd	r22, Y+49	; 0x31
    50a4:	7a a9       	ldd	r23, Y+50	; 0x32
    50a6:	8b a9       	ldd	r24, Y+51	; 0x33
    50a8:	9c a9       	ldd	r25, Y+52	; 0x34
    50aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50ae:	dc 01       	movw	r26, r24
    50b0:	cb 01       	movw	r24, r22
    50b2:	98 ab       	std	Y+48, r25	; 0x30
    50b4:	8f a7       	std	Y+47, r24	; 0x2f
    50b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    50b8:	98 a9       	ldd	r25, Y+48	; 0x30
    50ba:	9c a7       	std	Y+44, r25	; 0x2c
    50bc:	8b a7       	std	Y+43, r24	; 0x2b
    50be:	8b a5       	ldd	r24, Y+43	; 0x2b
    50c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    50c2:	01 97       	sbiw	r24, 0x01	; 1
    50c4:	f1 f7       	brne	.-4      	; 0x50c2 <main+0x116>
    50c6:	9c a7       	std	Y+44, r25	; 0x2c
    50c8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	Clock_Set_Dhuhr(12);
    50ca:	8c e0       	ldi	r24, 0x0C	; 12
    50cc:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <Clock_Set_Dhuhr>
    50d0:	80 e0       	ldi	r24, 0x00	; 0
    50d2:	90 e0       	ldi	r25, 0x00	; 0
    50d4:	aa e7       	ldi	r26, 0x7A	; 122
    50d6:	b4 e4       	ldi	r27, 0x44	; 68
    50d8:	8f a3       	std	Y+39, r24	; 0x27
    50da:	98 a7       	std	Y+40, r25	; 0x28
    50dc:	a9 a7       	std	Y+41, r26	; 0x29
    50de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50e0:	6f a1       	ldd	r22, Y+39	; 0x27
    50e2:	78 a5       	ldd	r23, Y+40	; 0x28
    50e4:	89 a5       	ldd	r24, Y+41	; 0x29
    50e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    50e8:	20 e0       	ldi	r18, 0x00	; 0
    50ea:	30 e0       	ldi	r19, 0x00	; 0
    50ec:	4a ef       	ldi	r20, 0xFA	; 250
    50ee:	54 e4       	ldi	r21, 0x44	; 68
    50f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50f4:	dc 01       	movw	r26, r24
    50f6:	cb 01       	movw	r24, r22
    50f8:	8b a3       	std	Y+35, r24	; 0x23
    50fa:	9c a3       	std	Y+36, r25	; 0x24
    50fc:	ad a3       	std	Y+37, r26	; 0x25
    50fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5100:	6b a1       	ldd	r22, Y+35	; 0x23
    5102:	7c a1       	ldd	r23, Y+36	; 0x24
    5104:	8d a1       	ldd	r24, Y+37	; 0x25
    5106:	9e a1       	ldd	r25, Y+38	; 0x26
    5108:	20 e0       	ldi	r18, 0x00	; 0
    510a:	30 e0       	ldi	r19, 0x00	; 0
    510c:	40 e8       	ldi	r20, 0x80	; 128
    510e:	5f e3       	ldi	r21, 0x3F	; 63
    5110:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5114:	88 23       	and	r24, r24
    5116:	2c f4       	brge	.+10     	; 0x5122 <main+0x176>
		__ticks = 1;
    5118:	81 e0       	ldi	r24, 0x01	; 1
    511a:	90 e0       	ldi	r25, 0x00	; 0
    511c:	9a a3       	std	Y+34, r25	; 0x22
    511e:	89 a3       	std	Y+33, r24	; 0x21
    5120:	3f c0       	rjmp	.+126    	; 0x51a0 <main+0x1f4>
	else if (__tmp > 65535)
    5122:	6b a1       	ldd	r22, Y+35	; 0x23
    5124:	7c a1       	ldd	r23, Y+36	; 0x24
    5126:	8d a1       	ldd	r24, Y+37	; 0x25
    5128:	9e a1       	ldd	r25, Y+38	; 0x26
    512a:	20 e0       	ldi	r18, 0x00	; 0
    512c:	3f ef       	ldi	r19, 0xFF	; 255
    512e:	4f e7       	ldi	r20, 0x7F	; 127
    5130:	57 e4       	ldi	r21, 0x47	; 71
    5132:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5136:	18 16       	cp	r1, r24
    5138:	4c f5       	brge	.+82     	; 0x518c <main+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    513a:	6f a1       	ldd	r22, Y+39	; 0x27
    513c:	78 a5       	ldd	r23, Y+40	; 0x28
    513e:	89 a5       	ldd	r24, Y+41	; 0x29
    5140:	9a a5       	ldd	r25, Y+42	; 0x2a
    5142:	20 e0       	ldi	r18, 0x00	; 0
    5144:	30 e0       	ldi	r19, 0x00	; 0
    5146:	40 e2       	ldi	r20, 0x20	; 32
    5148:	51 e4       	ldi	r21, 0x41	; 65
    514a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    514e:	dc 01       	movw	r26, r24
    5150:	cb 01       	movw	r24, r22
    5152:	bc 01       	movw	r22, r24
    5154:	cd 01       	movw	r24, r26
    5156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    515a:	dc 01       	movw	r26, r24
    515c:	cb 01       	movw	r24, r22
    515e:	9a a3       	std	Y+34, r25	; 0x22
    5160:	89 a3       	std	Y+33, r24	; 0x21
    5162:	0f c0       	rjmp	.+30     	; 0x5182 <main+0x1d6>
    5164:	88 ec       	ldi	r24, 0xC8	; 200
    5166:	90 e0       	ldi	r25, 0x00	; 0
    5168:	98 a3       	std	Y+32, r25	; 0x20
    516a:	8f 8f       	std	Y+31, r24	; 0x1f
    516c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    516e:	98 a1       	ldd	r25, Y+32	; 0x20
    5170:	01 97       	sbiw	r24, 0x01	; 1
    5172:	f1 f7       	brne	.-4      	; 0x5170 <main+0x1c4>
    5174:	98 a3       	std	Y+32, r25	; 0x20
    5176:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5178:	89 a1       	ldd	r24, Y+33	; 0x21
    517a:	9a a1       	ldd	r25, Y+34	; 0x22
    517c:	01 97       	sbiw	r24, 0x01	; 1
    517e:	9a a3       	std	Y+34, r25	; 0x22
    5180:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5182:	89 a1       	ldd	r24, Y+33	; 0x21
    5184:	9a a1       	ldd	r25, Y+34	; 0x22
    5186:	00 97       	sbiw	r24, 0x00	; 0
    5188:	69 f7       	brne	.-38     	; 0x5164 <main+0x1b8>
    518a:	14 c0       	rjmp	.+40     	; 0x51b4 <main+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    518c:	6b a1       	ldd	r22, Y+35	; 0x23
    518e:	7c a1       	ldd	r23, Y+36	; 0x24
    5190:	8d a1       	ldd	r24, Y+37	; 0x25
    5192:	9e a1       	ldd	r25, Y+38	; 0x26
    5194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5198:	dc 01       	movw	r26, r24
    519a:	cb 01       	movw	r24, r22
    519c:	9a a3       	std	Y+34, r25	; 0x22
    519e:	89 a3       	std	Y+33, r24	; 0x21
    51a0:	89 a1       	ldd	r24, Y+33	; 0x21
    51a2:	9a a1       	ldd	r25, Y+34	; 0x22
    51a4:	9e 8f       	std	Y+30, r25	; 0x1e
    51a6:	8d 8f       	std	Y+29, r24	; 0x1d
    51a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    51ac:	01 97       	sbiw	r24, 0x01	; 1
    51ae:	f1 f7       	brne	.-4      	; 0x51ac <main+0x200>
    51b0:	9e 8f       	std	Y+30, r25	; 0x1e
    51b2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	LCD_DisplayString("Fajr is");
    51b4:	8a e6       	ldi	r24, 0x6A	; 106
    51b6:	90 e0       	ldi	r25, 0x00	; 0
    51b8:	0e 94 32 1b 	call	0x3664	; 0x3664 <LCD_DisplayString>
	LCD_DisplayNumber(Clock_Get_Fajr());
    51bc:	0e 94 14 26 	call	0x4c28	; 0x4c28 <Clock_Get_Fajr>
    51c0:	88 2f       	mov	r24, r24
    51c2:	90 e0       	ldi	r25, 0x00	; 0
    51c4:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <LCD_DisplayNumber>
    51c8:	80 e0       	ldi	r24, 0x00	; 0
    51ca:	90 e0       	ldi	r25, 0x00	; 0
    51cc:	aa e7       	ldi	r26, 0x7A	; 122
    51ce:	b4 e4       	ldi	r27, 0x44	; 68
    51d0:	89 8f       	std	Y+25, r24	; 0x19
    51d2:	9a 8f       	std	Y+26, r25	; 0x1a
    51d4:	ab 8f       	std	Y+27, r26	; 0x1b
    51d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51d8:	69 8d       	ldd	r22, Y+25	; 0x19
    51da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51e0:	20 e0       	ldi	r18, 0x00	; 0
    51e2:	30 e0       	ldi	r19, 0x00	; 0
    51e4:	4a ef       	ldi	r20, 0xFA	; 250
    51e6:	54 e4       	ldi	r21, 0x44	; 68
    51e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51ec:	dc 01       	movw	r26, r24
    51ee:	cb 01       	movw	r24, r22
    51f0:	8d 8b       	std	Y+21, r24	; 0x15
    51f2:	9e 8b       	std	Y+22, r25	; 0x16
    51f4:	af 8b       	std	Y+23, r26	; 0x17
    51f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    51f8:	6d 89       	ldd	r22, Y+21	; 0x15
    51fa:	7e 89       	ldd	r23, Y+22	; 0x16
    51fc:	8f 89       	ldd	r24, Y+23	; 0x17
    51fe:	98 8d       	ldd	r25, Y+24	; 0x18
    5200:	20 e0       	ldi	r18, 0x00	; 0
    5202:	30 e0       	ldi	r19, 0x00	; 0
    5204:	40 e8       	ldi	r20, 0x80	; 128
    5206:	5f e3       	ldi	r21, 0x3F	; 63
    5208:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    520c:	88 23       	and	r24, r24
    520e:	2c f4       	brge	.+10     	; 0x521a <main+0x26e>
		__ticks = 1;
    5210:	81 e0       	ldi	r24, 0x01	; 1
    5212:	90 e0       	ldi	r25, 0x00	; 0
    5214:	9c 8b       	std	Y+20, r25	; 0x14
    5216:	8b 8b       	std	Y+19, r24	; 0x13
    5218:	3f c0       	rjmp	.+126    	; 0x5298 <main+0x2ec>
	else if (__tmp > 65535)
    521a:	6d 89       	ldd	r22, Y+21	; 0x15
    521c:	7e 89       	ldd	r23, Y+22	; 0x16
    521e:	8f 89       	ldd	r24, Y+23	; 0x17
    5220:	98 8d       	ldd	r25, Y+24	; 0x18
    5222:	20 e0       	ldi	r18, 0x00	; 0
    5224:	3f ef       	ldi	r19, 0xFF	; 255
    5226:	4f e7       	ldi	r20, 0x7F	; 127
    5228:	57 e4       	ldi	r21, 0x47	; 71
    522a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    522e:	18 16       	cp	r1, r24
    5230:	4c f5       	brge	.+82     	; 0x5284 <main+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5232:	69 8d       	ldd	r22, Y+25	; 0x19
    5234:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5236:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5238:	9c 8d       	ldd	r25, Y+28	; 0x1c
    523a:	20 e0       	ldi	r18, 0x00	; 0
    523c:	30 e0       	ldi	r19, 0x00	; 0
    523e:	40 e2       	ldi	r20, 0x20	; 32
    5240:	51 e4       	ldi	r21, 0x41	; 65
    5242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5246:	dc 01       	movw	r26, r24
    5248:	cb 01       	movw	r24, r22
    524a:	bc 01       	movw	r22, r24
    524c:	cd 01       	movw	r24, r26
    524e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5252:	dc 01       	movw	r26, r24
    5254:	cb 01       	movw	r24, r22
    5256:	9c 8b       	std	Y+20, r25	; 0x14
    5258:	8b 8b       	std	Y+19, r24	; 0x13
    525a:	0f c0       	rjmp	.+30     	; 0x527a <main+0x2ce>
    525c:	88 ec       	ldi	r24, 0xC8	; 200
    525e:	90 e0       	ldi	r25, 0x00	; 0
    5260:	9a 8b       	std	Y+18, r25	; 0x12
    5262:	89 8b       	std	Y+17, r24	; 0x11
    5264:	89 89       	ldd	r24, Y+17	; 0x11
    5266:	9a 89       	ldd	r25, Y+18	; 0x12
    5268:	01 97       	sbiw	r24, 0x01	; 1
    526a:	f1 f7       	brne	.-4      	; 0x5268 <main+0x2bc>
    526c:	9a 8b       	std	Y+18, r25	; 0x12
    526e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5270:	8b 89       	ldd	r24, Y+19	; 0x13
    5272:	9c 89       	ldd	r25, Y+20	; 0x14
    5274:	01 97       	sbiw	r24, 0x01	; 1
    5276:	9c 8b       	std	Y+20, r25	; 0x14
    5278:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    527a:	8b 89       	ldd	r24, Y+19	; 0x13
    527c:	9c 89       	ldd	r25, Y+20	; 0x14
    527e:	00 97       	sbiw	r24, 0x00	; 0
    5280:	69 f7       	brne	.-38     	; 0x525c <main+0x2b0>
    5282:	14 c0       	rjmp	.+40     	; 0x52ac <main+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5284:	6d 89       	ldd	r22, Y+21	; 0x15
    5286:	7e 89       	ldd	r23, Y+22	; 0x16
    5288:	8f 89       	ldd	r24, Y+23	; 0x17
    528a:	98 8d       	ldd	r25, Y+24	; 0x18
    528c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5290:	dc 01       	movw	r26, r24
    5292:	cb 01       	movw	r24, r22
    5294:	9c 8b       	std	Y+20, r25	; 0x14
    5296:	8b 8b       	std	Y+19, r24	; 0x13
    5298:	8b 89       	ldd	r24, Y+19	; 0x13
    529a:	9c 89       	ldd	r25, Y+20	; 0x14
    529c:	98 8b       	std	Y+16, r25	; 0x10
    529e:	8f 87       	std	Y+15, r24	; 0x0f
    52a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    52a2:	98 89       	ldd	r25, Y+16	; 0x10
    52a4:	01 97       	sbiw	r24, 0x01	; 1
    52a6:	f1 f7       	brne	.-4      	; 0x52a4 <main+0x2f8>
    52a8:	98 8b       	std	Y+16, r25	; 0x10
    52aa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	LCD_Clear();
    52ac:	0e 94 1b 1b 	call	0x3636	; 0x3636 <LCD_Clear>
	LCD_DisplayString("dhuhr is");
    52b0:	82 e7       	ldi	r24, 0x72	; 114
    52b2:	90 e0       	ldi	r25, 0x00	; 0
    52b4:	0e 94 32 1b 	call	0x3664	; 0x3664 <LCD_DisplayString>
	LCD_DisplayNumber(Clock_Get_Dhuhr());
    52b8:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <Clock_Get_Dhuhr>
    52bc:	88 2f       	mov	r24, r24
    52be:	90 e0       	ldi	r25, 0x00	; 0
    52c0:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <LCD_DisplayNumber>
    52c4:	80 e0       	ldi	r24, 0x00	; 0
    52c6:	90 e0       	ldi	r25, 0x00	; 0
    52c8:	aa e7       	ldi	r26, 0x7A	; 122
    52ca:	b4 e4       	ldi	r27, 0x44	; 68
    52cc:	8b 87       	std	Y+11, r24	; 0x0b
    52ce:	9c 87       	std	Y+12, r25	; 0x0c
    52d0:	ad 87       	std	Y+13, r26	; 0x0d
    52d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    52d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    52d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    52da:	9e 85       	ldd	r25, Y+14	; 0x0e
    52dc:	20 e0       	ldi	r18, 0x00	; 0
    52de:	30 e0       	ldi	r19, 0x00	; 0
    52e0:	4a ef       	ldi	r20, 0xFA	; 250
    52e2:	54 e4       	ldi	r21, 0x44	; 68
    52e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52e8:	dc 01       	movw	r26, r24
    52ea:	cb 01       	movw	r24, r22
    52ec:	8f 83       	std	Y+7, r24	; 0x07
    52ee:	98 87       	std	Y+8, r25	; 0x08
    52f0:	a9 87       	std	Y+9, r26	; 0x09
    52f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    52f4:	6f 81       	ldd	r22, Y+7	; 0x07
    52f6:	78 85       	ldd	r23, Y+8	; 0x08
    52f8:	89 85       	ldd	r24, Y+9	; 0x09
    52fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    52fc:	20 e0       	ldi	r18, 0x00	; 0
    52fe:	30 e0       	ldi	r19, 0x00	; 0
    5300:	40 e8       	ldi	r20, 0x80	; 128
    5302:	5f e3       	ldi	r21, 0x3F	; 63
    5304:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5308:	88 23       	and	r24, r24
    530a:	2c f4       	brge	.+10     	; 0x5316 <main+0x36a>
		__ticks = 1;
    530c:	81 e0       	ldi	r24, 0x01	; 1
    530e:	90 e0       	ldi	r25, 0x00	; 0
    5310:	9e 83       	std	Y+6, r25	; 0x06
    5312:	8d 83       	std	Y+5, r24	; 0x05
    5314:	3f c0       	rjmp	.+126    	; 0x5394 <main+0x3e8>
	else if (__tmp > 65535)
    5316:	6f 81       	ldd	r22, Y+7	; 0x07
    5318:	78 85       	ldd	r23, Y+8	; 0x08
    531a:	89 85       	ldd	r24, Y+9	; 0x09
    531c:	9a 85       	ldd	r25, Y+10	; 0x0a
    531e:	20 e0       	ldi	r18, 0x00	; 0
    5320:	3f ef       	ldi	r19, 0xFF	; 255
    5322:	4f e7       	ldi	r20, 0x7F	; 127
    5324:	57 e4       	ldi	r21, 0x47	; 71
    5326:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    532a:	18 16       	cp	r1, r24
    532c:	4c f5       	brge	.+82     	; 0x5380 <main+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    532e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5330:	7c 85       	ldd	r23, Y+12	; 0x0c
    5332:	8d 85       	ldd	r24, Y+13	; 0x0d
    5334:	9e 85       	ldd	r25, Y+14	; 0x0e
    5336:	20 e0       	ldi	r18, 0x00	; 0
    5338:	30 e0       	ldi	r19, 0x00	; 0
    533a:	40 e2       	ldi	r20, 0x20	; 32
    533c:	51 e4       	ldi	r21, 0x41	; 65
    533e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5342:	dc 01       	movw	r26, r24
    5344:	cb 01       	movw	r24, r22
    5346:	bc 01       	movw	r22, r24
    5348:	cd 01       	movw	r24, r26
    534a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    534e:	dc 01       	movw	r26, r24
    5350:	cb 01       	movw	r24, r22
    5352:	9e 83       	std	Y+6, r25	; 0x06
    5354:	8d 83       	std	Y+5, r24	; 0x05
    5356:	0f c0       	rjmp	.+30     	; 0x5376 <main+0x3ca>
    5358:	88 ec       	ldi	r24, 0xC8	; 200
    535a:	90 e0       	ldi	r25, 0x00	; 0
    535c:	9c 83       	std	Y+4, r25	; 0x04
    535e:	8b 83       	std	Y+3, r24	; 0x03
    5360:	8b 81       	ldd	r24, Y+3	; 0x03
    5362:	9c 81       	ldd	r25, Y+4	; 0x04
    5364:	01 97       	sbiw	r24, 0x01	; 1
    5366:	f1 f7       	brne	.-4      	; 0x5364 <main+0x3b8>
    5368:	9c 83       	std	Y+4, r25	; 0x04
    536a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    536c:	8d 81       	ldd	r24, Y+5	; 0x05
    536e:	9e 81       	ldd	r25, Y+6	; 0x06
    5370:	01 97       	sbiw	r24, 0x01	; 1
    5372:	9e 83       	std	Y+6, r25	; 0x06
    5374:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5376:	8d 81       	ldd	r24, Y+5	; 0x05
    5378:	9e 81       	ldd	r25, Y+6	; 0x06
    537a:	00 97       	sbiw	r24, 0x00	; 0
    537c:	69 f7       	brne	.-38     	; 0x5358 <main+0x3ac>
    537e:	14 c0       	rjmp	.+40     	; 0x53a8 <main+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5380:	6f 81       	ldd	r22, Y+7	; 0x07
    5382:	78 85       	ldd	r23, Y+8	; 0x08
    5384:	89 85       	ldd	r24, Y+9	; 0x09
    5386:	9a 85       	ldd	r25, Y+10	; 0x0a
    5388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    538c:	dc 01       	movw	r26, r24
    538e:	cb 01       	movw	r24, r22
    5390:	9e 83       	std	Y+6, r25	; 0x06
    5392:	8d 83       	std	Y+5, r24	; 0x05
    5394:	8d 81       	ldd	r24, Y+5	; 0x05
    5396:	9e 81       	ldd	r25, Y+6	; 0x06
    5398:	9a 83       	std	Y+2, r25	; 0x02
    539a:	89 83       	std	Y+1, r24	; 0x01
    539c:	89 81       	ldd	r24, Y+1	; 0x01
    539e:	9a 81       	ldd	r25, Y+2	; 0x02
    53a0:	01 97       	sbiw	r24, 0x01	; 1
    53a2:	f1 f7       	brne	.-4      	; 0x53a0 <main+0x3f4>
    53a4:	9a 83       	std	Y+2, r25	; 0x02
    53a6:	89 83       	std	Y+1, r24	; 0x01
	
	while (1)
	{
		
		/* code */
	LCD_DisplayString("CLOCK::");
    53a8:	8b e7       	ldi	r24, 0x7B	; 123
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	0e 94 32 1b 	call	0x3664	; 0x3664 <LCD_DisplayString>
	Keypad_ButtonType pressed_button ;
    Keypad_Init();
    53b0:	0e 94 c3 18 	call	0x3186	; 0x3186 <Keypad_Init>
	do
		{
			pressed_button = Keypad_GetPressedButton();
    53b4:	0e 94 56 1a 	call	0x34ac	; 0x34ac <Keypad_GetPressedButton>
    53b8:	89 af       	std	Y+57, r24	; 0x39
		} while (pressed_button == KEYPAD_BUTTON_INVALID);
    53ba:	89 ad       	ldd	r24, Y+57	; 0x39
    53bc:	80 31       	cpi	r24, 0x10	; 16
    53be:	d1 f3       	breq	.-12     	; 0x53b4 <main+0x408>
		if(pressed_button == CALCULATOR_BUTTON_CLR)
    53c0:	89 ad       	ldd	r24, Y+57	; 0x39
    53c2:	88 23       	and	r24, r24
    53c4:	89 f7       	brne	.-30     	; 0x53a8 <main+0x3fc>
		{
			Check_For_PassWord();
    53c6:	0e 94 e6 29 	call	0x53cc	; 0x53cc <Check_For_PassWord>
    53ca:	ee cf       	rjmp	.-36     	; 0x53a8 <main+0x3fc>

000053cc <Check_For_PassWord>:
		}
	}
}

u8 Check_For_PassWord(){
    53cc:	df 93       	push	r29
    53ce:	cf 93       	push	r28
    53d0:	cd b7       	in	r28, 0x3d	; 61
    53d2:	de b7       	in	r29, 0x3e	; 62
    53d4:	cd 54       	subi	r28, 0x4D	; 77
    53d6:	d0 40       	sbci	r29, 0x00	; 0
    53d8:	0f b6       	in	r0, 0x3f	; 63
    53da:	f8 94       	cli
    53dc:	de bf       	out	0x3e, r29	; 62
    53de:	0f be       	out	0x3f, r0	; 63
    53e0:	cd bf       	out	0x3d, r28	; 61
	LCD_Clear();
    53e2:	0e 94 1b 1b 	call	0x3636	; 0x3636 <LCD_Clear>
	Keypad_ButtonType pressed_button ;
	u8 arr[20]={0};
    53e6:	84 e1       	ldi	r24, 0x14	; 20
    53e8:	fe 01       	movw	r30, r28
    53ea:	f9 96       	adiw	r30, 0x39	; 57
    53ec:	df 01       	movw	r26, r30
    53ee:	98 2f       	mov	r25, r24
    53f0:	1d 92       	st	X+, r1
    53f2:	9a 95       	dec	r25
    53f4:	e9 f7       	brne	.-6      	; 0x53f0 <Check_For_PassWord+0x24>
	u8 c=0;
    53f6:	1f aa       	std	Y+55, r1	; 0x37
	u8 n =0;
    53f8:	1e aa       	std	Y+54, r1	; 0x36
	while (1)
	{
		do
		{
			pressed_button = Keypad_GetPressedButton();
    53fa:	0e 94 56 1a 	call	0x34ac	; 0x34ac <Keypad_GetPressedButton>
    53fe:	88 af       	std	Y+56, r24	; 0x38
		} while (pressed_button == KEYPAD_BUTTON_INVALID);
    5400:	88 ad       	ldd	r24, Y+56	; 0x38
    5402:	80 31       	cpi	r24, 0x10	; 16
    5404:	d1 f3       	breq	.-12     	; 0x53fa <Check_For_PassWord+0x2e>
		if(pressed_button != KEYPAD_BUTTON_INVALID)
    5406:	88 ad       	ldd	r24, Y+56	; 0x38
    5408:	80 31       	cpi	r24, 0x10	; 16
    540a:	b9 f3       	breq	.-18     	; 0x53fa <Check_For_PassWord+0x2e>
		{
			if(Check_IS_Anumber(pressed_button))
    540c:	88 ad       	ldd	r24, Y+56	; 0x38
    540e:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <Check_IS_Anumber>
    5412:	88 23       	and	r24, r24
    5414:	b9 f0       	breq	.+46     	; 0x5444 <Check_For_PassWord+0x78>
			{
				u8 x=Calculator_GetRealNumber(pressed_button);
    5416:	88 ad       	ldd	r24, Y+56	; 0x38
    5418:	0e 94 6f 07 	call	0xede	; 0xede <Calculator_GetRealNumber>
    541c:	8d ab       	std	Y+53, r24	; 0x35
				LCD_DisplayNumber(x);
    541e:	8d a9       	ldd	r24, Y+53	; 0x35
    5420:	88 2f       	mov	r24, r24
    5422:	90 e0       	ldi	r25, 0x00	; 0
    5424:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <LCD_DisplayNumber>
				arr[c]= x;
    5428:	8f a9       	ldd	r24, Y+55	; 0x37
    542a:	28 2f       	mov	r18, r24
    542c:	30 e0       	ldi	r19, 0x00	; 0
    542e:	ce 01       	movw	r24, r28
    5430:	c9 96       	adiw	r24, 0x39	; 57
    5432:	fc 01       	movw	r30, r24
    5434:	e2 0f       	add	r30, r18
    5436:	f3 1f       	adc	r31, r19
    5438:	8d a9       	ldd	r24, Y+53	; 0x35
    543a:	80 83       	st	Z, r24
				c++;
    543c:	8f a9       	ldd	r24, Y+55	; 0x37
    543e:	8f 5f       	subi	r24, 0xFF	; 255
    5440:	8f ab       	std	Y+55, r24	; 0x37
    5442:	db cf       	rjmp	.-74     	; 0x53fa <Check_For_PassWord+0x2e>
			}
			else if (pressed_button == CALCULATOR_BUTTON_EQUAL) {
    5444:	88 ad       	ldd	r24, Y+56	; 0x38
    5446:	82 30       	cpi	r24, 0x02	; 2
    5448:	c1 f6       	brne	.-80     	; 0x53fa <Check_For_PassWord+0x2e>
				if(1 && n < 5) // will check on the password
    544a:	8e a9       	ldd	r24, Y+54	; 0x36
    544c:	85 30       	cpi	r24, 0x05	; 5
    544e:	08 f0       	brcs	.+2      	; 0x5452 <Check_For_PassWord+0x86>
    5450:	ff c0       	rjmp	.+510    	; 0x5650 <Check_For_PassWord+0x284>
				{
					LCD_Clear();
    5452:	0e 94 1b 1b 	call	0x3636	; 0x3636 <LCD_Clear>
					u8 *chr= "Correct Password";
    5456:	83 e8       	ldi	r24, 0x83	; 131
    5458:	90 e0       	ldi	r25, 0x00	; 0
    545a:	9c ab       	std	Y+52, r25	; 0x34
    545c:	8b ab       	std	Y+51, r24	; 0x33
					LCD_DisplayString(chr);
    545e:	8b a9       	ldd	r24, Y+51	; 0x33
    5460:	9c a9       	ldd	r25, Y+52	; 0x34
    5462:	0e 94 32 1b 	call	0x3664	; 0x3664 <LCD_DisplayString>
    5466:	80 e0       	ldi	r24, 0x00	; 0
    5468:	90 e0       	ldi	r25, 0x00	; 0
    546a:	aa ef       	ldi	r26, 0xFA	; 250
    546c:	b3 e4       	ldi	r27, 0x43	; 67
    546e:	8f a3       	std	Y+39, r24	; 0x27
    5470:	98 a7       	std	Y+40, r25	; 0x28
    5472:	a9 a7       	std	Y+41, r26	; 0x29
    5474:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5476:	6f a1       	ldd	r22, Y+39	; 0x27
    5478:	78 a5       	ldd	r23, Y+40	; 0x28
    547a:	89 a5       	ldd	r24, Y+41	; 0x29
    547c:	9a a5       	ldd	r25, Y+42	; 0x2a
    547e:	20 e0       	ldi	r18, 0x00	; 0
    5480:	30 e0       	ldi	r19, 0x00	; 0
    5482:	4a ef       	ldi	r20, 0xFA	; 250
    5484:	54 e4       	ldi	r21, 0x44	; 68
    5486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    548a:	dc 01       	movw	r26, r24
    548c:	cb 01       	movw	r24, r22
    548e:	8b a3       	std	Y+35, r24	; 0x23
    5490:	9c a3       	std	Y+36, r25	; 0x24
    5492:	ad a3       	std	Y+37, r26	; 0x25
    5494:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5496:	6b a1       	ldd	r22, Y+35	; 0x23
    5498:	7c a1       	ldd	r23, Y+36	; 0x24
    549a:	8d a1       	ldd	r24, Y+37	; 0x25
    549c:	9e a1       	ldd	r25, Y+38	; 0x26
    549e:	20 e0       	ldi	r18, 0x00	; 0
    54a0:	30 e0       	ldi	r19, 0x00	; 0
    54a2:	40 e8       	ldi	r20, 0x80	; 128
    54a4:	5f e3       	ldi	r21, 0x3F	; 63
    54a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    54aa:	88 23       	and	r24, r24
    54ac:	2c f4       	brge	.+10     	; 0x54b8 <Check_For_PassWord+0xec>
		__ticks = 1;
    54ae:	81 e0       	ldi	r24, 0x01	; 1
    54b0:	90 e0       	ldi	r25, 0x00	; 0
    54b2:	9a a3       	std	Y+34, r25	; 0x22
    54b4:	89 a3       	std	Y+33, r24	; 0x21
    54b6:	3f c0       	rjmp	.+126    	; 0x5536 <Check_For_PassWord+0x16a>
	else if (__tmp > 65535)
    54b8:	6b a1       	ldd	r22, Y+35	; 0x23
    54ba:	7c a1       	ldd	r23, Y+36	; 0x24
    54bc:	8d a1       	ldd	r24, Y+37	; 0x25
    54be:	9e a1       	ldd	r25, Y+38	; 0x26
    54c0:	20 e0       	ldi	r18, 0x00	; 0
    54c2:	3f ef       	ldi	r19, 0xFF	; 255
    54c4:	4f e7       	ldi	r20, 0x7F	; 127
    54c6:	57 e4       	ldi	r21, 0x47	; 71
    54c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    54cc:	18 16       	cp	r1, r24
    54ce:	4c f5       	brge	.+82     	; 0x5522 <Check_For_PassWord+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54d0:	6f a1       	ldd	r22, Y+39	; 0x27
    54d2:	78 a5       	ldd	r23, Y+40	; 0x28
    54d4:	89 a5       	ldd	r24, Y+41	; 0x29
    54d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    54d8:	20 e0       	ldi	r18, 0x00	; 0
    54da:	30 e0       	ldi	r19, 0x00	; 0
    54dc:	40 e2       	ldi	r20, 0x20	; 32
    54de:	51 e4       	ldi	r21, 0x41	; 65
    54e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54e4:	dc 01       	movw	r26, r24
    54e6:	cb 01       	movw	r24, r22
    54e8:	bc 01       	movw	r22, r24
    54ea:	cd 01       	movw	r24, r26
    54ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54f0:	dc 01       	movw	r26, r24
    54f2:	cb 01       	movw	r24, r22
    54f4:	9a a3       	std	Y+34, r25	; 0x22
    54f6:	89 a3       	std	Y+33, r24	; 0x21
    54f8:	0f c0       	rjmp	.+30     	; 0x5518 <Check_For_PassWord+0x14c>
    54fa:	88 ec       	ldi	r24, 0xC8	; 200
    54fc:	90 e0       	ldi	r25, 0x00	; 0
    54fe:	98 a3       	std	Y+32, r25	; 0x20
    5500:	8f 8f       	std	Y+31, r24	; 0x1f
    5502:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5504:	98 a1       	ldd	r25, Y+32	; 0x20
    5506:	01 97       	sbiw	r24, 0x01	; 1
    5508:	f1 f7       	brne	.-4      	; 0x5506 <Check_For_PassWord+0x13a>
    550a:	98 a3       	std	Y+32, r25	; 0x20
    550c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    550e:	89 a1       	ldd	r24, Y+33	; 0x21
    5510:	9a a1       	ldd	r25, Y+34	; 0x22
    5512:	01 97       	sbiw	r24, 0x01	; 1
    5514:	9a a3       	std	Y+34, r25	; 0x22
    5516:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5518:	89 a1       	ldd	r24, Y+33	; 0x21
    551a:	9a a1       	ldd	r25, Y+34	; 0x22
    551c:	00 97       	sbiw	r24, 0x00	; 0
    551e:	69 f7       	brne	.-38     	; 0x54fa <Check_For_PassWord+0x12e>
    5520:	14 c0       	rjmp	.+40     	; 0x554a <Check_For_PassWord+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5522:	6b a1       	ldd	r22, Y+35	; 0x23
    5524:	7c a1       	ldd	r23, Y+36	; 0x24
    5526:	8d a1       	ldd	r24, Y+37	; 0x25
    5528:	9e a1       	ldd	r25, Y+38	; 0x26
    552a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    552e:	dc 01       	movw	r26, r24
    5530:	cb 01       	movw	r24, r22
    5532:	9a a3       	std	Y+34, r25	; 0x22
    5534:	89 a3       	std	Y+33, r24	; 0x21
    5536:	89 a1       	ldd	r24, Y+33	; 0x21
    5538:	9a a1       	ldd	r25, Y+34	; 0x22
    553a:	9e 8f       	std	Y+30, r25	; 0x1e
    553c:	8d 8f       	std	Y+29, r24	; 0x1d
    553e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5540:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5542:	01 97       	sbiw	r24, 0x01	; 1
    5544:	f1 f7       	brne	.-4      	; 0x5542 <Check_For_PassWord+0x176>
    5546:	9e 8f       	std	Y+30, r25	; 0x1e
    5548:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(500);
					LCD_Clear();
    554a:	0e 94 1b 1b 	call	0x3636	; 0x3636 <LCD_Clear>
					u8 *chr2= " Welcome ";
    554e:	84 e9       	ldi	r24, 0x94	; 148
    5550:	90 e0       	ldi	r25, 0x00	; 0
    5552:	9a ab       	std	Y+50, r25	; 0x32
    5554:	89 ab       	std	Y+49, r24	; 0x31
					LCD_DisplayString(chr2);
    5556:	89 a9       	ldd	r24, Y+49	; 0x31
    5558:	9a a9       	ldd	r25, Y+50	; 0x32
    555a:	0e 94 32 1b 	call	0x3664	; 0x3664 <LCD_DisplayString>
    555e:	80 e0       	ldi	r24, 0x00	; 0
    5560:	90 e0       	ldi	r25, 0x00	; 0
    5562:	aa ef       	ldi	r26, 0xFA	; 250
    5564:	b3 e4       	ldi	r27, 0x43	; 67
    5566:	89 8f       	std	Y+25, r24	; 0x19
    5568:	9a 8f       	std	Y+26, r25	; 0x1a
    556a:	ab 8f       	std	Y+27, r26	; 0x1b
    556c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    556e:	69 8d       	ldd	r22, Y+25	; 0x19
    5570:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5572:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5574:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5576:	20 e0       	ldi	r18, 0x00	; 0
    5578:	30 e0       	ldi	r19, 0x00	; 0
    557a:	4a ef       	ldi	r20, 0xFA	; 250
    557c:	54 e4       	ldi	r21, 0x44	; 68
    557e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5582:	dc 01       	movw	r26, r24
    5584:	cb 01       	movw	r24, r22
    5586:	8d 8b       	std	Y+21, r24	; 0x15
    5588:	9e 8b       	std	Y+22, r25	; 0x16
    558a:	af 8b       	std	Y+23, r26	; 0x17
    558c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    558e:	6d 89       	ldd	r22, Y+21	; 0x15
    5590:	7e 89       	ldd	r23, Y+22	; 0x16
    5592:	8f 89       	ldd	r24, Y+23	; 0x17
    5594:	98 8d       	ldd	r25, Y+24	; 0x18
    5596:	20 e0       	ldi	r18, 0x00	; 0
    5598:	30 e0       	ldi	r19, 0x00	; 0
    559a:	40 e8       	ldi	r20, 0x80	; 128
    559c:	5f e3       	ldi	r21, 0x3F	; 63
    559e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    55a2:	88 23       	and	r24, r24
    55a4:	2c f4       	brge	.+10     	; 0x55b0 <Check_For_PassWord+0x1e4>
		__ticks = 1;
    55a6:	81 e0       	ldi	r24, 0x01	; 1
    55a8:	90 e0       	ldi	r25, 0x00	; 0
    55aa:	9c 8b       	std	Y+20, r25	; 0x14
    55ac:	8b 8b       	std	Y+19, r24	; 0x13
    55ae:	3f c0       	rjmp	.+126    	; 0x562e <Check_For_PassWord+0x262>
	else if (__tmp > 65535)
    55b0:	6d 89       	ldd	r22, Y+21	; 0x15
    55b2:	7e 89       	ldd	r23, Y+22	; 0x16
    55b4:	8f 89       	ldd	r24, Y+23	; 0x17
    55b6:	98 8d       	ldd	r25, Y+24	; 0x18
    55b8:	20 e0       	ldi	r18, 0x00	; 0
    55ba:	3f ef       	ldi	r19, 0xFF	; 255
    55bc:	4f e7       	ldi	r20, 0x7F	; 127
    55be:	57 e4       	ldi	r21, 0x47	; 71
    55c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    55c4:	18 16       	cp	r1, r24
    55c6:	4c f5       	brge	.+82     	; 0x561a <Check_For_PassWord+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55c8:	69 8d       	ldd	r22, Y+25	; 0x19
    55ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55d0:	20 e0       	ldi	r18, 0x00	; 0
    55d2:	30 e0       	ldi	r19, 0x00	; 0
    55d4:	40 e2       	ldi	r20, 0x20	; 32
    55d6:	51 e4       	ldi	r21, 0x41	; 65
    55d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55dc:	dc 01       	movw	r26, r24
    55de:	cb 01       	movw	r24, r22
    55e0:	bc 01       	movw	r22, r24
    55e2:	cd 01       	movw	r24, r26
    55e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55e8:	dc 01       	movw	r26, r24
    55ea:	cb 01       	movw	r24, r22
    55ec:	9c 8b       	std	Y+20, r25	; 0x14
    55ee:	8b 8b       	std	Y+19, r24	; 0x13
    55f0:	0f c0       	rjmp	.+30     	; 0x5610 <Check_For_PassWord+0x244>
    55f2:	88 ec       	ldi	r24, 0xC8	; 200
    55f4:	90 e0       	ldi	r25, 0x00	; 0
    55f6:	9a 8b       	std	Y+18, r25	; 0x12
    55f8:	89 8b       	std	Y+17, r24	; 0x11
    55fa:	89 89       	ldd	r24, Y+17	; 0x11
    55fc:	9a 89       	ldd	r25, Y+18	; 0x12
    55fe:	01 97       	sbiw	r24, 0x01	; 1
    5600:	f1 f7       	brne	.-4      	; 0x55fe <Check_For_PassWord+0x232>
    5602:	9a 8b       	std	Y+18, r25	; 0x12
    5604:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5606:	8b 89       	ldd	r24, Y+19	; 0x13
    5608:	9c 89       	ldd	r25, Y+20	; 0x14
    560a:	01 97       	sbiw	r24, 0x01	; 1
    560c:	9c 8b       	std	Y+20, r25	; 0x14
    560e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5610:	8b 89       	ldd	r24, Y+19	; 0x13
    5612:	9c 89       	ldd	r25, Y+20	; 0x14
    5614:	00 97       	sbiw	r24, 0x00	; 0
    5616:	69 f7       	brne	.-38     	; 0x55f2 <Check_For_PassWord+0x226>
    5618:	14 c0       	rjmp	.+40     	; 0x5642 <Check_For_PassWord+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    561a:	6d 89       	ldd	r22, Y+21	; 0x15
    561c:	7e 89       	ldd	r23, Y+22	; 0x16
    561e:	8f 89       	ldd	r24, Y+23	; 0x17
    5620:	98 8d       	ldd	r25, Y+24	; 0x18
    5622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5626:	dc 01       	movw	r26, r24
    5628:	cb 01       	movw	r24, r22
    562a:	9c 8b       	std	Y+20, r25	; 0x14
    562c:	8b 8b       	std	Y+19, r24	; 0x13
    562e:	8b 89       	ldd	r24, Y+19	; 0x13
    5630:	9c 89       	ldd	r25, Y+20	; 0x14
    5632:	98 8b       	std	Y+16, r25	; 0x10
    5634:	8f 87       	std	Y+15, r24	; 0x0f
    5636:	8f 85       	ldd	r24, Y+15	; 0x0f
    5638:	98 89       	ldd	r25, Y+16	; 0x10
    563a:	01 97       	sbiw	r24, 0x01	; 1
    563c:	f1 f7       	brne	.-4      	; 0x563a <Check_For_PassWord+0x26e>
    563e:	98 8b       	std	Y+16, r25	; 0x10
    5640:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
					LCD_Clear();
    5642:	0e 94 1b 1b 	call	0x3636	; 0x3636 <LCD_Clear>
					return 1;
    5646:	a1 e0       	ldi	r26, 0x01	; 1
    5648:	2e 96       	adiw	r28, 0x0e	; 14
    564a:	af af       	std	Y+63, r26	; 0x3f
    564c:	2e 97       	sbiw	r28, 0x0e	; 14
    564e:	9e c0       	rjmp	.+316    	; 0x578c <Check_For_PassWord+0x3c0>
				
				}else if(n < 5){ // enter an invalid password
    5650:	8e a9       	ldd	r24, Y+54	; 0x36
    5652:	85 30       	cpi	r24, 0x05	; 5
    5654:	80 f4       	brcc	.+32     	; 0x5676 <Check_For_PassWord+0x2aa>
					LCD_Clear();
    5656:	0e 94 1b 1b 	call	0x3636	; 0x3636 <LCD_Clear>
					u8 *chr= "Wrong Password";
    565a:	8e e9       	ldi	r24, 0x9E	; 158
    565c:	90 e0       	ldi	r25, 0x00	; 0
    565e:	98 ab       	std	Y+48, r25	; 0x30
    5660:	8f a7       	std	Y+47, r24	; 0x2f
					LCD_DisplayString(chr);
    5662:	8f a5       	ldd	r24, Y+47	; 0x2f
    5664:	98 a9       	ldd	r25, Y+48	; 0x30
    5666:	0e 94 32 1b 	call	0x3664	; 0x3664 <LCD_DisplayString>
					n++;
    566a:	8e a9       	ldd	r24, Y+54	; 0x36
    566c:	8f 5f       	subi	r24, 0xFF	; 255
    566e:	8e ab       	std	Y+54, r24	; 0x36
					LCD_Clear();
    5670:	0e 94 1b 1b 	call	0x3636	; 0x3636 <LCD_Clear>
    5674:	c2 ce       	rjmp	.-636    	; 0x53fa <Check_For_PassWord+0x2e>
				} else {
					LCD_Clear();
    5676:	0e 94 1b 1b 	call	0x3636	; 0x3636 <LCD_Clear>
					u8 *chr= "you entered Wrong Password 5 times";
    567a:	8d ea       	ldi	r24, 0xAD	; 173
    567c:	90 e0       	ldi	r25, 0x00	; 0
    567e:	9e a7       	std	Y+46, r25	; 0x2e
    5680:	8d a7       	std	Y+45, r24	; 0x2d
					LCD_DisplayString(chr);
    5682:	8d a5       	ldd	r24, Y+45	; 0x2d
    5684:	9e a5       	ldd	r25, Y+46	; 0x2e
    5686:	0e 94 32 1b 	call	0x3664	; 0x3664 <LCD_DisplayString>
    568a:	80 e0       	ldi	r24, 0x00	; 0
    568c:	90 e0       	ldi	r25, 0x00	; 0
    568e:	aa ef       	ldi	r26, 0xFA	; 250
    5690:	b3 e4       	ldi	r27, 0x43	; 67
    5692:	8b 87       	std	Y+11, r24	; 0x0b
    5694:	9c 87       	std	Y+12, r25	; 0x0c
    5696:	ad 87       	std	Y+13, r26	; 0x0d
    5698:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    569a:	6b 85       	ldd	r22, Y+11	; 0x0b
    569c:	7c 85       	ldd	r23, Y+12	; 0x0c
    569e:	8d 85       	ldd	r24, Y+13	; 0x0d
    56a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    56a2:	20 e0       	ldi	r18, 0x00	; 0
    56a4:	30 e0       	ldi	r19, 0x00	; 0
    56a6:	4a ef       	ldi	r20, 0xFA	; 250
    56a8:	54 e4       	ldi	r21, 0x44	; 68
    56aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56ae:	dc 01       	movw	r26, r24
    56b0:	cb 01       	movw	r24, r22
    56b2:	8f 83       	std	Y+7, r24	; 0x07
    56b4:	98 87       	std	Y+8, r25	; 0x08
    56b6:	a9 87       	std	Y+9, r26	; 0x09
    56b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    56ba:	6f 81       	ldd	r22, Y+7	; 0x07
    56bc:	78 85       	ldd	r23, Y+8	; 0x08
    56be:	89 85       	ldd	r24, Y+9	; 0x09
    56c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    56c2:	20 e0       	ldi	r18, 0x00	; 0
    56c4:	30 e0       	ldi	r19, 0x00	; 0
    56c6:	40 e8       	ldi	r20, 0x80	; 128
    56c8:	5f e3       	ldi	r21, 0x3F	; 63
    56ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    56ce:	88 23       	and	r24, r24
    56d0:	2c f4       	brge	.+10     	; 0x56dc <Check_For_PassWord+0x310>
		__ticks = 1;
    56d2:	81 e0       	ldi	r24, 0x01	; 1
    56d4:	90 e0       	ldi	r25, 0x00	; 0
    56d6:	9e 83       	std	Y+6, r25	; 0x06
    56d8:	8d 83       	std	Y+5, r24	; 0x05
    56da:	3f c0       	rjmp	.+126    	; 0x575a <Check_For_PassWord+0x38e>
	else if (__tmp > 65535)
    56dc:	6f 81       	ldd	r22, Y+7	; 0x07
    56de:	78 85       	ldd	r23, Y+8	; 0x08
    56e0:	89 85       	ldd	r24, Y+9	; 0x09
    56e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    56e4:	20 e0       	ldi	r18, 0x00	; 0
    56e6:	3f ef       	ldi	r19, 0xFF	; 255
    56e8:	4f e7       	ldi	r20, 0x7F	; 127
    56ea:	57 e4       	ldi	r21, 0x47	; 71
    56ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    56f0:	18 16       	cp	r1, r24
    56f2:	4c f5       	brge	.+82     	; 0x5746 <Check_For_PassWord+0x37a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    56f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    56f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    56fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    56fc:	20 e0       	ldi	r18, 0x00	; 0
    56fe:	30 e0       	ldi	r19, 0x00	; 0
    5700:	40 e2       	ldi	r20, 0x20	; 32
    5702:	51 e4       	ldi	r21, 0x41	; 65
    5704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5708:	dc 01       	movw	r26, r24
    570a:	cb 01       	movw	r24, r22
    570c:	bc 01       	movw	r22, r24
    570e:	cd 01       	movw	r24, r26
    5710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5714:	dc 01       	movw	r26, r24
    5716:	cb 01       	movw	r24, r22
    5718:	9e 83       	std	Y+6, r25	; 0x06
    571a:	8d 83       	std	Y+5, r24	; 0x05
    571c:	0f c0       	rjmp	.+30     	; 0x573c <Check_For_PassWord+0x370>
    571e:	88 ec       	ldi	r24, 0xC8	; 200
    5720:	90 e0       	ldi	r25, 0x00	; 0
    5722:	9c 83       	std	Y+4, r25	; 0x04
    5724:	8b 83       	std	Y+3, r24	; 0x03
    5726:	8b 81       	ldd	r24, Y+3	; 0x03
    5728:	9c 81       	ldd	r25, Y+4	; 0x04
    572a:	01 97       	sbiw	r24, 0x01	; 1
    572c:	f1 f7       	brne	.-4      	; 0x572a <Check_For_PassWord+0x35e>
    572e:	9c 83       	std	Y+4, r25	; 0x04
    5730:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5732:	8d 81       	ldd	r24, Y+5	; 0x05
    5734:	9e 81       	ldd	r25, Y+6	; 0x06
    5736:	01 97       	sbiw	r24, 0x01	; 1
    5738:	9e 83       	std	Y+6, r25	; 0x06
    573a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    573c:	8d 81       	ldd	r24, Y+5	; 0x05
    573e:	9e 81       	ldd	r25, Y+6	; 0x06
    5740:	00 97       	sbiw	r24, 0x00	; 0
    5742:	69 f7       	brne	.-38     	; 0x571e <Check_For_PassWord+0x352>
    5744:	14 c0       	rjmp	.+40     	; 0x576e <Check_For_PassWord+0x3a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5746:	6f 81       	ldd	r22, Y+7	; 0x07
    5748:	78 85       	ldd	r23, Y+8	; 0x08
    574a:	89 85       	ldd	r24, Y+9	; 0x09
    574c:	9a 85       	ldd	r25, Y+10	; 0x0a
    574e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5752:	dc 01       	movw	r26, r24
    5754:	cb 01       	movw	r24, r22
    5756:	9e 83       	std	Y+6, r25	; 0x06
    5758:	8d 83       	std	Y+5, r24	; 0x05
    575a:	8d 81       	ldd	r24, Y+5	; 0x05
    575c:	9e 81       	ldd	r25, Y+6	; 0x06
    575e:	9a 83       	std	Y+2, r25	; 0x02
    5760:	89 83       	std	Y+1, r24	; 0x01
    5762:	89 81       	ldd	r24, Y+1	; 0x01
    5764:	9a 81       	ldd	r25, Y+2	; 0x02
    5766:	01 97       	sbiw	r24, 0x01	; 1
    5768:	f1 f7       	brne	.-4      	; 0x5766 <Check_For_PassWord+0x39a>
    576a:	9a 83       	std	Y+2, r25	; 0x02
    576c:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(500);
					LCD_Clear();
    576e:	0e 94 1b 1b 	call	0x3636	; 0x3636 <LCD_Clear>
					u8 *chr2= "please wait 20 seconds then tryagain";
    5772:	80 ed       	ldi	r24, 0xD0	; 208
    5774:	90 e0       	ldi	r25, 0x00	; 0
    5776:	9c a7       	std	Y+44, r25	; 0x2c
    5778:	8b a7       	std	Y+43, r24	; 0x2b
					LCD_DisplayString(chr2);
    577a:	8b a5       	ldd	r24, Y+43	; 0x2b
    577c:	9c a5       	ldd	r25, Y+44	; 0x2c
    577e:	0e 94 32 1b 	call	0x3664	; 0x3664 <LCD_DisplayString>
					LCD_Clear();
    5782:	0e 94 1b 1b 	call	0x3636	; 0x3636 <LCD_Clear>
					return 0;
    5786:	2e 96       	adiw	r28, 0x0e	; 14
    5788:	1f ae       	std	Y+63, r1	; 0x3f
    578a:	2e 97       	sbiw	r28, 0x0e	; 14
				}
			}
		}
	}
    578c:	2e 96       	adiw	r28, 0x0e	; 14
    578e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5790:	2e 97       	sbiw	r28, 0x0e	; 14
}
    5792:	c3 5b       	subi	r28, 0xB3	; 179
    5794:	df 4f       	sbci	r29, 0xFF	; 255
    5796:	0f b6       	in	r0, 0x3f	; 63
    5798:	f8 94       	cli
    579a:	de bf       	out	0x3e, r29	; 62
    579c:	0f be       	out	0x3f, r0	; 63
    579e:	cd bf       	out	0x3d, r28	; 61
    57a0:	cf 91       	pop	r28
    57a2:	df 91       	pop	r29
    57a4:	08 95       	ret

000057a6 <Check_IS_Anumber>:

u8 Check_IS_Anumber(Keypad_ButtonType pressed_button)
{
    57a6:	df 93       	push	r29
    57a8:	cf 93       	push	r28
    57aa:	00 d0       	rcall	.+0      	; 0x57ac <Check_IS_Anumber+0x6>
    57ac:	cd b7       	in	r28, 0x3d	; 61
    57ae:	de b7       	in	r29, 0x3e	; 62
    57b0:	89 83       	std	Y+1, r24	; 0x01
	if (pressed_button != CALCULATOR_BUTTON_CLR && pressed_button != CALCULATOR_BUTTON_PLUS && pressed_button != CALCULATOR_BUTTON_MINUS && pressed_button != CALCULATOR_BUTTON_MUL && pressed_button != CALCULATOR_BUTTON_DIV && pressed_button != CALCULATOR_BUTTON_EQUAL)
    57b2:	89 81       	ldd	r24, Y+1	; 0x01
    57b4:	88 23       	and	r24, r24
    57b6:	91 f0       	breq	.+36     	; 0x57dc <Check_IS_Anumber+0x36>
    57b8:	89 81       	ldd	r24, Y+1	; 0x01
    57ba:	83 30       	cpi	r24, 0x03	; 3
    57bc:	79 f0       	breq	.+30     	; 0x57dc <Check_IS_Anumber+0x36>
    57be:	89 81       	ldd	r24, Y+1	; 0x01
    57c0:	87 30       	cpi	r24, 0x07	; 7
    57c2:	61 f0       	breq	.+24     	; 0x57dc <Check_IS_Anumber+0x36>
    57c4:	89 81       	ldd	r24, Y+1	; 0x01
    57c6:	8b 30       	cpi	r24, 0x0B	; 11
    57c8:	49 f0       	breq	.+18     	; 0x57dc <Check_IS_Anumber+0x36>
    57ca:	89 81       	ldd	r24, Y+1	; 0x01
    57cc:	8f 30       	cpi	r24, 0x0F	; 15
    57ce:	31 f0       	breq	.+12     	; 0x57dc <Check_IS_Anumber+0x36>
    57d0:	89 81       	ldd	r24, Y+1	; 0x01
    57d2:	82 30       	cpi	r24, 0x02	; 2
    57d4:	19 f0       	breq	.+6      	; 0x57dc <Check_IS_Anumber+0x36>
		return 1;
    57d6:	81 e0       	ldi	r24, 0x01	; 1
    57d8:	8a 83       	std	Y+2, r24	; 0x02
    57da:	01 c0       	rjmp	.+2      	; 0x57de <Check_IS_Anumber+0x38>
	return 0;
    57dc:	1a 82       	std	Y+2, r1	; 0x02
    57de:	8a 81       	ldd	r24, Y+2	; 0x02
}
    57e0:	0f 90       	pop	r0
    57e2:	0f 90       	pop	r0
    57e4:	cf 91       	pop	r28
    57e6:	df 91       	pop	r29
    57e8:	08 95       	ret

000057ea <__udivmodqi4>:
    57ea:	99 1b       	sub	r25, r25
    57ec:	79 e0       	ldi	r23, 0x09	; 9
    57ee:	04 c0       	rjmp	.+8      	; 0x57f8 <__udivmodqi4_ep>

000057f0 <__udivmodqi4_loop>:
    57f0:	99 1f       	adc	r25, r25
    57f2:	96 17       	cp	r25, r22
    57f4:	08 f0       	brcs	.+2      	; 0x57f8 <__udivmodqi4_ep>
    57f6:	96 1b       	sub	r25, r22

000057f8 <__udivmodqi4_ep>:
    57f8:	88 1f       	adc	r24, r24
    57fa:	7a 95       	dec	r23
    57fc:	c9 f7       	brne	.-14     	; 0x57f0 <__udivmodqi4_loop>
    57fe:	80 95       	com	r24
    5800:	08 95       	ret

00005802 <__udivmodhi4>:
    5802:	aa 1b       	sub	r26, r26
    5804:	bb 1b       	sub	r27, r27
    5806:	51 e1       	ldi	r21, 0x11	; 17
    5808:	07 c0       	rjmp	.+14     	; 0x5818 <__udivmodhi4_ep>

0000580a <__udivmodhi4_loop>:
    580a:	aa 1f       	adc	r26, r26
    580c:	bb 1f       	adc	r27, r27
    580e:	a6 17       	cp	r26, r22
    5810:	b7 07       	cpc	r27, r23
    5812:	10 f0       	brcs	.+4      	; 0x5818 <__udivmodhi4_ep>
    5814:	a6 1b       	sub	r26, r22
    5816:	b7 0b       	sbc	r27, r23

00005818 <__udivmodhi4_ep>:
    5818:	88 1f       	adc	r24, r24
    581a:	99 1f       	adc	r25, r25
    581c:	5a 95       	dec	r21
    581e:	a9 f7       	brne	.-22     	; 0x580a <__udivmodhi4_loop>
    5820:	80 95       	com	r24
    5822:	90 95       	com	r25
    5824:	bc 01       	movw	r22, r24
    5826:	cd 01       	movw	r24, r26
    5828:	08 95       	ret

0000582a <__divmodhi4>:
    582a:	97 fb       	bst	r25, 7
    582c:	09 2e       	mov	r0, r25
    582e:	07 26       	eor	r0, r23
    5830:	0a d0       	rcall	.+20     	; 0x5846 <__divmodhi4_neg1>
    5832:	77 fd       	sbrc	r23, 7
    5834:	04 d0       	rcall	.+8      	; 0x583e <__divmodhi4_neg2>
    5836:	e5 df       	rcall	.-54     	; 0x5802 <__udivmodhi4>
    5838:	06 d0       	rcall	.+12     	; 0x5846 <__divmodhi4_neg1>
    583a:	00 20       	and	r0, r0
    583c:	1a f4       	brpl	.+6      	; 0x5844 <__divmodhi4_exit>

0000583e <__divmodhi4_neg2>:
    583e:	70 95       	com	r23
    5840:	61 95       	neg	r22
    5842:	7f 4f       	sbci	r23, 0xFF	; 255

00005844 <__divmodhi4_exit>:
    5844:	08 95       	ret

00005846 <__divmodhi4_neg1>:
    5846:	f6 f7       	brtc	.-4      	; 0x5844 <__divmodhi4_exit>
    5848:	90 95       	com	r25
    584a:	81 95       	neg	r24
    584c:	9f 4f       	sbci	r25, 0xFF	; 255
    584e:	08 95       	ret

00005850 <__prologue_saves__>:
    5850:	2f 92       	push	r2
    5852:	3f 92       	push	r3
    5854:	4f 92       	push	r4
    5856:	5f 92       	push	r5
    5858:	6f 92       	push	r6
    585a:	7f 92       	push	r7
    585c:	8f 92       	push	r8
    585e:	9f 92       	push	r9
    5860:	af 92       	push	r10
    5862:	bf 92       	push	r11
    5864:	cf 92       	push	r12
    5866:	df 92       	push	r13
    5868:	ef 92       	push	r14
    586a:	ff 92       	push	r15
    586c:	0f 93       	push	r16
    586e:	1f 93       	push	r17
    5870:	cf 93       	push	r28
    5872:	df 93       	push	r29
    5874:	cd b7       	in	r28, 0x3d	; 61
    5876:	de b7       	in	r29, 0x3e	; 62
    5878:	ca 1b       	sub	r28, r26
    587a:	db 0b       	sbc	r29, r27
    587c:	0f b6       	in	r0, 0x3f	; 63
    587e:	f8 94       	cli
    5880:	de bf       	out	0x3e, r29	; 62
    5882:	0f be       	out	0x3f, r0	; 63
    5884:	cd bf       	out	0x3d, r28	; 61
    5886:	09 94       	ijmp

00005888 <__epilogue_restores__>:
    5888:	2a 88       	ldd	r2, Y+18	; 0x12
    588a:	39 88       	ldd	r3, Y+17	; 0x11
    588c:	48 88       	ldd	r4, Y+16	; 0x10
    588e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5890:	6e 84       	ldd	r6, Y+14	; 0x0e
    5892:	7d 84       	ldd	r7, Y+13	; 0x0d
    5894:	8c 84       	ldd	r8, Y+12	; 0x0c
    5896:	9b 84       	ldd	r9, Y+11	; 0x0b
    5898:	aa 84       	ldd	r10, Y+10	; 0x0a
    589a:	b9 84       	ldd	r11, Y+9	; 0x09
    589c:	c8 84       	ldd	r12, Y+8	; 0x08
    589e:	df 80       	ldd	r13, Y+7	; 0x07
    58a0:	ee 80       	ldd	r14, Y+6	; 0x06
    58a2:	fd 80       	ldd	r15, Y+5	; 0x05
    58a4:	0c 81       	ldd	r16, Y+4	; 0x04
    58a6:	1b 81       	ldd	r17, Y+3	; 0x03
    58a8:	aa 81       	ldd	r26, Y+2	; 0x02
    58aa:	b9 81       	ldd	r27, Y+1	; 0x01
    58ac:	ce 0f       	add	r28, r30
    58ae:	d1 1d       	adc	r29, r1
    58b0:	0f b6       	in	r0, 0x3f	; 63
    58b2:	f8 94       	cli
    58b4:	de bf       	out	0x3e, r29	; 62
    58b6:	0f be       	out	0x3f, r0	; 63
    58b8:	cd bf       	out	0x3d, r28	; 61
    58ba:	ed 01       	movw	r28, r26
    58bc:	08 95       	ret

000058be <_exit>:
    58be:	f8 94       	cli

000058c0 <__stop_program>:
    58c0:	ff cf       	rjmp	.-2      	; 0x58c0 <__stop_program>
